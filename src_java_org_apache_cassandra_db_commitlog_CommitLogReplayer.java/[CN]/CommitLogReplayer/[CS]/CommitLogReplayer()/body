{
  this.keyspacesRecovered=new NonBlockingHashSet<Keyspace>();
  this.futures=new ArrayList<Future<?>>();
  this.buffer=new byte[4096];
  this.invalidMutations=new HashMap<UUID,AtomicInteger>();
  this.replayedCount=new AtomicInteger();
  this.checksum=new PureJavaCrc32();
  replayFilter=ReplayFilter.create();
  cfPositions=new HashMap<UUID,ReplayPosition>();
  Ordering<ReplayPosition> replayPositionOrdering=Ordering.from(ReplayPosition.comparator);
  for (  ColumnFamilyStore cfs : ColumnFamilyStore.all()) {
    ReplayPosition rp=ReplayPosition.getReplayPosition(cfs.getSSTables());
    ReplayPosition truncatedAt=SystemKeyspace.getTruncatedPosition(cfs.metadata.cfId);
    if (truncatedAt != null) {
      long restoreTime=CommitLog.instance.archiver.restorePointInTime;
      long truncatedTime=SystemKeyspace.getTruncatedAt(cfs.metadata.cfId);
      if (truncatedTime > restoreTime) {
        if (replayFilter.includes(cfs.metadata)) {
          logger.info("Restore point in time is before latest truncation of table {}.{}. Clearing truncation record.",cfs.metadata.ksName,cfs.metadata.cfName);
          SystemKeyspace.removeTruncationRecord(cfs.metadata.cfId);
        }
      }
 else {
        rp=replayPositionOrdering.max(Arrays.asList(rp,truncatedAt));
      }
    }
    cfPositions.put(cfs.metadata.cfId,rp);
  }
  globalPosition=replayPositionOrdering.min(cfPositions.values());
  logger.debug("Global replay position is {} from columnfamilies {}",globalPosition,FBUtilities.toString(cfPositions));
}
