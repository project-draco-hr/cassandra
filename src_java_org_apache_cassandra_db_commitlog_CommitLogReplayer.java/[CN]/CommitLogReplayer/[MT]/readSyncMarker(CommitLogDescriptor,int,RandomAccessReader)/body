{
  if (offset > reader.length() - CommitLogSegment.SYNC_MARKER_SIZE) {
    if (offset != reader.length() && offset != Integer.MAX_VALUE) {
      String message=String.format("Encountered bad header at position %d of Commit log %s; not enough room for a header",offset,reader.getPath());
      if (!IGNORE_ERRORS)       throw new MalformedCommitLogException(message);
      logger.warn(message);
    }
    return -1;
  }
  reader.seek(offset);
  PureJavaCrc32 crc=new PureJavaCrc32();
  crc.updateInt((int)(descriptor.id & 0xFFFFFFFFL));
  crc.updateInt((int)(descriptor.id >>> 32));
  crc.updateInt((int)reader.getPosition());
  int end=reader.readInt();
  long filecrc;
  if (descriptor.version < CommitLogDescriptor.VERSION_21)   filecrc=reader.readLong();
 else   filecrc=reader.readInt() & 0xffffffffL;
  if (crc.getValue() != filecrc) {
    if (end != 0 || filecrc != 0) {
      String message=String.format("Encountered bad header at position %d of Commit log %s, with invalid CRC. The end of segment marker should be zero.",offset,reader.getPath());
      if (!IGNORE_ERRORS)       throw new MalformedCommitLogException(message);
      logger.warn(message);
    }
    return -1;
  }
 else   if (end < offset || end > reader.length()) {
    String message=String.format("Encountered bad header at position %d of Commit log %s, with bad position but valid CRC.",offset,reader.getPath());
    if (!IGNORE_ERRORS)     throw new MalformedCommitLogException(message);
    logger.warn(message);
    return -1;
  }
  return end;
}
