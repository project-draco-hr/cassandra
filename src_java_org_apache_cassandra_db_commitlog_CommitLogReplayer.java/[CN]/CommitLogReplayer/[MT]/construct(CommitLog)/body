{
  Map<UUID,IntervalSet<CommitLogPosition>> cfPersisted=new HashMap<>();
  ReplayFilter replayFilter=ReplayFilter.create();
  for (  ColumnFamilyStore cfs : ColumnFamilyStore.all()) {
    CommitLogPosition truncatedAt=SystemKeyspace.getTruncatedPosition(cfs.metadata.cfId);
    if (truncatedAt != null) {
      long restoreTime=commitLog.archiver.restorePointInTime;
      long truncatedTime=SystemKeyspace.getTruncatedAt(cfs.metadata.cfId);
      if (truncatedTime > restoreTime) {
        if (replayFilter.includes(cfs.metadata)) {
          logger.info("Restore point in time is before latest truncation of table {}.{}. Clearing truncation record.",cfs.metadata.ksName,cfs.metadata.cfName);
          SystemKeyspace.removeTruncationRecord(cfs.metadata.cfId);
          truncatedAt=null;
        }
      }
    }
    IntervalSet<CommitLogPosition> filter=persistedIntervals(cfs.getLiveSSTables(),truncatedAt);
    cfPersisted.put(cfs.metadata.cfId,filter);
  }
  CommitLogPosition globalPosition=firstNotCovered(cfPersisted.values());
  logger.debug("Global replay position is {} from columnfamilies {}",globalPosition,FBUtilities.toString(cfPersisted));
  return new CommitLogReplayer(commitLog,globalPosition,cfPersisted,replayFilter);
}
