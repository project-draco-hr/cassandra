def test_parse_create_keyspace(self):
    parsed = parse_cqlsh_statements("CREATE KEYSPACE ks WITH REPLICATION = {'class': 'SimpleStrategy', 'replication_factor': 1};")
    self.assertSequenceEqual(tokens_with_types(parsed), [('CREATE', 'K_CREATE'), ('KEYSPACE', 'K_KEYSPACE'), ('ks', 'identifier'), ('WITH', 'K_WITH'), ('REPLICATION', 'identifier'), ('=', 'op'), ('{', 'brackets'), ("'class'", 'quotedStringLiteral'), (':', 'colon'), ("'SimpleStrategy'", 'quotedStringLiteral'), (',', 'op'), ("'replication_factor'", 'quotedStringLiteral'), (':', 'colon'), ('1', 'wholenumber'), ('}', 'brackets'), (';', 'endtoken')])
    parsed = parse_cqlsh_statements('CREATE KEYSPACE "Cql_test_KS" WITH REPLICATION = {\'class\': \'NetworkTopologyStrategy\', \'dc1\' : 3, \'dc2\': 2};')
    self.assertSequenceEqual(tokens_with_types(parsed), [('CREATE', 'K_CREATE'), ('KEYSPACE', 'K_KEYSPACE'), ('"Cql_test_KS"', 'quotedName'), ('WITH', 'K_WITH'), ('REPLICATION', 'identifier'), ('=', 'op'), ('{', 'brackets'), ("'class'", 'quotedStringLiteral'), (':', 'colon'), ("'NetworkTopologyStrategy'", 'quotedStringLiteral'), (',', 'op'), ("'dc1'", 'quotedStringLiteral'), (':', 'colon'), ('3', 'wholenumber'), (',', 'op'), ("'dc2'", 'quotedStringLiteral'), (':', 'colon'), ('2', 'wholenumber'), ('}', 'brackets'), (';', 'endtoken')])
    parsed = parse_cqlsh_statements("CREATE KEYSPACE ks WITH REPLICATION = {'class': 'NetworkTopologyStrategy', 'dc1': 3} AND DURABLE_WRITES = false;")
    self.assertSequenceEqual(tokens_with_types(parsed), [('CREATE', 'K_CREATE'), ('KEYSPACE', 'K_KEYSPACE'), ('ks', 'identifier'), ('WITH', 'K_WITH'), ('REPLICATION', 'identifier'), ('=', 'op'), ('{', 'brackets'), ("'class'", 'quotedStringLiteral'), (':', 'colon'), ("'NetworkTopologyStrategy'", 'quotedStringLiteral'), (',', 'op'), ("'dc1'", 'quotedStringLiteral'), (':', 'colon'), ('3', 'wholenumber'), ('}', 'brackets'), ('AND', 'K_AND'), ('DURABLE_WRITES', 'identifier'), ('=', 'op'), ('false', 'identifier'), (';', 'endtoken')])
