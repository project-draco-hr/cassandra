def test_parse_update(self):
    parsed = parse_cqlsh_statements("UPDATE tab SET x = 15 WHERE y = 'eggs';")
    self.assertSequenceEqual(tokens_with_types(parsed), [('UPDATE', 'identifier'), ('tab', 'identifier'), ('SET', 'identifier'), ('x', 'identifier'), ('=', 'op'), ('15', 'wholenumber'), ('WHERE', 'identifier'), ('y', 'identifier'), ('=', 'op'), ("'eggs'", 'quotedStringLiteral'), (';', 'endtoken')])
    parsed = parse_cqlsh_statements("UPDATE tab USING TTL 432000 SET x = 15 WHERE y = 'eggs';")
    self.assertSequenceEqual(tokens_with_types(parsed), [('UPDATE', 'identifier'), ('tab', 'identifier'), ('USING', 'identifier'), ('TTL', 'identifier'), ('432000', 'wholenumber'), ('SET', 'identifier'), ('x', 'identifier'), ('=', 'op'), ('15', 'wholenumber'), ('WHERE', 'identifier'), ('y', 'identifier'), ('=', 'op'), ("'eggs'", 'quotedStringLiteral'), (';', 'endtoken')])
    parsed = parse_cqlsh_statements("UPDATE tab SET x = 15, y = 'sausage' WHERE y = 'eggs';")
    self.assertSequenceEqual(tokens_with_types(parsed), [('UPDATE', 'identifier'), ('tab', 'identifier'), ('SET', 'identifier'), ('x', 'identifier'), ('=', 'op'), ('15', 'wholenumber'), (',', 'op'), ('y', 'identifier'), ('=', 'op'), ("'sausage'", 'quotedStringLiteral'), ('WHERE', 'identifier'), ('y', 'identifier'), ('=', 'op'), ("'eggs'", 'quotedStringLiteral'), (';', 'endtoken')])
    parsed = parse_cqlsh_statements("UPDATE tab SET x = 15 WHERE y IN ('eggs', 'sausage', 'spam');")
    self.assertSequenceEqual(tokens_with_types(parsed), [('UPDATE', 'identifier'), ('tab', 'identifier'), ('SET', 'identifier'), ('x', 'identifier'), ('=', 'op'), ('15', 'wholenumber'), ('WHERE', 'identifier'), ('y', 'identifier'), ('IN', 'identifier'), ('(', 'op'), ("'eggs'", 'quotedStringLiteral'), (',', 'op'), ("'sausage'", 'quotedStringLiteral'), (',', 'op'), ("'spam'", 'quotedStringLiteral'), (')', 'op'), (';', 'endtoken')])
    parsed = parse_cqlsh_statements("UPDATE tab SET x = 15 WHERE y = 'spam' if z = 'sausage';")
    self.assertSequenceEqual(tokens_with_types(parsed), [('UPDATE', 'identifier'), ('tab', 'identifier'), ('SET', 'identifier'), ('x', 'identifier'), ('=', 'op'), ('15', 'wholenumber'), ('WHERE', 'identifier'), ('y', 'identifier'), ('=', 'op'), ("'spam'", 'quotedStringLiteral'), ('if', 'identifier'), ('z', 'identifier'), ('=', 'op'), ("'sausage'", 'quotedStringLiteral'), (';', 'endtoken')])
    parsed = parse_cqlsh_statements("UPDATE tab SET x = 15 WHERE y = 'spam' if z = 'sausage' AND w = 'spam';")
    self.assertSequenceEqual(tokens_with_types(parsed), [('UPDATE', 'identifier'), ('tab', 'identifier'), ('SET', 'identifier'), ('x', 'identifier'), ('=', 'op'), ('15', 'wholenumber'), ('WHERE', 'identifier'), ('y', 'identifier'), ('=', 'op'), ("'spam'", 'quotedStringLiteral'), ('if', 'identifier'), ('z', 'identifier'), ('=', 'op'), ("'sausage'", 'quotedStringLiteral'), ('AND', 'identifier'), ('w', 'identifier'), ('=', 'op'), ("'spam'", 'quotedStringLiteral'), (';', 'endtoken')])
    parsed = parse_cqlsh_statements("UPDATE tab SET x = 15 WHERE y = 'spam' IF EXISTS")
    self.assertSequenceEqual(tokens_with_types(parsed), [('UPDATE', 'identifier'), ('tab', 'identifier'), ('SET', 'identifier'), ('x', 'identifier'), ('=', 'op'), ('15', 'wholenumber'), ('WHERE', 'identifier'), ('y', 'identifier'), ('=', 'op'), ("'spam'", 'quotedStringLiteral'), ('IF', 'identifier'), ('EXISTS', 'identifier')])
