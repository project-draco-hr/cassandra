def test_parse_select(self):
    parsed = parse_cqlsh_statements('SELECT FROM ks.tab;')
    self.assertSequenceEqual(tokens_with_types(parsed), [('SELECT', 'identifier'), ('FROM', 'identifier'), ('ks', 'identifier'), ('.', 'op'), ('tab', 'identifier'), (';', 'endtoken')])
    parsed = parse_cqlsh_statements('SELECT FROM "MyTable";')
    self.assertSequenceEqual(tokens_with_types(parsed), [('SELECT', 'identifier'), ('FROM', 'identifier'), ('"MyTable"', 'quotedName'), (';', 'endtoken')])
    parsed = parse_cqlsh_statements('SELECT FROM tab WHERE foo = 3;')
    self.assertSequenceEqual(tokens_with_types(parsed), [('SELECT', 'identifier'), ('FROM', 'identifier'), ('tab', 'identifier'), ('WHERE', 'identifier'), ('foo', 'identifier'), ('=', 'op'), ('3', 'wholenumber'), (';', 'endtoken')])
    parsed = parse_cqlsh_statements('SELECT FROM tab ORDER BY event_id DESC LIMIT 1000')
    self.assertSequenceEqual(tokens_with_types(parsed), [('SELECT', 'identifier'), ('FROM', 'identifier'), ('tab', 'identifier'), ('ORDER', 'identifier'), ('BY', 'identifier'), ('event_id', 'identifier'), ('DESC', 'identifier'), ('LIMIT', 'identifier'), ('1000', 'wholenumber')])
    parsed = parse_cqlsh_statements('SELECT FROM tab WHERE clustering_column > 200 AND clustering_column < 400 ALLOW FILTERING')
    self.assertSequenceEqual(tokens_with_types(parsed), [('SELECT', 'identifier'), ('FROM', 'identifier'), ('tab', 'identifier'), ('WHERE', 'identifier'), ('clustering_column', 'identifier'), ('>', 'cmp'), ('200', 'wholenumber'), ('AND', 'identifier'), ('clustering_column', 'identifier'), ('<', 'cmp'), ('400', 'wholenumber'), ('ALLOW', 'identifier'), ('FILTERING', 'identifier')])
