def test_parse_delete(self):
    parsed = parse_cqlsh_statements('DELETE FROM songs WHERE songid = 444;')
    self.assertSequenceEqual(tokens_with_types(parsed), [('DELETE', 'reserved_identifier'), ('FROM', 'reserved_identifier'), ('songs', 'identifier'), ('WHERE', 'reserved_identifier'), ('songid', 'identifier'), ('=', 'op'), ('444', 'wholenumber'), (';', 'endtoken')])
    parsed = parse_cqlsh_statements("DELETE FROM songs WHERE name IN ('Yellow Submarine', 'Eleanor Rigby');")
    self.assertSequenceEqual(tokens_with_types(parsed), [('DELETE', 'reserved_identifier'), ('FROM', 'reserved_identifier'), ('songs', 'identifier'), ('WHERE', 'reserved_identifier'), ('name', 'identifier'), ('IN', 'reserved_identifier'), ('(', 'op'), ("'Yellow Submarine'", 'quotedStringLiteral'), (',', 'op'), ("'Eleanor Rigby'", 'quotedStringLiteral'), (')', 'op'), (';', 'endtoken')])
    parsed = parse_cqlsh_statements("DELETE task_map ['2014-12-25'] FROM tasks WHERE user_id = 'Santa';")
    self.assertSequenceEqual(tokens_with_types(parsed), [('DELETE', 'reserved_identifier'), ('task_map', 'identifier'), ('[', 'brackets'), ("'2014-12-25'", 'quotedStringLiteral'), (']', 'brackets'), ('FROM', 'reserved_identifier'), ('tasks', 'identifier'), ('WHERE', 'reserved_identifier'), ('user_id', 'identifier'), ('=', 'op'), ("'Santa'", 'quotedStringLiteral'), (';', 'endtoken')])
    parsed = parse_cqlsh_statements("DELETE my_list[0] FROM lists WHERE user_id = 'Jim';")
    self.assertSequenceEqual(tokens_with_types(parsed), [('DELETE', 'reserved_identifier'), ('my_list', 'identifier'), ('[', 'brackets'), ('0', 'wholenumber'), (']', 'brackets'), ('FROM', 'reserved_identifier'), ('lists', 'identifier'), ('WHERE', 'reserved_identifier'), ('user_id', 'identifier'), ('=', 'op'), ("'Jim'", 'quotedStringLiteral'), (';', 'endtoken')])
