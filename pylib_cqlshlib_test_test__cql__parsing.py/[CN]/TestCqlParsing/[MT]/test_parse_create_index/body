def test_parse_create_index(self):
    parsed = parse_cqlsh_statements('CREATE INDEX idx ON ks.tab (i);')
    self.assertSequenceEqual(tokens_with_types(parsed), (('CREATE', 'identifier'), ('INDEX', 'identifier'), ('idx', 'identifier'), ('ON', 'identifier'), ('ks', 'identifier'), ('.', 'op'), ('tab', 'identifier'), ('(', 'op'), ('i', 'identifier'), (')', 'op'), (';', 'endtoken')))
    parsed = parse_cqlsh_statements('CREATE INDEX idx ON ks.tab (i) IF NOT EXISTS;')
    self.assertSequenceEqual(tokens_with_types(parsed), (('CREATE', 'identifier'), ('INDEX', 'identifier'), ('idx', 'identifier'), ('ON', 'identifier'), ('ks', 'identifier'), ('.', 'op'), ('tab', 'identifier'), ('(', 'op'), ('i', 'identifier'), (')', 'op'), ('IF', 'identifier'), ('NOT', 'identifier'), ('EXISTS', 'identifier'), (';', 'endtoken')))
    parsed = parse_cqlsh_statements('CREATE INDEX idx ON tab (KEYS(i));')
    self.assertSequenceEqual(tokens_with_types(parsed), (('CREATE', 'identifier'), ('INDEX', 'identifier'), ('idx', 'identifier'), ('ON', 'identifier'), ('tab', 'identifier'), ('(', 'op'), ('KEYS', 'identifier'), ('(', 'op'), ('i', 'identifier'), (')', 'op'), (')', 'op'), (';', 'endtoken')))
    parsed = parse_cqlsh_statements('CREATE INDEX idx ON ks.tab FULL(i);')
    self.assertSequenceEqual(tokens_with_types(parsed), [('CREATE', 'identifier'), ('INDEX', 'identifier'), ('idx', 'identifier'), ('ON', 'identifier'), ('ks', 'identifier'), ('.', 'op'), ('tab', 'identifier'), ('FULL', 'identifier'), ('(', 'op'), ('i', 'identifier'), (')', 'op'), (';', 'endtoken')])
    parsed = parse_cqlsh_statements('CREATE CUSTOM INDEX idx ON ks.tab (i);')
    self.assertSequenceEqual(tokens_with_types(parsed), [('CREATE', 'identifier'), ('CUSTOM', 'identifier'), ('INDEX', 'identifier'), ('idx', 'identifier'), ('ON', 'identifier'), ('ks', 'identifier'), ('.', 'op'), ('tab', 'identifier'), ('(', 'op'), ('i', 'identifier'), (')', 'op'), (';', 'endtoken')])
    parsed = parse_cqlsh_statements("CREATE INDEX idx ON ks.tab (i) USING 'org.custom.index.MyIndexClass';")
    self.assertSequenceEqual(tokens_with_types(parsed), [('CREATE', 'identifier'), ('INDEX', 'identifier'), ('idx', 'identifier'), ('ON', 'identifier'), ('ks', 'identifier'), ('.', 'op'), ('tab', 'identifier'), ('(', 'op'), ('i', 'identifier'), (')', 'op'), ('USING', 'identifier'), ("'org.custom.index.MyIndexClass'", 'quotedStringLiteral'), (';', 'endtoken')])
    parsed = parse_cqlsh_statements("CREATE INDEX idx ON ks.tab (i) WITH OPTIONS = {'storage': '/mnt/ssd/indexes/'};")
    self.assertSequenceEqual(tokens_with_types(parsed), [('CREATE', 'identifier'), ('INDEX', 'identifier'), ('idx', 'identifier'), ('ON', 'identifier'), ('ks', 'identifier'), ('.', 'op'), ('tab', 'identifier'), ('(', 'op'), ('i', 'identifier'), (')', 'op'), ('WITH', 'identifier'), ('OPTIONS', 'identifier'), ('=', 'op'), ('{', 'brackets'), ("'storage'", 'quotedStringLiteral'), (':', 'colon'), ("'/mnt/ssd/indexes/'", 'quotedStringLiteral'), ('}', 'brackets'), (';', 'endtoken')])
