{
  ColumnFamilyStore cfs=Keyspace.open(KEYSPACE1).getColumnFamilyStore(COUNTER1);
  CacheService.instance.invalidateCounterCache();
  Clustering c1=CBuilder.create(cfs.metadata.comparator).add(ByteBufferUtil.bytes(1)).build();
  Clustering c2=CBuilder.create(cfs.metadata.comparator).add(ByteBufferUtil.bytes(2)).build();
  ColumnDefinition cd=cfs.metadata.getColumnDefinition(ByteBufferUtil.bytes("c"));
  assertEquals(0,CacheService.instance.counterCache.size());
  assertNull(cfs.getCachedCounter(bytes(1),c1,cd,null));
  assertNull(cfs.getCachedCounter(bytes(1),c2,cd,null));
  assertNull(cfs.getCachedCounter(bytes(2),c1,cd,null));
  assertNull(cfs.getCachedCounter(bytes(2),c2,cd,null));
  cfs.putCachedCounter(bytes(1),c1,cd,null,ClockAndCount.create(1L,1L));
  cfs.putCachedCounter(bytes(1),c2,cd,null,ClockAndCount.create(1L,2L));
  cfs.putCachedCounter(bytes(2),c1,cd,null,ClockAndCount.create(2L,1L));
  cfs.putCachedCounter(bytes(2),c2,cd,null,ClockAndCount.create(2L,2L));
  assertEquals(ClockAndCount.create(1L,1L),cfs.getCachedCounter(bytes(1),c1,cd,null));
  assertEquals(ClockAndCount.create(1L,2L),cfs.getCachedCounter(bytes(1),c2,cd,null));
  assertEquals(ClockAndCount.create(2L,1L),cfs.getCachedCounter(bytes(2),c1,cd,null));
  assertEquals(ClockAndCount.create(2L,2L),cfs.getCachedCounter(bytes(2),c2,cd,null));
}
