{
  ColumnFamilyStore cfs=Keyspace.open(KS).getColumnFamilyStore(CF);
  cfs.truncateBlocking();
  CacheService.instance.invalidateCounterCache();
  assertEquals(0,CacheService.instance.counterCache.size());
  assertNull(cfs.getCachedCounter(bytes(1),cellname(1)));
  assertNull(cfs.getCachedCounter(bytes(1),cellname(2)));
  assertNull(cfs.getCachedCounter(bytes(2),cellname(1)));
  assertNull(cfs.getCachedCounter(bytes(2),cellname(2)));
  assertNull(cfs.getCachedCounter(bytes(3),cellname(1)));
  assertNull(cfs.getCachedCounter(bytes(3),cellname(2)));
  cfs.putCachedCounter(bytes(1),cellname(1),ClockAndCount.create(1L,1L));
  cfs.putCachedCounter(bytes(1),cellname(2),ClockAndCount.create(1L,2L));
  cfs.putCachedCounter(bytes(2),cellname(1),ClockAndCount.create(2L,1L));
  cfs.putCachedCounter(bytes(2),cellname(2),ClockAndCount.create(2L,2L));
  cfs.putCachedCounter(bytes(3),cellname(1),ClockAndCount.create(3L,1L));
  cfs.putCachedCounter(bytes(3),cellname(2),ClockAndCount.create(3L,2L));
  assertEquals(6,CacheService.instance.counterCache.size());
  assertEquals(ClockAndCount.create(1L,1L),cfs.getCachedCounter(bytes(1),cellname(1)));
  assertEquals(ClockAndCount.create(1L,2L),cfs.getCachedCounter(bytes(1),cellname(2)));
  assertEquals(ClockAndCount.create(2L,1L),cfs.getCachedCounter(bytes(2),cellname(1)));
  assertEquals(ClockAndCount.create(2L,2L),cfs.getCachedCounter(bytes(2),cellname(2)));
  assertEquals(ClockAndCount.create(3L,1L),cfs.getCachedCounter(bytes(3),cellname(1)));
  assertEquals(ClockAndCount.create(3L,2L),cfs.getCachedCounter(bytes(3),cellname(2)));
  cfs.invalidateCounterCache(Collections.singleton(new Bounds<Token>(cfs.partitioner.decorateKey(bytes(1)).getToken(),cfs.partitioner.decorateKey(bytes(2)).getToken())));
  assertEquals(2,CacheService.instance.counterCache.size());
  assertNull(cfs.getCachedCounter(bytes(1),cellname(1)));
  assertNull(cfs.getCachedCounter(bytes(1),cellname(2)));
  assertNull(cfs.getCachedCounter(bytes(2),cellname(1)));
  assertNull(cfs.getCachedCounter(bytes(2),cellname(2)));
  assertEquals(ClockAndCount.create(3L,1L),cfs.getCachedCounter(bytes(3),cellname(1)));
  assertEquals(ClockAndCount.create(3L,2L),cfs.getCachedCounter(bytes(3),cellname(2)));
}
