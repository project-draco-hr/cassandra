{
  ColumnFamilyStore cfs=Keyspace.open(KEYSPACE1).getColumnFamilyStore(COUNTER1);
  cfs.truncateBlocking();
  CacheService.instance.invalidateCounterCache();
  new CounterMutation(new RowUpdateBuilder(cfs.metadata,0,bytes(1)).clustering(1).add("c",1L).build(),ConsistencyLevel.ONE).apply();
  new CounterMutation(new RowUpdateBuilder(cfs.metadata,0,bytes(1)).clustering(2).add("c",2L).build(),ConsistencyLevel.ONE).apply();
  new CounterMutation(new RowUpdateBuilder(cfs.metadata,0,bytes(2)).clustering(1).add("c",1L).build(),ConsistencyLevel.ONE).apply();
  new CounterMutation(new RowUpdateBuilder(cfs.metadata,0,bytes(2)).clustering(2).add("c",2L).build(),ConsistencyLevel.ONE).apply();
  CacheService.instance.counterCache.submitWrite(Integer.MAX_VALUE).get();
  CacheService.instance.invalidateCounterCache();
  assertEquals(0,CacheService.instance.counterCache.size());
  Keyspace ks=Schema.instance.removeKeyspaceInstance(KEYSPACE1);
  try {
    CacheService.instance.counterCache.loadSaved();
    assertEquals(0,CacheService.instance.counterCache.size());
  }
  finally {
    Schema.instance.storeKeyspaceInstance(ks);
  }
}
