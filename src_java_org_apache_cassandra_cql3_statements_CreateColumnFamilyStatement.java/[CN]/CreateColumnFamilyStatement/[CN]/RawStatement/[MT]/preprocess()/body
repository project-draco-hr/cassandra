{
  try {
    if (!columnFamily().matches("\\w+"))     throw new InvalidRequestException(String.format("\"%s\" is not a valid column family name (must be alphanumeric character only: [0-9A-Za-z]+)",columnFamily()));
    if (columnFamily().length() > 32)     throw new InvalidRequestException(String.format("Column family names shouldn't be more than 32 character long (got \"%s\")",columnFamily()));
    for (    Multiset.Entry<ColumnIdentifier> entry : definedNames.entrySet())     if (entry.getCount() > 1)     throw new InvalidRequestException(String.format("Multiple definition of identifier %s",entry.getElement()));
    properties.validate();
    CreateColumnFamilyStatement stmt=new CreateColumnFamilyStatement(cfName,properties);
    stmt.setBoundTerms(getBoundsTerms());
    stmt.columns.putAll(definitions);
    if (keyAliases.size() == 0)     throw new InvalidRequestException("You must specify a PRIMARY KEY");
 else     if (keyAliases.size() > 1)     throw new InvalidRequestException("You may only specify one PRIMARY KEY");
    stmt.keyAlias=keyAliases.get(0).key;
    stmt.keyValidator=getTypeAndRemove(stmt.columns,keyAliases.get(0));
    if (columnAliases != null && !columnAliases.isEmpty()) {
      if (useCompactStorage && columnAliases.size() == 1) {
        stmt.columnAliases.add(columnAliases.get(0).key);
        stmt.comparator=getTypeAndRemove(stmt.columns,columnAliases.get(0));
      }
 else {
        List<AbstractType<?>> types=new ArrayList<AbstractType<?>>();
        for (        ColumnIdentifier t : columnAliases) {
          stmt.columnAliases.add(t.key);
          types.add(getTypeAndRemove(stmt.columns,t));
        }
        if (!useCompactStorage)         types.add(CFDefinition.definitionType);
        stmt.comparator=CompositeType.getInstance(types);
      }
    }
 else {
      stmt.comparator=CFDefinition.definitionType;
    }
    if (useCompactStorage) {
      if (stmt.columns.isEmpty())       throw new InvalidRequestException("COMPACT STORAGE requires one definition not part of the PRIMARY KEY, none found");
      if (stmt.columns.size() > 1)       throw new InvalidRequestException(String.format("COMPACT STORAGE allows only one column not part of the PRIMARY KEY (got: %s)",StringUtils.join(stmt.columns.keySet(),", ")));
      Map.Entry<ColumnIdentifier,String> lastEntry=stmt.columns.entrySet().iterator().next();
      stmt.defaultValidator=CFPropDefs.parseType(lastEntry.getValue());
      stmt.valueAlias=lastEntry.getKey().key;
      stmt.columns.remove(lastEntry.getKey());
    }
 else {
      if (stmt.columns.isEmpty())       throw new InvalidRequestException("No definition found that is not part of the PRIMARY KEY");
      stmt.defaultValidator=CFDefinition.definitionType;
    }
    return stmt;
  }
 catch (  ConfigurationException e) {
    throw new InvalidRequestException(e.getMessage());
  }
}
