{
  try {
    if (!columnFamily().matches("\\w+"))     throw new InvalidRequestException(String.format("\"%s\" is not a valid column family name (must be alphanumeric character only: [0-9A-Za-z]+)",columnFamily()));
    if (columnFamily().length() > Schema.NAME_LENGTH)     throw new InvalidRequestException(String.format("Column family names shouldn't be more than %s characters long (got \"%s\")",Schema.NAME_LENGTH,columnFamily()));
    for (    Multiset.Entry<ColumnIdentifier> entry : definedNames.entrySet())     if (entry.getCount() > 1)     throw new InvalidRequestException(String.format("Multiple definition of identifier %s",entry.getElement()));
    properties.validate();
    CreateColumnFamilyStatement stmt=new CreateColumnFamilyStatement(cfName,properties);
    stmt.setBoundTerms(getBoundsTerms());
    for (    Map.Entry<ColumnIdentifier,String> entry : definitions.entrySet()) {
      AbstractType<?> type=CFPropDefs.parseType(entry.getValue());
      stmt.columns.put(entry.getKey(),type);
    }
    if (keyAliases.size() == 0)     throw new InvalidRequestException("You must specify a PRIMARY KEY");
 else     if (keyAliases.size() > 1)     throw new InvalidRequestException("You may only specify one PRIMARY KEY");
    stmt.keyAlias=keyAliases.get(0).key;
    stmt.keyValidator=getTypeAndRemove(stmt.columns,keyAliases.get(0));
    if (stmt.keyValidator instanceof CounterColumnType)     throw new InvalidRequestException(String.format("counter type is not supported for PRIMARY KEY part %s",stmt.keyAlias));
    if (!columnAliases.isEmpty()) {
      if (useCompactStorage && columnAliases.size() == 1) {
        stmt.columnAliases.add(columnAliases.get(0).key);
        stmt.comparator=getTypeAndRemove(stmt.columns,columnAliases.get(0));
        if (stmt.comparator instanceof CounterColumnType)         throw new InvalidRequestException(String.format("counter type is not supported for PRIMARY KEY part %s",stmt.columnAliases.get(0)));
      }
 else {
        List<AbstractType<?>> types=new ArrayList<AbstractType<?>>(columnAliases.size() + 1);
        for (        ColumnIdentifier t : columnAliases) {
          stmt.columnAliases.add(t.key);
          AbstractType<?> type=getTypeAndRemove(stmt.columns,t);
          if (type instanceof CounterColumnType)           throw new InvalidRequestException(String.format("counter type is not supported for PRIMARY KEY part %s",t.key));
          types.add(type);
        }
        if (!useCompactStorage)         types.add(CFDefinition.definitionType);
        if (types.isEmpty())         throw new IllegalStateException("Nonsensical empty parameter list for CompositeType");
        stmt.comparator=CompositeType.getInstance(types);
      }
    }
 else {
      if (useCompactStorage)       stmt.comparator=CFDefinition.definitionType;
 else       stmt.comparator=CompositeType.getInstance(Collections.<AbstractType<?>>singletonList(CFDefinition.definitionType));
    }
    if (stmt.columns.isEmpty())     throw new InvalidRequestException("No definition found that is not part of the PRIMARY KEY");
    if (useCompactStorage && stmt.columns.size() == 1) {
      Map.Entry<ColumnIdentifier,AbstractType> lastEntry=stmt.columns.entrySet().iterator().next();
      stmt.defaultValidator=lastEntry.getValue();
      stmt.valueAlias=lastEntry.getKey().key;
      stmt.columns.remove(lastEntry.getKey());
    }
 else {
      if (useCompactStorage && !columnAliases.isEmpty())       throw new InvalidRequestException(String.format("COMPACT STORAGE with composite PRIMARY KEY allows only one column not part of the PRIMARY KEY (got: %s)",StringUtils.join(stmt.columns.keySet(),", ")));
      stmt.defaultValidator=(stmt.columns.values().iterator().next() instanceof CounterColumnType) ? CounterColumnType.instance : CFDefinition.definitionType;
    }
    return new ParsedStatement.Prepared(stmt);
  }
 catch (  ConfigurationException e) {
    throw new InvalidRequestException(e.getMessage());
  }
}
