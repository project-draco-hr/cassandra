{
  SequentialWriter w=createTempFile("brafSeek");
  byte[] data=generateByteArray(RandomAccessReader.DEFAULT_BUFFER_SIZE + 20);
  w.write(data);
  w.finish();
  final ChannelProxy channel=new ChannelProxy(w.getPath());
  final RandomAccessReader file=RandomAccessReader.open(channel);
  file.seek(0);
  assertEquals(file.getFilePointer(),0);
  assertEquals(file.bytesRemaining(),file.length());
  file.seek(20);
  assertEquals(file.getFilePointer(),20);
  assertEquals(file.bytesRemaining(),file.length() - 20);
  expectException(new Callable<Object>(){
    public Object call(){
      file.seek(file.length() + 30);
      return null;
    }
  }
,IllegalArgumentException.class);
  expectException(new Callable<Object>(){
    public Object call() throws IOException {
      file.seek(-1);
      return null;
    }
  }
,IllegalArgumentException.class);
  file.close();
  channel.close();
}
