{
  byte[] data=new byte[1 << 20];
  new Random().nextBytes(data);
  ByteBuffer src=makeBB(data.length);
  src.put(data);
  src.flip();
  File temp=File.createTempFile("tempfile",".tmp");
  temp.deleteOnExit();
  final int outOffset=3;
  byte[] garbage=new byte[outOffset + compressor.initialCompressedBufferLength(data.length)];
  new Random().nextBytes(garbage);
  ByteBuffer dest=makeBB(outOffset + compressor.initialCompressedBufferLength(data.length));
  dest.put(garbage);
  dest.clear();
  dest.position(outOffset);
  compressor.compress(src,dest);
  int compressedLength=dest.position() - outOffset;
  FileChannel channel=FileChannel.open(temp.toPath(),StandardOpenOption.READ,StandardOpenOption.WRITE);
  dest.clear();
  channel.write(dest);
  MappedByteBuffer mappedData=Files.map(temp);
  ByteBuffer result=makeBB(data.length + 100);
  mappedData.position(outOffset).limit(outOffset + compressedLength);
  compressor.uncompress(mappedData,result);
  channel.close();
  result.flip();
  Assert.assertEquals(data.length,result.limit());
  for (int i=0; i < result.limit(); i++) {
    Assert.assertEquals("Decompression mismatch at byte " + i,data[i],result.get());
  }
}
