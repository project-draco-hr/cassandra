{
  byte[] data=new byte[1 << 20];
  new Random().nextBytes(data);
  ByteBuffer src=makeBB(data.length);
  src.put(data);
  src.flip();
  File temp=File.createTempFile("tempfile",".tmp");
  temp.deleteOnExit();
  final int outOffset=3;
  byte[] garbage=new byte[outOffset + compressor.initialCompressedBufferLength(data.length)];
  new Random().nextBytes(garbage);
  WrappedByteBuffer dest=makeWrappedBB(outOffset + compressor.initialCompressedBufferLength(data.length));
  dest.buffer.put(garbage);
  dest.buffer.clear();
  dest.buffer.position(outOffset);
  final int compressedLength=compressor.compress(src,dest);
  FileChannel channel=new FileOutputStream(temp,false).getChannel();
  dest.buffer.clear();
  channel.write(dest.buffer);
  MappedByteBuffer mappedData=Files.map(temp);
  mappedData.position(outOffset);
  mappedData.limit(compressedLength + outOffset);
  ByteBuffer result=makeBB(data.length + 100);
  int length=compressor.uncompress(mappedData,result);
  Assert.assertEquals(data.length,length);
  for (int i=0; i < length; i++) {
    Assert.assertEquals("Decompression mismatch at byte " + i,data[i],result.get());
  }
}
