{
  tasks.add(task);
  int taskPermits;
  while (true) {
    long current=permits.get();
    taskPermits=taskPermits(current);
    if (permits.compareAndSet(current,updateTaskPermits(current,taskPermits + 1)))     break;
  }
  if (taskPermits == 0) {
    pool.maybeStartSpinningWorker();
  }
 else   if (taskPermits >= maxTasksQueued) {
    WaitQueue.Signal s=hasRoom.register();
    if (taskPermits(permits.get()) > maxTasksQueued) {
      if (takeWorkPermit(true))       pool.schedule(new Work(this));
      metrics.totalBlocked.inc();
      metrics.currentBlocked.inc();
      s.awaitUninterruptibly();
      metrics.currentBlocked.dec();
    }
 else     s.cancel();
  }
}
