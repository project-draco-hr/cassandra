{
  try {
    URL url=getStorageConfigURL();
    logger.info("Loading settings from " + url);
    InputStream input=null;
    try {
      input=url.openStream();
    }
 catch (    IOException e) {
      throw new AssertionError(e);
    }
    org.yaml.snakeyaml.constructor.Constructor constructor=new org.yaml.snakeyaml.constructor.Constructor(Config.class);
    TypeDescription seedDesc=new TypeDescription(SeedProviderDef.class);
    seedDesc.putMapPropertyType("parameters",String.class,String.class);
    constructor.addTypeDescription(seedDesc);
    Yaml yaml=new Yaml(new Loader(constructor));
    conf=(Config)yaml.load(input);
    if (conf.commitlog_sync == null) {
      throw new ConfigurationException("Missing required directive CommitLogSync");
    }
    if (conf.commitlog_sync == Config.CommitLogSync.batch) {
      if (conf.commitlog_sync_batch_window_in_ms == null) {
        throw new ConfigurationException("Missing value for commitlog_sync_batch_window_in_ms: Double expected.");
      }
 else       if (conf.commitlog_sync_period_in_ms != null) {
        throw new ConfigurationException("Batch sync specified, but commitlog_sync_period_in_ms found. Only specify commitlog_sync_batch_window_in_ms when using batch sync");
      }
      logger.debug("Syncing log with a batch window of " + conf.commitlog_sync_batch_window_in_ms);
    }
 else {
      if (conf.commitlog_sync_period_in_ms == null) {
        throw new ConfigurationException("Missing value for commitlog_sync_period_in_ms: Integer expected");
      }
 else       if (conf.commitlog_sync_batch_window_in_ms != null) {
        throw new ConfigurationException("commitlog_sync_period_in_ms specified, but commitlog_sync_batch_window_in_ms found.  Only specify commitlog_sync_period_in_ms when using periodic sync.");
      }
      logger.debug("Syncing log with a period of " + conf.commitlog_sync_period_in_ms);
    }
    if (conf.disk_access_mode == Config.DiskAccessMode.auto) {
      conf.disk_access_mode=System.getProperty("os.arch").contains("64") ? Config.DiskAccessMode.mmap : Config.DiskAccessMode.standard;
      indexAccessMode=conf.disk_access_mode;
      logger.info("DiskAccessMode 'auto' determined to be " + conf.disk_access_mode + ", indexAccessMode is "+ indexAccessMode);
    }
 else     if (conf.disk_access_mode == Config.DiskAccessMode.mmap_index_only) {
      conf.disk_access_mode=Config.DiskAccessMode.standard;
      indexAccessMode=Config.DiskAccessMode.mmap;
      logger.info("DiskAccessMode is " + conf.disk_access_mode + ", indexAccessMode is "+ indexAccessMode);
    }
 else {
      indexAccessMode=conf.disk_access_mode;
      logger.info("DiskAccessMode is " + conf.disk_access_mode + ", indexAccessMode is "+ indexAccessMode);
    }
    if (conf.disk_access_mode == Config.DiskAccessMode.mmap)     MmappedSegmentedFile.initCleaner();
    if (conf.authenticator != null)     authenticator=FBUtilities.<IAuthenticator>construct(conf.authenticator,"authenticator");
    if (conf.authority != null)     authority=FBUtilities.<IAuthority>construct(conf.authority,"authority");
    authenticator.validateConfiguration();
    authority.validateConfiguration();
    if (conf.partitioner == null) {
      throw new ConfigurationException("Missing directive: partitioner");
    }
    try {
      partitioner=FBUtilities.newPartitioner(System.getProperty("cassandra.partitioner",conf.partitioner));
    }
 catch (    Exception e) {
      throw new ConfigurationException("Invalid partitioner class " + conf.partitioner);
    }
    if (conf.phi_convict_threshold < 5 || conf.phi_convict_threshold > 16) {
      throw new ConfigurationException("phi_convict_threshold must be between 5 and 16");
    }
    if (conf.concurrent_reads != null && conf.concurrent_reads < 2) {
      throw new ConfigurationException("concurrent_reads must be at least 2");
    }
    if (conf.concurrent_writes != null && conf.concurrent_writes < 2) {
      throw new ConfigurationException("concurrent_writes must be at least 2");
    }
    if (conf.concurrent_replicates != null && conf.concurrent_replicates < 2) {
      throw new ConfigurationException("concurrent_replicates must be at least 2");
    }
    if (conf.memtable_total_space_in_mb == null)     conf.memtable_total_space_in_mb=(int)(Runtime.getRuntime().maxMemory() / (3 * 1048576));
    if (conf.memtable_total_space_in_mb <= 0)     throw new ConfigurationException("memtable_total_space_in_mb must be positive");
    logger.info("Global memtable threshold is enabled at {}MB",conf.memtable_total_space_in_mb);
    if (conf.memtable_flush_writers != null && conf.memtable_flush_writers < 1) {
      throw new ConfigurationException("memtable_flush_writers must be at least 1");
    }
 else     if (conf.memtable_flush_writers == null) {
      conf.memtable_flush_writers=conf.data_file_directories.length;
    }
    if (conf.listen_address != null) {
      try {
        listenAddress=InetAddress.getByName(conf.listen_address);
      }
 catch (      UnknownHostException e) {
        throw new ConfigurationException("Unknown listen_address '" + conf.listen_address + "'");
      }
    }
    if (conf.broadcast_address != null) {
      if (conf.broadcast_address.equals("0.0.0.0")) {
        throw new ConfigurationException("broadcast_address cannot be 0.0.0.0!");
      }
      try {
        broadcastAddress=InetAddress.getByName(conf.broadcast_address);
      }
 catch (      UnknownHostException e) {
        throw new ConfigurationException("Unknown broadcast_address '" + conf.broadcast_address + "'");
      }
    }
    if (conf.rpc_address != null) {
      try {
        rpcAddress=InetAddress.getByName(conf.rpc_address);
      }
 catch (      UnknownHostException e) {
        throw new ConfigurationException("Unknown host in rpc_address " + conf.rpc_address);
      }
    }
 else {
      rpcAddress=FBUtilities.getLocalAddress();
    }
    if (conf.thrift_framed_transport_size_in_mb <= 0)     throw new ConfigurationException("thrift_framed_transport_size_in_mb must be positive");
    if (conf.thrift_framed_transport_size_in_mb > 0 && conf.thrift_max_message_length_in_mb < conf.thrift_framed_transport_size_in_mb) {
      throw new ConfigurationException("thrift_max_message_length_in_mb must be greater than thrift_framed_transport_size_in_mb when using TFramedTransport");
    }
    if (conf.endpoint_snitch == null) {
      throw new ConfigurationException("Missing endpoint_snitch directive");
    }
    snitch=createEndpointSnitch(conf.endpoint_snitch);
    EndpointSnitchInfo.create();
    requestSchedulerOptions=conf.request_scheduler_options;
    if (conf.request_scheduler != null) {
      try {
        if (requestSchedulerOptions == null) {
          requestSchedulerOptions=new RequestSchedulerOptions();
        }
        Class cls=Class.forName(conf.request_scheduler);
        requestScheduler=(IRequestScheduler)cls.getConstructor(RequestSchedulerOptions.class).newInstance(requestSchedulerOptions);
      }
 catch (      ClassNotFoundException e) {
        throw new ConfigurationException("Invalid Request Scheduler class " + conf.request_scheduler);
      }
catch (      Exception e) {
        throw new ConfigurationException("Unable to instantiate request scheduler",e);
      }
    }
 else {
      requestScheduler=new NoScheduler();
    }
    if (conf.request_scheduler_id == RequestSchedulerId.keyspace) {
      requestSchedulerId=conf.request_scheduler_id;
    }
 else {
      requestSchedulerId=RequestSchedulerId.keyspace;
    }
    if (logger.isDebugEnabled() && conf.auto_bootstrap != null) {
      logger.debug("setting auto_bootstrap to " + conf.auto_bootstrap);
    }
    if (conf.in_memory_compaction_limit_in_mb != null && conf.in_memory_compaction_limit_in_mb <= 0) {
      throw new ConfigurationException("in_memory_compaction_limit_in_mb must be a positive integer");
    }
    if (conf.concurrent_compactors == null)     conf.concurrent_compactors=Runtime.getRuntime().availableProcessors();
    if (conf.concurrent_compactors <= 0)     throw new ConfigurationException("concurrent_compactors should be strictly greater than 0");
    if (conf.compaction_throughput_mb_per_sec == null)     conf.compaction_throughput_mb_per_sec=16;
    if (conf.stream_throughput_outbound_megabits_per_sec == null)     conf.stream_throughput_outbound_megabits_per_sec=400;
    if (!CassandraDaemon.rpc_server_types.contains(conf.rpc_server_type.toLowerCase()))     throw new ConfigurationException("Unknown rpc_server_type: " + conf.rpc_server_type);
    if (conf.rpc_min_threads == null)     conf.rpc_min_threads=conf.rpc_server_type.toLowerCase().equals("hsha") ? Runtime.getRuntime().availableProcessors() * 4 : 16;
    if (conf.rpc_max_threads == null)     conf.rpc_max_threads=conf.rpc_server_type.toLowerCase().equals("hsha") ? Runtime.getRuntime().availableProcessors() * 4 : Integer.MAX_VALUE;
    if (conf.commitlog_directory != null && conf.data_file_directories != null && conf.saved_caches_directory != null) {
      for (      String datadir : conf.data_file_directories) {
        if (datadir.equals(conf.commitlog_directory))         throw new ConfigurationException("commitlog_directory must not be the same as any data_file_directories");
        if (datadir.equals(conf.saved_caches_directory))         throw new ConfigurationException("saved_caches_directory must not be the same as any data_file_directories");
      }
      if (conf.commitlog_directory.equals(conf.saved_caches_directory))       throw new ConfigurationException("saved_caches_directory must not be the same as the commitlog_directory");
    }
 else {
      if (conf.commitlog_directory == null)       throw new ConfigurationException("commitlog_directory missing");
      if (conf.data_file_directories == null)       throw new ConfigurationException("data_file_directories missing; at least one data directory must be specified");
      if (conf.saved_caches_directory == null)       throw new ConfigurationException("saved_caches_directory missing");
    }
    if (conf.initial_token != null)     partitioner.getTokenFactory().validate(conf.initial_token);
    try {
      keyCacheSizeInMB="auto".equalsIgnoreCase(conf.key_cache_size_in_mb) ? Math.min((int)(Runtime.getRuntime().totalMemory() * 0.05 / 1024 / 1024),100) : Integer.valueOf(conf.key_cache_size_in_mb);
      if (keyCacheSizeInMB < 0)       throw new NumberFormatException();
    }
 catch (    NumberFormatException e) {
      throw new ConfigurationException("key_cache_size_in_mb option was set incorrectly to '" + conf.key_cache_size_in_mb + "', supported values are 'auto' and <integer> >= 0.");
    }
    rowCacheProvider=FBUtilities.newCacheProvider(conf.row_cache_provider);
    KSMetaData systemMeta=KSMetaData.systemKeyspace();
    Schema.instance.load(CFMetaData.StatusCf);
    Schema.instance.load(CFMetaData.HintsCf);
    Schema.instance.load(CFMetaData.MigrationsCf);
    Schema.instance.load(CFMetaData.SchemaCf);
    Schema.instance.load(CFMetaData.IndexCf);
    Schema.instance.load(CFMetaData.NodeIdCf);
    Schema.instance.load(CFMetaData.VersionCf);
    Schema.instance.load(CFMetaData.SchemaKeyspacesCf);
    Schema.instance.load(CFMetaData.SchemaColumnFamiliesCf);
    Schema.instance.load(CFMetaData.SchemaColumnsCf);
    Schema.instance.addSystemTable(systemMeta);
    if (conf.seed_provider == null) {
      throw new ConfigurationException("seeds configuration is missing; a minimum of one seed is required.");
    }
    try {
      Class seedProviderClass=Class.forName(conf.seed_provider.class_name);
      seedProvider=(SeedProvider)seedProviderClass.getConstructor(Map.class).newInstance(conf.seed_provider.parameters);
    }
 catch (    Exception e) {
      logger.error("Fatal configuration error",e);
      System.err.println(e.getMessage() + "\nFatal configuration error; unable to start server.  See log for stacktrace.");
      System.exit(1);
    }
    if (seedProvider.getSeeds().size() == 0)     throw new ConfigurationException("The seed provider lists no seeds.");
  }
 catch (  ConfigurationException e) {
    logger.error("Fatal configuration error",e);
    System.err.println(e.getMessage() + "\nFatal configuration error; unable to start server.  See log for stacktrace.");
    System.exit(1);
  }
catch (  YAMLException e) {
    logger.error("Fatal configuration error error",e);
    System.err.println(e.getMessage() + "\nInvalid yaml; unable to start server.  See log for stacktrace.");
    System.exit(1);
  }
}
