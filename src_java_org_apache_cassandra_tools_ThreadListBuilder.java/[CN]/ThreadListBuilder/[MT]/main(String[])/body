{
  if (args.length != 2) {
    System.out.println("Usage : java com.facebook.infrastructure.tools.ThreadListBuilder <directory containing files to be processed> <directory to dump the bloom filter in.>");
    System.exit(1);
  }
  File directory=new File(args[0]);
  File[] files=directory.listFiles();
  List<DataOutputBuffer> buffers=new ArrayList<DataOutputBuffer>();
  BloomFilter bf=new BloomFilter(count_,8);
  int keyCount=0;
  for (  File file : files) {
    System.out.println("Processing file " + file);
    BufferedReader bufReader=new BufferedReader(new InputStreamReader(new FileInputStream(file)),ThreadListBuilder.bufSize_);
    String line=null;
    while ((line=bufReader.readLine()) != null) {
      if (keyCount > 0 && keyCount % count_ == 0) {
        DataOutputBuffer bufOut=new DataOutputBuffer();
        BloomFilter.serializer().serialize(bf,bufOut);
        System.out.println("Finished serializing the bloom filter");
        buffers.add(bufOut);
        bf=new BloomFilter(count_,8);
      }
      line=line.trim();
      bf.add(line);
      ++keyCount;
    }
  }
  DataOutputBuffer bufOut=new DataOutputBuffer();
  BloomFilter.serializer().serialize(bf,bufOut);
  buffers.add(bufOut);
  int size=buffers.size();
  for (int i=0; i < size; ++i) {
    DataOutputBuffer buffer=buffers.get(i);
    String file=args[1] + File.separator + "Bloom-Filter-"+ i+ ".dat";
    RandomAccessFile raf=new RandomAccessFile(file,"rw");
    raf.write(buffer.getData(),0,buffer.getLength());
    raf.close();
    buffer.close();
  }
  System.out.println("Done writing the bloom filter to disk");
}
