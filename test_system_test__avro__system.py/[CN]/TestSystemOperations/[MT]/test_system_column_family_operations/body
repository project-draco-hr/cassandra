def test_system_column_family_operations(self):
    'adding, renaming, and removing column families'
    self.client.request('set_keyspace', {'keyspace': 'Keyspace1', })
    columnDef = dict()
    columnDef['name'] = 'ValidationColumn'
    columnDef['validation_class'] = 'BytesType'
    cfDef = dict()
    cfDef['keyspace'] = 'Keyspace1'
    cfDef['name'] = 'NewColumnFamily'
    cfDef['column_metadata'] = [columnDef]
    s = self.client.request('system_add_column_family', {'cf_def': cfDef, })
    assert isinstance(s, unicode), ("returned type is %s, (not 'unicode')" % type(s))
    ks1 = self.client.request('describe_keyspace', {'keyspace': 'Keyspace1', })
    assert ('NewColumnFamily' in [x['name'] for x in ks1['cf_defs']])
    cfDef = [x for x in ks1['cf_defs'] if (x['name'] == 'NewColumnFamily')][0]
    assert (cfDef['id'] > 1000), str(cfid)
    cfDef['comparator_type'] = 'LongType'
    avro_utils.assert_raises(AvroRemoteException, self.client.request, 'system_update_column_family', {'cf_def': cfDef, })
    cfDef['comparator_type'] = 'BytesType'
    cfDef['row_cache_size'] = 25
    cfDef['gc_grace_seconds'] = 1
    self.client.request('system_update_column_family', {'cf_def': cfDef, })
    ks1 = self.client.request('describe_keyspace', {'keyspace': 'Keyspace1', })
    server_cf = [x for x in ks1['cf_defs'] if (x['name'] == 'NewColumnFamily')][0]
    assert server_cf
    assert (server_cf['row_cache_size'] == 25)
    assert (server_cf['gc_grace_seconds'] == 1)
    self.client.request('system_drop_column_family', {'column_family': 'NewColumnFamily', })
    ks1 = self.client.request('describe_keyspace', {'keyspace': 'Keyspace1', })
    assert ('NewColumnFamily' not in [x['name'] for x in ks1['cf_defs']])
    assert ('Standard1' in [x['name'] for x in ks1['cf_defs']])
