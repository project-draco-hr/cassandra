{
  List<Pair<Integer,Integer>> positions=new ArrayList<Pair<Integer,Integer>>();
  if (samples.isEmpty())   return positions;
  for (  AbstractBounds range : AbstractBounds.normalize(ranges)) {
    DecoratedKey leftKey=new DecoratedKey(range.left,null);
    DecoratedKey rightKey=new DecoratedKey(range.right,null);
    int left=Collections.binarySearch(samples,new IndexSummary.KeyPosition(leftKey,-1));
    if (left < 0)     left=(left + 1) * -1;
 else     left=left + 1;
    if (left == samples.size())     continue;
    int right=Range.isWrapAround(range.left,range.right) ? samples.size() - 1 : Collections.binarySearch(samples,new IndexSummary.KeyPosition(rightKey,-1));
    if (right < 0) {
      right=(right + 1) * -1;
      if (right > 0)       right--;
    }
    if (left >= right)     continue;
    positions.add(new Pair(Integer.valueOf(left),Integer.valueOf(right)));
  }
  return positions;
}
