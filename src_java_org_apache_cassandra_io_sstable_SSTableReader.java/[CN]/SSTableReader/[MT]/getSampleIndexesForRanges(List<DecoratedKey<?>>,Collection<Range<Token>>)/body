{
  List<Pair<Integer,Integer>> positions=new ArrayList<Pair<Integer,Integer>>();
  if (samples.isEmpty())   return positions;
  for (  Range<Token> range : Range.normalize(ranges)) {
    RowPosition leftPosition=range.left.maxKeyBound();
    RowPosition rightPosition=range.right.maxKeyBound();
    int left=Collections.binarySearch(samples,leftPosition);
    if (left < 0)     left=(left + 1) * -1;
 else     left=left + 1;
    if (left == samples.size())     continue;
    int right=Range.isWrapAround(range.left,range.right) ? samples.size() - 1 : Collections.binarySearch(samples,rightPosition);
    if (right < 0) {
      right=(right + 1) * -1;
      if (right == 0)       continue;
      right--;
    }
    if (left > right)     continue;
    positions.add(new Pair(Integer.valueOf(left),Integer.valueOf(right)));
  }
  return positions;
}
