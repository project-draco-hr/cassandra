{
  if (op == Operator.EQ && !bf.isPresent(decoratedKey.key))   return -1;
  Pair<Descriptor,DecoratedKey> unifiedKey=new Pair<Descriptor,DecoratedKey>(desc,decoratedKey);
  if (keyCache != null && keyCache.getCapacity() > 0) {
    Long cachedPosition=keyCache.get(unifiedKey);
    if (cachedPosition != null) {
      return cachedPosition;
    }
  }
  IndexSummary.KeyPosition sampledPosition=getIndexScanPosition(decoratedKey);
  if (sampledPosition == null) {
    if (op == Operator.EQ)     bloomFilterTracker.addFalsePositive();
    return op.apply(1) >= 0 ? 0 : -1;
  }
  Iterator<FileDataInput> segments=ifile.iterator(sampledPosition.indexPosition,INDEX_FILE_BUFFER_BYTES);
  while (segments.hasNext()) {
    FileDataInput input=segments.next();
    try {
      while (!input.isEOF()) {
        DecoratedKey indexDecoratedKey=decodeKey(partitioner,desc,FBUtilities.readShortByteArray(input));
        long dataPosition=input.readLong();
        int comparison=indexDecoratedKey.compareTo(decoratedKey);
        int v=op.apply(comparison);
        if (v == 0) {
          if (comparison == 0 && keyCache != null && keyCache.getCapacity() > 0) {
            if (op == Operator.EQ)             bloomFilterTracker.addTruePositive();
            keyCache.put(unifiedKey,Long.valueOf(dataPosition));
          }
          return dataPosition;
        }
        if (v < 0) {
          if (op == Operator.EQ)           bloomFilterTracker.addFalsePositive();
          return -1;
        }
      }
    }
 catch (    IOException e) {
      throw new IOError(e);
    }
 finally {
      try {
        input.close();
      }
 catch (      IOException e) {
        logger.error("error closing file",e);
      }
    }
  }
  if (op == Operator.EQ)   bloomFilterTracker.addFalsePositive();
  return -1;
}
