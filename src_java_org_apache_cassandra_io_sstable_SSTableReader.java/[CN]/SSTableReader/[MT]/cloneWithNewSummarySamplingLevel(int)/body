{
  int minIndexInterval=metadata.getMinIndexInterval();
  int maxIndexInterval=metadata.getMaxIndexInterval();
  double effectiveInterval=indexSummary.getEffectiveIndexInterval();
  IndexSummary newSummary;
  if (samplingLevel > indexSummary.getSamplingLevel() || indexSummary.getMinIndexInterval() != minIndexInterval || effectiveInterval > maxIndexInterval) {
    newSummary=buildSummaryAtLevel(samplingLevel);
  }
 else   if (samplingLevel < indexSummary.getSamplingLevel()) {
    newSummary=IndexSummaryBuilder.downsample(indexSummary,samplingLevel,minIndexInterval,partitioner);
    SegmentedFile.Builder ibuilder=SegmentedFile.getBuilder(DatabaseDescriptor.getIndexAccessMode());
    SegmentedFile.Builder dbuilder=compression ? SegmentedFile.getCompressedBuilder() : SegmentedFile.getBuilder(DatabaseDescriptor.getDiskAccessMode());
    saveSummary(ibuilder,dbuilder,newSummary);
  }
 else {
    throw new AssertionError("Attempted to clone SSTableReader with the same index summary sampling level and " + "no adjustments to min/max_index_interval");
  }
  markReplaced();
  if (readMeterSyncFuture != null)   readMeterSyncFuture.cancel(false);
  SSTableReader replacement=new SSTableReader(descriptor,components,metadata,partitioner,ifile,dfile,newSummary,bf,maxDataAge,sstableMetadata);
  replacement.readMeter=this.readMeter;
  replacement.first=this.first;
  replacement.last=this.last;
  return replacement;
}
