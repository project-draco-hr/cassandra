{
  WrappingCompactionStrategy wrappingStrategy=(WrappingCompactionStrategy)strategy;
  int maxSizeInMB=(int)((cfs.getCompactionStrategy().getMaxSSTableBytes()) / (1024L * 1024L));
  if (wrappingStrategy.getWrappedStrategies().size() == 2 && wrappingStrategy.getWrappedStrategies().iterator().next() instanceof LeveledCompactionStrategy) {
    System.out.println("Checking leveled manifest");
    Predicate<SSTableReader> repairedPredicate=new Predicate<SSTableReader>(){
      @Override public boolean apply(      SSTableReader sstable){
        return sstable.isRepaired();
      }
    }
;
    List<SSTableReader> repaired=Lists.newArrayList(Iterables.filter(sstables,repairedPredicate));
    List<SSTableReader> unRepaired=Lists.newArrayList(Iterables.filter(sstables,Predicates.not(repairedPredicate)));
    LeveledManifest repairedManifest=LeveledManifest.create(cfs,maxSizeInMB,repaired);
    for (int i=1; i < repairedManifest.getLevelCount(); i++) {
      repairedManifest.repairOverlappingSSTables(i);
    }
    LeveledManifest unRepairedManifest=LeveledManifest.create(cfs,maxSizeInMB,unRepaired);
    for (int i=1; i < unRepairedManifest.getLevelCount(); i++) {
      unRepairedManifest.repairOverlappingSSTables(i);
    }
  }
}
