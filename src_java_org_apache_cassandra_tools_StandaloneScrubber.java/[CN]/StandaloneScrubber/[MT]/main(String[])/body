{
  Options options=Options.parseArgs(args);
  try {
    DatabaseDescriptor.loadSchemas();
    if (Schema.instance.getCFMetaData(options.keyspaceName,options.cfName) == null)     throw new IllegalArgumentException(String.format("Unknown keyspace/columnFamily %s.%s",options.keyspaceName,options.cfName));
    Keyspace keyspace=Keyspace.openWithoutSSTables(options.keyspaceName);
    ColumnFamilyStore cfs=keyspace.getColumnFamilyStore(options.cfName);
    String snapshotName="pre-scrub-" + System.currentTimeMillis();
    OutputHandler handler=new OutputHandler.SystemOutput(options.verbose,options.debug);
    Directories.SSTableLister lister=cfs.directories.sstableLister().skipTemporary(true);
    List<SSTableReader> sstables=new ArrayList<SSTableReader>();
    for (    Map.Entry<Descriptor,Set<Component>> entry : lister.list().entrySet()) {
      Set<Component> components=entry.getValue();
      if (!components.contains(Component.DATA) || !components.contains(Component.PRIMARY_INDEX))       continue;
      try {
        SSTableReader sstable=SSTableReader.openNoValidation(entry.getKey(),components,cfs.metadata);
        sstables.add(sstable);
        File snapshotDirectory=Directories.getSnapshotDirectory(sstable.descriptor,snapshotName);
        sstable.createLinks(snapshotDirectory.getPath());
      }
 catch (      Exception e) {
        System.err.println(String.format("Error Loading %s: %s",entry.getKey(),e.getMessage()));
        if (options.debug)         e.printStackTrace(System.err);
      }
    }
    System.out.println(String.format("Pre-scrub sstables snapshotted into snapshot %s",snapshotName));
    LeveledManifest manifest=null;
    if (cfs.getCompactionStrategy() instanceof LeveledCompactionStrategy) {
      int maxSizeInMB=(int)((cfs.getCompactionStrategy().getMaxSSTableBytes()) / (1024L * 1024L));
      manifest=LeveledManifest.create(cfs,maxSizeInMB,sstables);
    }
    if (!options.manifestCheckOnly) {
      for (      SSTableReader sstable : sstables) {
        try {
          Scrubber scrubber=new Scrubber(cfs,sstable,options.skipCorrupted,handler,true);
          try {
            scrubber.scrub();
          }
  finally {
            scrubber.close();
          }
          if (manifest != null) {
            if (scrubber.getNewInOrderSSTable() != null)             manifest.add(scrubber.getNewInOrderSSTable());
            List<SSTableReader> added=scrubber.getNewSSTable() == null ? Collections.<SSTableReader>emptyList() : Collections.singletonList(scrubber.getNewSSTable());
            manifest.replace(Collections.singletonList(sstable),added);
          }
          sstable.markObsolete();
          sstable.releaseReference();
        }
 catch (        Exception e) {
          System.err.println(String.format("Error scrubbing %s: %s",sstable,e.getMessage()));
          if (options.debug)           e.printStackTrace(System.err);
        }
      }
    }
    if (manifest != null)     checkManifest(manifest);
    SSTableDeletingTask.waitForDeletions();
    System.exit(0);
  }
 catch (  Exception e) {
    System.err.println(e.getMessage());
    if (options.debug)     e.printStackTrace(System.err);
    System.exit(1);
  }
}
