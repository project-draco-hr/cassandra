{
  if (columnIndexList.size() == 0) {
    return new ColumnRange(0,dataSize,totalNumCols);
  }
  int size=columnIndexList.size();
  long start=0;
  long end=dataSize;
  int numColumns=0;
  Comparator<IndexHelper.ColumnIndexInfo> comparator=Collections.reverseOrder();
  IndexHelper.ColumnIndexInfo rhs=IndexHelper.ColumnIndexFactory.instance(TypeInfo.LONG);
  rhs.set(timeRange.rhs());
  int index=Collections.binarySearch(columnIndexList,rhs,comparator);
  if (index < 0) {
    index=(++index) * (-1);
  }
 else {
    ++index;
  }
  start=(index == 0) ? 0 : columnIndexList.get(index - 1).position();
  numColumns+=(index == 0) ? columnIndexList.get(0).count() : columnIndexList.get(index - 1).count();
  if (index < size) {
    int chunks=columnIndexList.size();
    IndexHelper.ColumnIndexInfo lhs=IndexHelper.ColumnIndexFactory.instance(TypeInfo.LONG);
    lhs.set(timeRange.lhs());
    int i=index + 1;
    for (; i < chunks; ++i) {
      IndexHelper.ColumnIndexInfo cIndexInfo2=columnIndexList.get(i);
      if (cIndexInfo2.compareTo(lhs) < 0) {
        numColumns+=cIndexInfo2.count();
        break;
      }
      numColumns+=cIndexInfo2.count();
    }
    end=columnIndexList.get(i).position();
  }
 else {
    end=dataSize;
    int totalColsIndexed=0;
    for (    IndexHelper.ColumnIndexInfo colPosInfo : columnIndexList) {
      totalColsIndexed+=colPosInfo.count();
    }
    numColumns=totalNumCols - totalColsIndexed;
  }
  return new ColumnRange(start,end,numColumns);
}
