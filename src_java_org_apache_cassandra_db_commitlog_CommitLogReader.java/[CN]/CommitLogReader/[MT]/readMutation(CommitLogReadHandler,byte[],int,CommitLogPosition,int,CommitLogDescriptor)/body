{
  boolean shouldReplay=entryLocation > minPosition.position;
  final Mutation mutation;
  try (RebufferingInputStream bufIn=new DataInputBuffer(inputBuffer,0,size)){
    mutation=Mutation.serializer.deserialize(bufIn,desc.getMessagingVersion(),SerializationHelper.Flag.LOCAL);
    for (    PartitionUpdate upd : mutation.getPartitionUpdates())     upd.validate();
  }
 catch (  UnknownColumnFamilyException ex) {
    if (ex.cfId == null)     return;
    AtomicInteger i=invalidMutations.get(ex.cfId);
    if (i == null) {
      i=new AtomicInteger(1);
      invalidMutations.put(ex.cfId,i);
    }
 else     i.incrementAndGet();
    return;
  }
catch (  Throwable t) {
    JVMStabilityInspector.inspectThrowable(t);
    File f=File.createTempFile("mutation","dat");
    try (DataOutputStream out=new DataOutputStream(new FileOutputStream(f))){
      out.write(inputBuffer,0,size);
    }
     handler.handleUnrecoverableError(new CommitLogReadException(String.format("Unexpected error deserializing mutation; saved to %s.  " + "This may be caused by replaying a mutation against a table with the same name but incompatible schema.  " + "Exception follows: %s",f.getAbsolutePath(),t),CommitLogReadErrorReason.MUTATION_ERROR,false));
    return;
  }
  if (logger.isTraceEnabled())   logger.trace("Read mutation for {}.{}: {}",mutation.getKeyspaceName(),mutation.key(),"{" + StringUtils.join(mutation.getPartitionUpdates().iterator(),", ") + "}");
  if (shouldReplay)   handler.handleMutation(mutation,size,entryLocation,desc);
}
