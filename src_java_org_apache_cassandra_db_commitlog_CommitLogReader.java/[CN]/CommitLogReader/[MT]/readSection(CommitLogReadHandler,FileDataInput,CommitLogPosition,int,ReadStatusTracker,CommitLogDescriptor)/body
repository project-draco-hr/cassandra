{
  if (desc.id == minPosition.segmentId && reader.getFilePointer() < minPosition.position)   reader.seek(minPosition.position);
  while (statusTracker.shouldContinue() && reader.getFilePointer() < end && !reader.isEOF()) {
    long mutationStart=reader.getFilePointer();
    if (logger.isTraceEnabled())     logger.trace("Reading mutation at {}",mutationStart);
    long claimedCRC32;
    int serializedSize;
    try {
      serializedSize=reader.readInt();
      if (serializedSize == LEGACY_END_OF_SEGMENT_MARKER) {
        logger.trace("Encountered end of segment marker at {}",reader.getFilePointer());
        statusTracker.requestTermination();
        return;
      }
      if (serializedSize < 10) {
        if (handler.shouldSkipSegmentOnError(new CommitLogReadException(String.format("Invalid mutation size %d at %d in %s",serializedSize,mutationStart,statusTracker.errorContext),CommitLogReadErrorReason.MUTATION_ERROR,statusTracker.tolerateErrorsInSection))) {
          statusTracker.requestTermination();
        }
        return;
      }
      long claimedSizeChecksum=CommitLogFormat.calculateClaimedChecksum(reader,desc.version);
      checksum.reset();
      CommitLogFormat.updateChecksum(checksum,serializedSize,desc.version);
      if (checksum.getValue() != claimedSizeChecksum) {
        if (handler.shouldSkipSegmentOnError(new CommitLogReadException(String.format("Mutation size checksum failure at %d in %s",mutationStart,statusTracker.errorContext),CommitLogReadErrorReason.MUTATION_ERROR,statusTracker.tolerateErrorsInSection))) {
          statusTracker.requestTermination();
        }
        return;
      }
      if (serializedSize > buffer.length)       buffer=new byte[(int)(1.2 * serializedSize)];
      reader.readFully(buffer,0,serializedSize);
      claimedCRC32=CommitLogFormat.calculateClaimedCRC32(reader,desc.version);
    }
 catch (    EOFException eof) {
      if (handler.shouldSkipSegmentOnError(new CommitLogReadException(String.format("Unexpected end of segment at %d in %s",mutationStart,statusTracker.errorContext),CommitLogReadErrorReason.EOF,statusTracker.tolerateErrorsInSection))) {
        statusTracker.requestTermination();
      }
      return;
    }
    checksum.update(buffer,0,serializedSize);
    if (claimedCRC32 != checksum.getValue()) {
      if (handler.shouldSkipSegmentOnError(new CommitLogReadException(String.format("Mutation checksum failure at %d in %s",mutationStart,statusTracker.errorContext),CommitLogReadErrorReason.MUTATION_ERROR,statusTracker.tolerateErrorsInSection))) {
        statusTracker.requestTermination();
      }
      continue;
    }
    long mutationPosition=reader.getFilePointer();
    readMutation(handler,buffer,serializedSize,minPosition,(int)mutationPosition,desc);
    if (mutationPosition >= minPosition.position)     statusTracker.addProcessedMutation();
  }
}
