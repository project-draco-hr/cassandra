{
  System.out.printf("Mode: %s%n",probe.getOperationMode());
  Set<StreamState> statuses=probe.getStreamStatus();
  if (statuses.isEmpty())   System.out.println("Not sending any streams.");
  for (  StreamState status : statuses) {
    System.out.printf("%s %s%n",status.description,status.planId.toString());
    for (    SessionInfo info : status.sessions) {
      System.out.printf("    %s",info.peer.toString());
      if (!info.peer.equals(info.connecting)) {
        System.out.printf(" (using %s)",info.connecting.toString());
      }
      System.out.printf("%n");
      if (!info.receivingSummaries.isEmpty()) {
        if (humanReadable)         System.out.printf("        Receiving %d files, %s total%n",info.getTotalFilesToReceive(),FileUtils.stringifyFileSize(info.getTotalSizeToReceive()));
 else         System.out.printf("        Receiving %d files, %d bytes total%n",info.getTotalFilesToReceive(),info.getTotalSizeToReceive());
        for (        ProgressInfo progress : info.getReceivingFiles()) {
          System.out.printf("            %s%n",progress.toString());
        }
      }
      if (!info.sendingSummaries.isEmpty()) {
        if (humanReadable)         System.out.printf("        Sending %d files, %s total%n",info.getTotalFilesToSend(),FileUtils.stringifyFileSize(info.getTotalSizeToSend()));
 else         System.out.printf("        Sending %d files, %d bytes total%n",info.getTotalFilesToSend(),info.getTotalSizeToSend());
        for (        ProgressInfo progress : info.getSendingFiles()) {
          System.out.printf("            %s%n",progress.toString());
        }
      }
    }
  }
  if (!probe.isStarting()) {
    System.out.printf("Read Repair Statistics:%nAttempted: %d%nMismatch (Blocking): %d%nMismatch (Background): %d%n",probe.getReadRepairAttempted(),probe.getReadRepairRepairedBlocking(),probe.getReadRepairRepairedBackground());
    MessagingServiceMBean ms=probe.msProxy;
    System.out.printf("%-25s","Pool Name");
    System.out.printf("%10s","Active");
    System.out.printf("%10s","Pending");
    System.out.printf("%15s%n","Completed");
    int pending;
    long completed;
    pending=0;
    for (    int n : ms.getCommandPendingTasks().values())     pending+=n;
    completed=0;
    for (    long n : ms.getCommandCompletedTasks().values())     completed+=n;
    System.out.printf("%-25s%10s%10s%15s%n","Commands","n/a",pending,completed);
    pending=0;
    for (    int n : ms.getResponsePendingTasks().values())     pending+=n;
    completed=0;
    for (    long n : ms.getResponseCompletedTasks().values())     completed+=n;
    System.out.printf("%-25s%10s%10s%15s%n","Responses","n/a",pending,completed);
  }
}
