{
  Collection<String> liveNodes=probe.getLiveNodes();
  Collection<String> deadNodes=probe.getUnreachableNodes();
  Collection<String> joiningNodes=probe.getJoiningNodes();
  Collection<String> leavingNodes=probe.getLeavingNodes();
  Collection<String> movingNodes=probe.getMovingNodes();
  Map<String,String> loadMap=probe.getLoadMap();
  System.out.println("Datacenter: " + dc);
  System.out.println("==========");
  List<String> tokens=new ArrayList<>();
  String lastToken="";
  for (  Map.Entry<InetAddress,Float> entry : filteredOwnerships.entrySet()) {
    tokens.addAll(endpointsToTokens.get(entry.getKey().getHostAddress()));
    lastToken=tokens.get(tokens.size() - 1);
  }
  System.out.printf(format,"Address","Rack","Status","State","Load","Owns","Token");
  if (filteredOwnerships.size() > 1)   System.out.printf(format,"","","","","","",lastToken);
 else   System.out.println();
  for (  Map.Entry<String,String> entry : endpointsToTokens.entries()) {
    String endpoint=entry.getKey();
    String rack;
    try {
      rack=probe.getEndpointSnitchInfoProxy().getRack(endpoint);
    }
 catch (    UnknownHostException e) {
      rack="Unknown";
    }
    String status=liveNodes.contains(endpoint) ? "Up" : deadNodes.contains(endpoint) ? "Down" : "?";
    String state="Normal";
    if (joiningNodes.contains(endpoint))     state="Joining";
 else     if (leavingNodes.contains(endpoint))     state="Leaving";
 else     if (movingNodes.contains(endpoint))     state="Moving";
    String load=loadMap.containsKey(endpoint) ? loadMap.get(endpoint) : "?";
    String owns;
    try {
      InetAddress ep=InetAddress.getByName(endpoint);
      Float percent=filteredOwnerships.get(ep);
      owns=(percent != null) ? new DecimalFormat("##0.00%").format(percent) : "?";
    }
 catch (    UnknownHostException e) {
      throw new RuntimeException(e);
    }
    System.out.printf(format,endpoint,rack,status,state,load,owns,entry.getValue());
  }
  System.out.println();
}
