{
  OptionFilter filter=new OptionFilter(ignore,cfnames);
  Map<String,List<ColumnFamilyStoreMBean>> cfstoreMap=new HashMap<>();
  Iterator<Map.Entry<String,ColumnFamilyStoreMBean>> cfamilies=probe.getColumnFamilyStoreMBeanProxies();
  while (cfamilies.hasNext()) {
    Map.Entry<String,ColumnFamilyStoreMBean> entry=cfamilies.next();
    String keyspaceName=entry.getKey();
    ColumnFamilyStoreMBean cfsProxy=entry.getValue();
    if (!cfstoreMap.containsKey(keyspaceName) && filter.isColumnFamilyIncluded(entry.getKey(),cfsProxy.getColumnFamilyName())) {
      List<ColumnFamilyStoreMBean> columnFamilies=new ArrayList<>();
      columnFamilies.add(cfsProxy);
      cfstoreMap.put(keyspaceName,columnFamilies);
    }
 else     if (filter.isColumnFamilyIncluded(entry.getKey(),cfsProxy.getColumnFamilyName())) {
      cfstoreMap.get(keyspaceName).add(cfsProxy);
    }
  }
  filter.verifyKeyspaces(probe.getKeyspaces());
  filter.verifyColumnFamilies();
  for (  Map.Entry<String,List<ColumnFamilyStoreMBean>> entry : cfstoreMap.entrySet()) {
    String keyspaceName=entry.getKey();
    List<ColumnFamilyStoreMBean> columnFamilies=entry.getValue();
    long keyspaceReadCount=0;
    long keyspaceWriteCount=0;
    int keyspacePendingFlushes=0;
    double keyspaceTotalReadTime=0.0f;
    double keyspaceTotalWriteTime=0.0f;
    System.out.println("Keyspace: " + keyspaceName);
    for (    ColumnFamilyStoreMBean cfstore : columnFamilies) {
      String cfName=cfstore.getColumnFamilyName();
      long writeCount=((JmxReporter.TimerMBean)probe.getColumnFamilyMetric(keyspaceName,cfName,"WriteLatency")).getCount();
      long readCount=((JmxReporter.TimerMBean)probe.getColumnFamilyMetric(keyspaceName,cfName,"ReadLatency")).getCount();
      if (readCount > 0) {
        keyspaceReadCount+=readCount;
        keyspaceTotalReadTime+=(long)probe.getColumnFamilyMetric(keyspaceName,cfName,"ReadTotalLatency");
      }
      if (writeCount > 0) {
        keyspaceWriteCount+=writeCount;
        keyspaceTotalWriteTime+=(long)probe.getColumnFamilyMetric(keyspaceName,cfName,"WriteTotalLatency");
      }
      keyspacePendingFlushes+=(long)probe.getColumnFamilyMetric(keyspaceName,cfName,"PendingFlushes");
    }
    double keyspaceReadLatency=keyspaceReadCount > 0 ? keyspaceTotalReadTime / keyspaceReadCount / 1000 : Double.NaN;
    double keyspaceWriteLatency=keyspaceWriteCount > 0 ? keyspaceTotalWriteTime / keyspaceWriteCount / 1000 : Double.NaN;
    System.out.println("\tRead Count: " + keyspaceReadCount);
    System.out.println("\tRead Latency: " + String.format("%s",keyspaceReadLatency) + " ms.");
    System.out.println("\tWrite Count: " + keyspaceWriteCount);
    System.out.println("\tWrite Latency: " + String.format("%s",keyspaceWriteLatency) + " ms.");
    System.out.println("\tPending Flushes: " + keyspacePendingFlushes);
    for (    ColumnFamilyStoreMBean cfstore : columnFamilies) {
      String cfName=cfstore.getColumnFamilyName();
      if (cfName.contains("."))       System.out.println("\t\tTable (index): " + cfName);
 else       System.out.println("\t\tTable: " + cfName);
      System.out.println("\t\tSSTable count: " + probe.getColumnFamilyMetric(keyspaceName,cfName,"LiveSSTableCount"));
      int[] leveledSStables=cfstore.getSSTableCountPerLevel();
      if (leveledSStables != null) {
        System.out.print("\t\tSSTables in each level: [");
        for (int level=0; level < leveledSStables.length; level++) {
          int count=leveledSStables[level];
          System.out.print(count);
          long maxCount=4L;
          if (level > 0)           maxCount=(long)Math.pow(10,level);
          if (count > maxCount)           System.out.print("/" + maxCount);
          if (level < leveledSStables.length - 1)           System.out.print(", ");
 else           System.out.println("]");
        }
      }
      Long memtableOffHeapSize=null;
      Long bloomFilterOffHeapSize=null;
      Long indexSummaryOffHeapSize=null;
      Long compressionMetadataOffHeapSize=null;
      Long offHeapSize=null;
      try {
        memtableOffHeapSize=(Long)probe.getColumnFamilyMetric(keyspaceName,cfName,"MemtableOffHeapSize");
        bloomFilterOffHeapSize=(Long)probe.getColumnFamilyMetric(keyspaceName,cfName,"BloomFilterOffHeapMemoryUsed");
        indexSummaryOffHeapSize=(Long)probe.getColumnFamilyMetric(keyspaceName,cfName,"IndexSummaryOffHeapMemoryUsed");
        compressionMetadataOffHeapSize=(Long)probe.getColumnFamilyMetric(keyspaceName,cfName,"CompressionMetadataOffHeapMemoryUsed");
        offHeapSize=memtableOffHeapSize + bloomFilterOffHeapSize + indexSummaryOffHeapSize+ compressionMetadataOffHeapSize;
      }
 catch (      RuntimeException e) {
        if (!(e.getCause() instanceof InstanceNotFoundException))         throw e;
      }
      System.out.println("\t\tSpace used (live): " + format((Long)probe.getColumnFamilyMetric(keyspaceName,cfName,"LiveDiskSpaceUsed"),humanReadable));
      System.out.println("\t\tSpace used (total): " + format((Long)probe.getColumnFamilyMetric(keyspaceName,cfName,"TotalDiskSpaceUsed"),humanReadable));
      System.out.println("\t\tSpace used by snapshots (total): " + format((Long)probe.getColumnFamilyMetric(keyspaceName,cfName,"SnapshotsSize"),humanReadable));
      if (offHeapSize != null)       System.out.println("\t\tOff heap memory used (total): " + format(offHeapSize,humanReadable));
      System.out.println("\t\tSSTable Compression Ratio: " + probe.getColumnFamilyMetric(keyspaceName,cfName,"CompressionRatio"));
      int numberOfKeys=0;
      for (      long keys : (long[])probe.getColumnFamilyMetric(keyspaceName,cfName,"EstimatedColumnCountHistogram"))       numberOfKeys+=keys;
      System.out.println("\t\tNumber of keys (estimate): " + numberOfKeys);
      System.out.println("\t\tMemtable cell count: " + probe.getColumnFamilyMetric(keyspaceName,cfName,"MemtableColumnsCount"));
      System.out.println("\t\tMemtable data size: " + format((Long)probe.getColumnFamilyMetric(keyspaceName,cfName,"MemtableLiveDataSize"),humanReadable));
      if (memtableOffHeapSize != null)       System.out.println("\t\tMemtable off heap memory used: " + format(memtableOffHeapSize,humanReadable));
      System.out.println("\t\tMemtable switch count: " + probe.getColumnFamilyMetric(keyspaceName,cfName,"MemtableSwitchCount"));
      System.out.println("\t\tLocal read count: " + ((JmxReporter.TimerMBean)probe.getColumnFamilyMetric(keyspaceName,cfName,"ReadLatency")).getCount());
      double localReadLatency=((JmxReporter.TimerMBean)probe.getColumnFamilyMetric(keyspaceName,cfName,"ReadLatency")).getMean() / 1000;
      double localRLatency=localReadLatency > 0 ? localReadLatency : Double.NaN;
      System.out.printf("\t\tLocal read latency: %01.3f ms%n",localRLatency);
      System.out.println("\t\tLocal write count: " + ((JmxReporter.TimerMBean)probe.getColumnFamilyMetric(keyspaceName,cfName,"WriteLatency")).getCount());
      double localWriteLatency=((JmxReporter.TimerMBean)probe.getColumnFamilyMetric(keyspaceName,cfName,"WriteLatency")).getMean() / 1000;
      double localWLatency=localWriteLatency > 0 ? localWriteLatency : Double.NaN;
      System.out.printf("\t\tLocal write latency: %01.3f ms%n",localWLatency);
      System.out.println("\t\tPending flushes: " + probe.getColumnFamilyMetric(keyspaceName,cfName,"PendingFlushes"));
      System.out.println("\t\tBloom filter false positives: " + probe.getColumnFamilyMetric(keyspaceName,cfName,"BloomFilterFalsePositives"));
      System.out.printf("\t\tBloom filter false ratio: %s%n",String.format("%01.5f",probe.getColumnFamilyMetric(keyspaceName,cfName,"RecentBloomFilterFalseRatio")));
      System.out.println("\t\tBloom filter space used: " + format((Long)probe.getColumnFamilyMetric(keyspaceName,cfName,"BloomFilterDiskSpaceUsed"),humanReadable));
      if (bloomFilterOffHeapSize != null)       System.out.println("\t\tBloom filter off heap memory used: " + format(bloomFilterOffHeapSize,humanReadable));
      if (indexSummaryOffHeapSize != null)       System.out.println("\t\tIndex summary off heap memory used: " + format(indexSummaryOffHeapSize,humanReadable));
      if (compressionMetadataOffHeapSize != null)       System.out.println("\t\tCompression metadata off heap memory used: " + format(compressionMetadataOffHeapSize,humanReadable));
      System.out.println("\t\tCompacted partition minimum bytes: " + format((Long)probe.getColumnFamilyMetric(keyspaceName,cfName,"MinRowSize"),humanReadable));
      System.out.println("\t\tCompacted partition maximum bytes: " + format((Long)probe.getColumnFamilyMetric(keyspaceName,cfName,"MaxRowSize"),humanReadable));
      System.out.println("\t\tCompacted partition mean bytes: " + format((Long)probe.getColumnFamilyMetric(keyspaceName,cfName,"MeanRowSize"),humanReadable));
      JmxReporter.HistogramMBean histogram=(JmxReporter.HistogramMBean)probe.getColumnFamilyMetric(keyspaceName,cfName,"LiveScannedHistogram");
      System.out.println("\t\tAverage live cells per slice (last five minutes): " + histogram.getMean());
      System.out.println("\t\tMaximum live cells per slice (last five minutes): " + histogram.getMax());
      histogram=(JmxReporter.HistogramMBean)probe.getColumnFamilyMetric(keyspaceName,cfName,"TombstoneScannedHistogram");
      System.out.println("\t\tAverage tombstones per slice (last five minutes): " + histogram.getMean());
      System.out.println("\t\tMaximum tombstones per slice (last five minutes): " + histogram.getMax());
      System.out.println("");
    }
    System.out.println("----------------");
  }
}
