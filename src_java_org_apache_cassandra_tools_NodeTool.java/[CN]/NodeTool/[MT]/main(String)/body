{
  List<Class<? extends Runnable>> commands=newArrayList(Help.class,Info.class,Ring.class,NetStats.class,CfStats.class,TableStats.class,CfHistograms.class,TableHistograms.class,Cleanup.class,ClearSnapshot.class,Compact.class,Scrub.class,Verify.class,Flush.class,UpgradeSSTable.class,DisableAutoCompaction.class,EnableAutoCompaction.class,CompactionStats.class,CompactionHistory.class,Decommission.class,DescribeCluster.class,DisableBinary.class,EnableBinary.class,EnableGossip.class,DisableGossip.class,EnableHandoff.class,EnableThrift.class,GcStats.class,GetCompactionThreshold.class,GetCompactionThroughput.class,GetStreamThroughput.class,GetTraceProbability.class,GetEndpoints.class,GetSSTables.class,GossipInfo.class,InvalidateKeyCache.class,InvalidateRowCache.class,InvalidateCounterCache.class,Join.class,Move.class,PauseHandoff.class,ResumeHandoff.class,ProxyHistograms.class,Rebuild.class,Refresh.class,RemoveNode.class,Assassinate.class,Repair.class,ReplayBatchlog.class,SetCacheCapacity.class,SetHintedHandoffThrottleInKB.class,SetCompactionThreshold.class,SetCompactionThroughput.class,SetStreamThroughput.class,SetTraceProbability.class,Snapshot.class,ListSnapshots.class,Status.class,StatusBinary.class,StatusGossip.class,StatusThrift.class,StatusBackup.class,StatusHandoff.class,Stop.class,StopDaemon.class,Version.class,DescribeRing.class,RebuildIndex.class,RangeKeySample.class,EnableBackup.class,DisableBackup.class,ResetLocalSchema.class,ReloadTriggers.class,SetCacheKeysToSave.class,DisableThrift.class,DisableHandoff.class,Drain.class,TruncateHints.class,TpStats.class,TopPartitions.class,SetLoggingLevel.class,GetLoggingLevels.class,DisableHintsForDC.class,EnableHintsForDC.class);
  Cli.CliBuilder<Runnable> builder=Cli.builder("nodetool");
  builder.withDescription("Manage your Cassandra cluster").withDefaultCommand(Help.class).withCommands(commands);
  builder.withGroup("bootstrap").withDescription("Monitor/manage node's bootstrap process").withDefaultCommand(Help.class).withCommand(BootstrapResume.class);
  Cli<Runnable> parser=builder.build();
  int status=0;
  try {
    Runnable parse=parser.parse(args);
    printHistory(args);
    parse.run();
  }
 catch (  IllegalArgumentException|IllegalStateException|ParseArgumentsMissingException|ParseArgumentsUnexpectedException|ParseOptionConversionException|ParseOptionMissingException|ParseOptionMissingValueException|ParseCommandMissingException|ParseCommandUnrecognizedException e) {
    badUse(e);
    status=1;
  }
catch (  Throwable throwable) {
    err(Throwables.getRootCause(throwable));
    status=2;
  }
  System.exit(status);
}
