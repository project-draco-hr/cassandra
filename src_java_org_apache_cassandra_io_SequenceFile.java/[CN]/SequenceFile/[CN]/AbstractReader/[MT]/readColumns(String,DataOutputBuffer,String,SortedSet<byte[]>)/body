{
  int dataSize=file_.readInt();
  bufOut.writeUTF(key);
  if (cNames == null || cNames.size() == 0) {
    int bytesSkipped=IndexHelper.skipBloomFilterAndIndex(file_);
    dataSize-=bytesSkipped;
    bufOut.writeInt(dataSize);
    bufOut.write(file_,dataSize);
  }
 else {
    long preBfPos=file_.getFilePointer();
    BloomFilter bf=defreezeBloomFilter();
    long postBfPos=file_.getFilePointer();
    dataSize-=(postBfPos - preBfPos);
    List<IndexHelper.ColumnIndexInfo> columnIndexList=new ArrayList<IndexHelper.ColumnIndexInfo>();
    int totalBytesRead=handleColumnNameIndexes(columnFamilyName,columnIndexList);
    dataSize-=totalBytesRead;
    String cfName=file_.readUTF();
    dataSize-=(utfPrefix_ + cfName.length());
    String cfType=file_.readUTF();
    dataSize-=(utfPrefix_ + cfType.length());
    String comparatorName=file_.readUTF();
    dataSize-=(utfPrefix_ + comparatorName.length());
    int localDeletionTime=file_.readInt();
    dataSize-=4;
    long markedForDeleteAt=file_.readLong();
    dataSize-=8;
    int totalNumCols=file_.readInt();
    dataSize-=4;
    List<IndexHelper.ColumnRange> columnRanges=IndexHelper.getMultiColumnRangesFromNameIndex(cNames,columnIndexList,dataSize,totalNumCols);
    int numColsReturned=0;
    int dataSizeReturned=0;
    for (    IndexHelper.ColumnRange columnRange : columnRanges) {
      numColsReturned+=columnRange.count();
      Coordinate coordinate=columnRange.coordinate();
      dataSizeReturned+=coordinate.end_ - coordinate.start_;
    }
    bufOut.writeInt(dataSizeReturned + utfPrefix_ * 2 + cfName.length() + cfType.length() + 4 + 4 + 8 + 4);
    bufOut.writeUTF(cfName);
    bufOut.writeUTF(cfType);
    bufOut.writeUTF(comparatorName);
    bufOut.writeInt(localDeletionTime);
    bufOut.writeLong(markedForDeleteAt);
    bufOut.writeInt(numColsReturned);
    int prevPosition=0;
    for (    IndexHelper.ColumnRange columnRange : columnRanges) {
      Coordinate coordinate=columnRange.coordinate();
      file_.skipBytes((int)(coordinate.start_ - prevPosition));
      bufOut.write(file_,(int)(coordinate.end_ - coordinate.start_));
      prevPosition=(int)coordinate.end_;
    }
  }
}
