def test_batch_mutate_remove_super_columns_with_standard_under(self):
    'batch mutate with deletions in super columns'
    self._set_keyspace('Keyspace1')
    column_families = ['Super1', 'Super2']
    keys = [('key_%d' % i) for i in range(11, 21)]
    self._insert_super()
    mutations = []
    for sc in _SUPER_COLUMNS:
        names = []
        for c in sc['columns']:
            names.append(c['name'])
        mutations.append(Mutation(deletion=Deletion(20, super_column=c['name'], predicate=SlicePredicate(column_names=names))))
    mutation_map = dict(((column_family, mutations) for column_family in column_families))
    keyed_mutations = [{'key': key, 'mutations': mutation_map, } for key in keys]

    def _assert_no_columnpath(key, column_path):
        self._assert_no_columnpath(key, column_path)
    self.client.request('batch_mutate', {'mutation_map': keyed_mutations, 'consistency_level': 'ZERO', })
    for column_family in column_families:
        for sc in _SUPER_COLUMNS:
            for c in sc['columns']:
                for key in keys:
                    waitfor(ZERO_WAIT, _assert_no_columnpath, key, ColumnPath(column_family, super_column=sc['name'], column=c['name']))
