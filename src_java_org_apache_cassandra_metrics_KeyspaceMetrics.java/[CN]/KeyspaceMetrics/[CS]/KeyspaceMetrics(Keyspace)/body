{
  factory=new KeyspaceMetricNameFactory(ks);
  keyspace=ks;
  memtableColumnsCount=createKeyspaceGauge("MemtableColumnsCount",new MetricValue(){
    public Long getValue(    ColumnFamilyMetrics metric){
      return metric.memtableColumnsCount.value();
    }
  }
);
  memtableDataSize=createKeyspaceGauge("MemtableDataSize",new MetricValue(){
    public Long getValue(    ColumnFamilyMetrics metric){
      return metric.memtableDataSize.value();
    }
  }
);
  allMemtablesDataSize=createKeyspaceGauge("AllMemtablesDataSize",new MetricValue(){
    public Long getValue(    ColumnFamilyMetrics metric){
      return metric.allMemtablesDataSize.value();
    }
  }
);
  memtableSwitchCount=createKeyspaceGauge("MemtableSwitchCount",new MetricValue(){
    public Long getValue(    ColumnFamilyMetrics metric){
      return metric.memtableSwitchCount.count();
    }
  }
);
  pendingCompactions=createKeyspaceGauge("PendingCompactions",new MetricValue(){
    public Long getValue(    ColumnFamilyMetrics metric){
      return (long)metric.pendingCompactions.value();
    }
  }
);
  pendingTasks=Metrics.newGauge(factory.createMetricName("PendingTasks"),new Gauge<Integer>(){
    public Integer value(){
      return Keyspace.switchLock.getQueueLength();
    }
  }
);
  liveDiskSpaceUsed=createKeyspaceGauge("LiveDiskSpaceUsed",new MetricValue(){
    public Long getValue(    ColumnFamilyMetrics metric){
      return metric.liveDiskSpaceUsed.count();
    }
  }
);
  totalDiskSpaceUsed=createKeyspaceGauge("TotalDiskSpaceUsed",new MetricValue(){
    public Long getValue(    ColumnFamilyMetrics metric){
      return metric.totalDiskSpaceUsed.count();
    }
  }
);
  bloomFilterDiskSpaceUsed=createKeyspaceGauge("BloomFilterDiskSpaceUsed",new MetricValue(){
    public Long getValue(    ColumnFamilyMetrics metric){
      return metric.bloomFilterDiskSpaceUsed.value();
    }
  }
);
  readLatency=new LatencyMetrics(factory,"Read");
  writeLatency=new LatencyMetrics(factory,"Write");
  rangeLatency=new LatencyMetrics(factory,"Range");
  sstablesPerReadHistogram=Metrics.newHistogram(factory.createMetricName("SSTablesPerReadHistogram"),true);
  tombstoneScannedHistogram=Metrics.newHistogram(factory.createMetricName("TombstoneScannedHistogram"),true);
  liveScannedHistogram=Metrics.newHistogram(factory.createMetricName("LiveScannedHistogram"),true);
  allMetrics.addAll(Lists.newArrayList("SSTablesPerReadHistogram","TombstoneScannedHistogram","LiveScannedHistogram"));
  casPrepare=new LatencyMetrics(factory,"CasPrepare");
  casPropose=new LatencyMetrics(factory,"CasPropose");
  casCommit=new LatencyMetrics(factory,"CasCommit");
}
