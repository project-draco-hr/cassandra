{
  factory=new KeyspaceMetricNameFactory(ks);
  keyspace=ks;
  memtableColumnsCount=createKeyspaceGauge("MemtableColumnsCount",new MetricValue(){
    public Long getValue(    ColumnFamilyMetrics metric){
      return metric.memtableColumnsCount.value();
    }
  }
);
  memtableLiveDataSize=createKeyspaceGauge("MemtableLiveDataSize",new MetricValue(){
    public Long getValue(    ColumnFamilyMetrics metric){
      return metric.memtableLiveDataSize.value();
    }
  }
);
  memtableOnHeapDataSize=createKeyspaceGauge("MemtableOnHeapDataSize",new MetricValue(){
    public Long getValue(    ColumnFamilyMetrics metric){
      return metric.memtableOnHeapSize.value();
    }
  }
);
  memtableOffHeapDataSize=createKeyspaceGauge("MemtableOffHeapDataSize",new MetricValue(){
    public Long getValue(    ColumnFamilyMetrics metric){
      return metric.memtableOffHeapSize.value();
    }
  }
);
  allMemtablesLiveDataSize=createKeyspaceGauge("AllMemtablesLiveDataSize",new MetricValue(){
    public Long getValue(    ColumnFamilyMetrics metric){
      return metric.allMemtablesLiveDataSize.value();
    }
  }
);
  allMemtablesOnHeapDataSize=createKeyspaceGauge("AllMemtablesOnHeapDataSize",new MetricValue(){
    public Long getValue(    ColumnFamilyMetrics metric){
      return metric.allMemtablesOnHeapSize.value();
    }
  }
);
  allMemtablesOffHeapDataSize=createKeyspaceGauge("AllMemtablesOffHeapDataSize",new MetricValue(){
    public Long getValue(    ColumnFamilyMetrics metric){
      return metric.allMemtablesOffHeapSize.value();
    }
  }
);
  memtableSwitchCount=createKeyspaceGauge("MemtableSwitchCount",new MetricValue(){
    public Long getValue(    ColumnFamilyMetrics metric){
      return metric.memtableSwitchCount.count();
    }
  }
);
  pendingCompactions=createKeyspaceGauge("PendingCompactions",new MetricValue(){
    public Long getValue(    ColumnFamilyMetrics metric){
      return (long)metric.pendingCompactions.value();
    }
  }
);
  pendingFlushes=createKeyspaceGauge("PendingFlushes",new MetricValue(){
    public Long getValue(    ColumnFamilyMetrics metric){
      return (long)metric.pendingFlushes.count();
    }
  }
);
  liveDiskSpaceUsed=createKeyspaceGauge("LiveDiskSpaceUsed",new MetricValue(){
    public Long getValue(    ColumnFamilyMetrics metric){
      return metric.liveDiskSpaceUsed.count();
    }
  }
);
  totalDiskSpaceUsed=createKeyspaceGauge("TotalDiskSpaceUsed",new MetricValue(){
    public Long getValue(    ColumnFamilyMetrics metric){
      return metric.totalDiskSpaceUsed.count();
    }
  }
);
  bloomFilterDiskSpaceUsed=createKeyspaceGauge("BloomFilterDiskSpaceUsed",new MetricValue(){
    public Long getValue(    ColumnFamilyMetrics metric){
      return metric.bloomFilterDiskSpaceUsed.value();
    }
  }
);
  readLatency=new LatencyMetrics(factory,"Read");
  writeLatency=new LatencyMetrics(factory,"Write");
  rangeLatency=new LatencyMetrics(factory,"Range");
  sstablesPerReadHistogram=Metrics.newHistogram(factory.createMetricName("SSTablesPerReadHistogram"),true);
  tombstoneScannedHistogram=Metrics.newHistogram(factory.createMetricName("TombstoneScannedHistogram"),true);
  liveScannedHistogram=Metrics.newHistogram(factory.createMetricName("LiveScannedHistogram"),true);
  allMetrics.addAll(Lists.newArrayList("SSTablesPerReadHistogram","TombstoneScannedHistogram","LiveScannedHistogram"));
  casPrepare=new LatencyMetrics(factory,"CasPrepare");
  casPropose=new LatencyMetrics(factory,"CasPropose");
  casCommit=new LatencyMetrics(factory,"CasCommit");
}
