{
  factory=new KeyspaceMetricNameFactory(ks);
  memtableColumnsCount=Metrics.newGauge(factory.createMetricName("MemtableColumnsCount"),new Gauge<Long>(){
    public Long value(){
      long total=0;
      for (      ColumnFamilyStore cf : ks.getColumnFamilyStores()) {
        total+=cf.metric.memtableColumnsCount.value();
      }
      return total;
    }
  }
);
  memtableLiveDataSize=Metrics.newGauge(factory.createMetricName("MemtableLiveDataSize"),new Gauge<Long>(){
    public Long value(){
      long total=0;
      for (      ColumnFamilyStore cf : ks.getColumnFamilyStores()) {
        total+=cf.metric.memtableLiveDataSize.value();
      }
      return total;
    }
  }
);
  memtableOnHeapDataSize=Metrics.newGauge(factory.createMetricName("MemtableOnHeapDataSize"),new Gauge<Long>(){
    public Long value(){
      long total=0;
      for (      ColumnFamilyStore cf : ks.getColumnFamilyStores()) {
        total+=cf.metric.memtableOnHeapSize.value();
      }
      return total;
    }
  }
);
  memtableOffHeapDataSize=Metrics.newGauge(factory.createMetricName("MemtableOffHeapDataSize"),new Gauge<Long>(){
    public Long value(){
      long total=0;
      for (      ColumnFamilyStore cf : ks.getColumnFamilyStores()) {
        total+=cf.metric.memtableOffHeapSize.value();
      }
      return total;
    }
  }
);
  allMemtablesLiveDataSize=Metrics.newGauge(factory.createMetricName("AllMemtablesLiveDataSize"),new Gauge<Long>(){
    public Long value(){
      long total=0;
      for (      ColumnFamilyStore cf : ks.getColumnFamilyStores()) {
        total+=cf.metric.allMemtablesLiveDataSize.value();
      }
      return total;
    }
  }
);
  allMemtablesOnHeapDataSize=Metrics.newGauge(factory.createMetricName("AllMemtablesOnHeapDataSize"),new Gauge<Long>(){
    public Long value(){
      long total=0;
      for (      ColumnFamilyStore cf : ks.getColumnFamilyStores()) {
        total+=cf.metric.allMemtablesOnHeapSize.value();
      }
      return total;
    }
  }
);
  allMemtablesOffHeapDataSize=Metrics.newGauge(factory.createMetricName("AllMemtablesOffHeapDataSize"),new Gauge<Long>(){
    public Long value(){
      long total=0;
      for (      ColumnFamilyStore cf : ks.getColumnFamilyStores()) {
        total+=cf.metric.allMemtablesOffHeapSize.value();
      }
      return total;
    }
  }
);
  memtableSwitchCount=Metrics.newGauge(factory.createMetricName("MemtableSwitchCount"),new Gauge<Long>(){
    public Long value(){
      long sum=0;
      for (      ColumnFamilyStore cf : ks.getColumnFamilyStores())       sum+=cf.metric.memtableSwitchCount.count();
      return sum;
    }
  }
);
  pendingCompactions=Metrics.newGauge(factory.createMetricName("PendingCompactions"),new Gauge<Integer>(){
    public Integer value(){
      int sum=0;
      for (      ColumnFamilyStore cf : ks.getColumnFamilyStores()) {
        sum+=cf.metric.pendingCompactions.value();
      }
      return sum;
    }
  }
);
  pendingFlushes=Metrics.newGauge(factory.createMetricName("PendingFlushes"),new Gauge<Integer>(){
    public Integer value(){
      int sum=0;
      for (      ColumnFamilyStore cf : ks.getColumnFamilyStores()) {
        sum+=cf.metric.pendingFlushes.count();
      }
      return sum;
    }
  }
);
  liveDiskSpaceUsed=Metrics.newGauge(factory.createMetricName("LiveDiskSpaceUsed"),new Gauge<Long>(){
    public Long value(){
      long sum=0;
      for (      ColumnFamilyStore cf : ks.getColumnFamilyStores()) {
        sum+=cf.metric.liveDiskSpaceUsed.count();
      }
      return sum;
    }
  }
);
  totalDiskSpaceUsed=Metrics.newGauge(factory.createMetricName("TotalDiskSpaceUsed"),new Gauge<Long>(){
    public Long value(){
      long sum=0;
      for (      ColumnFamilyStore cf : ks.getColumnFamilyStores()) {
        sum+=cf.metric.totalDiskSpaceUsed.count();
      }
      return sum;
    }
  }
);
  bloomFilterDiskSpaceUsed=Metrics.newGauge(factory.createMetricName("BloomFilterDiskSpaceUsed"),new Gauge<Long>(){
    public Long value(){
      long total=0;
      for (      ColumnFamilyStore cf : ks.getColumnFamilyStores())       total+=cf.metric.bloomFilterDiskSpaceUsed.value();
      return total;
    }
  }
);
}
