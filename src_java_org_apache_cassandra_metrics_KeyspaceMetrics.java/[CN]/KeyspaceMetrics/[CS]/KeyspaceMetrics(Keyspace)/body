{
  factory=new KeyspaceMetricNameFactory(ks);
  keyspace=ks;
  memtableColumnsCount=createKeyspaceGauge("MemtableColumnsCount",new MetricValue(){
    public Long getValue(    TableMetrics metric){
      return metric.memtableColumnsCount.getValue();
    }
  }
);
  memtableLiveDataSize=createKeyspaceGauge("MemtableLiveDataSize",new MetricValue(){
    public Long getValue(    TableMetrics metric){
      return metric.memtableLiveDataSize.getValue();
    }
  }
);
  memtableOnHeapDataSize=createKeyspaceGauge("MemtableOnHeapDataSize",new MetricValue(){
    public Long getValue(    TableMetrics metric){
      return metric.memtableOnHeapSize.getValue();
    }
  }
);
  memtableOffHeapDataSize=createKeyspaceGauge("MemtableOffHeapDataSize",new MetricValue(){
    public Long getValue(    TableMetrics metric){
      return metric.memtableOffHeapSize.getValue();
    }
  }
);
  allMemtablesLiveDataSize=createKeyspaceGauge("AllMemtablesLiveDataSize",new MetricValue(){
    public Long getValue(    TableMetrics metric){
      return metric.allMemtablesLiveDataSize.getValue();
    }
  }
);
  allMemtablesOnHeapDataSize=createKeyspaceGauge("AllMemtablesOnHeapDataSize",new MetricValue(){
    public Long getValue(    TableMetrics metric){
      return metric.allMemtablesOnHeapSize.getValue();
    }
  }
);
  allMemtablesOffHeapDataSize=createKeyspaceGauge("AllMemtablesOffHeapDataSize",new MetricValue(){
    public Long getValue(    TableMetrics metric){
      return metric.allMemtablesOffHeapSize.getValue();
    }
  }
);
  memtableSwitchCount=createKeyspaceGauge("MemtableSwitchCount",new MetricValue(){
    public Long getValue(    TableMetrics metric){
      return metric.memtableSwitchCount.getCount();
    }
  }
);
  pendingCompactions=createKeyspaceGauge("PendingCompactions",new MetricValue(){
    public Long getValue(    TableMetrics metric){
      return (long)metric.pendingCompactions.getValue();
    }
  }
);
  pendingFlushes=createKeyspaceGauge("PendingFlushes",new MetricValue(){
    public Long getValue(    TableMetrics metric){
      return (long)metric.pendingFlushes.getCount();
    }
  }
);
  liveDiskSpaceUsed=createKeyspaceGauge("LiveDiskSpaceUsed",new MetricValue(){
    public Long getValue(    TableMetrics metric){
      return metric.liveDiskSpaceUsed.getCount();
    }
  }
);
  totalDiskSpaceUsed=createKeyspaceGauge("TotalDiskSpaceUsed",new MetricValue(){
    public Long getValue(    TableMetrics metric){
      return metric.totalDiskSpaceUsed.getCount();
    }
  }
);
  bloomFilterDiskSpaceUsed=createKeyspaceGauge("BloomFilterDiskSpaceUsed",new MetricValue(){
    public Long getValue(    TableMetrics metric){
      return metric.bloomFilterDiskSpaceUsed.getValue();
    }
  }
);
  bloomFilterOffHeapMemoryUsed=createKeyspaceGauge("BloomFilterOffHeapMemoryUsed",new MetricValue(){
    public Long getValue(    TableMetrics metric){
      return metric.bloomFilterOffHeapMemoryUsed.getValue();
    }
  }
);
  indexSummaryOffHeapMemoryUsed=createKeyspaceGauge("IndexSummaryOffHeapMemoryUsed",new MetricValue(){
    public Long getValue(    TableMetrics metric){
      return metric.indexSummaryOffHeapMemoryUsed.getValue();
    }
  }
);
  compressionMetadataOffHeapMemoryUsed=createKeyspaceGauge("CompressionMetadataOffHeapMemoryUsed",new MetricValue(){
    public Long getValue(    TableMetrics metric){
      return metric.compressionMetadataOffHeapMemoryUsed.getValue();
    }
  }
);
  readLatency=new LatencyMetrics(factory,"Read");
  writeLatency=new LatencyMetrics(factory,"Write");
  rangeLatency=new LatencyMetrics(factory,"Range");
  sstablesPerReadHistogram=Metrics.histogram(factory.createMetricName("SSTablesPerReadHistogram"),true);
  tombstoneScannedHistogram=Metrics.histogram(factory.createMetricName("TombstoneScannedHistogram"),false);
  liveScannedHistogram=Metrics.histogram(factory.createMetricName("LiveScannedHistogram"),false);
  colUpdateTimeDeltaHistogram=Metrics.histogram(factory.createMetricName("ColUpdateTimeDeltaHistogram"),false);
  viewLockAcquireTime=Metrics.timer(factory.createMetricName("ViewLockAcquireTime"));
  viewReadTime=Metrics.timer(factory.createMetricName("ViewReadTime"));
  allMetrics.addAll(Lists.newArrayList("SSTablesPerReadHistogram","TombstoneScannedHistogram","LiveScannedHistogram"));
  casPrepare=new LatencyMetrics(factory,"CasPrepare");
  casPropose=new LatencyMetrics(factory,"CasPropose");
  casCommit=new LatencyMetrics(factory,"CasCommit");
}
