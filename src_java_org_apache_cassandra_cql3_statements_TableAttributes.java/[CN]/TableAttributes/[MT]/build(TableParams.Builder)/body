{
  if (hasOption(Option.BLOOM_FILTER_FP_CHANCE))   builder.bloomFilterFpChance(getDouble(Option.BLOOM_FILTER_FP_CHANCE));
  if (hasOption(Option.CACHING))   builder.caching(CachingParams.fromMap(getMap(Option.CACHING)));
  if (hasOption(Option.COMMENT))   builder.comment(getString(Option.COMMENT));
  if (hasOption(Option.COMPACTION))   builder.compaction(CompactionParams.fromMap(getMap(Option.COMPACTION)));
  if (hasOption(Option.COMPRESSION)) {
    Map<String,String> compressionOpts=getMap(Option.COMPRESSION);
    if (compressionOpts.containsKey(Option.CRC_CHECK_CHANCE.toString().toLowerCase())) {
      Double crcCheckChance=getDeprecatedCrcCheckChance(compressionOpts);
      builder.crcCheckChance(crcCheckChance);
    }
    builder.compression(CompressionParams.fromMap(getMap(Option.COMPRESSION)));
  }
  if (hasOption(Option.DCLOCAL_READ_REPAIR_CHANCE))   builder.dcLocalReadRepairChance(getDouble(Option.DCLOCAL_READ_REPAIR_CHANCE));
  if (hasOption(Option.DEFAULT_TIME_TO_LIVE))   builder.defaultTimeToLive(getInt(Option.DEFAULT_TIME_TO_LIVE));
  if (hasOption(Option.GC_GRACE_SECONDS))   builder.gcGraceSeconds(getInt(Option.GC_GRACE_SECONDS));
  if (hasOption(Option.MAX_INDEX_INTERVAL))   builder.maxIndexInterval(getInt(Option.MAX_INDEX_INTERVAL));
  if (hasOption(Option.MEMTABLE_FLUSH_PERIOD_IN_MS))   builder.memtableFlushPeriodInMs(getInt(Option.MEMTABLE_FLUSH_PERIOD_IN_MS));
  if (hasOption(Option.MIN_INDEX_INTERVAL))   builder.minIndexInterval(getInt(Option.MIN_INDEX_INTERVAL));
  if (hasOption(Option.READ_REPAIR_CHANCE))   builder.readRepairChance(getDouble(Option.READ_REPAIR_CHANCE));
  if (hasOption(Option.SPECULATIVE_RETRY))   builder.speculativeRetry(SpeculativeRetryParam.fromString(getString(Option.SPECULATIVE_RETRY)));
  if (hasOption(Option.CRC_CHECK_CHANCE))   builder.crcCheckChance(getDouble(Option.CRC_CHECK_CHANCE));
  if (hasOption(Option.CDC))   builder.cdc(getBoolean(Option.CDC.toString(),false));
  return builder.build();
}
