{
  if (EXECUTE_WRITES) {
    testBloomFilterWrite1000(true,false);
    testBloomFilterWrite1000(true,true);
  }
  try (DataInputStream in=getInput("3.0","utils.BloomFilter1000.bin");IFilter filter=FilterFactory.deserialize(in,true,false)){
    boolean present;
    for (int i=0; i < 1000; i++) {
      present=filter.isPresent(Util.dk(Int32Type.instance.decompose(i)));
      Assert.assertTrue(present);
    }
    for (int i=1000; i < 2000; i++) {
      present=filter.isPresent(Util.dk(Int32Type.instance.decompose(i)));
      Assert.assertFalse(present);
    }
  }
   try (DataInputStream in=getInput("2.1","utils.BloomFilter1000.bin");IFilter filter=FilterFactory.deserialize(in,true,true)){
    boolean present;
    for (int i=0; i < 1000; i++) {
      present=filter.isPresent(Util.dk(Int32Type.instance.decompose(i)));
      Assert.assertTrue(present);
    }
    for (int i=1000; i < 2000; i++) {
      present=filter.isPresent(Util.dk(Int32Type.instance.decompose(i)));
      Assert.assertFalse(present);
    }
  }
   int falsePositive=0;
  int falseNegative=0;
  try (DataInputStream in=getInput("2.1","utils.BloomFilter1000.bin");IFilter filter=FilterFactory.deserialize(in,true,false)){
    boolean present;
    for (int i=0; i < 1000; i++) {
      present=filter.isPresent(Util.dk(Int32Type.instance.decompose(i)));
      if (!present)       falseNegative++;
    }
    for (int i=1000; i < 2000; i++) {
      present=filter.isPresent(Util.dk(Int32Type.instance.decompose(i)));
      if (present)       falsePositive++;
    }
  }
   Assert.assertEquals(1000,falseNegative);
  Assert.assertEquals(0,falsePositive);
}
