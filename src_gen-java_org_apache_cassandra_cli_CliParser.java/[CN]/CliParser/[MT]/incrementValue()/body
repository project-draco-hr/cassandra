{
  CliParser.incrementValue_return retval=new CliParser.incrementValue_return();
  retval.start=input.LT(1);
  CommonTree root_0=null;
  Token set279=null;
  CommonTree set279_tree=null;
  try {
{
      root_0=(CommonTree)adaptor.nil();
      set279=(Token)input.LT(1);
      if (input.LA(1) == IntegerPositiveLiteral || input.LA(1) == IntegerNegativeLiteral) {
        input.consume();
        if (state.backtracking == 0)         adaptor.addChild(root_0,(CommonTree)adaptor.create(set279));
        state.errorRecovery=false;
        state.failed=false;
      }
 else {
        if (state.backtracking > 0) {
          state.failed=true;
          return retval;
        }
        MismatchedSetException mse=new MismatchedSetException(null,input);
        throw mse;
      }
    }
    retval.stop=input.LT(-1);
    if (state.backtracking == 0) {
      retval.tree=(CommonTree)adaptor.rulePostProcessing(root_0);
      adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
    }
  }
 catch (  RecognitionException re) {
    reportError(re);
    recover(input,re);
    retval.tree=(CommonTree)adaptor.errorNode(input,retval.start,input.LT(-1),re);
  }
 finally {
  }
  return retval;
}
