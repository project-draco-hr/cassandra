{
  CliParser.dropIndex_return retval=new CliParser.dropIndex_return();
  retval.start=input.LT(1);
  CommonTree root_0=null;
  Token DROP182=null;
  Token INDEX183=null;
  Token ON184=null;
  Token char_literal186=null;
  CliParser.columnFamily_return columnFamily185=null;
  CliParser.columnName_return columnName187=null;
  CommonTree DROP182_tree=null;
  CommonTree INDEX183_tree=null;
  CommonTree ON184_tree=null;
  CommonTree char_literal186_tree=null;
  RewriteRuleTokenStream stream_INDEX=new RewriteRuleTokenStream(adaptor,"token INDEX");
  RewriteRuleTokenStream stream_ON=new RewriteRuleTokenStream(adaptor,"token ON");
  RewriteRuleTokenStream stream_112=new RewriteRuleTokenStream(adaptor,"token 112");
  RewriteRuleTokenStream stream_DROP=new RewriteRuleTokenStream(adaptor,"token DROP");
  RewriteRuleSubtreeStream stream_columnFamily=new RewriteRuleSubtreeStream(adaptor,"rule columnFamily");
  RewriteRuleSubtreeStream stream_columnName=new RewriteRuleSubtreeStream(adaptor,"rule columnName");
  try {
{
      DROP182=(Token)match(input,DROP,FOLLOW_DROP_in_dropIndex2530);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_DROP.add(DROP182);
      INDEX183=(Token)match(input,INDEX,FOLLOW_INDEX_in_dropIndex2532);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_INDEX.add(INDEX183);
      ON184=(Token)match(input,ON,FOLLOW_ON_in_dropIndex2534);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_ON.add(ON184);
      pushFollow(FOLLOW_columnFamily_in_dropIndex2536);
      columnFamily185=columnFamily();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_columnFamily.add(columnFamily185.getTree());
      char_literal186=(Token)match(input,112,FOLLOW_112_in_dropIndex2538);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_112.add(char_literal186);
      pushFollow(FOLLOW_columnName_in_dropIndex2540);
      columnName187=columnName();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_columnName.add(columnName187.getTree());
      if (state.backtracking == 0) {
        retval.tree=root_0;
        RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
        root_0=(CommonTree)adaptor.nil();
{
{
            CommonTree root_1=(CommonTree)adaptor.nil();
            root_1=(CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NODE_DROP_INDEX,"NODE_DROP_INDEX"),root_1);
            adaptor.addChild(root_1,stream_columnFamily.nextTree());
            adaptor.addChild(root_1,stream_columnName.nextTree());
            adaptor.addChild(root_0,root_1);
          }
        }
        retval.tree=root_0;
      }
    }
    retval.stop=input.LT(-1);
    if (state.backtracking == 0) {
      retval.tree=(CommonTree)adaptor.rulePostProcessing(root_0);
      adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
    }
  }
 catch (  RecognitionException re) {
    reportError(re);
    recover(input,re);
    retval.tree=(CommonTree)adaptor.errorNode(input,retval.start,input.LT(-1),re);
  }
 finally {
  }
  return retval;
}
