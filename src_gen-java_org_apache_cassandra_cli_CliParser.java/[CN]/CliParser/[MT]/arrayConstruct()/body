{
  CliParser.arrayConstruct_return retval=new CliParser.arrayConstruct_return();
  retval.start=input.LT(1);
  CommonTree root_0=null;
  Token char_literal212=null;
  Token char_literal214=null;
  Token char_literal215=null;
  CliParser.hashConstruct_return hashConstruct213=null;
  CommonTree char_literal212_tree=null;
  CommonTree char_literal214_tree=null;
  CommonTree char_literal215_tree=null;
  RewriteRuleTokenStream stream_114=new RewriteRuleTokenStream(adaptor,"token 114");
  RewriteRuleTokenStream stream_115=new RewriteRuleTokenStream(adaptor,"token 115");
  RewriteRuleTokenStream stream_113=new RewriteRuleTokenStream(adaptor,"token 113");
  RewriteRuleSubtreeStream stream_hashConstruct=new RewriteRuleSubtreeStream(adaptor,"rule hashConstruct");
  try {
{
      char_literal212=(Token)match(input,113,FOLLOW_113_in_arrayConstruct2933);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_113.add(char_literal212);
      int cnt27=0;
      loop27:       do {
        int alt27=2;
        int LA27_0=input.LA(1);
        if ((LA27_0 == 116)) {
          alt27=1;
        }
switch (alt27) {
case 1:
{
            pushFollow(FOLLOW_hashConstruct_in_arrayConstruct2936);
            hashConstruct213=hashConstruct();
            state._fsp--;
            if (state.failed)             return retval;
            if (state.backtracking == 0)             stream_hashConstruct.add(hashConstruct213.getTree());
            int alt26=2;
            int LA26_0=input.LA(1);
            if ((LA26_0 == 114)) {
              alt26=1;
            }
switch (alt26) {
case 1:
{
                char_literal214=(Token)match(input,114,FOLLOW_114_in_arrayConstruct2938);
                if (state.failed)                 return retval;
                if (state.backtracking == 0)                 stream_114.add(char_literal214);
              }
            break;
        }
      }
    break;
default :
  if (cnt27 >= 1)   break loop27;
if (state.backtracking > 0) {
  state.failed=true;
  return retval;
}
EarlyExitException eee=new EarlyExitException(27,input);
throw eee;
}
cnt27++;
}
 while (true);
char_literal215=(Token)match(input,115,FOLLOW_115_in_arrayConstruct2943);
if (state.failed) return retval;
if (state.backtracking == 0) stream_115.add(char_literal215);
if (state.backtracking == 0) {
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
root_0=(CommonTree)adaptor.nil();
{
{
CommonTree root_1=(CommonTree)adaptor.nil();
root_1=(CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ARRAY,"ARRAY"),root_1);
if (!(stream_hashConstruct.hasNext())) {
throw new RewriteEarlyExitException();
}
while (stream_hashConstruct.hasNext()) {
adaptor.addChild(root_1,stream_hashConstruct.nextTree());
}
stream_hashConstruct.reset();
adaptor.addChild(root_0,root_1);
}
}
retval.tree=root_0;
}
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(CommonTree)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(CommonTree)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
