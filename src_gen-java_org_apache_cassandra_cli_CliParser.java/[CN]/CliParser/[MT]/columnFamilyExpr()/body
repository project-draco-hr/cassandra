{
  CliParser.columnFamilyExpr_return retval=new CliParser.columnFamilyExpr_return();
  retval.start=input.LT(1);
  CommonTree root_0=null;
  Token char_literal225=null;
  Token char_literal227=null;
  Token char_literal228=null;
  Token char_literal229=null;
  Token char_literal230=null;
  Token char_literal231=null;
  CliParser.columnOrSuperColumn_return column=null;
  CliParser.columnOrSuperColumn_return super_column=null;
  CliParser.columnFamily_return columnFamily224=null;
  CliParser.rowKey_return rowKey226=null;
  CommonTree char_literal225_tree=null;
  CommonTree char_literal227_tree=null;
  CommonTree char_literal228_tree=null;
  CommonTree char_literal229_tree=null;
  CommonTree char_literal230_tree=null;
  CommonTree char_literal231_tree=null;
  RewriteRuleTokenStream stream_115=new RewriteRuleTokenStream(adaptor,"token 115");
  RewriteRuleTokenStream stream_113=new RewriteRuleTokenStream(adaptor,"token 113");
  RewriteRuleSubtreeStream stream_columnFamily=new RewriteRuleSubtreeStream(adaptor,"rule columnFamily");
  RewriteRuleSubtreeStream stream_rowKey=new RewriteRuleSubtreeStream(adaptor,"rule rowKey");
  RewriteRuleSubtreeStream stream_columnOrSuperColumn=new RewriteRuleSubtreeStream(adaptor,"rule columnOrSuperColumn");
  try {
{
      pushFollow(FOLLOW_columnFamily_in_columnFamilyExpr3067);
      columnFamily224=columnFamily();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_columnFamily.add(columnFamily224.getTree());
      char_literal225=(Token)match(input,113,FOLLOW_113_in_columnFamilyExpr3069);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_113.add(char_literal225);
      pushFollow(FOLLOW_rowKey_in_columnFamilyExpr3071);
      rowKey226=rowKey();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_rowKey.add(rowKey226.getTree());
      char_literal227=(Token)match(input,115,FOLLOW_115_in_columnFamilyExpr3073);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_115.add(char_literal227);
      int alt30=2;
      int LA30_0=input.LA(1);
      if ((LA30_0 == 113)) {
        alt30=1;
      }
switch (alt30) {
case 1:
{
          char_literal228=(Token)match(input,113,FOLLOW_113_in_columnFamilyExpr3086);
          if (state.failed)           return retval;
          if (state.backtracking == 0)           stream_113.add(char_literal228);
          pushFollow(FOLLOW_columnOrSuperColumn_in_columnFamilyExpr3090);
          column=columnOrSuperColumn();
          state._fsp--;
          if (state.failed)           return retval;
          if (state.backtracking == 0)           stream_columnOrSuperColumn.add(column.getTree());
          char_literal229=(Token)match(input,115,FOLLOW_115_in_columnFamilyExpr3092);
          if (state.failed)           return retval;
          if (state.backtracking == 0)           stream_115.add(char_literal229);
          int alt29=2;
          int LA29_0=input.LA(1);
          if ((LA29_0 == 113)) {
            alt29=1;
          }
switch (alt29) {
case 1:
{
              char_literal230=(Token)match(input,113,FOLLOW_113_in_columnFamilyExpr3108);
              if (state.failed)               return retval;
              if (state.backtracking == 0)               stream_113.add(char_literal230);
              pushFollow(FOLLOW_columnOrSuperColumn_in_columnFamilyExpr3112);
              super_column=columnOrSuperColumn();
              state._fsp--;
              if (state.failed)               return retval;
              if (state.backtracking == 0)               stream_columnOrSuperColumn.add(super_column.getTree());
              char_literal231=(Token)match(input,115,FOLLOW_115_in_columnFamilyExpr3114);
              if (state.failed)               return retval;
              if (state.backtracking == 0)               stream_115.add(char_literal231);
            }
          break;
      }
    }
  break;
}
if (state.backtracking == 0) {
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
RewriteRuleSubtreeStream stream_column=new RewriteRuleSubtreeStream(adaptor,"rule column",column != null ? column.tree : null);
RewriteRuleSubtreeStream stream_super_column=new RewriteRuleSubtreeStream(adaptor,"rule super_column",super_column != null ? super_column.tree : null);
root_0=(CommonTree)adaptor.nil();
{
{
    CommonTree root_1=(CommonTree)adaptor.nil();
    root_1=(CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NODE_COLUMN_ACCESS,"NODE_COLUMN_ACCESS"),root_1);
    adaptor.addChild(root_1,stream_columnFamily.nextTree());
    adaptor.addChild(root_1,stream_rowKey.nextTree());
    if (stream_super_column.hasNext() || stream_column.hasNext()) {
      adaptor.addChild(root_1,stream_column.nextTree());
      if (stream_super_column.hasNext()) {
        adaptor.addChild(root_1,stream_super_column.nextTree());
      }
      stream_super_column.reset();
    }
    stream_super_column.reset();
    stream_column.reset();
    adaptor.addChild(root_0,root_1);
  }
}
retval.tree=root_0;
}
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(CommonTree)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(CommonTree)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
