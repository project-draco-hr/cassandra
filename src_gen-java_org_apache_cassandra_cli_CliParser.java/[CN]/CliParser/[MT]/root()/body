{
  CliParser.root_return retval=new CliParser.root_return();
  retval.start=input.LT(1);
  CommonTree root_0=null;
  Token SEMICOLON2=null;
  Token EOF3=null;
  CliParser.statement_return statement1=null;
  CommonTree SEMICOLON2_tree=null;
  CommonTree EOF3_tree=null;
  RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
  RewriteRuleTokenStream stream_EOF=new RewriteRuleTokenStream(adaptor,"token EOF");
  RewriteRuleSubtreeStream stream_statement=new RewriteRuleSubtreeStream(adaptor,"rule statement");
  try {
{
      pushFollow(FOLLOW_statement_in_root414);
      statement1=statement();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_statement.add(statement1.getTree());
      int alt1=2;
      int LA1_0=input.LA(1);
      if ((LA1_0 == SEMICOLON)) {
        alt1=1;
      }
switch (alt1) {
case 1:
{
          SEMICOLON2=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_root416);
          if (state.failed)           return retval;
          if (state.backtracking == 0)           stream_SEMICOLON.add(SEMICOLON2);
        }
      break;
  }
  EOF3=(Token)match(input,EOF,FOLLOW_EOF_in_root419);
  if (state.failed)   return retval;
  if (state.backtracking == 0)   stream_EOF.add(EOF3);
  if (state.backtracking == 0) {
    retval.tree=root_0;
    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
    root_0=(CommonTree)adaptor.nil();
{
      adaptor.addChild(root_0,stream_statement.nextTree());
    }
    retval.tree=root_0;
  }
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
  retval.tree=(CommonTree)adaptor.rulePostProcessing(root_0);
  adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(CommonTree)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
