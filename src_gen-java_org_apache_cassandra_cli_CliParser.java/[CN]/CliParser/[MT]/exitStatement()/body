{
  CliParser.exitStatement_return retval=new CliParser.exitStatement_return();
  retval.start=input.LT(1);
  CommonTree root_0=null;
  Token QUIT110=null;
  Token EXIT111=null;
  CommonTree QUIT110_tree=null;
  CommonTree EXIT111_tree=null;
  RewriteRuleTokenStream stream_EXIT=new RewriteRuleTokenStream(adaptor,"token EXIT");
  RewriteRuleTokenStream stream_QUIT=new RewriteRuleTokenStream(adaptor,"token QUIT");
  try {
    int alt7=2;
    int LA7_0=input.LA(1);
    if ((LA7_0 == QUIT)) {
      alt7=1;
    }
 else     if ((LA7_0 == EXIT)) {
      alt7=2;
    }
 else {
      if (state.backtracking > 0) {
        state.failed=true;
        return retval;
      }
      NoViableAltException nvae=new NoViableAltException("",7,0,input);
      throw nvae;
    }
switch (alt7) {
case 1:
{
        QUIT110=(Token)match(input,QUIT,FOLLOW_QUIT_in_exitStatement1547);
        if (state.failed)         return retval;
        if (state.backtracking == 0)         stream_QUIT.add(QUIT110);
        if (state.backtracking == 0) {
          retval.tree=root_0;
          RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
          root_0=(CommonTree)adaptor.nil();
{
{
              CommonTree root_1=(CommonTree)adaptor.nil();
              root_1=(CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NODE_EXIT,"NODE_EXIT"),root_1);
              adaptor.addChild(root_0,root_1);
            }
          }
          retval.tree=root_0;
        }
      }
    break;
case 2:
{
    EXIT111=(Token)match(input,EXIT,FOLLOW_EXIT_in_exitStatement1561);
    if (state.failed)     return retval;
    if (state.backtracking == 0)     stream_EXIT.add(EXIT111);
    if (state.backtracking == 0) {
      retval.tree=root_0;
      RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
      root_0=(CommonTree)adaptor.nil();
{
{
          CommonTree root_1=(CommonTree)adaptor.nil();
          root_1=(CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NODE_EXIT,"NODE_EXIT"),root_1);
          adaptor.addChild(root_0,root_1);
        }
      }
      retval.tree=root_0;
    }
  }
break;
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(CommonTree)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(CommonTree)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
