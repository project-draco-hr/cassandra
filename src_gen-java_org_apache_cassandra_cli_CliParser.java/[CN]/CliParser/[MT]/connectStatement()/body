{
  CliParser.connectStatement_return retval=new CliParser.connectStatement_return();
  retval.start=input.LT(1);
  CommonTree root_0=null;
  Token CONNECT27=null;
  Token char_literal29=null;
  Token CONNECT33=null;
  Token char_literal35=null;
  CliParser.host_return host28=null;
  CliParser.port_return port30=null;
  CliParser.username_return username31=null;
  CliParser.password_return password32=null;
  CliParser.ip_address_return ip_address34=null;
  CliParser.port_return port36=null;
  CliParser.username_return username37=null;
  CliParser.password_return password38=null;
  CommonTree CONNECT27_tree=null;
  CommonTree char_literal29_tree=null;
  CommonTree CONNECT33_tree=null;
  CommonTree char_literal35_tree=null;
  RewriteRuleTokenStream stream_CONNECT=new RewriteRuleTokenStream(adaptor,"token CONNECT");
  RewriteRuleTokenStream stream_101=new RewriteRuleTokenStream(adaptor,"token 101");
  RewriteRuleSubtreeStream stream_port=new RewriteRuleSubtreeStream(adaptor,"rule port");
  RewriteRuleSubtreeStream stream_ip_address=new RewriteRuleSubtreeStream(adaptor,"rule ip_address");
  RewriteRuleSubtreeStream stream_username=new RewriteRuleSubtreeStream(adaptor,"rule username");
  RewriteRuleSubtreeStream stream_host=new RewriteRuleSubtreeStream(adaptor,"rule host");
  RewriteRuleSubtreeStream stream_password=new RewriteRuleSubtreeStream(adaptor,"rule password");
  try {
    int alt5=2;
    int LA5_0=input.LA(1);
    if ((LA5_0 == CONNECT)) {
      int LA5_1=input.LA(2);
      if ((LA5_1 == Identifier)) {
        alt5=1;
      }
 else       if ((LA5_1 == IP_ADDRESS)) {
        alt5=2;
      }
 else {
        if (state.backtracking > 0) {
          state.failed=true;
          return retval;
        }
        NoViableAltException nvae=new NoViableAltException("",5,1,input);
        throw nvae;
      }
    }
 else {
      if (state.backtracking > 0) {
        state.failed=true;
        return retval;
      }
      NoViableAltException nvae=new NoViableAltException("",5,0,input);
      throw nvae;
    }
switch (alt5) {
case 1:
{
        CONNECT27=(Token)match(input,CONNECT,FOLLOW_CONNECT_in_connectStatement640);
        if (state.failed)         return retval;
        if (state.backtracking == 0)         stream_CONNECT.add(CONNECT27);
        pushFollow(FOLLOW_host_in_connectStatement642);
        host28=host();
        state._fsp--;
        if (state.failed)         return retval;
        if (state.backtracking == 0)         stream_host.add(host28.getTree());
        char_literal29=(Token)match(input,101,FOLLOW_101_in_connectStatement644);
        if (state.failed)         return retval;
        if (state.backtracking == 0)         stream_101.add(char_literal29);
        pushFollow(FOLLOW_port_in_connectStatement646);
        port30=port();
        state._fsp--;
        if (state.failed)         return retval;
        if (state.backtracking == 0)         stream_port.add(port30.getTree());
        int alt3=2;
        int LA3_0=input.LA(1);
        if ((LA3_0 == Identifier)) {
          alt3=1;
        }
switch (alt3) {
case 1:
{
            pushFollow(FOLLOW_username_in_connectStatement649);
            username31=username();
            state._fsp--;
            if (state.failed)             return retval;
            if (state.backtracking == 0)             stream_username.add(username31.getTree());
            pushFollow(FOLLOW_password_in_connectStatement651);
            password32=password();
            state._fsp--;
            if (state.failed)             return retval;
            if (state.backtracking == 0)             stream_password.add(password32.getTree());
          }
        break;
    }
    if (state.backtracking == 0) {
      retval.tree=root_0;
      RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
      root_0=(CommonTree)adaptor.nil();
{
{
          CommonTree root_1=(CommonTree)adaptor.nil();
          root_1=(CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NODE_CONNECT,"NODE_CONNECT"),root_1);
          adaptor.addChild(root_1,stream_host.nextTree());
          adaptor.addChild(root_1,stream_port.nextTree());
          if (stream_username.hasNext() || stream_password.hasNext()) {
            adaptor.addChild(root_1,stream_username.nextTree());
            adaptor.addChild(root_1,stream_password.nextTree());
          }
          stream_username.reset();
          stream_password.reset();
          adaptor.addChild(root_0,root_1);
        }
      }
      retval.tree=root_0;
    }
  }
break;
case 2:
{
CONNECT33=(Token)match(input,CONNECT,FOLLOW_CONNECT_in_connectStatement686);
if (state.failed) return retval;
if (state.backtracking == 0) stream_CONNECT.add(CONNECT33);
pushFollow(FOLLOW_ip_address_in_connectStatement688);
ip_address34=ip_address();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) stream_ip_address.add(ip_address34.getTree());
char_literal35=(Token)match(input,101,FOLLOW_101_in_connectStatement690);
if (state.failed) return retval;
if (state.backtracking == 0) stream_101.add(char_literal35);
pushFollow(FOLLOW_port_in_connectStatement692);
port36=port();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) stream_port.add(port36.getTree());
int alt4=2;
int LA4_0=input.LA(1);
if ((LA4_0 == Identifier)) {
  alt4=1;
}
switch (alt4) {
case 1:
{
    pushFollow(FOLLOW_username_in_connectStatement695);
    username37=username();
    state._fsp--;
    if (state.failed)     return retval;
    if (state.backtracking == 0)     stream_username.add(username37.getTree());
    pushFollow(FOLLOW_password_in_connectStatement697);
    password38=password();
    state._fsp--;
    if (state.failed)     return retval;
    if (state.backtracking == 0)     stream_password.add(password38.getTree());
  }
break;
}
if (state.backtracking == 0) {
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
root_0=(CommonTree)adaptor.nil();
{
{
  CommonTree root_1=(CommonTree)adaptor.nil();
  root_1=(CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NODE_CONNECT,"NODE_CONNECT"),root_1);
  adaptor.addChild(root_1,stream_ip_address.nextTree());
  adaptor.addChild(root_1,stream_port.nextTree());
  if (stream_password.hasNext() || stream_username.hasNext()) {
    adaptor.addChild(root_1,stream_username.nextTree());
    adaptor.addChild(root_1,stream_password.nextTree());
  }
  stream_password.reset();
  stream_username.reset();
  adaptor.addChild(root_0,root_1);
}
}
retval.tree=root_0;
}
}
break;
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(CommonTree)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(CommonTree)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
