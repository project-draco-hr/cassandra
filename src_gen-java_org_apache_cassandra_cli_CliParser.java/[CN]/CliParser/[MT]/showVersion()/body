{
  CliParser.showVersion_return retval=new CliParser.showVersion_return();
  retval.start=input.LT(1);
  CommonTree root_0=null;
  Token SHOW188=null;
  Token API_VERSION189=null;
  CommonTree SHOW188_tree=null;
  CommonTree API_VERSION189_tree=null;
  RewriteRuleTokenStream stream_API_VERSION=new RewriteRuleTokenStream(adaptor,"token API_VERSION");
  RewriteRuleTokenStream stream_SHOW=new RewriteRuleTokenStream(adaptor,"token SHOW");
  try {
{
      SHOW188=(Token)match(input,SHOW,FOLLOW_SHOW_in_showVersion2575);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_SHOW.add(SHOW188);
      API_VERSION189=(Token)match(input,API_VERSION,FOLLOW_API_VERSION_in_showVersion2577);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_API_VERSION.add(API_VERSION189);
      if (state.backtracking == 0) {
        retval.tree=root_0;
        RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
        root_0=(CommonTree)adaptor.nil();
{
{
            CommonTree root_1=(CommonTree)adaptor.nil();
            root_1=(CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NODE_SHOW_VERSION,"NODE_SHOW_VERSION"),root_1);
            adaptor.addChild(root_0,root_1);
          }
        }
        retval.tree=root_0;
      }
    }
    retval.stop=input.LT(-1);
    if (state.backtracking == 0) {
      retval.tree=(CommonTree)adaptor.rulePostProcessing(root_0);
      adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
    }
  }
 catch (  RecognitionException re) {
    reportError(re);
    recover(input,re);
    retval.tree=(CommonTree)adaptor.errorNode(input,retval.start,input.LT(-1),re);
  }
 finally {
  }
  return retval;
}
