{
  CliParser.setStatement_return retval=new CliParser.setStatement_return();
  retval.start=input.LT(1);
  CommonTree root_0=null;
  Token ttlValue=null;
  Token SET129=null;
  Token char_literal131=null;
  Token WITH132=null;
  Token TTL133=null;
  Token char_literal134=null;
  CliParser.value_return objectValue=null;
  CliParser.columnFamilyExpr_return columnFamilyExpr130=null;
  CommonTree ttlValue_tree=null;
  CommonTree SET129_tree=null;
  CommonTree char_literal131_tree=null;
  CommonTree WITH132_tree=null;
  CommonTree TTL133_tree=null;
  CommonTree char_literal134_tree=null;
  RewriteRuleTokenStream stream_IntegerPositiveLiteral=new RewriteRuleTokenStream(adaptor,"token IntegerPositiveLiteral");
  RewriteRuleTokenStream stream_SET=new RewriteRuleTokenStream(adaptor,"token SET");
  RewriteRuleTokenStream stream_107=new RewriteRuleTokenStream(adaptor,"token 107");
  RewriteRuleTokenStream stream_WITH=new RewriteRuleTokenStream(adaptor,"token WITH");
  RewriteRuleTokenStream stream_TTL=new RewriteRuleTokenStream(adaptor,"token TTL");
  RewriteRuleSubtreeStream stream_columnFamilyExpr=new RewriteRuleSubtreeStream(adaptor,"rule columnFamilyExpr");
  RewriteRuleSubtreeStream stream_value=new RewriteRuleSubtreeStream(adaptor,"rule value");
  try {
{
      SET129=(Token)match(input,SET,FOLLOW_SET_in_setStatement1816);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_SET.add(SET129);
      pushFollow(FOLLOW_columnFamilyExpr_in_setStatement1818);
      columnFamilyExpr130=columnFamilyExpr();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_columnFamilyExpr.add(columnFamilyExpr130.getTree());
      char_literal131=(Token)match(input,107,FOLLOW_107_in_setStatement1820);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_107.add(char_literal131);
      pushFollow(FOLLOW_value_in_setStatement1824);
      objectValue=value();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_value.add(objectValue.getTree());
      int alt13=2;
      int LA13_0=input.LA(1);
      if ((LA13_0 == WITH)) {
        alt13=1;
      }
switch (alt13) {
case 1:
{
          WITH132=(Token)match(input,WITH,FOLLOW_WITH_in_setStatement1827);
          if (state.failed)           return retval;
          if (state.backtracking == 0)           stream_WITH.add(WITH132);
          TTL133=(Token)match(input,TTL,FOLLOW_TTL_in_setStatement1829);
          if (state.failed)           return retval;
          if (state.backtracking == 0)           stream_TTL.add(TTL133);
          char_literal134=(Token)match(input,107,FOLLOW_107_in_setStatement1831);
          if (state.failed)           return retval;
          if (state.backtracking == 0)           stream_107.add(char_literal134);
          ttlValue=(Token)match(input,IntegerPositiveLiteral,FOLLOW_IntegerPositiveLiteral_in_setStatement1835);
          if (state.failed)           return retval;
          if (state.backtracking == 0)           stream_IntegerPositiveLiteral.add(ttlValue);
        }
      break;
  }
  if (state.backtracking == 0) {
    retval.tree=root_0;
    RewriteRuleTokenStream stream_ttlValue=new RewriteRuleTokenStream(adaptor,"token ttlValue",ttlValue);
    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
    RewriteRuleSubtreeStream stream_objectValue=new RewriteRuleSubtreeStream(adaptor,"rule objectValue",objectValue != null ? objectValue.tree : null);
    root_0=(CommonTree)adaptor.nil();
{
{
        CommonTree root_1=(CommonTree)adaptor.nil();
        root_1=(CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NODE_THRIFT_SET,"NODE_THRIFT_SET"),root_1);
        adaptor.addChild(root_1,stream_columnFamilyExpr.nextTree());
        adaptor.addChild(root_1,stream_objectValue.nextTree());
        if (stream_ttlValue.hasNext()) {
          adaptor.addChild(root_1,stream_ttlValue.nextNode());
        }
        stream_ttlValue.reset();
        adaptor.addChild(root_0,root_1);
      }
    }
    retval.tree=root_0;
  }
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
  retval.tree=(CommonTree)adaptor.rulePostProcessing(root_0);
  adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(CommonTree)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
