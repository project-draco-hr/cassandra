{
  CliParser.assumeStatement_return retval=new CliParser.assumeStatement_return();
  retval.start=input.LT(1);
  CommonTree root_0=null;
  Token assumptionElement=null;
  Token defaultType=null;
  Token ASSUME154=null;
  Token string_literal156=null;
  CliParser.columnFamily_return columnFamily155=null;
  CommonTree assumptionElement_tree=null;
  CommonTree defaultType_tree=null;
  CommonTree ASSUME154_tree=null;
  CommonTree string_literal156_tree=null;
  RewriteRuleTokenStream stream_105=new RewriteRuleTokenStream(adaptor,"token 105");
  RewriteRuleTokenStream stream_ASSUME=new RewriteRuleTokenStream(adaptor,"token ASSUME");
  RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
  RewriteRuleSubtreeStream stream_columnFamily=new RewriteRuleSubtreeStream(adaptor,"rule columnFamily");
  try {
{
      ASSUME154=(Token)match(input,ASSUME,FOLLOW_ASSUME_in_assumeStatement2174);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_ASSUME.add(ASSUME154);
      pushFollow(FOLLOW_columnFamily_in_assumeStatement2176);
      columnFamily155=columnFamily();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_columnFamily.add(columnFamily155.getTree());
      assumptionElement=(Token)match(input,Identifier,FOLLOW_Identifier_in_assumeStatement2180);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_Identifier.add(assumptionElement);
      string_literal156=(Token)match(input,105,FOLLOW_105_in_assumeStatement2182);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_105.add(string_literal156);
      defaultType=(Token)match(input,Identifier,FOLLOW_Identifier_in_assumeStatement2186);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_Identifier.add(defaultType);
      if (state.backtracking == 0) {
        retval.tree=root_0;
        RewriteRuleTokenStream stream_defaultType=new RewriteRuleTokenStream(adaptor,"token defaultType",defaultType);
        RewriteRuleTokenStream stream_assumptionElement=new RewriteRuleTokenStream(adaptor,"token assumptionElement",assumptionElement);
        RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
        root_0=(CommonTree)adaptor.nil();
{
{
            CommonTree root_1=(CommonTree)adaptor.nil();
            root_1=(CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NODE_ASSUME,"NODE_ASSUME"),root_1);
            adaptor.addChild(root_1,stream_columnFamily.nextTree());
            adaptor.addChild(root_1,stream_assumptionElement.nextNode());
            adaptor.addChild(root_1,stream_defaultType.nextNode());
            adaptor.addChild(root_0,root_1);
          }
        }
        retval.tree=root_0;
      }
    }
    retval.stop=input.LT(-1);
    if (state.backtracking == 0) {
      retval.tree=(CommonTree)adaptor.rulePostProcessing(root_0);
      adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
    }
  }
 catch (  RecognitionException re) {
    reportError(re);
    recover(input,re);
    retval.tree=(CommonTree)adaptor.errorNode(input,retval.start,input.LT(-1),re);
  }
 finally {
  }
  return retval;
}
