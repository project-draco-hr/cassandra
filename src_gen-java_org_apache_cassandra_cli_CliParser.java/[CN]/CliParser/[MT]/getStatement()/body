{
  CliParser.getStatement_return retval=new CliParser.getStatement_return();
  retval.start=input.LT(1);
  CommonTree root_0=null;
  Token limit=null;
  Token GET112=null;
  Token string_literal114=null;
  Token string_literal116=null;
  Token GET117=null;
  Token string_literal119=null;
  Token string_literal121=null;
  Token string_literal123=null;
  CliParser.columnFamilyExpr_return columnFamilyExpr113=null;
  CliParser.typeIdentifier_return typeIdentifier115=null;
  CliParser.columnFamily_return columnFamily118=null;
  CliParser.getCondition_return getCondition120=null;
  CliParser.getCondition_return getCondition122=null;
  CommonTree limit_tree=null;
  CommonTree GET112_tree=null;
  CommonTree string_literal114_tree=null;
  CommonTree string_literal116_tree=null;
  CommonTree GET117_tree=null;
  CommonTree string_literal119_tree=null;
  CommonTree string_literal121_tree=null;
  CommonTree string_literal123_tree=null;
  RewriteRuleTokenStream stream_IntegerPositiveLiteral=new RewriteRuleTokenStream(adaptor,"token IntegerPositiveLiteral");
  RewriteRuleTokenStream stream_GET=new RewriteRuleTokenStream(adaptor,"token GET");
  RewriteRuleTokenStream stream_AND=new RewriteRuleTokenStream(adaptor,"token AND");
  RewriteRuleTokenStream stream_106=new RewriteRuleTokenStream(adaptor,"token 106");
  RewriteRuleTokenStream stream_105=new RewriteRuleTokenStream(adaptor,"token 105");
  RewriteRuleTokenStream stream_LIMIT=new RewriteRuleTokenStream(adaptor,"token LIMIT");
  RewriteRuleSubtreeStream stream_typeIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule typeIdentifier");
  RewriteRuleSubtreeStream stream_getCondition=new RewriteRuleSubtreeStream(adaptor,"rule getCondition");
  RewriteRuleSubtreeStream stream_columnFamilyExpr=new RewriteRuleSubtreeStream(adaptor,"rule columnFamilyExpr");
  RewriteRuleSubtreeStream stream_columnFamily=new RewriteRuleSubtreeStream(adaptor,"rule columnFamily");
  try {
    int alt12=2;
    int LA12_0=input.LA(1);
    if ((LA12_0 == GET)) {
      int LA12_1=input.LA(2);
      if ((LA12_1 == Identifier)) {
        int LA12_2=input.LA(3);
        if ((LA12_2 == 113)) {
          alt12=1;
        }
 else         if ((LA12_2 == 106)) {
          alt12=2;
        }
 else {
          if (state.backtracking > 0) {
            state.failed=true;
            return retval;
          }
          NoViableAltException nvae=new NoViableAltException("",12,2,input);
          throw nvae;
        }
      }
 else {
        if (state.backtracking > 0) {
          state.failed=true;
          return retval;
        }
        NoViableAltException nvae=new NoViableAltException("",12,1,input);
        throw nvae;
      }
    }
 else {
      if (state.backtracking > 0) {
        state.failed=true;
        return retval;
      }
      NoViableAltException nvae=new NoViableAltException("",12,0,input);
      throw nvae;
    }
switch (alt12) {
case 1:
{
        GET112=(Token)match(input,GET,FOLLOW_GET_in_getStatement1584);
        if (state.failed)         return retval;
        if (state.backtracking == 0)         stream_GET.add(GET112);
        pushFollow(FOLLOW_columnFamilyExpr_in_getStatement1586);
        columnFamilyExpr113=columnFamilyExpr();
        state._fsp--;
        if (state.failed)         return retval;
        if (state.backtracking == 0)         stream_columnFamilyExpr.add(columnFamilyExpr113.getTree());
        int alt8=2;
        int LA8_0=input.LA(1);
        if ((LA8_0 == 105)) {
          alt8=1;
        }
switch (alt8) {
case 1:
{
            string_literal114=(Token)match(input,105,FOLLOW_105_in_getStatement1589);
            if (state.failed)             return retval;
            if (state.backtracking == 0)             stream_105.add(string_literal114);
            pushFollow(FOLLOW_typeIdentifier_in_getStatement1591);
            typeIdentifier115=typeIdentifier();
            state._fsp--;
            if (state.failed)             return retval;
            if (state.backtracking == 0)             stream_typeIdentifier.add(typeIdentifier115.getTree());
          }
        break;
    }
    int alt9=2;
    int LA9_0=input.LA(1);
    if ((LA9_0 == LIMIT)) {
      alt9=1;
    }
switch (alt9) {
case 1:
{
        string_literal116=(Token)match(input,LIMIT,FOLLOW_LIMIT_in_getStatement1596);
        if (state.failed)         return retval;
        if (state.backtracking == 0)         stream_LIMIT.add(string_literal116);
        limit=(Token)match(input,IntegerPositiveLiteral,FOLLOW_IntegerPositiveLiteral_in_getStatement1600);
        if (state.failed)         return retval;
        if (state.backtracking == 0)         stream_IntegerPositiveLiteral.add(limit);
      }
    break;
}
if (state.backtracking == 0) {
  retval.tree=root_0;
  RewriteRuleTokenStream stream_limit=new RewriteRuleTokenStream(adaptor,"token limit",limit);
  RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
  root_0=(CommonTree)adaptor.nil();
{
{
      CommonTree root_1=(CommonTree)adaptor.nil();
      root_1=(CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NODE_THRIFT_GET,"NODE_THRIFT_GET"),root_1);
      adaptor.addChild(root_1,stream_columnFamilyExpr.nextTree());
      if (stream_typeIdentifier.hasNext()) {
{
          CommonTree root_2=(CommonTree)adaptor.nil();
          root_2=(CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CONVERT_TO_TYPE,"CONVERT_TO_TYPE"),root_2);
          adaptor.addChild(root_2,stream_typeIdentifier.nextTree());
          adaptor.addChild(root_1,root_2);
        }
      }
      stream_typeIdentifier.reset();
      if (stream_limit.hasNext()) {
{
          CommonTree root_2=(CommonTree)adaptor.nil();
          root_2=(CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NODE_LIMIT,"NODE_LIMIT"),root_2);
          adaptor.addChild(root_2,stream_limit.nextNode());
          adaptor.addChild(root_1,root_2);
        }
      }
      stream_limit.reset();
      adaptor.addChild(root_0,root_1);
    }
  }
  retval.tree=root_0;
}
}
break;
case 2:
{
GET117=(Token)match(input,GET,FOLLOW_GET_in_getStatement1645);
if (state.failed) return retval;
if (state.backtracking == 0) stream_GET.add(GET117);
pushFollow(FOLLOW_columnFamily_in_getStatement1647);
columnFamily118=columnFamily();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) stream_columnFamily.add(columnFamily118.getTree());
string_literal119=(Token)match(input,106,FOLLOW_106_in_getStatement1649);
if (state.failed) return retval;
if (state.backtracking == 0) stream_106.add(string_literal119);
pushFollow(FOLLOW_getCondition_in_getStatement1651);
getCondition120=getCondition();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) stream_getCondition.add(getCondition120.getTree());
loop10: do {
int alt10=2;
int LA10_0=input.LA(1);
if ((LA10_0 == AND)) {
alt10=1;
}
switch (alt10) {
case 1:
{
  string_literal121=(Token)match(input,AND,FOLLOW_AND_in_getStatement1654);
  if (state.failed)   return retval;
  if (state.backtracking == 0)   stream_AND.add(string_literal121);
  pushFollow(FOLLOW_getCondition_in_getStatement1656);
  getCondition122=getCondition();
  state._fsp--;
  if (state.failed)   return retval;
  if (state.backtracking == 0)   stream_getCondition.add(getCondition122.getTree());
}
break;
default :
break loop10;
}
}
 while (true);
int alt11=2;
int LA11_0=input.LA(1);
if ((LA11_0 == LIMIT)) {
alt11=1;
}
switch (alt11) {
case 1:
{
string_literal123=(Token)match(input,LIMIT,FOLLOW_LIMIT_in_getStatement1661);
if (state.failed) return retval;
if (state.backtracking == 0) stream_LIMIT.add(string_literal123);
limit=(Token)match(input,IntegerPositiveLiteral,FOLLOW_IntegerPositiveLiteral_in_getStatement1665);
if (state.failed) return retval;
if (state.backtracking == 0) stream_IntegerPositiveLiteral.add(limit);
}
break;
}
if (state.backtracking == 0) {
retval.tree=root_0;
RewriteRuleTokenStream stream_limit=new RewriteRuleTokenStream(adaptor,"token limit",limit);
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
root_0=(CommonTree)adaptor.nil();
{
{
CommonTree root_1=(CommonTree)adaptor.nil();
root_1=(CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NODE_THRIFT_GET_WITH_CONDITIONS,"NODE_THRIFT_GET_WITH_CONDITIONS"),root_1);
adaptor.addChild(root_1,stream_columnFamily.nextTree());
{
CommonTree root_2=(CommonTree)adaptor.nil();
root_2=(CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CONDITIONS,"CONDITIONS"),root_2);
if (!(stream_getCondition.hasNext())) {
throw new RewriteEarlyExitException();
}
while (stream_getCondition.hasNext()) {
adaptor.addChild(root_2,stream_getCondition.nextTree());
}
stream_getCondition.reset();
adaptor.addChild(root_1,root_2);
}
if (stream_limit.hasNext()) {
{
CommonTree root_2=(CommonTree)adaptor.nil();
root_2=(CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NODE_LIMIT,"NODE_LIMIT"),root_2);
adaptor.addChild(root_2,stream_limit.nextNode());
adaptor.addChild(root_1,root_2);
}
}
stream_limit.reset();
adaptor.addChild(root_0,root_1);
}
}
retval.tree=root_0;
}
}
break;
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(CommonTree)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(CommonTree)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
