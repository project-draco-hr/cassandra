{
  CliParser.incrStatement_return retval=new CliParser.incrStatement_return();
  retval.start=input.LT(1);
  CommonTree root_0=null;
  Token INCR135=null;
  Token BY137=null;
  Token DECR138=null;
  Token BY140=null;
  CliParser.incrementValue_return byValue=null;
  CliParser.columnFamilyExpr_return columnFamilyExpr136=null;
  CliParser.columnFamilyExpr_return columnFamilyExpr139=null;
  CommonTree INCR135_tree=null;
  CommonTree BY137_tree=null;
  CommonTree DECR138_tree=null;
  CommonTree BY140_tree=null;
  RewriteRuleTokenStream stream_DECR=new RewriteRuleTokenStream(adaptor,"token DECR");
  RewriteRuleTokenStream stream_BY=new RewriteRuleTokenStream(adaptor,"token BY");
  RewriteRuleTokenStream stream_INCR=new RewriteRuleTokenStream(adaptor,"token INCR");
  RewriteRuleSubtreeStream stream_columnFamilyExpr=new RewriteRuleSubtreeStream(adaptor,"rule columnFamilyExpr");
  RewriteRuleSubtreeStream stream_incrementValue=new RewriteRuleSubtreeStream(adaptor,"rule incrementValue");
  try {
    int alt16=2;
    int LA16_0=input.LA(1);
    if ((LA16_0 == INCR)) {
      alt16=1;
    }
 else     if ((LA16_0 == DECR)) {
      alt16=2;
    }
 else {
      if (state.backtracking > 0) {
        state.failed=true;
        return retval;
      }
      NoViableAltException nvae=new NoViableAltException("",16,0,input);
      throw nvae;
    }
switch (alt16) {
case 1:
{
        INCR135=(Token)match(input,INCR,FOLLOW_INCR_in_incrStatement1881);
        if (state.failed)         return retval;
        if (state.backtracking == 0)         stream_INCR.add(INCR135);
        pushFollow(FOLLOW_columnFamilyExpr_in_incrStatement1883);
        columnFamilyExpr136=columnFamilyExpr();
        state._fsp--;
        if (state.failed)         return retval;
        if (state.backtracking == 0)         stream_columnFamilyExpr.add(columnFamilyExpr136.getTree());
        int alt14=2;
        int LA14_0=input.LA(1);
        if ((LA14_0 == BY)) {
          alt14=1;
        }
switch (alt14) {
case 1:
{
            BY137=(Token)match(input,BY,FOLLOW_BY_in_incrStatement1886);
            if (state.failed)             return retval;
            if (state.backtracking == 0)             stream_BY.add(BY137);
            pushFollow(FOLLOW_incrementValue_in_incrStatement1890);
            byValue=incrementValue();
            state._fsp--;
            if (state.failed)             return retval;
            if (state.backtracking == 0)             stream_incrementValue.add(byValue.getTree());
          }
        break;
    }
    if (state.backtracking == 0) {
      retval.tree=root_0;
      RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
      RewriteRuleSubtreeStream stream_byValue=new RewriteRuleSubtreeStream(adaptor,"rule byValue",byValue != null ? byValue.tree : null);
      root_0=(CommonTree)adaptor.nil();
{
{
          CommonTree root_1=(CommonTree)adaptor.nil();
          root_1=(CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NODE_THRIFT_INCR,"NODE_THRIFT_INCR"),root_1);
          adaptor.addChild(root_1,stream_columnFamilyExpr.nextTree());
          if (stream_byValue.hasNext()) {
            adaptor.addChild(root_1,stream_byValue.nextTree());
          }
          stream_byValue.reset();
          adaptor.addChild(root_0,root_1);
        }
      }
      retval.tree=root_0;
    }
  }
break;
case 2:
{
DECR138=(Token)match(input,DECR,FOLLOW_DECR_in_incrStatement1924);
if (state.failed) return retval;
if (state.backtracking == 0) stream_DECR.add(DECR138);
pushFollow(FOLLOW_columnFamilyExpr_in_incrStatement1926);
columnFamilyExpr139=columnFamilyExpr();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) stream_columnFamilyExpr.add(columnFamilyExpr139.getTree());
int alt15=2;
int LA15_0=input.LA(1);
if ((LA15_0 == BY)) {
  alt15=1;
}
switch (alt15) {
case 1:
{
    BY140=(Token)match(input,BY,FOLLOW_BY_in_incrStatement1929);
    if (state.failed)     return retval;
    if (state.backtracking == 0)     stream_BY.add(BY140);
    pushFollow(FOLLOW_incrementValue_in_incrStatement1933);
    byValue=incrementValue();
    state._fsp--;
    if (state.failed)     return retval;
    if (state.backtracking == 0)     stream_incrementValue.add(byValue.getTree());
  }
break;
}
if (state.backtracking == 0) {
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
RewriteRuleSubtreeStream stream_byValue=new RewriteRuleSubtreeStream(adaptor,"rule byValue",byValue != null ? byValue.tree : null);
root_0=(CommonTree)adaptor.nil();
{
{
  CommonTree root_1=(CommonTree)adaptor.nil();
  root_1=(CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NODE_THRIFT_DECR,"NODE_THRIFT_DECR"),root_1);
  adaptor.addChild(root_1,stream_columnFamilyExpr.nextTree());
  if (stream_byValue.hasNext()) {
    adaptor.addChild(root_1,stream_byValue.nextTree());
  }
  stream_byValue.reset();
  adaptor.addChild(root_0,root_1);
}
}
retval.tree=root_0;
}
}
break;
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(CommonTree)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(CommonTree)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
