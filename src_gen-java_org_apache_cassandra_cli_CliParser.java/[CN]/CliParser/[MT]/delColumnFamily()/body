{
  CliParser.delColumnFamily_return retval=new CliParser.delColumnFamily_return();
  retval.start=input.LT(1);
  CommonTree root_0=null;
  Token DROP178=null;
  Token COLUMN179=null;
  Token FAMILY180=null;
  CliParser.columnFamily_return columnFamily181=null;
  CommonTree DROP178_tree=null;
  CommonTree COLUMN179_tree=null;
  CommonTree FAMILY180_tree=null;
  RewriteRuleTokenStream stream_FAMILY=new RewriteRuleTokenStream(adaptor,"token FAMILY");
  RewriteRuleTokenStream stream_DROP=new RewriteRuleTokenStream(adaptor,"token DROP");
  RewriteRuleTokenStream stream_COLUMN=new RewriteRuleTokenStream(adaptor,"token COLUMN");
  RewriteRuleSubtreeStream stream_columnFamily=new RewriteRuleSubtreeStream(adaptor,"rule columnFamily");
  try {
{
      DROP178=(Token)match(input,DROP,FOLLOW_DROP_in_delColumnFamily2490);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_DROP.add(DROP178);
      COLUMN179=(Token)match(input,COLUMN,FOLLOW_COLUMN_in_delColumnFamily2492);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_COLUMN.add(COLUMN179);
      FAMILY180=(Token)match(input,FAMILY,FOLLOW_FAMILY_in_delColumnFamily2494);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_FAMILY.add(FAMILY180);
      pushFollow(FOLLOW_columnFamily_in_delColumnFamily2496);
      columnFamily181=columnFamily();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_columnFamily.add(columnFamily181.getTree());
      if (state.backtracking == 0) {
        retval.tree=root_0;
        RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
        root_0=(CommonTree)adaptor.nil();
{
{
            CommonTree root_1=(CommonTree)adaptor.nil();
            root_1=(CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NODE_DEL_COLUMN_FAMILY,"NODE_DEL_COLUMN_FAMILY"),root_1);
            adaptor.addChild(root_1,stream_columnFamily.nextTree());
            adaptor.addChild(root_0,root_1);
          }
        }
        retval.tree=root_0;
      }
    }
    retval.stop=input.LT(-1);
    if (state.backtracking == 0) {
      retval.tree=(CommonTree)adaptor.rulePostProcessing(root_0);
      adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
    }
  }
 catch (  RecognitionException re) {
    reportError(re);
    recover(input,re);
    retval.tree=(CommonTree)adaptor.errorNode(input,retval.start,input.LT(-1),re);
  }
 finally {
  }
  return retval;
}
