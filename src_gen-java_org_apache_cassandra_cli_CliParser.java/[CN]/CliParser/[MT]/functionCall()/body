{
  CliParser.functionCall_return retval=new CliParser.functionCall_return();
  retval.start=input.LT(1);
  CommonTree root_0=null;
  Token functionName=null;
  Token char_literal262=null;
  Token char_literal264=null;
  CliParser.functionArgument_return functionArgument263=null;
  CommonTree functionName_tree=null;
  CommonTree char_literal262_tree=null;
  CommonTree char_literal264_tree=null;
  RewriteRuleTokenStream stream_120=new RewriteRuleTokenStream(adaptor,"token 120");
  RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
  RewriteRuleTokenStream stream_119=new RewriteRuleTokenStream(adaptor,"token 119");
  RewriteRuleSubtreeStream stream_functionArgument=new RewriteRuleSubtreeStream(adaptor,"rule functionArgument");
  try {
{
      functionName=(Token)match(input,Identifier,FOLLOW_Identifier_in_functionCall3483);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_Identifier.add(functionName);
      char_literal262=(Token)match(input,119,FOLLOW_119_in_functionCall3485);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_119.add(char_literal262);
      int alt36=2;
      int LA36_0=input.LA(1);
      if (((LA36_0 >= IntegerPositiveLiteral && LA36_0 <= StringLiteral) || LA36_0 == IntegerNegativeLiteral)) {
        alt36=1;
      }
switch (alt36) {
case 1:
{
          pushFollow(FOLLOW_functionArgument_in_functionCall3487);
          functionArgument263=functionArgument();
          state._fsp--;
          if (state.failed)           return retval;
          if (state.backtracking == 0)           stream_functionArgument.add(functionArgument263.getTree());
        }
      break;
  }
  char_literal264=(Token)match(input,120,FOLLOW_120_in_functionCall3490);
  if (state.failed)   return retval;
  if (state.backtracking == 0)   stream_120.add(char_literal264);
  if (state.backtracking == 0) {
    retval.tree=root_0;
    RewriteRuleTokenStream stream_functionName=new RewriteRuleTokenStream(adaptor,"token functionName",functionName);
    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
    root_0=(CommonTree)adaptor.nil();
{
{
        CommonTree root_1=(CommonTree)adaptor.nil();
        root_1=(CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FUNCTION_CALL,"FUNCTION_CALL"),root_1);
        adaptor.addChild(root_1,stream_functionName.nextNode());
        if (stream_functionArgument.hasNext()) {
          adaptor.addChild(root_1,stream_functionArgument.nextTree());
        }
        stream_functionArgument.reset();
        adaptor.addChild(root_0,root_1);
      }
    }
    retval.tree=root_0;
  }
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
  retval.tree=(CommonTree)adaptor.rulePostProcessing(root_0);
  adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(CommonTree)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
