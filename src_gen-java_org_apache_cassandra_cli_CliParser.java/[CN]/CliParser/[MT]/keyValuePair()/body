{
  CliParser.keyValuePair_return retval=new CliParser.keyValuePair_return();
  retval.start=input.LT(1);
  CommonTree root_0=null;
  Token char_literal206=null;
  CliParser.attr_name_return attr_name205=null;
  CliParser.attrValue_return attrValue207=null;
  CommonTree char_literal206_tree=null;
  RewriteRuleTokenStream stream_107=new RewriteRuleTokenStream(adaptor,"token 107");
  RewriteRuleSubtreeStream stream_attr_name=new RewriteRuleSubtreeStream(adaptor,"rule attr_name");
  RewriteRuleSubtreeStream stream_attrValue=new RewriteRuleSubtreeStream(adaptor,"rule attrValue");
  try {
{
      pushFollow(FOLLOW_attr_name_in_keyValuePair2857);
      attr_name205=attr_name();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_attr_name.add(attr_name205.getTree());
      char_literal206=(Token)match(input,107,FOLLOW_107_in_keyValuePair2859);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_107.add(char_literal206);
      pushFollow(FOLLOW_attrValue_in_keyValuePair2861);
      attrValue207=attrValue();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_attrValue.add(attrValue207.getTree());
      if (state.backtracking == 0) {
        retval.tree=root_0;
        RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
        root_0=(CommonTree)adaptor.nil();
{
          adaptor.addChild(root_0,stream_attr_name.nextTree());
          adaptor.addChild(root_0,stream_attrValue.nextTree());
        }
        retval.tree=root_0;
      }
    }
    retval.stop=input.LT(-1);
    if (state.backtracking == 0) {
      retval.tree=(CommonTree)adaptor.rulePostProcessing(root_0);
      adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
    }
  }
 catch (  RecognitionException re) {
    reportError(re);
    recover(input,re);
    retval.tree=(CommonTree)adaptor.errorNode(input,retval.start,input.LT(-1),re);
  }
 finally {
  }
  return retval;
}
