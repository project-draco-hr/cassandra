{
  CliParser.rowKey_return retval=new CliParser.rowKey_return();
  retval.start=input.LT(1);
  CommonTree root_0=null;
  Token Identifier252=null;
  Token StringLiteral253=null;
  Token IntegerPositiveLiteral254=null;
  Token IntegerNegativeLiteral255=null;
  CliParser.functionCall_return functionCall256=null;
  CommonTree Identifier252_tree=null;
  CommonTree StringLiteral253_tree=null;
  CommonTree IntegerPositiveLiteral254_tree=null;
  CommonTree IntegerNegativeLiteral255_tree=null;
  try {
{
      root_0=(CommonTree)adaptor.nil();
      int alt34=5;
switch (input.LA(1)) {
case Identifier:
{
          int LA34_1=input.LA(2);
          if ((LA34_1 == 119)) {
            alt34=5;
          }
 else           if ((LA34_1 == 115 || LA34_1 == 118)) {
            alt34=1;
          }
 else {
            if (state.backtracking > 0) {
              state.failed=true;
              return retval;
            }
            NoViableAltException nvae=new NoViableAltException("",34,1,input);
            throw nvae;
          }
        }
      break;
case StringLiteral:
{
      alt34=2;
    }
  break;
case IntegerPositiveLiteral:
{
  alt34=3;
}
break;
case IntegerNegativeLiteral:
{
alt34=4;
}
break;
default :
if (state.backtracking > 0) {
state.failed=true;
return retval;
}
NoViableAltException nvae=new NoViableAltException("",34,0,input);
throw nvae;
}
switch (alt34) {
case 1:
{
Identifier252=(Token)match(input,Identifier,FOLLOW_Identifier_in_rowKey3416);
if (state.failed) return retval;
if (state.backtracking == 0) {
Identifier252_tree=(CommonTree)adaptor.create(Identifier252);
adaptor.addChild(root_0,Identifier252_tree);
}
}
break;
case 2:
{
StringLiteral253=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_rowKey3420);
if (state.failed) return retval;
if (state.backtracking == 0) {
StringLiteral253_tree=(CommonTree)adaptor.create(StringLiteral253);
adaptor.addChild(root_0,StringLiteral253_tree);
}
}
break;
case 3:
{
IntegerPositiveLiteral254=(Token)match(input,IntegerPositiveLiteral,FOLLOW_IntegerPositiveLiteral_in_rowKey3424);
if (state.failed) return retval;
if (state.backtracking == 0) {
IntegerPositiveLiteral254_tree=(CommonTree)adaptor.create(IntegerPositiveLiteral254);
adaptor.addChild(root_0,IntegerPositiveLiteral254_tree);
}
}
break;
case 4:
{
IntegerNegativeLiteral255=(Token)match(input,IntegerNegativeLiteral,FOLLOW_IntegerNegativeLiteral_in_rowKey3428);
if (state.failed) return retval;
if (state.backtracking == 0) {
IntegerNegativeLiteral255_tree=(CommonTree)adaptor.create(IntegerNegativeLiteral255);
adaptor.addChild(root_0,IntegerNegativeLiteral255_tree);
}
}
break;
case 5:
{
pushFollow(FOLLOW_functionCall_in_rowKey3432);
functionCall256=functionCall();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,functionCall256.getTree());
}
break;
}
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(CommonTree)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(CommonTree)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
