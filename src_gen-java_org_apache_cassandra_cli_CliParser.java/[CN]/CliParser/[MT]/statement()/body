{
  CliParser.statement_return retval=new CliParser.statement_return();
  retval.start=input.LT(1);
  CommonTree root_0=null;
  CliParser.connectStatement_return connectStatement4=null;
  CliParser.exitStatement_return exitStatement5=null;
  CliParser.countStatement_return countStatement6=null;
  CliParser.describeTable_return describeTable7=null;
  CliParser.describeCluster_return describeCluster8=null;
  CliParser.addKeyspace_return addKeyspace9=null;
  CliParser.addColumnFamily_return addColumnFamily10=null;
  CliParser.updateKeyspace_return updateKeyspace11=null;
  CliParser.updateColumnFamily_return updateColumnFamily12=null;
  CliParser.delColumnFamily_return delColumnFamily13=null;
  CliParser.delKeyspace_return delKeyspace14=null;
  CliParser.useKeyspace_return useKeyspace15=null;
  CliParser.delStatement_return delStatement16=null;
  CliParser.getStatement_return getStatement17=null;
  CliParser.helpStatement_return helpStatement18=null;
  CliParser.setStatement_return setStatement19=null;
  CliParser.incrStatement_return incrStatement20=null;
  CliParser.showStatement_return showStatement21=null;
  CliParser.listStatement_return listStatement22=null;
  CliParser.truncateStatement_return truncateStatement23=null;
  CliParser.assumeStatement_return assumeStatement24=null;
  CliParser.consistencyLevelStatement_return consistencyLevelStatement25=null;
  CliParser.dropIndex_return dropIndex26=null;
  try {
    int alt2=24;
    alt2=dfa2.predict(input);
switch (alt2) {
case 1:
{
        root_0=(CommonTree)adaptor.nil();
        pushFollow(FOLLOW_connectStatement_in_statement435);
        connectStatement4=connectStatement();
        state._fsp--;
        if (state.failed)         return retval;
        if (state.backtracking == 0)         adaptor.addChild(root_0,connectStatement4.getTree());
      }
    break;
case 2:
{
    root_0=(CommonTree)adaptor.nil();
    pushFollow(FOLLOW_exitStatement_in_statement443);
    exitStatement5=exitStatement();
    state._fsp--;
    if (state.failed)     return retval;
    if (state.backtracking == 0)     adaptor.addChild(root_0,exitStatement5.getTree());
  }
break;
case 3:
{
root_0=(CommonTree)adaptor.nil();
pushFollow(FOLLOW_countStatement_in_statement451);
countStatement6=countStatement();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,countStatement6.getTree());
}
break;
case 4:
{
root_0=(CommonTree)adaptor.nil();
pushFollow(FOLLOW_describeTable_in_statement459);
describeTable7=describeTable();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,describeTable7.getTree());
}
break;
case 5:
{
root_0=(CommonTree)adaptor.nil();
pushFollow(FOLLOW_describeCluster_in_statement467);
describeCluster8=describeCluster();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,describeCluster8.getTree());
}
break;
case 6:
{
root_0=(CommonTree)adaptor.nil();
pushFollow(FOLLOW_addKeyspace_in_statement475);
addKeyspace9=addKeyspace();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,addKeyspace9.getTree());
}
break;
case 7:
{
root_0=(CommonTree)adaptor.nil();
pushFollow(FOLLOW_addColumnFamily_in_statement483);
addColumnFamily10=addColumnFamily();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,addColumnFamily10.getTree());
}
break;
case 8:
{
root_0=(CommonTree)adaptor.nil();
pushFollow(FOLLOW_updateKeyspace_in_statement491);
updateKeyspace11=updateKeyspace();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,updateKeyspace11.getTree());
}
break;
case 9:
{
root_0=(CommonTree)adaptor.nil();
pushFollow(FOLLOW_updateColumnFamily_in_statement499);
updateColumnFamily12=updateColumnFamily();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,updateColumnFamily12.getTree());
}
break;
case 10:
{
root_0=(CommonTree)adaptor.nil();
pushFollow(FOLLOW_delColumnFamily_in_statement507);
delColumnFamily13=delColumnFamily();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,delColumnFamily13.getTree());
}
break;
case 11:
{
root_0=(CommonTree)adaptor.nil();
pushFollow(FOLLOW_delKeyspace_in_statement515);
delKeyspace14=delKeyspace();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,delKeyspace14.getTree());
}
break;
case 12:
{
root_0=(CommonTree)adaptor.nil();
pushFollow(FOLLOW_useKeyspace_in_statement523);
useKeyspace15=useKeyspace();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,useKeyspace15.getTree());
}
break;
case 13:
{
root_0=(CommonTree)adaptor.nil();
pushFollow(FOLLOW_delStatement_in_statement531);
delStatement16=delStatement();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,delStatement16.getTree());
}
break;
case 14:
{
root_0=(CommonTree)adaptor.nil();
pushFollow(FOLLOW_getStatement_in_statement539);
getStatement17=getStatement();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,getStatement17.getTree());
}
break;
case 15:
{
root_0=(CommonTree)adaptor.nil();
pushFollow(FOLLOW_helpStatement_in_statement547);
helpStatement18=helpStatement();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,helpStatement18.getTree());
}
break;
case 16:
{
root_0=(CommonTree)adaptor.nil();
pushFollow(FOLLOW_setStatement_in_statement555);
setStatement19=setStatement();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,setStatement19.getTree());
}
break;
case 17:
{
root_0=(CommonTree)adaptor.nil();
pushFollow(FOLLOW_incrStatement_in_statement563);
incrStatement20=incrStatement();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,incrStatement20.getTree());
}
break;
case 18:
{
root_0=(CommonTree)adaptor.nil();
pushFollow(FOLLOW_showStatement_in_statement571);
showStatement21=showStatement();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,showStatement21.getTree());
}
break;
case 19:
{
root_0=(CommonTree)adaptor.nil();
pushFollow(FOLLOW_listStatement_in_statement579);
listStatement22=listStatement();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,listStatement22.getTree());
}
break;
case 20:
{
root_0=(CommonTree)adaptor.nil();
pushFollow(FOLLOW_truncateStatement_in_statement587);
truncateStatement23=truncateStatement();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,truncateStatement23.getTree());
}
break;
case 21:
{
root_0=(CommonTree)adaptor.nil();
pushFollow(FOLLOW_assumeStatement_in_statement595);
assumeStatement24=assumeStatement();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,assumeStatement24.getTree());
}
break;
case 22:
{
root_0=(CommonTree)adaptor.nil();
pushFollow(FOLLOW_consistencyLevelStatement_in_statement603);
consistencyLevelStatement25=consistencyLevelStatement();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,consistencyLevelStatement25.getTree());
}
break;
case 23:
{
root_0=(CommonTree)adaptor.nil();
pushFollow(FOLLOW_dropIndex_in_statement611);
dropIndex26=dropIndex();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,dropIndex26.getTree());
}
break;
case 24:
{
if (state.backtracking == 0) {
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
root_0=(CommonTree)adaptor.nil();
{
{
CommonTree root_1=(CommonTree)adaptor.nil();
root_1=(CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NODE_NO_OP,"NODE_NO_OP"),root_1);
adaptor.addChild(root_0,root_1);
}
}
retval.tree=root_0;
}
}
break;
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(CommonTree)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(CommonTree)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
