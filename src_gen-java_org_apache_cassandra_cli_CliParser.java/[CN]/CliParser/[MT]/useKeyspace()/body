{
  CliParser.useKeyspace_return retval=new CliParser.useKeyspace_return();
  retval.start=input.LT(1);
  CommonTree root_0=null;
  Token USE197=null;
  CliParser.keyspace_return keyspace198=null;
  CliParser.username_return username199=null;
  CliParser.password_return password200=null;
  CommonTree USE197_tree=null;
  RewriteRuleTokenStream stream_USE=new RewriteRuleTokenStream(adaptor,"token USE");
  RewriteRuleSubtreeStream stream_username=new RewriteRuleSubtreeStream(adaptor,"rule username");
  RewriteRuleSubtreeStream stream_keyspace=new RewriteRuleSubtreeStream(adaptor,"rule keyspace");
  RewriteRuleSubtreeStream stream_password=new RewriteRuleSubtreeStream(adaptor,"rule password");
  try {
{
      USE197=(Token)match(input,USE,FOLLOW_USE_in_useKeyspace2722);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_USE.add(USE197);
      pushFollow(FOLLOW_keyspace_in_useKeyspace2724);
      keyspace198=keyspace();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_keyspace.add(keyspace198.getTree());
      int alt21=2;
      int LA21_0=input.LA(1);
      if ((LA21_0 == Identifier)) {
        alt21=1;
      }
switch (alt21) {
case 1:
{
          pushFollow(FOLLOW_username_in_useKeyspace2728);
          username199=username();
          state._fsp--;
          if (state.failed)           return retval;
          if (state.backtracking == 0)           stream_username.add(username199.getTree());
        }
      break;
  }
  int alt22=2;
  int LA22_0=input.LA(1);
  if ((LA22_0 == StringLiteral)) {
    alt22=1;
  }
switch (alt22) {
case 1:
{
      pushFollow(FOLLOW_password_in_useKeyspace2735);
      password200=password();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_password.add(password200.getTree());
    }
  break;
}
if (state.backtracking == 0) {
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
root_0=(CommonTree)adaptor.nil();
{
{
    CommonTree root_1=(CommonTree)adaptor.nil();
    root_1=(CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NODE_USE_TABLE,"NODE_USE_TABLE"),root_1);
    adaptor.addChild(root_1,stream_keyspace.nextTree());
    if (stream_username.hasNext()) {
      adaptor.addChild(root_1,stream_username.nextTree());
    }
    stream_username.reset();
    if (stream_password.hasNext()) {
      adaptor.addChild(root_1,stream_password.nextTree());
    }
    stream_password.reset();
    adaptor.addChild(root_0,root_1);
  }
}
retval.tree=root_0;
}
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(CommonTree)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(CommonTree)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
