{
  CliParser.addColumnFamily_return retval=new CliParser.addColumnFamily_return();
  retval.start=input.LT(1);
  CommonTree root_0=null;
  Token CREATE164=null;
  Token COLUMN165=null;
  Token FAMILY166=null;
  CliParser.keyValuePairExpr_return keyValuePairExpr167=null;
  CommonTree CREATE164_tree=null;
  CommonTree COLUMN165_tree=null;
  CommonTree FAMILY166_tree=null;
  RewriteRuleTokenStream stream_FAMILY=new RewriteRuleTokenStream(adaptor,"token FAMILY");
  RewriteRuleTokenStream stream_CREATE=new RewriteRuleTokenStream(adaptor,"token CREATE");
  RewriteRuleTokenStream stream_COLUMN=new RewriteRuleTokenStream(adaptor,"token COLUMN");
  RewriteRuleSubtreeStream stream_keyValuePairExpr=new RewriteRuleSubtreeStream(adaptor,"rule keyValuePairExpr");
  try {
{
      CREATE164=(Token)match(input,CREATE,FOLLOW_CREATE_in_addColumnFamily2336);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_CREATE.add(CREATE164);
      COLUMN165=(Token)match(input,COLUMN,FOLLOW_COLUMN_in_addColumnFamily2338);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_COLUMN.add(COLUMN165);
      FAMILY166=(Token)match(input,FAMILY,FOLLOW_FAMILY_in_addColumnFamily2340);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_FAMILY.add(FAMILY166);
      pushFollow(FOLLOW_keyValuePairExpr_in_addColumnFamily2342);
      keyValuePairExpr167=keyValuePairExpr();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_keyValuePairExpr.add(keyValuePairExpr167.getTree());
      if (state.backtracking == 0) {
        retval.tree=root_0;
        RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
        root_0=(CommonTree)adaptor.nil();
{
{
            CommonTree root_1=(CommonTree)adaptor.nil();
            root_1=(CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NODE_ADD_COLUMN_FAMILY,"NODE_ADD_COLUMN_FAMILY"),root_1);
            adaptor.addChild(root_1,stream_keyValuePairExpr.nextTree());
            adaptor.addChild(root_0,root_1);
          }
        }
        retval.tree=root_0;
      }
    }
    retval.stop=input.LT(-1);
    if (state.backtracking == 0) {
      retval.tree=(CommonTree)adaptor.rulePostProcessing(root_0);
      adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
    }
  }
 catch (  RecognitionException re) {
    reportError(re);
    recover(input,re);
    retval.tree=(CommonTree)adaptor.errorNode(input,retval.start,input.LT(-1),re);
  }
 finally {
  }
  return retval;
}
