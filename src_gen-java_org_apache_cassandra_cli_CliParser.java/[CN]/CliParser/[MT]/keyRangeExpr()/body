{
  CliParser.keyRangeExpr_return retval=new CliParser.keyRangeExpr_return();
  retval.start=input.LT(1);
  CommonTree root_0=null;
  Token char_literal232=null;
  Token char_literal234=null;
  Token char_literal236=null;
  CliParser.startKey_return startKey233=null;
  CliParser.endKey_return endKey235=null;
  CommonTree char_literal232_tree=null;
  CommonTree char_literal234_tree=null;
  CommonTree char_literal236_tree=null;
  RewriteRuleTokenStream stream_115=new RewriteRuleTokenStream(adaptor,"token 115");
  RewriteRuleTokenStream stream_113=new RewriteRuleTokenStream(adaptor,"token 113");
  RewriteRuleTokenStream stream_118=new RewriteRuleTokenStream(adaptor,"token 118");
  RewriteRuleSubtreeStream stream_endKey=new RewriteRuleSubtreeStream(adaptor,"rule endKey");
  RewriteRuleSubtreeStream stream_startKey=new RewriteRuleSubtreeStream(adaptor,"rule startKey");
  try {
{
      char_literal232=(Token)match(input,113,FOLLOW_113_in_keyRangeExpr3177);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_113.add(char_literal232);
      int alt33=2;
      int LA33_0=input.LA(1);
      if (((LA33_0 >= Identifier && LA33_0 <= StringLiteral) || LA33_0 == 118)) {
        alt33=1;
      }
switch (alt33) {
case 1:
{
          int alt31=2;
          int LA31_0=input.LA(1);
          if (((LA31_0 >= Identifier && LA31_0 <= StringLiteral))) {
            alt31=1;
          }
switch (alt31) {
case 1:
{
              pushFollow(FOLLOW_startKey_in_keyRangeExpr3181);
              startKey233=startKey();
              state._fsp--;
              if (state.failed)               return retval;
              if (state.backtracking == 0)               stream_startKey.add(startKey233.getTree());
            }
          break;
      }
      char_literal234=(Token)match(input,118,FOLLOW_118_in_keyRangeExpr3184);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_118.add(char_literal234);
      int alt32=2;
      int LA32_0=input.LA(1);
      if (((LA32_0 >= Identifier && LA32_0 <= StringLiteral))) {
        alt32=1;
      }
switch (alt32) {
case 1:
{
          pushFollow(FOLLOW_endKey_in_keyRangeExpr3186);
          endKey235=endKey();
          state._fsp--;
          if (state.failed)           return retval;
          if (state.backtracking == 0)           stream_endKey.add(endKey235.getTree());
        }
      break;
  }
}
break;
}
char_literal236=(Token)match(input,115,FOLLOW_115_in_keyRangeExpr3192);
if (state.failed) return retval;
if (state.backtracking == 0) stream_115.add(char_literal236);
if (state.backtracking == 0) {
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
root_0=(CommonTree)adaptor.nil();
{
{
CommonTree root_1=(CommonTree)adaptor.nil();
root_1=(CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NODE_KEY_RANGE,"NODE_KEY_RANGE"),root_1);
if (stream_startKey.hasNext()) {
  adaptor.addChild(root_1,stream_startKey.nextTree());
}
stream_startKey.reset();
if (stream_endKey.hasNext()) {
  adaptor.addChild(root_1,stream_endKey.nextTree());
}
stream_endKey.reset();
adaptor.addChild(root_0,root_1);
}
}
retval.tree=root_0;
}
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(CommonTree)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(CommonTree)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
