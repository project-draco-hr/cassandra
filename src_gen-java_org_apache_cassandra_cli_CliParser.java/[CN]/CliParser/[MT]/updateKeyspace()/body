{
  CliParser.updateKeyspace_return retval=new CliParser.updateKeyspace_return();
  retval.start=input.LT(1);
  CommonTree root_0=null;
  Token UPDATE168=null;
  Token KEYSPACE169=null;
  CliParser.keyValuePairExpr_return keyValuePairExpr170=null;
  CommonTree UPDATE168_tree=null;
  CommonTree KEYSPACE169_tree=null;
  RewriteRuleTokenStream stream_UPDATE=new RewriteRuleTokenStream(adaptor,"token UPDATE");
  RewriteRuleTokenStream stream_KEYSPACE=new RewriteRuleTokenStream(adaptor,"token KEYSPACE");
  RewriteRuleSubtreeStream stream_keyValuePairExpr=new RewriteRuleSubtreeStream(adaptor,"rule keyValuePairExpr");
  try {
{
      UPDATE168=(Token)match(input,UPDATE,FOLLOW_UPDATE_in_updateKeyspace2376);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_UPDATE.add(UPDATE168);
      KEYSPACE169=(Token)match(input,KEYSPACE,FOLLOW_KEYSPACE_in_updateKeyspace2378);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_KEYSPACE.add(KEYSPACE169);
      pushFollow(FOLLOW_keyValuePairExpr_in_updateKeyspace2380);
      keyValuePairExpr170=keyValuePairExpr();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_keyValuePairExpr.add(keyValuePairExpr170.getTree());
      if (state.backtracking == 0) {
        retval.tree=root_0;
        RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
        root_0=(CommonTree)adaptor.nil();
{
{
            CommonTree root_1=(CommonTree)adaptor.nil();
            root_1=(CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NODE_UPDATE_KEYSPACE,"NODE_UPDATE_KEYSPACE"),root_1);
            adaptor.addChild(root_1,stream_keyValuePairExpr.nextTree());
            adaptor.addChild(root_0,root_1);
          }
        }
        retval.tree=root_0;
      }
    }
    retval.stop=input.LT(-1);
    if (state.backtracking == 0) {
      retval.tree=(CommonTree)adaptor.rulePostProcessing(root_0);
      adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
    }
  }
 catch (  RecognitionException re) {
    reportError(re);
    recover(input,re);
    retval.tree=(CommonTree)adaptor.errorNode(input,retval.start,input.LT(-1),re);
  }
 finally {
  }
  return retval;
}
