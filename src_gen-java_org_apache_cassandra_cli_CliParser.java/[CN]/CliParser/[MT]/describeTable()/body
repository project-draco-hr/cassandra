{
  CliParser.describeTable_return retval=new CliParser.describeTable_return();
  retval.start=input.LT(1);
  CommonTree root_0=null;
  Token DESCRIBE192=null;
  Token KEYSPACE193=null;
  CliParser.keyspace_return keyspace194=null;
  CommonTree DESCRIBE192_tree=null;
  CommonTree KEYSPACE193_tree=null;
  RewriteRuleTokenStream stream_DESCRIBE=new RewriteRuleTokenStream(adaptor,"token DESCRIBE");
  RewriteRuleTokenStream stream_KEYSPACE=new RewriteRuleTokenStream(adaptor,"token KEYSPACE");
  RewriteRuleSubtreeStream stream_keyspace=new RewriteRuleSubtreeStream(adaptor,"rule keyspace");
  try {
{
      DESCRIBE192=(Token)match(input,DESCRIBE,FOLLOW_DESCRIBE_in_describeTable2642);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_DESCRIBE.add(DESCRIBE192);
      KEYSPACE193=(Token)match(input,KEYSPACE,FOLLOW_KEYSPACE_in_describeTable2644);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_KEYSPACE.add(KEYSPACE193);
      int alt20=2;
      int LA20_0=input.LA(1);
      if ((LA20_0 == Identifier)) {
        alt20=1;
      }
switch (alt20) {
case 1:
{
          pushFollow(FOLLOW_keyspace_in_describeTable2647);
          keyspace194=keyspace();
          state._fsp--;
          if (state.failed)           return retval;
          if (state.backtracking == 0)           stream_keyspace.add(keyspace194.getTree());
        }
      break;
  }
  if (state.backtracking == 0) {
    retval.tree=root_0;
    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
    root_0=(CommonTree)adaptor.nil();
{
{
        CommonTree root_1=(CommonTree)adaptor.nil();
        root_1=(CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NODE_DESCRIBE_TABLE,"NODE_DESCRIBE_TABLE"),root_1);
        if (stream_keyspace.hasNext()) {
          adaptor.addChild(root_1,stream_keyspace.nextTree());
        }
        stream_keyspace.reset();
        adaptor.addChild(root_0,root_1);
      }
    }
    retval.tree=root_0;
  }
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
  retval.tree=(CommonTree)adaptor.rulePostProcessing(root_0);
  adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(CommonTree)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
