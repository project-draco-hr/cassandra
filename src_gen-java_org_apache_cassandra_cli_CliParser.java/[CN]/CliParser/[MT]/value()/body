{
  CliParser.value_return retval=new CliParser.value_return();
  retval.start=input.LT(1);
  CommonTree root_0=null;
  Token Identifier257=null;
  Token IntegerPositiveLiteral258=null;
  Token IntegerNegativeLiteral259=null;
  Token StringLiteral260=null;
  CliParser.functionCall_return functionCall261=null;
  CommonTree Identifier257_tree=null;
  CommonTree IntegerPositiveLiteral258_tree=null;
  CommonTree IntegerNegativeLiteral259_tree=null;
  CommonTree StringLiteral260_tree=null;
  try {
{
      root_0=(CommonTree)adaptor.nil();
      int alt35=5;
switch (input.LA(1)) {
case Identifier:
{
          int LA35_1=input.LA(2);
          if ((LA35_1 == 119)) {
            alt35=5;
          }
 else           if ((LA35_1 == EOF || LA35_1 == SEMICOLON || LA35_1 == WITH || LA35_1 == AND || LA35_1 == LIMIT || LA35_1 == 114 || LA35_1 == 117)) {
            alt35=1;
          }
 else {
            if (state.backtracking > 0) {
              state.failed=true;
              return retval;
            }
            NoViableAltException nvae=new NoViableAltException("",35,1,input);
            throw nvae;
          }
        }
      break;
case IntegerPositiveLiteral:
{
      alt35=2;
    }
  break;
case IntegerNegativeLiteral:
{
  alt35=3;
}
break;
case StringLiteral:
{
alt35=4;
}
break;
default :
if (state.backtracking > 0) {
state.failed=true;
return retval;
}
NoViableAltException nvae=new NoViableAltException("",35,0,input);
throw nvae;
}
switch (alt35) {
case 1:
{
Identifier257=(Token)match(input,Identifier,FOLLOW_Identifier_in_value3449);
if (state.failed) return retval;
if (state.backtracking == 0) {
Identifier257_tree=(CommonTree)adaptor.create(Identifier257);
adaptor.addChild(root_0,Identifier257_tree);
}
}
break;
case 2:
{
IntegerPositiveLiteral258=(Token)match(input,IntegerPositiveLiteral,FOLLOW_IntegerPositiveLiteral_in_value3453);
if (state.failed) return retval;
if (state.backtracking == 0) {
IntegerPositiveLiteral258_tree=(CommonTree)adaptor.create(IntegerPositiveLiteral258);
adaptor.addChild(root_0,IntegerPositiveLiteral258_tree);
}
}
break;
case 3:
{
IntegerNegativeLiteral259=(Token)match(input,IntegerNegativeLiteral,FOLLOW_IntegerNegativeLiteral_in_value3457);
if (state.failed) return retval;
if (state.backtracking == 0) {
IntegerNegativeLiteral259_tree=(CommonTree)adaptor.create(IntegerNegativeLiteral259);
adaptor.addChild(root_0,IntegerNegativeLiteral259_tree);
}
}
break;
case 4:
{
StringLiteral260=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_value3461);
if (state.failed) return retval;
if (state.backtracking == 0) {
StringLiteral260_tree=(CommonTree)adaptor.create(StringLiteral260);
adaptor.addChild(root_0,StringLiteral260_tree);
}
}
break;
case 5:
{
pushFollow(FOLLOW_functionCall_in_value3465);
functionCall261=functionCall();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,functionCall261.getTree());
}
break;
}
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(CommonTree)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(CommonTree)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
