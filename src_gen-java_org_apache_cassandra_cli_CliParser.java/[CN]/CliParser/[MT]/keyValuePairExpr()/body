{
  CliParser.keyValuePairExpr_return retval=new CliParser.keyValuePairExpr_return();
  retval.start=input.LT(1);
  CommonTree root_0=null;
  Token AND202=null;
  Token WITH203=null;
  CliParser.objectName_return objectName201=null;
  CliParser.keyValuePair_return keyValuePair204=null;
  CommonTree AND202_tree=null;
  CommonTree WITH203_tree=null;
  RewriteRuleTokenStream stream_AND=new RewriteRuleTokenStream(adaptor,"token AND");
  RewriteRuleTokenStream stream_WITH=new RewriteRuleTokenStream(adaptor,"token WITH");
  RewriteRuleSubtreeStream stream_objectName=new RewriteRuleSubtreeStream(adaptor,"rule objectName");
  RewriteRuleSubtreeStream stream_keyValuePair=new RewriteRuleSubtreeStream(adaptor,"rule keyValuePair");
  try {
{
      pushFollow(FOLLOW_objectName_in_keyValuePairExpr2787);
      objectName201=objectName();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_objectName.add(objectName201.getTree());
      loop24:       do {
        int alt24=2;
        int LA24_0=input.LA(1);
        if ((LA24_0 == WITH || LA24_0 == AND)) {
          alt24=1;
        }
switch (alt24) {
case 1:
{
            int alt23=2;
            int LA23_0=input.LA(1);
            if ((LA23_0 == AND)) {
              alt23=1;
            }
 else             if ((LA23_0 == WITH)) {
              alt23=2;
            }
 else {
              if (state.backtracking > 0) {
                state.failed=true;
                return retval;
              }
              NoViableAltException nvae=new NoViableAltException("",23,0,input);
              throw nvae;
            }
switch (alt23) {
case 1:
{
                AND202=(Token)match(input,AND,FOLLOW_AND_in_keyValuePairExpr2792);
                if (state.failed)                 return retval;
                if (state.backtracking == 0)                 stream_AND.add(AND202);
              }
            break;
case 2:
{
            WITH203=(Token)match(input,WITH,FOLLOW_WITH_in_keyValuePairExpr2796);
            if (state.failed)             return retval;
            if (state.backtracking == 0)             stream_WITH.add(WITH203);
          }
        break;
    }
    pushFollow(FOLLOW_keyValuePair_in_keyValuePairExpr2799);
    keyValuePair204=keyValuePair();
    state._fsp--;
    if (state.failed)     return retval;
    if (state.backtracking == 0)     stream_keyValuePair.add(keyValuePair204.getTree());
  }
break;
default :
break loop24;
}
}
 while (true);
if (state.backtracking == 0) {
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
root_0=(CommonTree)adaptor.nil();
{
{
CommonTree root_1=(CommonTree)adaptor.nil();
root_1=(CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NODE_NEW_KEYSPACE_ACCESS,"NODE_NEW_KEYSPACE_ACCESS"),root_1);
adaptor.addChild(root_1,stream_objectName.nextTree());
while (stream_keyValuePair.hasNext()) {
adaptor.addChild(root_1,stream_keyValuePair.nextTree());
}
stream_keyValuePair.reset();
adaptor.addChild(root_0,root_1);
}
}
retval.tree=root_0;
}
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(CommonTree)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(CommonTree)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
