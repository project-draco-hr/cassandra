{
  CliParser.listStatement_return retval=new CliParser.listStatement_return();
  retval.start=input.LT(1);
  CommonTree root_0=null;
  Token limit=null;
  Token LIST148=null;
  Token string_literal151=null;
  CliParser.columnFamily_return columnFamily149=null;
  CliParser.keyRangeExpr_return keyRangeExpr150=null;
  CommonTree limit_tree=null;
  CommonTree LIST148_tree=null;
  CommonTree string_literal151_tree=null;
  RewriteRuleTokenStream stream_IntegerPositiveLiteral=new RewriteRuleTokenStream(adaptor,"token IntegerPositiveLiteral");
  RewriteRuleTokenStream stream_LIST=new RewriteRuleTokenStream(adaptor,"token LIST");
  RewriteRuleTokenStream stream_LIMIT=new RewriteRuleTokenStream(adaptor,"token LIMIT");
  RewriteRuleSubtreeStream stream_columnFamily=new RewriteRuleSubtreeStream(adaptor,"rule columnFamily");
  RewriteRuleSubtreeStream stream_keyRangeExpr=new RewriteRuleSubtreeStream(adaptor,"rule keyRangeExpr");
  try {
{
      LIST148=(Token)match(input,LIST,FOLLOW_LIST_in_listStatement2081);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_LIST.add(LIST148);
      pushFollow(FOLLOW_columnFamily_in_listStatement2083);
      columnFamily149=columnFamily();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_columnFamily.add(columnFamily149.getTree());
      int alt18=2;
      int LA18_0=input.LA(1);
      if ((LA18_0 == 113)) {
        alt18=1;
      }
switch (alt18) {
case 1:
{
          pushFollow(FOLLOW_keyRangeExpr_in_listStatement2085);
          keyRangeExpr150=keyRangeExpr();
          state._fsp--;
          if (state.failed)           return retval;
          if (state.backtracking == 0)           stream_keyRangeExpr.add(keyRangeExpr150.getTree());
        }
      break;
  }
  int alt19=2;
  int LA19_0=input.LA(1);
  if ((LA19_0 == LIMIT)) {
    alt19=1;
  }
switch (alt19) {
case 1:
{
      string_literal151=(Token)match(input,LIMIT,FOLLOW_LIMIT_in_listStatement2089);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_LIMIT.add(string_literal151);
      limit=(Token)match(input,IntegerPositiveLiteral,FOLLOW_IntegerPositiveLiteral_in_listStatement2093);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_IntegerPositiveLiteral.add(limit);
    }
  break;
}
if (state.backtracking == 0) {
retval.tree=root_0;
RewriteRuleTokenStream stream_limit=new RewriteRuleTokenStream(adaptor,"token limit",limit);
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
root_0=(CommonTree)adaptor.nil();
{
{
    CommonTree root_1=(CommonTree)adaptor.nil();
    root_1=(CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NODE_LIST,"NODE_LIST"),root_1);
    adaptor.addChild(root_1,stream_columnFamily.nextTree());
    if (stream_keyRangeExpr.hasNext()) {
      adaptor.addChild(root_1,stream_keyRangeExpr.nextTree());
    }
    stream_keyRangeExpr.reset();
    if (stream_limit.hasNext()) {
{
        CommonTree root_2=(CommonTree)adaptor.nil();
        root_2=(CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NODE_LIMIT,"NODE_LIMIT"),root_2);
        adaptor.addChild(root_2,stream_limit.nextNode());
        adaptor.addChild(root_1,root_2);
      }
    }
    stream_limit.reset();
    adaptor.addChild(root_0,root_1);
  }
}
retval.tree=root_0;
}
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(CommonTree)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(CommonTree)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
