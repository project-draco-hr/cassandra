{
  CliParser.hashConstruct_return retval=new CliParser.hashConstruct_return();
  retval.start=input.LT(1);
  CommonTree root_0=null;
  Token char_literal216=null;
  Token char_literal218=null;
  Token char_literal220=null;
  CliParser.hashElementPair_return hashElementPair217=null;
  CliParser.hashElementPair_return hashElementPair219=null;
  CommonTree char_literal216_tree=null;
  CommonTree char_literal218_tree=null;
  CommonTree char_literal220_tree=null;
  RewriteRuleTokenStream stream_116=new RewriteRuleTokenStream(adaptor,"token 116");
  RewriteRuleTokenStream stream_117=new RewriteRuleTokenStream(adaptor,"token 117");
  RewriteRuleTokenStream stream_114=new RewriteRuleTokenStream(adaptor,"token 114");
  RewriteRuleSubtreeStream stream_hashElementPair=new RewriteRuleSubtreeStream(adaptor,"rule hashElementPair");
  try {
{
      char_literal216=(Token)match(input,116,FOLLOW_116_in_hashConstruct2981);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_116.add(char_literal216);
      pushFollow(FOLLOW_hashElementPair_in_hashConstruct2983);
      hashElementPair217=hashElementPair();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_hashElementPair.add(hashElementPair217.getTree());
      loop28:       do {
        int alt28=2;
        int LA28_0=input.LA(1);
        if ((LA28_0 == 114)) {
          alt28=1;
        }
switch (alt28) {
case 1:
{
            char_literal218=(Token)match(input,114,FOLLOW_114_in_hashConstruct2986);
            if (state.failed)             return retval;
            if (state.backtracking == 0)             stream_114.add(char_literal218);
            pushFollow(FOLLOW_hashElementPair_in_hashConstruct2988);
            hashElementPair219=hashElementPair();
            state._fsp--;
            if (state.failed)             return retval;
            if (state.backtracking == 0)             stream_hashElementPair.add(hashElementPair219.getTree());
          }
        break;
default :
      break loop28;
  }
}
 while (true);
char_literal220=(Token)match(input,117,FOLLOW_117_in_hashConstruct2992);
if (state.failed) return retval;
if (state.backtracking == 0) stream_117.add(char_literal220);
if (state.backtracking == 0) {
  retval.tree=root_0;
  RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
  root_0=(CommonTree)adaptor.nil();
{
{
      CommonTree root_1=(CommonTree)adaptor.nil();
      root_1=(CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(HASH,"HASH"),root_1);
      if (!(stream_hashElementPair.hasNext())) {
        throw new RewriteEarlyExitException();
      }
      while (stream_hashElementPair.hasNext()) {
        adaptor.addChild(root_1,stream_hashElementPair.nextTree());
      }
      stream_hashElementPair.reset();
      adaptor.addChild(root_0,root_1);
    }
  }
  retval.tree=root_0;
}
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(CommonTree)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(CommonTree)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
