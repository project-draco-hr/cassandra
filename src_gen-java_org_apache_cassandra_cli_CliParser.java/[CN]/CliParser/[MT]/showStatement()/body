{
  CliParser.showStatement_return retval=new CliParser.showStatement_return();
  retval.start=input.LT(1);
  CommonTree root_0=null;
  CliParser.showClusterName_return showClusterName145=null;
  CliParser.showVersion_return showVersion146=null;
  CliParser.showKeyspaces_return showKeyspaces147=null;
  try {
    int alt17=3;
    int LA17_0=input.LA(1);
    if ((LA17_0 == SHOW)) {
switch (input.LA(2)) {
case 103:
{
          alt17=1;
        }
      break;
case API_VERSION:
{
      alt17=2;
    }
  break;
case KEYSPACES:
{
  alt17=3;
}
break;
default :
if (state.backtracking > 0) {
state.failed=true;
return retval;
}
NoViableAltException nvae=new NoViableAltException("",17,1,input);
throw nvae;
}
}
 else {
if (state.backtracking > 0) {
state.failed=true;
return retval;
}
NoViableAltException nvae=new NoViableAltException("",17,0,input);
throw nvae;
}
switch (alt17) {
case 1:
{
root_0=(CommonTree)adaptor.nil();
pushFollow(FOLLOW_showClusterName_in_showStatement2048);
showClusterName145=showClusterName();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,showClusterName145.getTree());
}
break;
case 2:
{
root_0=(CommonTree)adaptor.nil();
pushFollow(FOLLOW_showVersion_in_showStatement2056);
showVersion146=showVersion();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,showVersion146.getTree());
}
break;
case 3:
{
root_0=(CommonTree)adaptor.nil();
pushFollow(FOLLOW_showKeyspaces_in_showStatement2064);
showKeyspaces147=showKeyspaces();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,showKeyspaces147.getTree());
}
break;
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(CommonTree)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(CommonTree)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
