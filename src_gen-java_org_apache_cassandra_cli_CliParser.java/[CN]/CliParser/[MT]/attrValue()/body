{
  CliParser.attrValue_return retval=new CliParser.attrValue_return();
  retval.start=input.LT(1);
  CommonTree root_0=null;
  CliParser.arrayConstruct_return arrayConstruct208=null;
  CliParser.attrValueString_return attrValueString209=null;
  CliParser.attrValueInt_return attrValueInt210=null;
  CliParser.attrValueDouble_return attrValueDouble211=null;
  try {
    int alt25=4;
switch (input.LA(1)) {
case 113:
{
        alt25=1;
      }
    break;
case Identifier:
case StringLiteral:
{
    alt25=2;
  }
break;
case IntegerPositiveLiteral:
case IntegerNegativeLiteral:
{
alt25=3;
}
break;
case DoubleLiteral:
{
alt25=4;
}
break;
default :
if (state.backtracking > 0) {
state.failed=true;
return retval;
}
NoViableAltException nvae=new NoViableAltException("",25,0,input);
throw nvae;
}
switch (alt25) {
case 1:
{
root_0=(CommonTree)adaptor.nil();
pushFollow(FOLLOW_arrayConstruct_in_attrValue2890);
arrayConstruct208=arrayConstruct();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,arrayConstruct208.getTree());
}
break;
case 2:
{
root_0=(CommonTree)adaptor.nil();
pushFollow(FOLLOW_attrValueString_in_attrValue2898);
attrValueString209=attrValueString();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,attrValueString209.getTree());
}
break;
case 3:
{
root_0=(CommonTree)adaptor.nil();
pushFollow(FOLLOW_attrValueInt_in_attrValue2906);
attrValueInt210=attrValueInt();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,attrValueInt210.getTree());
}
break;
case 4:
{
root_0=(CommonTree)adaptor.nil();
pushFollow(FOLLOW_attrValueDouble_in_attrValue2914);
attrValueDouble211=attrValueDouble();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,attrValueDouble211.getTree());
}
break;
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(CommonTree)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(CommonTree)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
