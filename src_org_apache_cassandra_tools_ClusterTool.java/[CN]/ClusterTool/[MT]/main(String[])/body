{
  if (args.length < 2) {
    printUsage();
    return;
  }
  int argc=0;
  try {
    if (SET_TOKEN.equals(args[argc])) {
      String serverName=args[argc + 1];
      BigInteger token=new BigInteger(args[argc + 2]);
      applyToken(serverName,token);
    }
 else     if (HASH_KEY.equals(args[argc])) {
      System.out.println("Hash = [" + StorageService.hash(args[argc + 1]) + "]");
    }
 else     if (BUILD_INDEX.equals(args[argc])) {
      IndexBuilder.main(args);
    }
 else     if (READ_TEST.equals(args[argc])) {
      System.out.println("Testing reads...");
      int numThreads=Integer.parseInt(args[argc + 1]);
      int rpsPerThread=Integer.parseInt(args[argc + 2]);
      String machinesToRead=args[argc + 3];
    }
 else     if (WRITE_TEST.equals(args[argc])) {
      System.out.println("Testing writes...");
      int numThreads=Integer.parseInt(args[argc + 1]);
      int rpsPerThread=Integer.parseInt(args[argc + 2]);
      String machinesToWrite=args[argc + 3];
    }
  }
 catch (  Exception e) {
    System.err.println("Exception " + e.getMessage());
    e.printStackTrace(System.err);
    printUsage();
  }
  System.exit(0);
}
