{
  StorageService ss=StorageService.instance;
  TokenMetadata tmd=ss.getTokenMetadata();
  tmd.clearUnsafe();
  IPartitioner partitioner=RandomPartitioner.instance;
  VersionedValue.VersionedValueFactory valueFactory=new VersionedValue.VersionedValueFactory(partitioner);
  ArrayList<Token> endpointTokens=new ArrayList<Token>();
  ArrayList<Token> keyTokens=new ArrayList<Token>();
  List<InetAddress> hosts=new ArrayList<InetAddress>();
  List<UUID> hostIds=new ArrayList<UUID>();
  Util.createInitialRing(ss,partitioner,endpointTokens,keyTokens,hosts,hostIds,7);
  ss.onChange(hosts.get(2),ApplicationState.STATUS,valueFactory.left(Collections.singleton(endpointTokens.get(2)),Gossiper.computeExpireTime()));
  assertFalse(tmd.isMember(hosts.get(2)));
  Gossiper.instance.injectApplicationState(hosts.get(3),ApplicationState.TOKENS,valueFactory.tokens(Collections.singleton(keyTokens.get(1))));
  ss.onChange(hosts.get(3),ApplicationState.STATUS,valueFactory.bootstrapping(Collections.<Token>singleton(keyTokens.get(1))));
  assertFalse(tmd.isMember(hosts.get(3)));
  assertEquals(1,tmd.getBootstrapTokens().size());
  assertEquals(hosts.get(3),tmd.getBootstrapTokens().get(keyTokens.get(1)));
  Gossiper.instance.injectApplicationState(hosts.get(2),ApplicationState.TOKENS,valueFactory.tokens(Collections.singleton(keyTokens.get(1))));
  ss.onChange(hosts.get(2),ApplicationState.STATUS,valueFactory.left(Collections.singleton(keyTokens.get(1)),Gossiper.computeExpireTime()));
  assertTrue(tmd.getBootstrapTokens().size() == 0);
  assertFalse(tmd.isMember(hosts.get(2)));
  assertFalse(tmd.isLeaving(hosts.get(2)));
}
