{
  DataType[] argDataTypes=UDHelper.driverTypes(argTypes);
  DataType returnDataType=UDHelper.driverType(returnType);
  Class<?>[] javaParamTypes=UDHelper.javaTypes(argDataTypes,calledOnNullInput);
  Class<?> javaReturnType=returnDataType.asJavaClass();
  String clsName=generateClassName(name);
  StringBuilder javaSourceBuilder=new StringBuilder();
  int lineOffset=1;
  for (int i=0; i < javaSourceTemplate.length; i++) {
    String s=javaSourceTemplate[i];
    if ((i & 1) == 1) {
switch (s) {
case "class_name":
        s=clsName;
      break;
case "body":
    lineOffset=countNewlines(javaSourceBuilder);
  s=body;
break;
case "arguments":
s=generateArguments(javaParamTypes,argNames);
break;
case "argument_list":
s=generateArgumentList(javaParamTypes,argNames);
break;
case "return_type":
s=javaSourceName(javaReturnType);
break;
}
}
javaSourceBuilder.append(s);
}
String targetClassName=GENERATED_PACKAGE + '.' + clsName;
String javaSource=javaSourceBuilder.toString();
logger.debug("Compiling Java source UDF '{}' as class '{}' using source:\n{}",name,targetClassName,javaSource);
try {
EcjCompilationUnit compilationUnit=new EcjCompilationUnit(javaSource,targetClassName);
Compiler compiler=new Compiler(compilationUnit,errorHandlingPolicy,compilerOptions,compilationUnit,problemFactory);
compiler.compile(new ICompilationUnit[]{compilationUnit});
if (compilationUnit.problemList != null && !compilationUnit.problemList.isEmpty()) {
boolean fullSource=false;
StringBuilder problems=new StringBuilder();
for (IProblem problem : compilationUnit.problemList) {
long ln=problem.getSourceLineNumber() - lineOffset;
if (ln < 1L) {
if (problem.isError()) {
problems.append("GENERATED SOURCE ERROR: line ").append(problem.getSourceLineNumber()).append(" (in generated source): ").append(problem.getMessage()).append('\n');
fullSource=true;
}
}
 else {
problems.append("Line ").append(Long.toString(ln)).append(": ").append(problem.getMessage()).append('\n');
}
}
if (fullSource) throw new InvalidRequestException("Java source compilation failed:\n" + problems + "\n generated source:\n"+ javaSource);
 else throw new InvalidRequestException("Java source compilation failed:\n" + problems);
}
Class cls=targetClassLoader.loadClass(targetClassName);
if (cls.getDeclaredMethods().length != 2 || cls.getDeclaredConstructors().length != 1) throw new InvalidRequestException("Check your source to not define additional Java methods or constructors");
MethodType methodType=MethodType.methodType(void.class).appendParameterTypes(FunctionName.class,List.class,List.class,DataType[].class,AbstractType.class,DataType.class,boolean.class,String.class);
MethodHandle ctor=MethodHandles.lookup().findConstructor(cls,methodType);
return (UDFunction)ctor.invokeWithArguments(name,argNames,argTypes,argDataTypes,returnType,returnDataType,calledOnNullInput,body);
}
 catch (InvocationTargetException e) {
throw new InvalidRequestException(String.format("Could not compile function '%s' from Java source: %s",name,e.getCause()));
}
catch (VirtualMachineError e) {
throw e;
}
catch (Throwable e) {
throw new InvalidRequestException(String.format("Could not compile function '%s' from Java source: %s",name,e));
}
}
