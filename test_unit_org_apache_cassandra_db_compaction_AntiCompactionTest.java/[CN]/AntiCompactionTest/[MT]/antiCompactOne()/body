{
  ColumnFamilyStore store=prepareColumnFamilyStore();
  Collection<SSTableReader> sstables=store.getUnrepairedSSTables();
  assertEquals(store.getSSTables().size(),sstables.size());
  Range<Token> range=new Range<Token>(new BytesToken("0".getBytes()),new BytesToken("4".getBytes()));
  List<Range<Token>> ranges=Arrays.asList(range);
  SSTableReader.acquireReferences(sstables);
  long repairedAt=1000;
  CompactionManager.instance.performAnticompaction(store,ranges,sstables,repairedAt);
  assertEquals(2,store.getSSTables().size());
  int repairedKeys=0;
  int nonRepairedKeys=0;
  for (  SSTableReader sstable : store.getSSTables()) {
    try (SSTableScanner scanner=sstable.getScanner()){
      while (scanner.hasNext()) {
        SSTableIdentityIterator row=(SSTableIdentityIterator)scanner.next();
        if (sstable.isRepaired()) {
          assertTrue(range.contains(row.getKey().getToken()));
          repairedKeys++;
        }
 else {
          assertFalse(range.contains(row.getKey().getToken()));
          nonRepairedKeys++;
        }
      }
    }
   }
  for (  SSTableReader sstable : store.getSSTables()) {
    assertFalse(sstable.isMarkedCompacted());
    assertEquals(1,sstable.referenceCount());
  }
  assertEquals(0,store.getDataTracker().getCompacting().size());
  assertEquals(repairedKeys,4);
  assertEquals(nonRepairedKeys,6);
}
