{
  String os=System.getProperty("os.name");
  XMLUtils xmlUtils=new XMLUtils(file);
  clusterName_=xmlUtils.getNodeValue("/Storage/ClusterName");
  gangliaServers_=xmlUtils.getNodeValues("/Storage/GangliaServers/GangliaServer");
  zkAddress_=xmlUtils.getNodeValue("/Storage/ZookeeperAddress");
  hashingStrategy_=xmlUtils.getNodeValue("/Storage/HashingStrategy");
  calloutLocation_=xmlUtils.getNodeValue("/Storage/CalloutLocation");
  jobTrackerHost_=xmlUtils.getNodeValue("/Storage/JobTrackerHost");
  jobJarFileLocation_=xmlUtils.getNodeValue("/Storage/JobJarFileLocation");
  String zkSessionTimeout=xmlUtils.getNodeValue("/Storage/ZookeeperSessionTimeout");
  if (zkSessionTimeout != null)   zkSessionTimeout_=Integer.parseInt(zkSessionTimeout);
  String replicationFactor=xmlUtils.getNodeValue("/Storage/ReplicationFactor");
  if (replicationFactor != null)   replicationFactor_=Integer.parseInt(replicationFactor);
  String rpcTimeoutInMillis=xmlUtils.getNodeValue("/Storage/RpcTimeoutInMillis");
  if (rpcTimeoutInMillis != null)   rpcTimeoutInMillis_=Integer.parseInt(rpcTimeoutInMillis);
  String threadsPerPool=xmlUtils.getNodeValue("/Storage/ThreadsPerPool");
  if (threadsPerPool != null)   threadsPerPool_=Integer.parseInt(threadsPerPool);
  String port=xmlUtils.getNodeValue("/Storage/StoragePort");
  if (port != null)   storagePort_=Integer.parseInt(port);
  port=xmlUtils.getNodeValue("/Storage/ControlPort");
  if (port != null)   controlPort_=Integer.parseInt(port);
  port=xmlUtils.getNodeValue("/Storage/HttpPort");
  if (port != null)   httpPort_=Integer.parseInt(port);
  String touchKeyCacheSize=xmlUtils.getNodeValue("/Storage/TouchKeyCacheSize");
  if (touchKeyCacheSize != null)   touchKeyCacheSize_=Integer.parseInt(touchKeyCacheSize);
  String lifetime=xmlUtils.getNodeValue("/Storage/MemtableLifetimeInDays");
  if (lifetime != null)   memtableLifetime_=Integer.parseInt(lifetime);
  String memtableSize=xmlUtils.getNodeValue("/Storage/MemtableSizeInMB");
  if (memtableSize != null)   memtableSize_=Integer.parseInt(memtableSize);
  String memtableObjectCount=xmlUtils.getNodeValue("/Storage/MemtableObjectCountInMillions");
  if (memtableObjectCount != null)   memtableObjectCount_=Integer.parseInt(memtableObjectCount);
  String doConsistencyCheck=xmlUtils.getNodeValue("/Storage/DoConsistencyChecksBoolean");
  if (doConsistencyCheck != null)   doConsistencyCheck_=Boolean.parseBoolean(doConsistencyCheck);
  String columnIndexSizeInKB=xmlUtils.getNodeValue("/Storage/ColumnIndexSizeInKB");
  if (columnIndexSizeInKB == null) {
    columnIndexSizeInKB_=64;
  }
 else {
    columnIndexSizeInKB_=Integer.parseInt(columnIndexSizeInKB);
  }
  metadataDirectory_=xmlUtils.getNodeValue("/Storage/MetadataDirectory");
  if (metadataDirectory_ != null)   FileUtils.createDirectory(metadataDirectory_);
 else {
    if (os.equals("Linux")) {
      metadataDirectory_="/var/storage/system";
    }
  }
  snapshotDirectory_=xmlUtils.getNodeValue("/Storage/SnapshotDirectory");
  if (snapshotDirectory_ != null)   FileUtils.createDirectory(snapshotDirectory_);
 else {
    snapshotDirectory_=metadataDirectory_ + System.getProperty("file.separator") + "snapshot";
  }
  mapOutputDirectories_=xmlUtils.getNodeValues("/Storage/MapOutputDirectories/MapOutputDirectory");
  if (mapOutputDirectories_.length > 0) {
    for (    String mapOutputDirectory : mapOutputDirectories_)     FileUtils.createDirectory(mapOutputDirectory);
  }
  dataFileDirectories_=xmlUtils.getNodeValues("/Storage/DataFileDirectories/DataFileDirectory");
  if (dataFileDirectories_.length > 0) {
    for (    String dataFileDirectory : dataFileDirectories_)     FileUtils.createDirectory(dataFileDirectory);
  }
 else {
    if (os.equals("Linux")) {
      dataFileDirectories_=new String[]{"/var/storage/data"};
    }
  }
  bootstrapFileDirectory_=xmlUtils.getNodeValue("/Storage/BootstrapFileDirectory");
  if (bootstrapFileDirectory_ != null)   FileUtils.createDirectory(bootstrapFileDirectory_);
 else {
    if (os.equals("Linux")) {
      bootstrapFileDirectory_="/var/storage/bootstrap";
    }
  }
  logFileDirectory_=xmlUtils.getNodeValue("/Storage/CommitLogDirectory");
  if (logFileDirectory_ != null)   FileUtils.createDirectory(logFileDirectory_);
 else {
    if (os.equals("Linux")) {
      logFileDirectory_="/var/storage/commitlog";
    }
  }
  String value=xmlUtils.getNodeValue("/Storage/CommitLogRotationThresholdInMB");
  if (value != null)   logRotationThreshold_=Integer.parseInt(value) * 1024 * 1024;
  value=xmlUtils.getNodeValue("/Storage/CommitLogFastSync");
  if (value != null)   fastSync_=Boolean.parseBoolean(value);
  tableToCFMetaDataMap_=new HashMap<String,Map<String,CFMetaData>>();
  value=xmlUtils.getNodeValue("/Storage/RackAware");
  if (value != null)   rackAware_=Boolean.parseBoolean(value);
  NodeList tables=xmlUtils.getRequestedNodeList("/Storage/Tables/Table");
  int size=tables.getLength();
  for (int i=0; i < size; ++i) {
    Node table=tables.item(i);
    String tName=XMLUtils.getAttributeValue(table,"Name");
    tables_.add(tName);
    tableToCFMetaDataMap_.put(tName,new HashMap<String,CFMetaData>());
    String xqlTable="/Storage/Tables/Table[@Name='" + tName + "']/";
    NodeList columnFamilies=xmlUtils.getRequestedNodeList(xqlTable + "ColumnFamily");
    String n_rowKey=xmlUtils.getNodeValue(xqlTable + "RowKey");
    if (n_rowKey == null)     n_rowKey=d_rowKey_;
    int size2=columnFamilies.getLength();
    for (int j=0; j < size2; ++j) {
      Node columnFamily=columnFamilies.item(j);
      String cName=XMLUtils.getAttributeValue(columnFamily,"Name");
      String xqlCF=xqlTable + "ColumnFamily[@Name='" + cName+ "']/";
      applicationColumnFamilies_.add(cName);
      String columnType=xmlUtils.getAttributeValue(columnFamily,"ColumnType");
      columnType=ColumnFamily.getColumnType(columnType);
      String columnIndexProperty=XMLUtils.getAttributeValue(columnFamily,"ColumnSort");
      String columnIndexType=ColumnFamily.getColumnSortProperty(columnIndexProperty);
      String n_superColumnMap=xmlUtils.getNodeValue(xqlCF + "SuperColumnMap");
      if (n_superColumnMap == null)       n_superColumnMap=d_superColumnMap_;
      String n_superColumnKey=xmlUtils.getNodeValue(xqlCF + "SuperColumnKey");
      if (n_superColumnKey == null)       n_superColumnKey=d_superColumnKey_;
      String n_columnMap=xmlUtils.getNodeValue(xqlCF + "ColumnMap");
      if (n_columnMap == null)       n_columnMap=d_columnMap_;
      String n_columnKey=xmlUtils.getNodeValue(xqlCF + "ColumnKey");
      if (n_columnKey == null)       n_columnKey=d_columnKey_;
      String n_columnValue=xmlUtils.getNodeValue(xqlCF + "ColumnValue");
      if (n_columnValue == null)       n_columnValue=d_columnValue_;
      String n_columnTimestamp=xmlUtils.getNodeValue(xqlCF + "ColumnTimestamp");
      if (n_columnTimestamp == null)       n_columnTimestamp=d_columnTimestamp_;
      CFMetaData cfMetaData=new CFMetaData();
      cfMetaData.tableName=tName;
      cfMetaData.cfName=cName;
      cfMetaData.columnType=columnType;
      cfMetaData.indexProperty_=columnIndexType;
      cfMetaData.n_rowKey=n_rowKey;
      cfMetaData.n_columnMap=n_columnMap;
      cfMetaData.n_columnKey=n_columnKey;
      cfMetaData.n_columnValue=n_columnValue;
      cfMetaData.n_columnTimestamp=n_columnTimestamp;
      if ("Super".equals(columnType)) {
        cfMetaData.n_superColumnKey=n_superColumnKey;
        cfMetaData.n_superColumnMap=n_superColumnMap;
      }
      tableToCFMetaDataMap_.get(tName).put(cName,cfMetaData);
    }
  }
  String[] seeds=xmlUtils.getNodeValues("/Storage/Seeds/Seed");
  for (int i=0; i < seeds.length; ++i) {
    seeds_.add(seeds[i]);
  }
  return tableToCFMetaDataMap_;
}
