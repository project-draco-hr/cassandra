{
  List<String> mvPrimaryKeys=Arrays.asList("((a, b), c)","((b, a), c)","(a, b, c)","(c, b, a)","((c, a), b)");
  for (int i=0; i < mvPrimaryKeys.size(); i++) {
    createTable("CREATE TABLE %s (a int, b int, c int, d int, PRIMARY KEY (a, b, c))");
    execute("USE " + keyspace());
    executeNet(protocolVersion,"USE " + keyspace());
    execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)",0,0,0,0);
    execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)",0,0,1,0);
    execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)",0,1,0,0);
    execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)",0,1,1,0);
    execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)",1,0,0,0);
    execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)",1,0,1,0);
    execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)",1,1,-1,0);
    execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)",1,1,0,0);
    execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)",1,1,1,0);
    logger.info("Testing MV primary key: {}",mvPrimaryKeys.get(i));
    createView("mv_test" + i,"CREATE MATERIALIZED VIEW %s AS SELECT * FROM %%s WHERE a = 1 AND b IS NOT NULL AND c = 1 PRIMARY KEY " + mvPrimaryKeys.get(i));
    while (!SystemKeyspace.isViewBuilt(keyspace(),"mv_test" + i))     Thread.sleep(10);
    assertRowsIgnoringOrder(execute("SELECT a, b, c, d FROM mv_test" + i),row(1,0,1,0),row(1,1,1,0));
    execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)",0,0,1,0);
    execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)",1,1,0,0);
    assertRowsIgnoringOrder(execute("SELECT a, b, c, d FROM mv_test" + i),row(1,0,1,0),row(1,1,1,0));
    execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)",1,2,1,0);
    assertRowsIgnoringOrder(execute("SELECT a, b, c, d FROM mv_test" + i),row(1,0,1,0),row(1,1,1,0),row(1,2,1,0));
    execute("UPDATE %s SET d = ? WHERE a = ? AND b = ? AND c = ?",1,1,-1,0);
    execute("UPDATE %s SET d = ? WHERE a = ? AND b = ? AND c = ?",0,1,1,0);
    assertRowsIgnoringOrder(execute("SELECT a, b, c, d FROM mv_test" + i),row(1,0,1,0),row(1,1,1,0),row(1,2,1,0));
    execute("UPDATE %s SET d = ? WHERE a = ? AND b = ? AND c = ?",2,1,1,1);
    assertRowsIgnoringOrder(execute("SELECT a, b, c, d FROM mv_test" + i),row(1,0,1,0),row(1,1,1,2),row(1,2,1,0));
    execute("DELETE FROM %s WHERE a = ? AND b = ? AND c = ?",1,1,-1);
    execute("DELETE FROM %s WHERE a = ? AND b = ? AND c = ?",2,0,1);
    execute("DELETE FROM %s WHERE a = ?",0);
    assertRowsIgnoringOrder(execute("SELECT a, b, c, d FROM mv_test" + i),row(1,0,1,0),row(1,1,1,2),row(1,2,1,0));
    execute("DELETE FROM %s WHERE a = ? AND b = ? AND c = ?",1,1,1);
    assertRowsIgnoringOrder(execute("SELECT a, b, c, d FROM mv_test" + i),row(1,0,1,0),row(1,2,1,0));
    execute("DELETE FROM %s WHERE a = ?",1);
    assertEmpty(execute("SELECT a, b, c, d FROM mv_test" + i));
    dropView("mv_test" + i);
    dropTable("DROP TABLE %s");
  }
}
