{
  while (!server.isClosed()) {
    Socket socket=null;
    try {
      socket=server.accept();
      if (!authenticate(socket)) {
        logger.trace("remote failed to authenticate");
        socket.close();
        continue;
      }
      socket.setKeepAlive(true);
      socket.setSoTimeout(2 * OutboundTcpConnection.WAIT_FOR_VERSION_MAX_TIME);
      DataInputStream in=new DataInputStream(socket.getInputStream());
      MessagingService.validateMagic(in.readInt());
      int header=in.readInt();
      boolean isStream=MessagingService.getBits(header,3,1) == 1;
      int version=MessagingService.getBits(header,15,8);
      logger.trace("Connection version {} from {}",version,socket.getInetAddress());
      socket.setSoTimeout(0);
      Thread thread=isStream ? new IncomingStreamingConnection(version,socket,connections) : new IncomingTcpConnection(version,MessagingService.getBits(header,2,1) == 1,socket,connections);
      thread.start();
      connections.add((Closeable)thread);
    }
 catch (    AsynchronousCloseException e) {
      logger.trace("Asynchronous close seen by server thread");
      break;
    }
catch (    ClosedChannelException e) {
      logger.trace("MessagingService server thread already closed");
      break;
    }
catch (    SSLHandshakeException e) {
      logger.error("SSL handshake error for inbound connection from " + socket,e);
      FileUtils.closeQuietly(socket);
    }
catch (    Throwable t) {
      logger.trace("Error reading the socket {}",socket,t);
      FileUtils.closeQuietly(socket);
    }
  }
  logger.info("MessagingService has terminated the accept() thread");
}
