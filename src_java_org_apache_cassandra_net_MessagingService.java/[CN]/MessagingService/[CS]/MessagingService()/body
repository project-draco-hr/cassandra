{
  for (  Verb verb : DROPPABLE_VERBS) {
    droppedMessages.put(verb,new DroppedMessageMetrics(verb));
    lastDroppedInternal.put(verb,0);
  }
  listenGate=new SimpleCondition();
  verbHandlers=new EnumMap<Verb,IVerbHandler>(Verb.class);
  Runnable logDropped=new Runnable(){
    public void run(){
      logDroppedMessages();
    }
  }
;
  StorageService.scheduledTasks.scheduleWithFixedDelay(logDropped,LOG_DROPPED_INTERVAL_IN_MS,LOG_DROPPED_INTERVAL_IN_MS,TimeUnit.MILLISECONDS);
  Function<Pair<Integer,ExpiringMap.CacheableObject<CallbackInfo>>,?> timeoutReporter=new Function<Pair<Integer,ExpiringMap.CacheableObject<CallbackInfo>>,Object>(){
    public Object apply(    Pair<Integer,ExpiringMap.CacheableObject<CallbackInfo>> pair){
      CallbackInfo expiredCallbackInfo=pair.right.value;
      maybeAddLatency(expiredCallbackInfo.callback,expiredCallbackInfo.target,pair.right.timeout);
      ConnectionMetrics.totalTimeouts.mark();
      getConnectionPool(expiredCallbackInfo.target).incrementTimeout();
      if (expiredCallbackInfo.shouldHint()) {
        RowMutation rm=(RowMutation)((WriteCallbackInfo)expiredCallbackInfo).sentMessage.payload;
        return StorageProxy.submitHint(rm,expiredCallbackInfo.target,null);
      }
      return null;
    }
  }
;
  callbacks=new ExpiringMap<Integer,CallbackInfo>(DatabaseDescriptor.getMinRpcTimeout(),timeoutReporter);
  MBeanServer mbs=ManagementFactory.getPlatformMBeanServer();
  try {
    mbs.registerMBean(this,new ObjectName(MBEAN_NAME));
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
}
