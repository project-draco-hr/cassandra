{
  listenGate=new SimpleCondition();
  verbHandlers_=new EnumMap<StorageService.Verb,IVerbHandler>(StorageService.Verb.class);
  streamExecutor_=new DebuggableThreadPoolExecutor("Streaming",DatabaseDescriptor.getCompactionThreadPriority());
  Runnable logDropped=new Runnable(){
    public void run(){
      logDroppedMessages();
    }
  }
;
  StorageService.scheduledTasks.scheduleWithFixedDelay(logDropped,LOG_DROPPED_INTERVAL_IN_MS,LOG_DROPPED_INTERVAL_IN_MS,TimeUnit.MILLISECONDS);
  Function<String,?> timeoutReporter=new Function<String,Object>(){
    public Object apply(    String messageId){
      Collection<InetAddress> addresses=targets.removeAll(messageId);
      if (addresses == null)       return null;
      for (      InetAddress address : addresses) {
        for (        ILatencySubscriber subscriber : subscribers)         subscriber.receiveTiming(address,(double)DatabaseDescriptor.getRpcTimeout());
      }
      return null;
    }
  }
;
  targets=ArrayListMultimap.create();
  callbacks=new ExpiringMap<String,IMessageCallback>((long)(1.1 * DatabaseDescriptor.getRpcTimeout()),timeoutReporter);
  MBeanServer mbs=ManagementFactory.getPlatformMBeanServer();
  try {
    mbs.registerMBean(this,new ObjectName("org.apache.cassandra.net:type=MessagingService"));
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
}
