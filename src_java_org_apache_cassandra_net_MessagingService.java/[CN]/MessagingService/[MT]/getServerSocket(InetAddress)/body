{
  final List<ServerSocket> ss=new ArrayList<ServerSocket>(2);
  if (DatabaseDescriptor.getEncryptionOptions().internode_encryption != EncryptionOptions.InternodeEncryption.none) {
    ss.add(SSLFactory.getServerSocket(DatabaseDescriptor.getEncryptionOptions(),localEp,DatabaseDescriptor.getSSLStoragePort()));
    logger_.info("Starting Encrypted Messaging Service on SSL port {}",DatabaseDescriptor.getSSLStoragePort());
  }
  ServerSocketChannel serverChannel=ServerSocketChannel.open();
  ServerSocket socket=serverChannel.socket();
  socket.setReuseAddress(true);
  InetSocketAddress address=new InetSocketAddress(localEp,DatabaseDescriptor.getStoragePort());
  try {
    socket.bind(address);
  }
 catch (  BindException e) {
    if (e.getMessage().contains("in use"))     throw new ConfigurationException(address + " is in use by another process.  Change listen_address:storage_port in cassandra.yaml to values that do not conflict with other services");
 else     if (e.getMessage().contains("Cannot assign requested address"))     throw new ConfigurationException("Unable to bind to address " + address + ". Set listen_address in cassandra.yaml to an interface you can bind to, e.g., your private IP address on EC2");
 else     throw e;
  }
  logger_.info("Starting Messaging Service on port {}",DatabaseDescriptor.getStoragePort());
  ss.add(socket);
  return ss;
}
