{
  int listenPort=DatabaseDescriptor.getRpcPort();
  InetAddress listenAddr=DatabaseDescriptor.getRpcAddress();
  if (listenAddr == null)   listenAddr=FBUtilities.getLocalAddress();
  Thread.setDefaultUncaughtExceptionHandler(new Thread.UncaughtExceptionHandler(){
    public void uncaughtException(    Thread t,    Throwable e){
      logger.error("Fatal exception in thread " + t,e);
      if (e instanceof OutOfMemoryError) {
        System.exit(100);
      }
    }
  }
);
  try {
    DatabaseDescriptor.loadSchemas();
  }
 catch (  IOException e) {
    logger.error("Fatal exception during initialization",e);
    System.exit(100);
  }
  for (  String table : DatabaseDescriptor.getTables()) {
    if (logger.isDebugEnabled())     logger.debug("opening keyspace " + table);
    Table.open(table);
  }
  CommitLog.recover();
  CompactionManager.instance.checkAllColumnFamilies();
  UUID currentMigration=DatabaseDescriptor.getDefsVersion();
  UUID lastMigration=Migration.getLastMigrationId();
  if ((lastMigration != null) && (lastMigration.timestamp() > currentMigration.timestamp())) {
    MigrationManager.applyMigrations(currentMigration,lastMigration);
  }
  StorageService.instance.initServer();
  final CassandraServer cassandraServer=new CassandraServer();
  Cassandra.Processor processor=new Cassandra.Processor(cassandraServer);
  TServerSocket tServerSocket=new TServerSocket(new InetSocketAddress(listenAddr,listenPort));
  logger.info(String.format("Binding thrift service to %s:%s",listenAddr,listenPort));
  TProtocolFactory tProtocolFactory=new TBinaryProtocol.Factory();
  TTransportFactory inTransportFactory, outTransportFactory;
  if (DatabaseDescriptor.isThriftFramed()) {
    inTransportFactory=new TFramedTransport.Factory();
    outTransportFactory=new TFramedTransport.Factory();
  }
 else {
    inTransportFactory=new TTransportFactory();
    outTransportFactory=new TTransportFactory();
  }
  CustomTThreadPoolServer.Options options=new CustomTThreadPoolServer.Options();
  options.minWorkerThreads=64;
  SynchronousQueue<Runnable> executorQueue=new SynchronousQueue<Runnable>();
  ExecutorService executorService=new ThreadPoolExecutor(options.minWorkerThreads,options.maxWorkerThreads,60,TimeUnit.SECONDS,executorQueue){
    @Override protected void afterExecute(    Runnable r,    Throwable t){
      super.afterExecute(r,t);
      cassandraServer.logout();
    }
  }
;
  serverEngine=new CustomTThreadPoolServer(new TProcessorFactory(processor),tServerSocket,inTransportFactory,outTransportFactory,tProtocolFactory,tProtocolFactory,options,executorService);
}
