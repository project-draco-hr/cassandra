{
  super.setup();
  final CassandraServer cassandraServer=new CassandraServer();
  Cassandra.Processor processor=new Cassandra.Processor(cassandraServer);
  TServerSocket tServerSocket=null;
  try {
    tServerSocket=new TCustomServerSocket(new InetSocketAddress(listenAddr,listenPort),DatabaseDescriptor.getRpcKeepAlive(),DatabaseDescriptor.getRpcSendBufferSize(),DatabaseDescriptor.getRpcRecvBufferSize());
  }
 catch (  TTransportException e) {
    throw new IOException(String.format("Unable to create thrift socket to %s:%s",listenAddr,listenPort),e);
  }
  logger.info(String.format("Binding thrift service to %s:%s",listenAddr,listenPort));
  TProtocolFactory tProtocolFactory=new TBinaryProtocol.Factory(true,true,DatabaseDescriptor.getThriftMaxMessageLength());
  TTransportFactory inTransportFactory, outTransportFactory;
  if (DatabaseDescriptor.isThriftFramed()) {
    int tFramedTransportSize=DatabaseDescriptor.getThriftFramedTransportSize();
    inTransportFactory=new TFastFramedTransport.Factory(64 * 1024,tFramedTransportSize);
    outTransportFactory=new TFastFramedTransport.Factory(64 * 1024,tFramedTransportSize);
    logger.info("Using TFastFramedTransport with a max frame size of {} bytes.",tFramedTransportSize);
  }
 else {
    inTransportFactory=new TTransportFactory();
    outTransportFactory=new TTransportFactory();
  }
  CustomTThreadPoolServer.Options options=new CustomTThreadPoolServer.Options();
  options.minWorkerThreads=MIN_WORKER_THREADS;
  ExecutorService executorService=new CleaningThreadPool(cassandraServer.clientState,options.minWorkerThreads,options.maxWorkerThreads);
  serverEngine=new CustomTThreadPoolServer(new TProcessorFactory(processor),tServerSocket,inTransportFactory,outTransportFactory,tProtocolFactory,tProtocolFactory,options,executorService);
}
