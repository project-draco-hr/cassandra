{
  this.cfs=cfs;
  this.sstable=sstable;
  this.outputHandler=outputHandler;
  this.skipCorrupted=skipCorrupted;
  this.isOffline=isOffline;
  this.validateColumns=checkData;
  List<SSTableReader> toScrub=Collections.singletonList(sstable);
  this.destination=cfs.directories.getWriteableLocationAsFile(cfs.getExpectedCompactedFileSize(toScrub,OperationType.SCRUB));
  if (destination == null)   throw new IOException("disk full");
  this.controller=isOffline ? new ScrubController(cfs) : new CompactionController(cfs,Collections.singleton(sstable),CompactionManager.getDefaultGcBefore(cfs));
  this.isCommutative=cfs.metadata.isCounter();
  boolean hasIndexFile=(new File(sstable.descriptor.filenameFor(Component.PRIMARY_INDEX))).exists();
  if (!hasIndexFile) {
    outputHandler.warn("Missing component: " + sstable.descriptor.filenameFor(Component.PRIMARY_INDEX));
  }
  this.expectedBloomFilterSize=Math.max(cfs.metadata.getMinIndexInterval(),hasIndexFile ? (int)(SSTableReader.getApproximateKeyCount(toScrub)) : 0);
  this.dataFile=isOffline ? sstable.openDataReader() : sstable.openDataReader(CompactionManager.instance.getRateLimiter());
  this.indexFile=hasIndexFile ? RandomAccessReader.open(new File(sstable.descriptor.filenameFor(Component.PRIMARY_INDEX))) : null;
  this.scrubInfo=new ScrubInfo(dataFile,sstable);
  this.currentRowPositionFromIndex=0;
  this.nextRowPositionFromIndex=0;
}
