{
  this.cfs=cfs;
  this.transaction=transaction;
  this.sstable=transaction.onlyOne();
  this.outputHandler=outputHandler;
  this.skipCorrupted=skipCorrupted;
  this.isOffline=isOffline;
  this.rowIndexEntrySerializer=sstable.descriptor.version.getSSTableFormat().getIndexSerializer(sstable.metadata);
  List<SSTableReader> toScrub=Collections.singletonList(sstable);
  this.destination=cfs.directories.getWriteableLocationAsFile(cfs.getExpectedCompactedFileSize(toScrub,OperationType.SCRUB));
  if (destination == null)   throw new IOException("disk full");
  this.controller=isOffline ? new ScrubController(cfs) : new CompactionController(cfs,Collections.singleton(sstable),CompactionManager.getDefaultGcBefore(cfs));
  this.isCommutative=cfs.metadata.isCounter();
  this.isIndex=cfs.isIndex();
  this.checkData=checkData && !this.isIndex;
  this.expectedBloomFilterSize=Math.max(cfs.metadata.getMinIndexInterval(),(int)(SSTableReader.getApproximateKeyCount(toScrub)));
  this.dataFile=isOffline ? sstable.openDataReader() : sstable.openDataReader(CompactionManager.instance.getRateLimiter());
  this.indexFile=RandomAccessReader.open(new File(sstable.descriptor.filenameFor(Component.PRIMARY_INDEX)));
  this.scrubInfo=new ScrubInfo(dataFile,sstable);
  this.currentRowPositionFromIndex=0;
  this.nextRowPositionFromIndex=0;
}
