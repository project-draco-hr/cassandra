{
  final DeletionInfo delInfo=source.deletionInfo();
  if (!delInfo.hasRanges() || slices.length == 0)   return Iterators.emptyIterator();
  return new AbstractIterator<RangeTombstone>(){
    private int sliceIdx=0;
    private Iterator<RangeTombstone> sliceIter=currentRangeIter();
    protected RangeTombstone computeNext(){
      while (true) {
        if (sliceIter.hasNext())         return sliceIter.next();
        if (!nextSlice())         return endOfData();
        sliceIter=currentRangeIter();
      }
    }
    private Iterator<RangeTombstone> currentRangeIter(){
      ColumnSlice slice=slices[reversed ? (slices.length - 1 - sliceIdx) : sliceIdx];
      return reversed ? delInfo.rangeIterator(slice.finish,slice.start) : delInfo.rangeIterator(slice.start,slice.finish);
    }
    private boolean nextSlice(){
      return ++sliceIdx < slices.length;
    }
  }
;
}
