{
  SuperColumn scFiltered=superColumn.cloneMeShallow();
  final Iterator<IColumn> subcolumns;
  if (reversed) {
    List<IColumn> columnsAsList=new ArrayList<IColumn>(superColumn.getSubColumns());
    subcolumns=Lists.reverse(columnsAsList).iterator();
  }
 else {
    subcolumns=superColumn.getSubColumns().iterator();
  }
  final Comparator<ByteBuffer> comparator=reversed ? superColumn.getComparator().reverseComparator : superColumn.getComparator();
  Iterator<IColumn> results=new AbstractIterator<IColumn>(){
    protected IColumn computeNext(){
      while (subcolumns.hasNext()) {
        IColumn subcolumn=subcolumns.next();
        if (comparator.compare(subcolumn.name(),start()) < 0)         continue;
        if (finish().remaining() > 0 && comparator.compare(subcolumn.name(),finish()) > 0)         break;
        return subcolumn;
      }
      return endOfData();
    }
  }
;
  collectReducedColumns(scFiltered,results,gcBefore);
  return scFiltered;
}
