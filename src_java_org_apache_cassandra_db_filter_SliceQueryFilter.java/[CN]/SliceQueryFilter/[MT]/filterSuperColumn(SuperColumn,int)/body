{
  SuperColumn scFiltered=superColumn.cloneMeShallow();
  Iterator<IColumn> subcolumns;
  if (reversed) {
    List<IColumn> columnsAsList=new ArrayList<IColumn>(superColumn.getSubColumns());
    subcolumns=Lists.reverse(columnsAsList).iterator();
  }
 else {
    subcolumns=superColumn.getSubColumns().iterator();
  }
  Comparator<ByteBuffer> comparator=reversed ? superColumn.getComparator().reverseComparator : superColumn.getComparator();
  while (subcolumns.hasNext()) {
    IColumn column=subcolumns.next();
    if (comparator.compare(column.name(),start) >= 0) {
      subcolumns=Iterators.concat(Iterators.singletonIterator(column),subcolumns);
      break;
    }
  }
  collectReducedColumns(scFiltered,subcolumns,gcBefore);
  return scFiltered;
}
