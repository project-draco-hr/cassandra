{
  columnCounter=columnCounter(container.getComparator(),now);
  DeletionInfo.InOrderTester tester=container.deletionInfo().inOrderTester(reversed);
  while (reducedColumns.hasNext()) {
    Column column=reducedColumns.next();
    if (logger.isTraceEnabled())     logger.trace(String.format("collecting %s of %s: %s",columnCounter.live(),count,column.getString(container.getComparator())));
    columnCounter.count(column,tester);
    if (columnCounter.live() > count)     break;
    if (respectTombstoneFailures() && columnCounter.ignored() > DatabaseDescriptor.getTombstoneFailureThreshold()) {
      Tracing.trace("Scanned over {} tombstones; query aborted (see tombstone_fail_threshold)",DatabaseDescriptor.getTombstoneFailureThreshold());
      logger.error("Scanned over {} tombstones; query aborted (see tombstone_fail_threshold)",DatabaseDescriptor.getTombstoneFailureThreshold());
      throw new TombstoneOverwhelmingException();
    }
    container.addIfRelevant(column,tester,gcBefore);
  }
  Tracing.trace("Read {} live and {} tombstoned cells",columnCounter.live(),columnCounter.ignored());
  if (columnCounter.ignored() > DatabaseDescriptor.getTombstoneWarnThreshold())   logger.warn("Read {} live and {} tombstoned cells (see tombstone_warn_threshold)",columnCounter.live(),columnCounter.ignored());
}
