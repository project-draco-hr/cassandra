{
  columnCounter=columnCounter(container.getComparator(),now);
  DeletionInfo.InOrderTester tester=container.deletionInfo().inOrderTester(reversed);
  while (reducedColumns.hasNext()) {
    Cell cell=reducedColumns.next();
    if (logger.isTraceEnabled())     logger.trace(String.format("collecting %s of %s: %s",columnCounter.live(),count,cell.getString(container.getComparator())));
    columnCounter.count(cell,tester);
    if (columnCounter.live() > count)     break;
    if (respectTombstoneThresholds() && columnCounter.ignored() > DatabaseDescriptor.getTombstoneFailureThreshold()) {
      Tracing.trace("Scanned over {} tombstones; query aborted (see tombstone_failure_threshold); slices={}",DatabaseDescriptor.getTombstoneFailureThreshold(),getSlicesInfo(container));
      throw new TombstoneOverwhelmingException(columnCounter.ignored(),count,container.metadata().ksName,container.metadata().cfName,container.getComparator().getString(cell.name()),getSlicesInfo(container));
    }
    container.maybeAppendColumn(cell,tester,gcBefore);
  }
  boolean warnTombstones=logger.isWarnEnabled() && respectTombstoneThresholds() && columnCounter.ignored() > DatabaseDescriptor.getTombstoneWarnThreshold();
  if (warnTombstones) {
    String msg=String.format("Read %d live and %d tombstoned cells in %s.%s for key: %1.512s (see tombstone_warn_threshold). %d columns were requested, slices=%1.512s",columnCounter.live(),columnCounter.ignored(),container.metadata().ksName,container.metadata().cfName,container.metadata().getKeyValidator().getString(key.getKey()),count,getSlicesInfo(container));
    logger.warn(msg);
  }
  Tracing.trace("Read {} live and {} tombstoned cells{}",columnCounter.live(),columnCounter.ignored(),warnTombstones ? " (see tombstone_warn_threshold)" : "");
}
