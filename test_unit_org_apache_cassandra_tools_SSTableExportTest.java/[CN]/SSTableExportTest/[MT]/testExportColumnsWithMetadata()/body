{
  File tempSS=tempSSTableFile(KEYSPACE1,"Standard1");
  ColumnFamily cfamily=ArrayBackedSortedColumns.factory.create(KEYSPACE1,"Standard1");
  SSTableWriter writer=new SSTableWriter(tempSS.getPath(),2);
  cfamily.addColumn(Util.cellname("colName"),ByteBufferUtil.bytes("val"),System.currentTimeMillis());
  cfamily.addColumn(Util.cellname("colName1"),ByteBufferUtil.bytes("val1"),System.currentTimeMillis());
  cfamily.delete(new DeletionInfo(0,0));
  writer.append(Util.dk("rowA"),cfamily);
  SSTableReader reader=writer.closeAndOpenReader();
  File tempJson=File.createTempFile("CFWithDeletionInfo",".json");
  SSTableExport.export(reader,new PrintStream(tempJson.getPath()),new String[0],CFMetaData.sparseCFMetaData(KEYSPACE1,"Counter1",BytesType.instance));
  JSONArray json=(JSONArray)JSONValue.parseWithException(new FileReader(tempJson));
  assertEquals("unexpected number of rows",1,json.size());
  JSONObject row=(JSONObject)json.get(0);
  assertEquals("unexpected number of keys",3,row.keySet().size());
  assertEquals("unexpected row key",asHex("rowA"),row.get("key"));
  String rowKey=(String)row.get("key");
  assertNotNull("expecing key to be present",rowKey);
  assertEquals("key did not match",ByteBufferUtil.bytes("rowA"),hexToBytes(rowKey));
  JSONObject meta=(JSONObject)row.get("metadata");
  assertNotNull("expecing metadata to be present",meta);
  assertEquals("unexpected number of metadata entries",1,meta.keySet().size());
  JSONObject serializedDeletionInfo=(JSONObject)meta.get("deletionInfo");
  assertNotNull("expecing deletionInfo to be present",serializedDeletionInfo);
  assertEquals("unexpected serialization format for topLevelDeletion","{\"markedForDeleteAt\":0,\"localDeletionTime\":0}",serializedDeletionInfo.toJSONString());
  JSONArray cols=(JSONArray)row.get("cells");
  assertNotNull("expecing columns to be present",cols);
  assertEquals("expecting two columns",2,cols.size());
  JSONArray col1=(JSONArray)cols.get(0);
  assertEquals("column name did not match",ByteBufferUtil.bytes("colName"),hexToBytes((String)col1.get(0)));
  assertEquals("column value did not match",ByteBufferUtil.bytes("val"),hexToBytes((String)col1.get(1)));
  JSONArray col2=(JSONArray)cols.get(1);
  assertEquals("column name did not match",ByteBufferUtil.bytes("colName1"),hexToBytes((String)col2.get(0)));
  assertEquals("column value did not match",ByteBufferUtil.bytes("val1"),hexToBytes((String)col2.get(1)));
}
