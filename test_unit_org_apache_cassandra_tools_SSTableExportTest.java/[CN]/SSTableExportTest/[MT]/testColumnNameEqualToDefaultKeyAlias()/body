{
  File tempSS=tempSSTableFile(KEYSPACE1,"UUIDKeys");
  ColumnFamily cfamily=ArrayBackedSortedColumns.factory.create(KEYSPACE1,"UUIDKeys");
  SSTableWriter writer=new SSTableWriter(tempSS.getPath(),2,ActiveRepairService.UNREPAIRED_SSTABLE);
  cfamily.addColumn(column(CFMetaData.DEFAULT_KEY_ALIAS,"not a uuid",1L));
  writer.append(Util.dk(ByteBufferUtil.bytes(UUIDGen.getTimeUUID())),cfamily);
  SSTableReader reader=writer.closeAndOpenReader();
  File tempJson=File.createTempFile("CFWithColumnNameEqualToDefaultKeyAlias",".json");
  SSTableExport.export(reader,new PrintStream(tempJson.getPath()),new String[0],CFMetaData.sparseCFMetaData("Keyspace1","UUIDKeys",BytesType.instance));
  JSONArray json=(JSONArray)JSONValue.parseWithException(new FileReader(tempJson));
  assertEquals(1,json.size());
  JSONObject row=(JSONObject)json.get(0);
  JSONArray cols=(JSONArray)row.get("cells");
  assertEquals(1,cols.size());
  JSONArray col=(JSONArray)cols.get(0);
  assertEquals(CFMetaData.DEFAULT_KEY_ALIAS,ByteBufferUtil.string(hexToBytes((String)col.get(0))));
  assertEquals("not a uuid",ByteBufferUtil.string(hexToBytes((String)col.get(1))));
}
