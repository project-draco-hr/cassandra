{
  AbstractBounds<PartitionPosition> range=AbstractBounds.rowPositionSerializer.deserialize(in,metadata.partitioner,version);
  ClusteringIndexFilter filter=ClusteringIndexFilter.serializer.deserialize(in,version,metadata);
  if (in.readBoolean()) {
    ClusteringComparator comparator=metadata.comparator;
    Clustering lastReturned=Clustering.serializer.deserialize(in,version,comparator.subtypes());
    boolean inclusive=in.readBoolean();
    return new Paging(range,filter,comparator,lastReturned,inclusive);
  }
 else {
    return new DataRange(range,filter);
  }
}
