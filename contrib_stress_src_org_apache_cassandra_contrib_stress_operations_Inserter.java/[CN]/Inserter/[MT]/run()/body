{
  List<String> values=generateValues();
  List<Column> columns=new ArrayList<Column>();
  List<SuperColumn> superColumns=new ArrayList<SuperColumn>();
  String format="%0" + session.getTotalKeysLength() + "d";
  for (int i=0; i < session.getColumnsPerKey(); i++) {
    byte[] columnName=("C" + Integer.toString(i)).getBytes();
    columns.add(new Column(ByteBuffer.wrap(columnName),ByteBuffer.wrap(new byte[]{}),System.currentTimeMillis()));
  }
  if (session.getColumnFamilyType() == ColumnFamilyType.Super) {
    for (int i=0; i < session.getSuperColumns(); i++) {
      String superColumnName="S" + Integer.toString(i);
      superColumns.add(new SuperColumn(ByteBuffer.wrap(superColumnName.getBytes()),columns));
    }
  }
  for (  int i : range) {
    String rawKey=String.format(format,i);
    ByteBuffer key=ByteBuffer.wrap(rawKey.getBytes());
    Map<ByteBuffer,Map<String,List<Mutation>>> record=new HashMap<ByteBuffer,Map<String,List<Mutation>>>();
    record.put(key,session.getColumnFamilyType() == ColumnFamilyType.Super ? getSuperColumnsMutationMap(superColumns) : getColumnsMutationMap(columns));
    String value=values.get(i % values.size());
    for (    Column c : columns)     c.value=ByteBuffer.wrap(value.getBytes());
    long start=System.currentTimeMillis();
    boolean success=false;
    String exceptionMessage=null;
    for (int t=0; t < session.getRetryTimes(); t++) {
      if (success)       break;
      try {
        client.batch_mutate(record,session.getConsistencyLevel());
        success=true;
      }
 catch (      Exception e) {
        exceptionMessage=getExceptionMessage(e);
        success=false;
      }
    }
    if (!success) {
      System.err.printf("Thread [%d] retried %d times - error inserting key %s %s%n",index,session.getRetryTimes(),rawKey,(exceptionMessage == null) ? "" : "(" + exceptionMessage + ")");
      if (!session.ignoreErrors())       break;
    }
    session.operationCount.getAndIncrement(index);
    session.keyCount.getAndIncrement(index);
    session.latencies.getAndAdd(index,System.currentTimeMillis() - start);
  }
}
