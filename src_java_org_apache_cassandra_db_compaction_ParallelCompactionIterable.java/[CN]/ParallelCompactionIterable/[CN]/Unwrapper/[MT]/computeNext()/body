{
  if (!reducer.hasNext())   return endOfData();
  CompactedRowContainer container=reducer.next();
  AbstractCompactedRow compactedRow;
  try {
    compactedRow=container.future == null ? container.row : new PrecompactedRow(container.key,container.future.get());
  }
 catch (  InterruptedException e) {
    throw new AssertionError(e);
  }
catch (  ExecutionException e) {
    throw new RuntimeException(e);
  }
  if (compactedRow.isEmpty()) {
    controller.invalidateCachedRow(compactedRow.key);
    try {
      compactedRow.close();
    }
 catch (    IOException e) {
      throw new RuntimeException(e);
    }
    return null;
  }
 else {
    controller.invalidateCachedRow(compactedRow.key);
    return compactedRow;
  }
}
