{
  ListenableFutureTask<List<ListenableFuture<?>>> f=ListenableFutureTask.create(new Callable<List<ListenableFuture<?>>>(){
    @Override public List<ListenableFuture<?>> call(){
      final List<ListenableFuture<?>> r=new ArrayList<>();
      NavigableMap<Integer,Integer> canon=new TreeMap<>();
      Object[] btree=BTree.empty();
      final TreeMap<Integer,Integer> buffer=new TreeMap<>();
      final Random rnd=new Random();
      for (int i=0; i < iterations; i++) {
        buffer.clear();
        int mods=(averageModsPerIteration >> 1) + 1 + rnd.nextInt(averageModsPerIteration);
        while (mods > 0) {
          int v=rnd.nextInt(upperBound);
          int rc=Math.max(0,Math.min(mods,maxRunLength) - 1);
          int c=1 + (rc <= 0 ? 0 : rnd.nextInt(rc));
          for (int j=0; j < c; j++) {
            buffer.put(v,v);
            v++;
          }
          mods-=c;
        }
        Timer.Context ctxt;
        ctxt=TREE_TIMER.time();
        canon.putAll(buffer);
        ctxt.stop();
        ctxt=BTREE_TIMER.time();
        Object[] next=null;
        while (next == null)         next=BTree.update(btree,naturalOrder(),buffer.keySet(),SPORADIC_ABORT);
        btree=next;
        ctxt.stop();
        if (!BTree.isWellFormed(btree,naturalOrder())) {
          System.out.println("ERROR: Not well formed");
          throw new AssertionError("Not well formed!");
        }
        if (quickEquality)         testEqual("",BTree.<Integer>slice(btree,naturalOrder(),true),canon.keySet().iterator());
 else         r.addAll(testAllSlices("RND",btree,new TreeSet<>(canon.keySet())));
      }
      return r;
    }
  }
);
  if (DEBUG)   f.run();
 else   MODIFY.execute(f);
  return f;
}
