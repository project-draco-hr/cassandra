{
  int threads=Runtime.getRuntime().availableProcessors();
  final CountDownLatch latch=new CountDownLatch(threads);
  final AtomicLong errors=new AtomicLong();
  final AtomicLong count=new AtomicLong();
  final long totalCount=threads * perThreadTrees * perTreeSelections;
  for (int t=0; t < threads; t++) {
    Runnable runnable=new Runnable(){
      public void run(){
        try {
          for (int i=0; i < perThreadTrees; i++) {
            RandomTree tree=randomTree(minTreeSize,maxTreeSize);
            for (int j=0; j < perTreeSelections; j++) {
              testRun.accept(tree.select(narrow,mixInNotPresentItems,permitReversal));
              count.incrementAndGet();
            }
          }
        }
 catch (        Throwable t) {
          errors.incrementAndGet();
          t.printStackTrace();
        }
        latch.countDown();
      }
    }
;
    MODIFY.execute(runnable);
  }
  while (latch.getCount() > 0) {
    for (int i=0; i < 10L; i++) {
      latch.await(1L,TimeUnit.SECONDS);
      Assert.assertEquals(0,errors.get());
    }
    log("%.1f%% complete %s",100 * count.get() / (double)totalCount,errors.get() > 0 ? ("Errors: " + errors.get()) : "");
  }
}
