{
  this.sstable=sstable;
  this.originalInput=input;
  this.reversed=reversed;
  this.slices=slices;
  this.comparator=sstable.metadata.comparator;
  try {
    Descriptor.Version version=sstable.descriptor.version;
    emptyColumnFamily=ColumnFamily.create(sstable.metadata);
    if (version.hasPromotedRowTombstones && !rowEntry.columnsIndex().isEmpty()) {
      indexes=rowEntry.columnsIndex();
      emptyColumnFamily.delete(new DeletionInfo(rowEntry.deletionTime()));
      fetcher=new IndexedBlockFetcher(rowEntry.position);
      return;
    }
    if (input == null) {
      file=sstable.getFileDataInput(rowEntry.position);
    }
 else {
      file=input;
      file.seek(rowEntry.position);
    }
    this.sstable.decodeKey(ByteBufferUtil.readWithShortLength(file));
    SSTableReader.readRowSize(file,this.sstable.descriptor);
    if (version.hasPromotedIndexes) {
      indexes=rowEntry.columnsIndex();
    }
 else {
      IndexHelper.skipSSTableBloomFilter(file,version);
      indexes=IndexHelper.deserializeIndex(file);
    }
    emptyColumnFamily.delete(DeletionInfo.serializer().deserializeFromSSTable(file,version));
    if (indexes.isEmpty()) {
      fetcher=new SimpleBlockFetcher();
    }
 else {
      fetcher=version.hasPromotedIndexes ? new IndexedBlockFetcher(rowEntry.position) : new IndexedBlockFetcher(file.getFilePointer() + 4);
    }
  }
 catch (  IOException e) {
    sstable.markSuspect();
    throw new CorruptSSTableException(e,file.getPath());
  }
}
