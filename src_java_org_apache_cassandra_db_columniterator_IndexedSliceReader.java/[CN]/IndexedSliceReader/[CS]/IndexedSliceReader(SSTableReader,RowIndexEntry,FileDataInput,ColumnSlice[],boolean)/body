{
  this.sstable=sstable;
  this.originalInput=input;
  this.reversed=reversed;
  this.slices=slices;
  this.comparator=sstable.metadata.comparator;
  try {
    Descriptor.Version version=sstable.descriptor.version;
    this.indexes=indexEntry.columnsIndex();
    if (indexes.isEmpty()) {
      setToRowStart(sstable,indexEntry,input);
      this.emptyColumnFamily=EmptyColumns.factory.create(sstable.metadata);
      emptyColumnFamily.delete(DeletionInfo.serializer().deserializeFromSSTable(file,version));
      fetcher=new SimpleBlockFetcher();
    }
 else {
      emptyColumnFamily=EmptyColumns.factory.create(sstable.metadata);
      emptyColumnFamily.delete(indexEntry.deletionTime());
      fetcher=new IndexedBlockFetcher(indexEntry.position);
    }
  }
 catch (  IOException e) {
    sstable.markSuspect();
    throw new CorruptSSTableException(e,file.getPath());
  }
}
