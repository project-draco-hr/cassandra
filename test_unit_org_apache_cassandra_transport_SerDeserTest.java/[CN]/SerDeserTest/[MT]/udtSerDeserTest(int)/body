{
  ListType<?> lt=ListType.getInstance(Int32Type.instance,true);
  SetType<?> st=SetType.getInstance(UTF8Type.instance,true);
  MapType<?,?> mt=MapType.getInstance(UTF8Type.instance,LongType.instance,true);
  UserType udt=new UserType("ks",bb("myType"),Arrays.asList(bb("f1"),bb("f2"),bb("f3"),bb("f4")),Arrays.asList(LongType.instance,lt,st,mt),true);
  Map<ColumnIdentifier,Term.Raw> value=new HashMap<>();
  value.put(ci("f1"),lit(42));
  value.put(ci("f2"),new Lists.Literal(Arrays.<Term.Raw>asList(lit(3),lit(1))));
  value.put(ci("f3"),new Sets.Literal(Arrays.<Term.Raw>asList(lit("foo"),lit("bar"))));
  value.put(ci("f4"),new Maps.Literal(Arrays.<Pair<Term.Raw,Term.Raw>>asList(Pair.<Term.Raw,Term.Raw>create(lit("foo"),lit(24)),Pair.<Term.Raw,Term.Raw>create(lit("bar"),lit(12)))));
  UserTypes.Literal u=new UserTypes.Literal(value);
  Term t=u.prepare("ks",columnSpec("myValue",udt));
  QueryOptions options=QueryOptions.DEFAULT;
  ByteBuffer serialized=t.bindAndGet(options);
  ByteBuffer[] fields=udt.split(serialized);
  assertEquals(4,fields.length);
  assertEquals(bytes(42L),fields[0]);
  assertEquals(Arrays.asList(3,1),lt.getSerializer().deserializeForNativeProtocol(fields[1],3));
  LinkedHashSet<String> s=new LinkedHashSet<>();
  s.addAll(Arrays.asList("bar","foo"));
  assertEquals(s,st.getSerializer().deserializeForNativeProtocol(fields[2],3));
  LinkedHashMap<String,Long> m=new LinkedHashMap<>();
  m.put("bar",12L);
  m.put("foo",24L);
  assertEquals(m,mt.getSerializer().deserializeForNativeProtocol(fields[3],3));
}
