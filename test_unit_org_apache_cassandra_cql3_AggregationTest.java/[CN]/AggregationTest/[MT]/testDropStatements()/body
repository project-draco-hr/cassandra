{
  String f=createFunction(KEYSPACE,"double, double","CREATE OR REPLACE FUNCTION %s(state double, val double) " + "RETURNS double " + "LANGUAGE javascript "+ "AS '\"string\";';");
  createFunctionOverload(f,"double, double","CREATE OR REPLACE FUNCTION %s(state int, val int) " + "RETURNS int " + "LANGUAGE javascript "+ "AS '\"string\";';");
  assertInvalidMessage("matches multiple function definitions","DROP AGGREGATE " + f);
  assertInvalidMessage("non existing","DROP AGGREGATE " + f + "(double, double)");
  String a=createAggregate(KEYSPACE,"double","CREATE OR REPLACE AGGREGATE %s(double) " + "SFUNC " + shortFunctionName(f) + " "+ "STYPE double");
  createAggregateOverload(a,"int","CREATE OR REPLACE AGGREGATE %s(int) " + "SFUNC " + shortFunctionName(f) + " "+ "STYPE int");
  assertInvalidMessage("matches multiple function definitions","DROP FUNCTION " + a);
  assertInvalidMessage("non existing function","DROP FUNCTION " + a + "(double)");
  assertInvalidMessage("matches multiple function definitions","DROP AGGREGATE " + a);
  assertInvalidMessage("matches multiple function definitions","DROP AGGREGATE IF EXISTS " + a);
  execute("DROP AGGREGATE IF EXISTS " + KEYSPACE + ".non_existing");
  execute("DROP AGGREGATE IF EXISTS " + a + "(int, text)");
  execute("DROP AGGREGATE " + a + "(double)");
  execute("DROP AGGREGATE IF EXISTS " + a + "(double)");
}
