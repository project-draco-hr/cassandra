{
  String fStateNonNull=createFunction(KEYSPACE,"int, int","CREATE OR REPLACE FUNCTION %s(state int, val int) " + "RETURNS NULL ON NULL INPUT " + "RETURNS int "+ "LANGUAGE java\n"+ "AS 'return Integer.valueOf(state + val);';");
  String fStateNull=createFunction(KEYSPACE,"int, int","CREATE OR REPLACE FUNCTION %s(state int, val int) " + "CALLED ON NULL INPUT " + "RETURNS int "+ "LANGUAGE java\n"+ "AS 'return Integer.valueOf("+ "   (state != null ? state.intValue() : 0) "+ "   + (val != null ? val.intValue() : 0));';");
  String fStateAlwaysNull=createFunction(KEYSPACE,"int, int","CREATE OR REPLACE FUNCTION %s(state int, val int) " + "CALLED ON NULL INPUT " + "RETURNS int "+ "LANGUAGE java\n"+ "AS 'return null;';");
  String fFinalNonNull=createFunction(KEYSPACE,"int","CREATE OR REPLACE FUNCTION %s(state int) " + "RETURNS NULL ON NULL INPUT " + "RETURNS int "+ "LANGUAGE java\n"+ "AS 'return Integer.valueOf(state);';");
  String fFinalNull=createFunction(KEYSPACE,"int","CREATE OR REPLACE FUNCTION %s(state int) " + "CALLED ON NULL INPUT " + "RETURNS int "+ "LANGUAGE java\n"+ "AS 'return state;';");
  assertInvalid("CREATE AGGREGATE " + KEYSPACE + ".invAggr(int) "+ "SFUNC "+ shortFunctionName(fStateNonNull)+ " "+ "STYPE int");
  assertInvalid("CREATE AGGREGATE " + KEYSPACE + ".invAggr(int) "+ "SFUNC "+ shortFunctionName(fStateNonNull)+ " "+ "STYPE int "+ "FINALFUNC "+ shortFunctionName(fFinalNonNull));
  String aStateNull=createAggregate(KEYSPACE,"int","CREATE AGGREGATE %s(int) " + "SFUNC " + shortFunctionName(fStateNull) + " "+ "STYPE int");
  String aStateNullFinalNull=createAggregate(KEYSPACE,"int","CREATE AGGREGATE %s(int) " + "SFUNC " + shortFunctionName(fStateNull) + " "+ "STYPE int "+ "FINALFUNC "+ shortFunctionName(fFinalNull));
  String aStateNullFinalNonNull=createAggregate(KEYSPACE,"int","CREATE AGGREGATE %s(int) " + "SFUNC " + shortFunctionName(fStateNull) + " "+ "STYPE int "+ "FINALFUNC "+ shortFunctionName(fFinalNonNull));
  String aStateNonNull=createAggregate(KEYSPACE,"int","CREATE AGGREGATE %s(int) " + "SFUNC " + shortFunctionName(fStateNonNull) + " "+ "STYPE int "+ "INITCOND 0");
  String aStateNonNullFinalNull=createAggregate(KEYSPACE,"int","CREATE AGGREGATE %s(int) " + "SFUNC " + shortFunctionName(fStateNonNull) + " "+ "STYPE int "+ "FINALFUNC "+ shortFunctionName(fFinalNull)+ " "+ "INITCOND 0");
  String aStateNonNullFinalNonNull=createAggregate(KEYSPACE,"int","CREATE AGGREGATE %s(int) " + "SFUNC " + shortFunctionName(fStateNonNull) + " "+ "STYPE int "+ "FINALFUNC "+ shortFunctionName(fFinalNonNull)+ " "+ "INITCOND 0");
  String aStateAlwaysNullFinalNull=createAggregate(KEYSPACE,"int","CREATE AGGREGATE %s(int) " + "SFUNC " + shortFunctionName(fStateAlwaysNull) + " "+ "STYPE int "+ "FINALFUNC "+ shortFunctionName(fFinalNull));
  String aStateAlwaysNullFinalNonNull=createAggregate(KEYSPACE,"int","CREATE AGGREGATE %s(int) " + "SFUNC " + shortFunctionName(fStateAlwaysNull) + " "+ "STYPE int "+ "FINALFUNC "+ shortFunctionName(fFinalNonNull));
  createTable("CREATE TABLE %s (key int PRIMARY KEY, i int)");
  execute("INSERT INTO %s (key, i) VALUES (0, null)");
  execute("INSERT INTO %s (key, i) VALUES (1, 1)");
  execute("INSERT INTO %s (key, i) VALUES (2, 2)");
  execute("INSERT INTO %s (key, i) VALUES (3, 3)");
  assertRows(execute("SELECT " + aStateNull + "(i) FROM %s WHERE key = 0"),row(0));
  assertRows(execute("SELECT " + aStateNullFinalNull + "(i) FROM %s WHERE key = 0"),row(0));
  assertRows(execute("SELECT " + aStateNullFinalNonNull + "(i) FROM %s WHERE key = 0"),row(0));
  assertRows(execute("SELECT " + aStateNonNull + "(i) FROM %s WHERE key = 0"),row(0));
  assertRows(execute("SELECT " + aStateNonNullFinalNull + "(i) FROM %s WHERE key = 0"),row(0));
  assertRows(execute("SELECT " + aStateNonNullFinalNonNull + "(i) FROM %s WHERE key = 0"),row(0));
  assertRows(execute("SELECT " + aStateAlwaysNullFinalNull + "(i) FROM %s WHERE key = 0"),row(new Object[]{null}));
  assertRows(execute("SELECT " + aStateAlwaysNullFinalNonNull + "(i) FROM %s WHERE key = 0"),row(new Object[]{null}));
  assertRows(execute("SELECT " + aStateNull + "(i) FROM %s WHERE key = 1"),row(1));
  assertRows(execute("SELECT " + aStateNullFinalNull + "(i) FROM %s WHERE key = 1"),row(1));
  assertRows(execute("SELECT " + aStateNullFinalNonNull + "(i) FROM %s WHERE key = 1"),row(1));
  assertRows(execute("SELECT " + aStateNonNull + "(i) FROM %s WHERE key = 1"),row(1));
  assertRows(execute("SELECT " + aStateNonNullFinalNull + "(i) FROM %s WHERE key = 1"),row(1));
  assertRows(execute("SELECT " + aStateNonNullFinalNonNull + "(i) FROM %s WHERE key = 1"),row(1));
  assertRows(execute("SELECT " + aStateAlwaysNullFinalNull + "(i) FROM %s WHERE key = 1"),row(new Object[]{null}));
  assertRows(execute("SELECT " + aStateAlwaysNullFinalNonNull + "(i) FROM %s WHERE key = 1"),row(new Object[]{null}));
  assertRows(execute("SELECT " + aStateNull + "(i) FROM %s WHERE key IN (1, 2, 3)"),row(6));
  assertRows(execute("SELECT " + aStateNullFinalNull + "(i) FROM %s WHERE key IN (1, 2, 3)"),row(6));
  assertRows(execute("SELECT " + aStateNullFinalNonNull + "(i) FROM %s WHERE key IN (1, 2, 3)"),row(6));
  assertRows(execute("SELECT " + aStateNonNull + "(i) FROM %s WHERE key IN (1, 2, 3)"),row(6));
  assertRows(execute("SELECT " + aStateNonNullFinalNull + "(i) FROM %s WHERE key IN (1, 2, 3)"),row(6));
  assertRows(execute("SELECT " + aStateNonNullFinalNonNull + "(i) FROM %s WHERE key IN (1, 2, 3)"),row(6));
  assertRows(execute("SELECT " + aStateAlwaysNullFinalNull + "(i) FROM %s WHERE key IN (1, 2, 3)"),row(new Object[]{null}));
  assertRows(execute("SELECT " + aStateAlwaysNullFinalNonNull + "(i) FROM %s WHERE key IN (1, 2, 3)"),row(new Object[]{null}));
}
