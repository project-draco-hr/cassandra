{
  String table=createTable("CREATE TABLE %s (" + commonColumnsDef + "PRIMARY KEY ((part_key_a, part_key_b),clust_key_a,clust_key_b,clust_key_c))");
  createIndex("CREATE INDEX some_index ON %s (col_int)");
  insertData(table,"some_index",true);
  clearCache();
  CacheMetrics metrics=CacheService.instance.keyCache.getMetrics();
  for (int i=0; i < 10; i++) {
    UntypedResultSet result=execute("SELECT part_key_a FROM %s WHERE col_int = ?",i);
    assertEquals(500,result.size());
  }
  long hits=metrics.hits.count();
  long requests=metrics.requests.count();
  assertEquals(4900,hits);
  assertEquals(5250,requests);
  for (int i=0; i < 10; i++) {
    UntypedResultSet result=execute("SELECT part_key_a FROM %s WHERE col_int = ?",i);
    assertEquals(500,result.size());
  }
  metrics=CacheService.instance.keyCache.getMetrics();
  hits=metrics.hits.count();
  requests=metrics.requests.count();
  assertEquals(10000,hits);
  assertEquals(10500,requests);
  dropTable("DROP TABLE %s");
  CacheService.instance.keyCache.submitWrite(Integer.MAX_VALUE).get();
  CacheService.instance.keyCache.clear();
  Assert.assertEquals(0,CacheService.instance.keyCache.size());
  CacheService.instance.keyCache.loadSaved();
  for (  KeyCacheKey key : CacheService.instance.keyCache.getKeySet()) {
    Assert.assertFalse(key.ksAndCFName.left.equals("KEYSPACE"));
    Assert.assertFalse(key.ksAndCFName.right.startsWith(table));
  }
}
