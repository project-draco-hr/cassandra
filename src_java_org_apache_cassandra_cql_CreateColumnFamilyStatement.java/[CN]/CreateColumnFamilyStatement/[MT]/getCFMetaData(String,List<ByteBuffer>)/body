{
  validate(variables);
  CFMetaData newCFMD;
  try {
    AbstractType<?> comparator=cfProps.getComparator();
    newCFMD=new CFMetaData(keyspace,name,ColumnFamilyType.Standard,comparator,null);
    if (CFMetaData.DEFAULT_COMPRESSOR != null && cfProps.compressionParameters.isEmpty())     cfProps.compressionParameters.put(CompressionParameters.SSTABLE_COMPRESSION,CFMetaData.DEFAULT_COMPRESSOR);
    int maxCompactionThreshold=getPropertyInt(CFPropDefs.KW_MAXCOMPACTIONTHRESHOLD,CFMetaData.DEFAULT_MAX_COMPACTION_THRESHOLD);
    int minCompactionThreshold=getPropertyInt(CFPropDefs.KW_MINCOMPACTIONTHRESHOLD,CFMetaData.DEFAULT_MIN_COMPACTION_THRESHOLD);
    if (minCompactionThreshold <= 0 || maxCompactionThreshold <= 0)     throw new ConfigurationException("Disabling compaction by setting compaction thresholds to 0 has been deprecated, set the compaction option 'enabled' to false instead.");
    newCFMD.comment(cfProps.getProperty(CFPropDefs.KW_COMMENT)).readRepairChance(getPropertyDouble(CFPropDefs.KW_READREPAIRCHANCE,CFMetaData.DEFAULT_READ_REPAIR_CHANCE)).dcLocalReadRepairChance(getPropertyDouble(CFPropDefs.KW_DCLOCALREADREPAIRCHANCE,CFMetaData.DEFAULT_DCLOCAL_READ_REPAIR_CHANCE)).replicateOnWrite(getPropertyBoolean(CFPropDefs.KW_REPLICATEONWRITE,CFMetaData.DEFAULT_REPLICATE_ON_WRITE)).gcGraceSeconds(getPropertyInt(CFPropDefs.KW_GCGRACESECONDS,CFMetaData.DEFAULT_GC_GRACE_SECONDS)).defaultValidator(cfProps.getValidator()).minCompactionThreshold(minCompactionThreshold).maxCompactionThreshold(maxCompactionThreshold).columnMetadata(getColumns(comparator)).keyValidator(TypeParser.parse(CFPropDefs.comparators.get(getKeyType()))).compactionStrategyClass(cfProps.compactionStrategyClass).compactionStrategyOptions(cfProps.compactionStrategyOptions).compressionParameters(CompressionParameters.create(cfProps.compressionParameters)).caching(CFMetaData.Caching.fromString(getPropertyString(CFPropDefs.KW_CACHING,CFMetaData.DEFAULT_CACHING_STRATEGY.toString()))).speculativeRetry(CFMetaData.SpeculativeRetry.fromString(getPropertyString(CFPropDefs.KW_SPECULATIVE_RETRY,CFMetaData.DEFAULT_SPECULATIVE_RETRY.toString()))).bloomFilterFpChance(getPropertyDouble(CFPropDefs.KW_BF_FP_CHANCE,null)).memtableFlushPeriod(getPropertyInt(CFPropDefs.KW_MEMTABLE_FLUSH_PERIOD,0)).defaultTimeToLive(getPropertyInt(CFPropDefs.KW_DEFAULT_TIME_TO_LIVE,CFMetaData.DEFAULT_DEFAULT_TIME_TO_LIVE)).populateIoCacheOnFlush(getPropertyBoolean(CFPropDefs.KW_POPULATE_IO_CACHE_ON_FLUSH,CFMetaData.DEFAULT_POPULATE_IO_CACHE_ON_FLUSH));
    if (keyAlias != null)     newCFMD.addColumnDefinition(ColumnDefinition.partitionKeyDef(keyAlias,newCFMD.getKeyValidator(),null));
  }
 catch (  ConfigurationException e) {
    throw new InvalidRequestException(e.toString());
  }
catch (  SyntaxException e) {
    throw new InvalidRequestException(e.toString());
  }
  return newCFMD;
}
