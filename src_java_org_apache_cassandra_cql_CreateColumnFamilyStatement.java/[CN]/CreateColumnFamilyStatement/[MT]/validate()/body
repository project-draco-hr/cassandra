{
  String compStrategy=getPropertyString(KW_COMPACTION_STRATEGY_CLASS,CFMetaData.DEFAULT_COMPACTION_STRATEGY_CLASS);
  try {
    compactionStrategyClass=CFMetaData.createCompactionStrategy(compStrategy);
  }
 catch (  ConfigurationException e) {
    throw new InvalidRequestException(e.getMessage());
  }
  Set<String> propsToRemove=new HashSet<String>();
  for (  String property : properties.keySet()) {
    if (!property.contains(":"))     continue;
    String key=property.split(":")[1];
    String val=properties.get(property);
    if (property.startsWith(COMPACTION_OPTIONS_PREFIX)) {
      compactionStrategyOptions.put(key,val);
      propsToRemove.add(property);
    }
    if (property.startsWith(COMPRESSION_PARAMETERS_PREFIX)) {
      compressionParameters.put(key,val);
      propsToRemove.add(property);
    }
  }
  for (  String property : propsToRemove)   properties.remove(property);
  if (!name.matches("\\w+"))   throw new InvalidRequestException(String.format("\"%s\" is not a valid column family name",name));
  for (  String bogus : Sets.difference(properties.keySet(),Sets.union(keywords,obsoleteKeywords)))   throw new InvalidRequestException(bogus + " is not a valid keyword argument for CREATE COLUMNFAMILY");
  for (  String obsolete : Sets.intersection(properties.keySet(),obsoleteKeywords))   logger.warn("Ignoring obsolete property {}",obsolete);
  Integer minCompaction=getPropertyInt(KW_MINCOMPACTIONTHRESHOLD,null);
  Integer maxCompaction=getPropertyInt(KW_MAXCOMPACTIONTHRESHOLD,null);
  if ((minCompaction != null) && (maxCompaction != null)) {
    if ((minCompaction > maxCompaction) && (maxCompaction != 0))     throw new InvalidRequestException(String.format("%s cannot be larger than %s",KW_MINCOMPACTIONTHRESHOLD,KW_MAXCOMPACTIONTHRESHOLD));
  }
 else   if (minCompaction != null) {
    if (minCompaction > CFMetaData.DEFAULT_MAX_COMPACTION_THRESHOLD)     throw new InvalidRequestException(String.format("%s cannot be larger than %s, (default %s)",KW_MINCOMPACTIONTHRESHOLD,KW_MAXCOMPACTIONTHRESHOLD,CFMetaData.DEFAULT_MAX_COMPACTION_THRESHOLD));
  }
 else   if (maxCompaction != null) {
    if ((maxCompaction < CFMetaData.DEFAULT_MIN_COMPACTION_THRESHOLD) && (maxCompaction != 0))     throw new InvalidRequestException(String.format("%s cannot be smaller than %s, (default %s)",KW_MAXCOMPACTIONTHRESHOLD,KW_MINCOMPACTIONTHRESHOLD,CFMetaData.DEFAULT_MIN_COMPACTION_THRESHOLD));
  }
  if (keyValidator.size() < 1)   throw new InvalidRequestException("You must specify a PRIMARY KEY");
 else   if (keyValidator.size() > 1)   throw new InvalidRequestException("You may only specify one PRIMARY KEY");
  AbstractType<?> comparator;
  try {
    comparator=getComparator();
  }
 catch (  ConfigurationException e) {
    throw new InvalidRequestException(e.toString());
  }
  for (  Map.Entry<Term,String> column : columns.entrySet()) {
    ByteBuffer name=column.getKey().getByteBuffer(comparator);
    if (keyAlias != null && keyAlias.equals(name))     throw new InvalidRequestException("Invalid column name: " + column.getKey().getText() + ", because it equals to the key_alias.");
  }
}
