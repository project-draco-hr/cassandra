{
  Set<String> keywordsFound=new HashSet<String>(properties.keySet());
  keywordsFound.removeAll(keywords);
  for (  String bogus : keywordsFound)   throw new InvalidRequestException(bogus + " is not a valid keyword argument for CREATE COLUMNFAMILY");
  Integer minCompaction=getPropertyInt(KW_MINCOMPACTIONTHRESHOLD,null);
  Integer maxCompaction=getPropertyInt(KW_MAXCOMPACTIONTHRESHOLD,null);
  if ((minCompaction != null) && (maxCompaction != null)) {
    if ((minCompaction > maxCompaction) && (maxCompaction != 0))     throw new InvalidRequestException(String.format("%s cannot be larger than %s",KW_MINCOMPACTIONTHRESHOLD,KW_MAXCOMPACTIONTHRESHOLD));
  }
 else   if (minCompaction != null) {
    if (minCompaction > CFMetaData.DEFAULT_MAX_COMPACTION_THRESHOLD)     throw new InvalidRequestException(String.format("%s cannot be larger than %s, (default %s)",KW_MINCOMPACTIONTHRESHOLD,KW_MAXCOMPACTIONTHRESHOLD,CFMetaData.DEFAULT_MAX_COMPACTION_THRESHOLD));
  }
 else   if (maxCompaction != null) {
    if ((maxCompaction < CFMetaData.DEFAULT_MIN_COMPACTION_THRESHOLD) && (maxCompaction != 0))     throw new InvalidRequestException(String.format("%s cannot be smaller than %s, (default %s)",KW_MAXCOMPACTIONTHRESHOLD,KW_MINCOMPACTIONTHRESHOLD,CFMetaData.DEFAULT_MIN_COMPACTION_THRESHOLD));
  }
  Integer memMins=getPropertyInt(KW_MEMTABLEFLUSHINMINS,null);
  Integer memMb=getPropertyInt(KW_MEMTABLESIZEINMB,null);
  Double memOps=getPropertyDouble(KW_MEMTABLEOPSINMILLIONS,null);
  if ((memMins != null) && (memMins <= 0))   throw new InvalidRequestException(String.format("%s must be non-negative and greater than zero",KW_MEMTABLEFLUSHINMINS));
  if ((memMb != null) && (memMb <= 0))   throw new InvalidRequestException(String.format("%s must be non-negative and greater than zero",KW_MEMTABLESIZEINMB));
  if ((memOps != null) && (memOps <= 0))   throw new InvalidRequestException(String.format("%s must be non-negative and greater than zero",KW_MEMTABLEOPSINMILLIONS));
}
