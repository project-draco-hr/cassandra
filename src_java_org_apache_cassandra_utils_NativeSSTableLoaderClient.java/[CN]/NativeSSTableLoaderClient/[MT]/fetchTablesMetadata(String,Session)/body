{
  Map<String,CFMetaData> tables=new HashMap<>();
  String query=String.format("SELECT * FROM %s.%s WHERE keyspace_name = ?",SchemaKeyspace.NAME,SchemaKeyspace.TABLES);
  for (  Row row : session.execute(query,keyspace)) {
    String name=row.getString("table_name");
    UUID id=row.getUUID("id");
    Set<CFMetaData.Flag> flags=row.isNull("flags") ? Collections.emptySet() : SchemaKeyspace.flagsFromStrings(row.getSet("flags",String.class));
    boolean isSuper=flags.contains(CFMetaData.Flag.SUPER);
    boolean isCounter=flags.contains(CFMetaData.Flag.COUNTER);
    boolean isDense=flags.contains(CFMetaData.Flag.DENSE);
    boolean isCompound=flags.contains(CFMetaData.Flag.COMPOUND);
    boolean isMaterializedView=flags.contains(CFMetaData.Flag.MATERIALIZEDVIEW);
    String columnsQuery=String.format("SELECT * FROM %s.%s WHERE keyspace_name = ? AND table_name = ?",SchemaKeyspace.NAME,SchemaKeyspace.COLUMNS);
    List<ColumnDefinition> defs=new ArrayList<>();
    for (    Row colRow : session.execute(columnsQuery,keyspace,name))     defs.add(createDefinitionFromRow(colRow,keyspace,name));
    tables.put(name,CFMetaData.create(keyspace,name,id,isDense,isCompound,isSuper,isCounter,isMaterializedView,defs,DatabaseDescriptor.getPartitioner()));
  }
  return tables;
}
