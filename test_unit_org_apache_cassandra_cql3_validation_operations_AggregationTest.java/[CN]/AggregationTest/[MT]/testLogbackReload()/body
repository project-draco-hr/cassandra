{
  configureLogbackScanPeriod(1L);
  try {
    createTable("CREATE TABLE %s (" + "   year int PRIMARY KEY," + "   country text,"+ "   title text)");
    String[] countries=Locale.getISOCountries();
    ThreadLocalRandom rand=ThreadLocalRandom.current();
    for (int i=0; i < 10000; i++) {
      execute("INSERT INTO %s (year, country, title) VALUES (1980,?,?)",countries[rand.nextInt(countries.length)],"title-" + i);
    }
    String albumCountByCountry=createFunction(KEYSPACE,"map<text,bigint>,text,text","CREATE FUNCTION IF NOT EXISTS %s(state map<text,bigint>,country text, album_title text)\n" + " RETURNS NULL ON NULL INPUT\n" + " RETURNS map<text,bigint>\n"+ " LANGUAGE java\n"+ " AS $$\n"+ "   if(state.containsKey(country)) {\n"+ "       Long newCount = (Long)state.get(country) + 1;\n"+ "       state.put(country, newCount);\n"+ "   } else {\n"+ "       state.put(country, 1L);\n"+ "   }\n"+ "   return state;\n"+ " $$;");
    String releasesByCountry=createAggregate(KEYSPACE,"text, text"," CREATE AGGREGATE IF NOT EXISTS %s(text, text)\n" + " SFUNC " + shortFunctionName(albumCountByCountry) + '\n'+ " STYPE map<text,bigint>\n"+ " INITCOND { };");
    for (int i=0; i < 1000; i++) {
      execute("SELECT " + releasesByCountry + "(country,title) FROM %s WHERE year=1980");
    }
  }
  finally {
    configureLogbackScanPeriod(60000L);
  }
}
