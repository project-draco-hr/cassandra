{
  String f=createFunction(KEYSPACE,"double, double","CREATE OR REPLACE FUNCTION %s(state double, val double) " + "RETURNS NULL ON NULL INPUT " + "RETURNS double "+ "LANGUAGE javascript "+ "AS '\"string\";';");
  createFunctionOverload(f,"double, double","CREATE OR REPLACE FUNCTION %s(state int, val int) " + "RETURNS NULL ON NULL INPUT " + "RETURNS int "+ "LANGUAGE javascript "+ "AS '\"string\";';");
  String a=createAggregate(KEYSPACE,"double","CREATE OR REPLACE AGGREGATE %s(double) " + "SFUNC " + shortFunctionName(f) + " "+ "STYPE double "+ "INITCOND 0");
  assertLastSchemaChange(Event.SchemaChange.Change.CREATED,Event.SchemaChange.Target.AGGREGATE,KEYSPACE,parseFunctionName(a).name,"double");
  schemaChange("CREATE OR REPLACE AGGREGATE " + a + "(double) "+ "SFUNC "+ shortFunctionName(f)+ " "+ "STYPE double "+ "INITCOND 0");
  assertLastSchemaChange(Event.SchemaChange.Change.UPDATED,Event.SchemaChange.Target.AGGREGATE,KEYSPACE,parseFunctionName(a).name,"double");
  createAggregateOverload(a,"int","CREATE OR REPLACE AGGREGATE %s(int) " + "SFUNC " + shortFunctionName(f) + " "+ "STYPE int "+ "INITCOND 0");
  assertLastSchemaChange(Event.SchemaChange.Change.CREATED,Event.SchemaChange.Target.AGGREGATE,KEYSPACE,parseFunctionName(a).name,"int");
  schemaChange("DROP AGGREGATE " + a + "(double)");
  assertLastSchemaChange(Event.SchemaChange.Change.DROPPED,Event.SchemaChange.Target.AGGREGATE,KEYSPACE,parseFunctionName(a).name,"double");
}
