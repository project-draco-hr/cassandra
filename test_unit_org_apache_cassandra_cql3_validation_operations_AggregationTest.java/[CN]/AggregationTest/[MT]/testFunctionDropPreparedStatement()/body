{
  String otherKS="cqltest_foo";
  execute("CREATE KEYSPACE IF NOT EXISTS " + otherKS + " WITH replication = {'class': 'SimpleStrategy', 'replication_factor': 3};");
  try {
    execute("CREATE TABLE " + otherKS + ".jsdp (a int primary key, b int)");
    String fState=createFunction(otherKS,"int, int","CREATE FUNCTION %s(a int, b int) " + "CALLED ON NULL INPUT " + "RETURNS int "+ "LANGUAGE javascript "+ "AS 'a + b;'");
    String a=createAggregate(otherKS,"int","CREATE AGGREGATE %s(int) " + "SFUNC " + shortFunctionName(fState) + " "+ "STYPE int");
    ResultMessage.Prepared prepared=QueryProcessor.prepare("SELECT " + a + "(b) FROM "+ otherKS+ ".jsdp",ClientState.forInternalCalls(),false);
    Assert.assertNotNull(QueryProcessor.instance.getPrepared(prepared.statementId));
    execute("DROP AGGREGATE " + a + "(int)");
    Assert.assertNull(QueryProcessor.instance.getPrepared(prepared.statementId));
    execute("CREATE AGGREGATE " + a + "(int) "+ "SFUNC "+ shortFunctionName(fState)+ " "+ "STYPE int");
    prepared=QueryProcessor.prepare("SELECT " + a + "(b) FROM "+ otherKS+ ".jsdp",ClientState.forInternalCalls(),false);
    Assert.assertNotNull(QueryProcessor.instance.getPrepared(prepared.statementId));
    execute("DROP KEYSPACE " + otherKS + ";");
    Assert.assertNull(QueryProcessor.instance.getPrepared(prepared.statementId));
  }
  finally {
    execute("DROP KEYSPACE IF EXISTS " + otherKS + ";");
  }
}
