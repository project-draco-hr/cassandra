{
  if (Float.parseFloat(System.getProperty("java.version").substring(0,3)) < 1.8)   return;
  final long seed=System.nanoTime();
  System.out.println("Seed is " + seed);
  Random r=new java.util.Random(seed);
  ByteBuffer source=null;
  int nextSize=r.nextDouble() < .9 ? r.nextInt(1024 * 1024) : r.nextInt(16);
  if (r.nextDouble() > .5) {
    source=ByteBuffer.allocate(nextSize);
    r.nextBytes(source.array());
  }
 else {
    source=ByteBuffer.allocateDirect(nextSize);
    while (source.hasRemaining()) {
      source.put((byte)(r.nextInt() % 127));
    }
    source.clear();
  }
  ICRC32 crcA=new CRC32Ex();
  PureJavaCrc32 crcB=new PureJavaCrc32();
  if (source.hasArray()) {
    if (r.nextDouble() > 0.5) {
      crcA.update(source.array(),0,source.remaining());
      crcB.update(source.array(),0,source.remaining());
    }
 else {
      crcA.update(source,0,source.remaining());
      assertEquals(0,source.position());
      assertEquals(source.capacity(),source.limit());
      crcB.update(source,0,source.remaining());
      assertEquals(0,source.position());
      assertEquals(source.capacity(),source.limit());
    }
  }
 else {
    crcA.update(source,0,source.remaining());
    assertEquals(0,source.position());
    assertEquals(source.capacity(),source.limit());
    crcB.update(source,0,source.remaining());
    assertEquals(0,source.position());
    assertEquals(source.capacity(),source.limit());
  }
  assertEquals(crcA.getCrc(),crcB.getCrc());
  assertEquals(crcA.getValue(),crcB.getValue());
}
