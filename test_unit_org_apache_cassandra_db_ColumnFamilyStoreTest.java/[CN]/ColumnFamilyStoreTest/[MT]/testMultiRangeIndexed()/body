{
  ColumnSlice[] ranges=new ColumnSlice[]{new ColumnSlice(Composites.EMPTY,cellname("colA")),new ColumnSlice(cellname("colC"),cellname("colE")),new ColumnSlice(cellname("colG"),cellname("colG")),new ColumnSlice(cellname("colI"),Composites.EMPTY)};
  ColumnSlice[] rangesReversed=new ColumnSlice[]{new ColumnSlice(Composites.EMPTY,cellname("colI")),new ColumnSlice(cellname("colG"),cellname("colG")),new ColumnSlice(cellname("colE"),cellname("colC")),new ColumnSlice(cellname("colA"),Composites.EMPTY)};
  String keyspaceName="Keyspace1";
  String cfName="Standard1";
  Keyspace keyspace=Keyspace.open(keyspaceName);
  ColumnFamilyStore cfs=keyspace.getColumnFamilyStore(cfName);
  cfs.clearUnsafe();
  String[] letters=new String[]{"a","b","c","d","e","f","g","h","i"};
  Column[] cols=new Column[letters.length];
  for (int i=0; i < cols.length; i++) {
    cols[i]=new Column(cellname("col" + letters[i].toUpperCase()),ByteBuffer.wrap(new byte[1366]),1);
  }
  putColsStandard(cfs,dk("a"),cols);
  cfs.forceBlockingFlush();
  SliceQueryFilter multiRangeForward=new SliceQueryFilter(ranges,false,100);
  SliceQueryFilter multiRangeForwardWithCounting=new SliceQueryFilter(ranges,false,3);
  SliceQueryFilter multiRangeReverse=new SliceQueryFilter(rangesReversed,true,100);
  SliceQueryFilter multiRangeReverseWithCounting=new SliceQueryFilter(rangesReversed,true,3);
  findRowGetSlicesAndAssertColsFound(cfs,multiRangeForward,"a","colA","colC","colD","colE","colG","colI");
  findRowGetSlicesAndAssertColsFound(cfs,multiRangeForwardWithCounting,"a","colA","colC","colD");
  findRowGetSlicesAndAssertColsFound(cfs,multiRangeReverse,"a","colI","colG","colE","colD","colC","colA");
  findRowGetSlicesAndAssertColsFound(cfs,multiRangeReverseWithCounting,"a","colI","colG","colE");
}
