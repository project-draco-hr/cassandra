{
  String keyspaceName="Keyspace1";
  String cfName="Standard1";
  Keyspace keyspace=Keyspace.open(keyspaceName);
  ColumnFamilyStore cfs=keyspace.getColumnFamilyStore(cfName);
  DecoratedKey key=Util.dk("f-flush-resurrection");
  SlicePredicate sp=new SlicePredicate();
  sp.setSlice_range(new SliceRange());
  sp.getSlice_range().setCount(100);
  sp.getSlice_range().setStart(ArrayUtils.EMPTY_BYTE_ARRAY);
  sp.getSlice_range().setFinish(ArrayUtils.EMPTY_BYTE_ARRAY);
  putColsStandard(cfs,key,column("col1","val1",1),column("col2","val2",1));
  assertRowAndColCount(1,2,false,cfs.getRangeSlice(Util.range("f","g"),null,ThriftValidation.asIFilter(sp,cfs.metadata,null),100));
  cfs.forceBlockingFlush();
  putColsStandard(cfs,key,column("col3","val3",1),column("col4","val4",1));
  assertRowAndColCount(1,4,false,cfs.getRangeSlice(Util.range("f","g"),null,ThriftValidation.asIFilter(sp,cfs.metadata,null),100));
  RowMutation rm=new RowMutation(keyspace.getName(),key.key);
  rm.delete(cfs.name,2);
  rm.apply();
  assertRowAndColCount(1,0,true,cfs.getRangeSlice(Util.range("f","g"),null,ThriftValidation.asIFilter(sp,cfs.metadata,null),100));
  cfs.forceBlockingFlush();
  assertRowAndColCount(1,0,true,cfs.getRangeSlice(Util.range("f","g"),null,ThriftValidation.asIFilter(sp,cfs.metadata,null),100));
  putColsStandard(cfs,key,column("col5","val5",1),column("col2","val2",1));
  assertRowAndColCount(1,0,true,cfs.getRangeSlice(Util.range("f","g"),null,ThriftValidation.asIFilter(sp,cfs.metadata,null),100));
  putColsStandard(cfs,key,column("col6","val6",3),column("col7","val7",3));
  assertRowAndColCount(1,2,true,cfs.getRangeSlice(Util.range("f","g"),null,ThriftValidation.asIFilter(sp,cfs.metadata,null),100));
  cfs.forceBlockingFlush();
  assertRowAndColCount(1,2,true,cfs.getRangeSlice(Util.range("f","g"),null,ThriftValidation.asIFilter(sp,cfs.metadata,null),100));
}
