{
  ColumnSlice[] startMiddleAndEndRanges=new ColumnSlice[]{new ColumnSlice(Composites.EMPTY,cellname("colc")),new ColumnSlice(cellname("colf"),cellname("colg")),new ColumnSlice(cellname("colj"),Composites.EMPTY)};
  ColumnSlice[] startMiddleAndEndRangesReversed=new ColumnSlice[]{new ColumnSlice(Composites.EMPTY,cellname("colj")),new ColumnSlice(cellname("colg"),cellname("colf")),new ColumnSlice(cellname("colc"),Composites.EMPTY)};
  ColumnSlice[] startOnlyRange=new ColumnSlice[]{new ColumnSlice(Composites.EMPTY,cellname("colc"))};
  ColumnSlice[] startOnlyRangeReversed=new ColumnSlice[]{new ColumnSlice(cellname("colc"),Composites.EMPTY)};
  ColumnSlice[] middleOnlyRanges=new ColumnSlice[]{new ColumnSlice(cellname("colf"),cellname("colg"))};
  ColumnSlice[] middleOnlyRangesReversed=new ColumnSlice[]{new ColumnSlice(cellname("colg"),cellname("colf"))};
  ColumnSlice[] endOnlyRanges=new ColumnSlice[]{new ColumnSlice(cellname("colj"),Composites.EMPTY)};
  ColumnSlice[] endOnlyRangesReversed=new ColumnSlice[]{new ColumnSlice(Composites.EMPTY,cellname("colj"))};
  SliceQueryFilter startOnlyFilter=new SliceQueryFilter(startOnlyRange,false,Integer.MAX_VALUE);
  SliceQueryFilter startOnlyFilterReversed=new SliceQueryFilter(startOnlyRangeReversed,true,Integer.MAX_VALUE);
  SliceQueryFilter startOnlyFilterWithCounting=new SliceQueryFilter(startOnlyRange,false,1);
  SliceQueryFilter startOnlyFilterReversedWithCounting=new SliceQueryFilter(startOnlyRangeReversed,true,1);
  SliceQueryFilter middleOnlyFilter=new SliceQueryFilter(middleOnlyRanges,false,Integer.MAX_VALUE);
  SliceQueryFilter middleOnlyFilterReversed=new SliceQueryFilter(middleOnlyRangesReversed,true,Integer.MAX_VALUE);
  SliceQueryFilter middleOnlyFilterWithCounting=new SliceQueryFilter(middleOnlyRanges,false,1);
  SliceQueryFilter middleOnlyFilterReversedWithCounting=new SliceQueryFilter(middleOnlyRangesReversed,true,1);
  SliceQueryFilter endOnlyFilter=new SliceQueryFilter(endOnlyRanges,false,Integer.MAX_VALUE);
  SliceQueryFilter endOnlyReversed=new SliceQueryFilter(endOnlyRangesReversed,true,Integer.MAX_VALUE);
  SliceQueryFilter endOnlyWithCounting=new SliceQueryFilter(endOnlyRanges,false,1);
  SliceQueryFilter endOnlyWithReversedCounting=new SliceQueryFilter(endOnlyRangesReversed,true,1);
  SliceQueryFilter startMiddleAndEndFilter=new SliceQueryFilter(startMiddleAndEndRanges,false,Integer.MAX_VALUE);
  SliceQueryFilter startMiddleAndEndFilterReversed=new SliceQueryFilter(startMiddleAndEndRangesReversed,true,Integer.MAX_VALUE);
  SliceQueryFilter startMiddleAndEndFilterWithCounting=new SliceQueryFilter(startMiddleAndEndRanges,false,1);
  SliceQueryFilter startMiddleAndEndFilterReversedWithCounting=new SliceQueryFilter(startMiddleAndEndRangesReversed,true,1);
  findRowGetSlicesAndAssertColsFound(cfs,startOnlyFilter,"a","cola");
  findRowGetSlicesAndAssertColsFound(cfs,startOnlyFilterReversed,"a","cola");
  findRowGetSlicesAndAssertColsFound(cfs,startOnlyFilterWithCounting,"a","cola");
  findRowGetSlicesAndAssertColsFound(cfs,startOnlyFilterReversedWithCounting,"a","cola");
  findRowGetSlicesAndAssertColsFound(cfs,middleOnlyFilter,"a",new String[]{});
  findRowGetSlicesAndAssertColsFound(cfs,middleOnlyFilterReversed,"a",new String[]{});
  findRowGetSlicesAndAssertColsFound(cfs,middleOnlyFilterWithCounting,"a",new String[]{});
  findRowGetSlicesAndAssertColsFound(cfs,middleOnlyFilterReversedWithCounting,"a",new String[]{});
  findRowGetSlicesAndAssertColsFound(cfs,endOnlyFilter,"a",new String[]{});
  findRowGetSlicesAndAssertColsFound(cfs,endOnlyReversed,"a",new String[]{});
  findRowGetSlicesAndAssertColsFound(cfs,endOnlyWithCounting,"a",new String[]{});
  findRowGetSlicesAndAssertColsFound(cfs,endOnlyWithReversedCounting,"a",new String[]{});
  findRowGetSlicesAndAssertColsFound(cfs,startMiddleAndEndFilter,"a","cola");
  findRowGetSlicesAndAssertColsFound(cfs,startMiddleAndEndFilterReversed,"a","cola");
  findRowGetSlicesAndAssertColsFound(cfs,startMiddleAndEndFilterWithCounting,"a","cola");
  findRowGetSlicesAndAssertColsFound(cfs,startMiddleAndEndFilterReversedWithCounting,"a","cola");
  findRowGetSlicesAndAssertColsFound(cfs,startOnlyFilter,"c","cola","colb","colc");
  findRowGetSlicesAndAssertColsFound(cfs,startOnlyFilterReversed,"c","colc","colb","cola");
  findRowGetSlicesAndAssertColsFound(cfs,startOnlyFilterWithCounting,"c","cola");
  findRowGetSlicesAndAssertColsFound(cfs,startOnlyFilterReversedWithCounting,"c","colc");
  findRowGetSlicesAndAssertColsFound(cfs,middleOnlyFilter,"c",new String[]{});
  findRowGetSlicesAndAssertColsFound(cfs,middleOnlyFilterReversed,"c",new String[]{});
  findRowGetSlicesAndAssertColsFound(cfs,middleOnlyFilterWithCounting,"c",new String[]{});
  findRowGetSlicesAndAssertColsFound(cfs,middleOnlyFilterReversedWithCounting,"c",new String[]{});
  findRowGetSlicesAndAssertColsFound(cfs,endOnlyFilter,"c",new String[]{});
  findRowGetSlicesAndAssertColsFound(cfs,endOnlyReversed,"c",new String[]{});
  findRowGetSlicesAndAssertColsFound(cfs,endOnlyWithCounting,"c",new String[]{});
  findRowGetSlicesAndAssertColsFound(cfs,endOnlyWithReversedCounting,"c",new String[]{});
  findRowGetSlicesAndAssertColsFound(cfs,startMiddleAndEndFilter,"c","cola","colb","colc");
  findRowGetSlicesAndAssertColsFound(cfs,startMiddleAndEndFilterReversed,"c","colc","colb","cola");
  findRowGetSlicesAndAssertColsFound(cfs,startMiddleAndEndFilterWithCounting,"c","cola");
  findRowGetSlicesAndAssertColsFound(cfs,startMiddleAndEndFilterReversedWithCounting,"c","colc");
  findRowGetSlicesAndAssertColsFound(cfs,startOnlyFilter,"f","cola","colb","colc");
  findRowGetSlicesAndAssertColsFound(cfs,startOnlyFilterReversed,"f","colc","colb","cola");
  findRowGetSlicesAndAssertColsFound(cfs,startOnlyFilterWithCounting,"f","cola");
  findRowGetSlicesAndAssertColsFound(cfs,startOnlyFilterReversedWithCounting,"f","colc");
  findRowGetSlicesAndAssertColsFound(cfs,middleOnlyFilter,"f","colf");
  findRowGetSlicesAndAssertColsFound(cfs,middleOnlyFilterReversed,"f","colf");
  findRowGetSlicesAndAssertColsFound(cfs,middleOnlyFilterWithCounting,"f","colf");
  findRowGetSlicesAndAssertColsFound(cfs,middleOnlyFilterReversedWithCounting,"f","colf");
  findRowGetSlicesAndAssertColsFound(cfs,endOnlyFilter,"f",new String[]{});
  findRowGetSlicesAndAssertColsFound(cfs,endOnlyReversed,"f",new String[]{});
  findRowGetSlicesAndAssertColsFound(cfs,endOnlyWithCounting,"f",new String[]{});
  findRowGetSlicesAndAssertColsFound(cfs,endOnlyWithReversedCounting,"f",new String[]{});
  findRowGetSlicesAndAssertColsFound(cfs,startMiddleAndEndFilter,"f","cola","colb","colc","colf");
  findRowGetSlicesAndAssertColsFound(cfs,startMiddleAndEndFilterReversed,"f","colf","colc","colb","cola");
  findRowGetSlicesAndAssertColsFound(cfs,startMiddleAndEndFilterWithCounting,"f","cola");
  findRowGetSlicesAndAssertColsFound(cfs,startMiddleAndEndFilterReversedWithCounting,"f","colf");
  findRowGetSlicesAndAssertColsFound(cfs,startOnlyFilter,"h","cola","colb","colc");
  findRowGetSlicesAndAssertColsFound(cfs,startOnlyFilterReversed,"h","colc","colb","cola");
  findRowGetSlicesAndAssertColsFound(cfs,startOnlyFilterWithCounting,"h","cola");
  findRowGetSlicesAndAssertColsFound(cfs,startOnlyFilterReversedWithCounting,"h","colc");
  findRowGetSlicesAndAssertColsFound(cfs,middleOnlyFilter,"h","colf","colg");
  findRowGetSlicesAndAssertColsFound(cfs,middleOnlyFilterReversed,"h","colg","colf");
  findRowGetSlicesAndAssertColsFound(cfs,middleOnlyFilterWithCounting,"h","colf");
  findRowGetSlicesAndAssertColsFound(cfs,middleOnlyFilterReversedWithCounting,"h","colg");
  findRowGetSlicesAndAssertColsFound(cfs,endOnlyFilter,"h",new String[]{});
  findRowGetSlicesAndAssertColsFound(cfs,endOnlyReversed,"h",new String[]{});
  findRowGetSlicesAndAssertColsFound(cfs,endOnlyWithCounting,"h",new String[]{});
  findRowGetSlicesAndAssertColsFound(cfs,endOnlyWithReversedCounting,"h",new String[]{});
  findRowGetSlicesAndAssertColsFound(cfs,startMiddleAndEndFilter,"h","cola","colb","colc","colf","colg");
  findRowGetSlicesAndAssertColsFound(cfs,startMiddleAndEndFilterReversed,"h","colg","colf","colc","colb","cola");
  findRowGetSlicesAndAssertColsFound(cfs,startMiddleAndEndFilterWithCounting,"h","cola");
  findRowGetSlicesAndAssertColsFound(cfs,startMiddleAndEndFilterReversedWithCounting,"h","colg");
  findRowGetSlicesAndAssertColsFound(cfs,startOnlyFilter,"j","cola","colb","colc");
  findRowGetSlicesAndAssertColsFound(cfs,startOnlyFilterReversed,"j","colc","colb","cola");
  findRowGetSlicesAndAssertColsFound(cfs,startOnlyFilterWithCounting,"j","cola");
  findRowGetSlicesAndAssertColsFound(cfs,startOnlyFilterReversedWithCounting,"j","colc");
  findRowGetSlicesAndAssertColsFound(cfs,middleOnlyFilter,"j","colf","colg");
  findRowGetSlicesAndAssertColsFound(cfs,middleOnlyFilterReversed,"j","colg","colf");
  findRowGetSlicesAndAssertColsFound(cfs,middleOnlyFilterWithCounting,"j","colf");
  findRowGetSlicesAndAssertColsFound(cfs,middleOnlyFilterReversedWithCounting,"j","colg");
  findRowGetSlicesAndAssertColsFound(cfs,endOnlyFilter,"j","colj");
  findRowGetSlicesAndAssertColsFound(cfs,endOnlyReversed,"j","colj");
  findRowGetSlicesAndAssertColsFound(cfs,endOnlyWithCounting,"j","colj");
  findRowGetSlicesAndAssertColsFound(cfs,endOnlyWithReversedCounting,"j","colj");
  findRowGetSlicesAndAssertColsFound(cfs,startMiddleAndEndFilter,"j","cola","colb","colc","colf","colg","colj");
  findRowGetSlicesAndAssertColsFound(cfs,startMiddleAndEndFilterReversed,"j","colj","colg","colf","colc","colb","cola");
  findRowGetSlicesAndAssertColsFound(cfs,startMiddleAndEndFilterWithCounting,"j","cola");
  findRowGetSlicesAndAssertColsFound(cfs,startMiddleAndEndFilterReversedWithCounting,"j","colj");
  findRowGetSlicesAndAssertColsFound(cfs,startOnlyFilter,"l","cola","colb","colc");
  findRowGetSlicesAndAssertColsFound(cfs,startOnlyFilterReversed,"l","colc","colb","cola");
  findRowGetSlicesAndAssertColsFound(cfs,startOnlyFilterWithCounting,"l","cola");
  findRowGetSlicesAndAssertColsFound(cfs,startOnlyFilterReversedWithCounting,"l","colc");
  findRowGetSlicesAndAssertColsFound(cfs,middleOnlyFilter,"l","colf","colg");
  findRowGetSlicesAndAssertColsFound(cfs,middleOnlyFilterReversed,"l","colg","colf");
  findRowGetSlicesAndAssertColsFound(cfs,middleOnlyFilterWithCounting,"l","colf");
  findRowGetSlicesAndAssertColsFound(cfs,middleOnlyFilterReversedWithCounting,"l","colg");
  findRowGetSlicesAndAssertColsFound(cfs,endOnlyFilter,"l","colj","colk","coll");
  findRowGetSlicesAndAssertColsFound(cfs,endOnlyReversed,"l","coll","colk","colj");
  findRowGetSlicesAndAssertColsFound(cfs,endOnlyWithCounting,"l","colj");
  findRowGetSlicesAndAssertColsFound(cfs,endOnlyWithReversedCounting,"l","coll");
  findRowGetSlicesAndAssertColsFound(cfs,startMiddleAndEndFilter,"l","cola","colb","colc","colf","colg","colj","colk","coll");
  findRowGetSlicesAndAssertColsFound(cfs,startMiddleAndEndFilterReversed,"l","coll","colk","colj","colg","colf","colc","colb","cola");
  findRowGetSlicesAndAssertColsFound(cfs,startMiddleAndEndFilterWithCounting,"l","cola");
  findRowGetSlicesAndAssertColsFound(cfs,startMiddleAndEndFilterReversedWithCounting,"l","coll");
}
