{
  String tableName="Keyspace1";
  String cfName="Super1";
  ByteBuffer scfName=ByteBufferUtil.bytes("SuperDuper");
  Table table=Table.open(tableName);
  ColumnFamilyStore cfs=table.getColumnFamilyStore(cfName);
  DecoratedKey key=Util.dk("flush-resurrection");
  putColsSuper(cfs,key,scfName,new Column(getBytes(1),ByteBufferUtil.bytes("val1"),1),new Column(getBytes(2),ByteBufferUtil.bytes("val2"),1),new Column(getBytes(3),ByteBufferUtil.bytes("val3"),1));
  cfs.forceBlockingFlush();
  putColsSuper(cfs,key,scfName,new Column(getBytes(4),ByteBufferUtil.bytes("val4"),1),new Column(getBytes(5),ByteBufferUtil.bytes("val5"),1),new Column(getBytes(6),ByteBufferUtil.bytes("val6"),1));
  final SlicePredicate sp=new SlicePredicate();
  sp.setSlice_range(new SliceRange());
  sp.getSlice_range().setCount(100);
  sp.getSlice_range().setStart(ArrayUtils.EMPTY_BYTE_ARRAY);
  sp.getSlice_range().setFinish(ArrayUtils.EMPTY_BYTE_ARRAY);
  assertRowAndColCount(1,6,scfName,false,cfs.getRangeSlice(scfName,Util.range("f","g"),100,QueryFilter.getFilter(sp,cfs.getComparator())));
  RowMutation rm=new RowMutation(table.name,key.key);
  rm.delete(new QueryPath(cfName,scfName),2);
  rm.apply();
  assertRowAndColCount(1,0,scfName,false,cfs.getRangeSlice(scfName,Util.range("f","g"),100,QueryFilter.getFilter(sp,cfs.getComparator())));
  cfs.forceBlockingFlush();
  assertRowAndColCount(1,0,scfName,false,cfs.getRangeSlice(scfName,Util.range("f","g"),100,QueryFilter.getFilter(sp,cfs.getComparator())));
  putColsSuper(cfs,key,scfName,new Column(getBytes(4),ByteBufferUtil.bytes("val4"),1L),new Column(getBytes(7),ByteBufferUtil.bytes("val7"),1L));
  assertRowAndColCount(1,0,scfName,false,cfs.getRangeSlice(scfName,Util.range("f","g"),100,QueryFilter.getFilter(sp,cfs.getComparator())));
  putColsSuper(cfs,key,scfName,new Column(getBytes(3),ByteBufferUtil.bytes("val3"),3),new Column(getBytes(8),ByteBufferUtil.bytes("val8"),3),new Column(getBytes(9),ByteBufferUtil.bytes("val9"),3));
  assertRowAndColCount(1,3,scfName,false,cfs.getRangeSlice(scfName,Util.range("f","g"),100,QueryFilter.getFilter(sp,cfs.getComparator())));
}
