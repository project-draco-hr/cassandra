{
  String keySpace="Keyspace2";
  String cfName="Indexed2";
  Keyspace keyspace=Keyspace.open(keySpace);
  ColumnFamilyStore cfs=keyspace.getColumnFamilyStore(cfName);
  cfs.truncateBlocking();
  ByteBuffer rowKey=ByteBufferUtil.bytes("k1");
  ByteBuffer clusterKey=ByteBufferUtil.bytes("ck1");
  ByteBuffer colName=ByteBufferUtil.bytes("col1");
  CellNameType baseComparator=cfs.getComparator();
  CellName compositeName=baseComparator.makeCellName(clusterKey,colName);
  ByteBuffer val1=ByteBufferUtil.bytes("v1");
  ByteBuffer val2=ByteBufferUtil.bytes("v2");
  Mutation rm;
  rm=new Mutation(keySpace,rowKey);
  rm.add(cfName,compositeName,val1,0);
  rm.apply();
  IndexExpression expr=new IndexExpression(colName,Operator.EQ,val1);
  List<IndexExpression> clause=Arrays.asList(expr);
  IDiskAtomFilter filter=new IdentityQueryFilter();
  Range<RowPosition> range=Util.range("","");
  List<Row> rows=keyspace.getColumnFamilyStore(cfName).search(range,clause,filter,100);
  assertEquals(1,rows.size());
  keyspace.getColumnFamilyStore(cfName).forceBlockingFlush();
  rows=keyspace.getColumnFamilyStore(cfName).search(range,clause,filter,100);
  assertEquals(1,rows.size());
  rm=new Mutation(keySpace,rowKey);
  rm.add(cfName,compositeName,val2,1);
  keyspace.apply(rm,true,false);
  rows=keyspace.getColumnFamilyStore(cfName).search(range,clause,filter,100);
  assertEquals(0,rows.size());
  expr=new IndexExpression(colName,Operator.EQ,val2);
  clause=Arrays.asList(expr);
  filter=new IdentityQueryFilter();
  range=Util.range("","");
  rows=keyspace.getColumnFamilyStore(cfName).search(range,clause,filter,100);
  assertEquals(0,rows.size());
  rm=new Mutation(keySpace,rowKey);
  rm.add(cfName,compositeName,val1,2);
  keyspace.apply(rm,true,false);
  expr=new IndexExpression(colName,Operator.EQ,val1);
  clause=Arrays.asList(expr);
  filter=new IdentityQueryFilter();
  range=Util.range("","");
  rows=keyspace.getColumnFamilyStore(cfName).search(range,clause,filter,100);
  assertEquals(0,rows.size());
}
