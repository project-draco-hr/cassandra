{
  String keyspaceName="Keyspace1";
  String cfName="Super6";
  ByteBuffer superColName=LexicalUUIDType.instance.fromString("a4ed3562-0e8e-4b41-bdfd-c45a2774682d");
  Keyspace keyspace=Keyspace.open(keyspaceName);
  ColumnFamilyStore cfs=keyspace.getColumnFamilyStore(cfName);
  DecoratedKey key=Util.dk("slice-get-uuid-type");
  putColsSuper(cfs,key,superColName,new BufferCell(cellname("a"),ByteBufferUtil.bytes("A"),1),new BufferCell(cellname("b"),ByteBufferUtil.bytes("B"),1));
  ColumnFamily cfGet=cfs.getColumnFamily(QueryFilter.getIdentityFilter(key,cfName,System.currentTimeMillis()));
  assertEquals(ByteBufferUtil.bytes("A"),cfGet.getColumn(CellNames.compositeDense(superColName,ByteBufferUtil.bytes("a"))).value());
  assertEquals(ByteBufferUtil.bytes("B"),cfGet.getColumn(CellNames.compositeDense(superColName,ByteBufferUtil.bytes("b"))).value());
  SortedSet<CellName> sliceColNames=new TreeSet<CellName>(cfs.metadata.comparator);
  sliceColNames.add(CellNames.compositeDense(superColName,ByteBufferUtil.bytes("a")));
  sliceColNames.add(CellNames.compositeDense(superColName,ByteBufferUtil.bytes("b")));
  SliceByNamesReadCommand cmd=new SliceByNamesReadCommand(keyspaceName,key.getKey(),cfName,System.currentTimeMillis(),new NamesQueryFilter(sliceColNames));
  ColumnFamily cfSliced=cmd.getRow(keyspace).cf;
  assertEquals(ByteBufferUtil.bytes("A"),cfSliced.getColumn(CellNames.compositeDense(superColName,ByteBufferUtil.bytes("a"))).value());
  assertEquals(ByteBufferUtil.bytes("B"),cfSliced.getColumn(CellNames.compositeDense(superColName,ByteBufferUtil.bytes("b"))).value());
}
