{
  String tableName="Keyspace1";
  String cfName="Super6";
  ByteBuffer superColName=LexicalUUIDType.instance.fromString("a4ed3562-0e8e-4b41-bdfd-c45a2774682d");
  Table table=Table.open(tableName);
  ColumnFamilyStore cfs=table.getColumnFamilyStore(cfName);
  DecoratedKey key=Util.dk("slice-get-uuid-type");
  putColsSuper(cfs,key,superColName,new Column(ByteBufferUtil.bytes("a"),ByteBufferUtil.bytes("A"),1),new Column(ByteBufferUtil.bytes("b"),ByteBufferUtil.bytes("B"),1));
  IColumn columnGet=cfs.getColumnFamily(QueryFilter.getIdentityFilter(key,new QueryPath(cfName,superColName))).getColumn(superColName);
  assertEquals(ByteBufferUtil.bytes("A"),columnGet.getSubColumn(ByteBufferUtil.bytes("a")).value());
  assertEquals(ByteBufferUtil.bytes("B"),columnGet.getSubColumn(ByteBufferUtil.bytes("b")).value());
  ArrayList<ByteBuffer> sliceColNames=new ArrayList<ByteBuffer>();
  sliceColNames.add(ByteBufferUtil.bytes("a"));
  sliceColNames.add(ByteBufferUtil.bytes("b"));
  SliceByNamesReadCommand cmd=new SliceByNamesReadCommand(tableName,key.key,new QueryPath(cfName,superColName),sliceColNames);
  IColumn columnSliced=cmd.getRow(table).cf.getColumn(superColName);
  assertEquals(ByteBufferUtil.bytes("A"),columnSliced.getSubColumn(ByteBufferUtil.bytes("a")).value());
  assertEquals(ByteBufferUtil.bytes("B"),columnSliced.getSubColumn(ByteBufferUtil.bytes("b")).value());
}
