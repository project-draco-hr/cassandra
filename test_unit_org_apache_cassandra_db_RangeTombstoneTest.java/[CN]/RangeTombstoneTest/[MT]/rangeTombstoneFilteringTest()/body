{
  CompactionManager.instance.disableAutoCompaction();
  Keyspace keyspace=Keyspace.open(KSNAME);
  ColumnFamilyStore cfs=keyspace.getColumnFamilyStore(CFNAME);
  String key="k111";
  RowMutation rm;
  ColumnFamily cf;
  rm=new RowMutation(KSNAME,ByteBufferUtil.bytes(key));
  for (int i=0; i < 40; i+=2)   add(rm,i,0);
  rm.apply();
  rm=new RowMutation(KSNAME,ByteBufferUtil.bytes(key));
  cf=rm.addOrGet(CFNAME);
  delete(cf,5,10,1);
  rm.apply();
  rm=new RowMutation(KSNAME,ByteBufferUtil.bytes(key));
  cf=rm.addOrGet(CFNAME);
  delete(cf,15,20,2);
  rm.apply();
  cf=cfs.getColumnFamily(QueryFilter.getSliceFilter(dk(key),CFNAME,b(11),b(14),false,Integer.MAX_VALUE,System.currentTimeMillis()));
  Collection<RangeTombstone> rt=rangeTombstones(cf);
  assertEquals(0,rt.size());
  cf=cfs.getColumnFamily(QueryFilter.getSliceFilter(dk(key),CFNAME,b(11),b(15),false,Integer.MAX_VALUE,System.currentTimeMillis()));
  rt=rangeTombstones(cf);
  assertEquals(1,rt.size());
  cf=cfs.getColumnFamily(QueryFilter.getSliceFilter(dk(key),CFNAME,b(20),b(25),false,Integer.MAX_VALUE,System.currentTimeMillis()));
  rt=rangeTombstones(cf);
  assertEquals(1,rt.size());
  cf=cfs.getColumnFamily(QueryFilter.getSliceFilter(dk(key),CFNAME,b(12),b(25),false,Integer.MAX_VALUE,System.currentTimeMillis()));
  rt=rangeTombstones(cf);
  assertEquals(1,rt.size());
  cf=cfs.getColumnFamily(QueryFilter.getSliceFilter(dk(key),CFNAME,b(25),b(35),false,Integer.MAX_VALUE,System.currentTimeMillis()));
  rt=rangeTombstones(cf);
  assertEquals(0,rt.size());
  cf=cfs.getColumnFamily(QueryFilter.getSliceFilter(dk(key),CFNAME,b(1),b(40),false,Integer.MAX_VALUE,System.currentTimeMillis()));
  rt=rangeTombstones(cf);
  assertEquals(2,rt.size());
  cf=cfs.getColumnFamily(QueryFilter.getSliceFilter(dk(key),CFNAME,b(7),b(17),false,Integer.MAX_VALUE,System.currentTimeMillis()));
  rt=rangeTombstones(cf);
  assertEquals(2,rt.size());
  cf=cfs.getColumnFamily(QueryFilter.getSliceFilter(dk(key),CFNAME,b(5),b(20),false,Integer.MAX_VALUE,System.currentTimeMillis()));
  rt=rangeTombstones(cf);
  assertEquals(2,rt.size());
  cf=cfs.getColumnFamily(QueryFilter.getSliceFilter(dk(key),CFNAME,b(5),b(15),false,Integer.MAX_VALUE,System.currentTimeMillis()));
  rt=rangeTombstones(cf);
  assertEquals(2,rt.size());
  cf=cfs.getColumnFamily(QueryFilter.getSliceFilter(dk(key),CFNAME,b(1),b(2),false,Integer.MAX_VALUE,System.currentTimeMillis()));
  rt=rangeTombstones(cf);
  assertEquals(0,rt.size());
  cf=cfs.getColumnFamily(QueryFilter.getSliceFilter(dk(key),CFNAME,b(1),b(5),false,Integer.MAX_VALUE,System.currentTimeMillis()));
  rt=rangeTombstones(cf);
  assertEquals(1,rt.size());
  cf=cfs.getColumnFamily(QueryFilter.getSliceFilter(dk(key),CFNAME,b(1),b(10),false,Integer.MAX_VALUE,System.currentTimeMillis()));
  rt=rangeTombstones(cf);
  assertEquals(1,rt.size());
  cf=cfs.getColumnFamily(QueryFilter.getSliceFilter(dk(key),CFNAME,b(5),b(6),false,Integer.MAX_VALUE,System.currentTimeMillis()));
  rt=rangeTombstones(cf);
  assertEquals(1,rt.size());
  cf=cfs.getColumnFamily(QueryFilter.getSliceFilter(dk(key),CFNAME,b(17),b(20),false,Integer.MAX_VALUE,System.currentTimeMillis()));
  rt=rangeTombstones(cf);
  assertEquals(1,rt.size());
  cf=cfs.getColumnFamily(QueryFilter.getSliceFilter(dk(key),CFNAME,b(17),b(18),false,Integer.MAX_VALUE,System.currentTimeMillis()));
  rt=rangeTombstones(cf);
  assertEquals(1,rt.size());
  ColumnSlice[] slices=new ColumnSlice[]{new ColumnSlice(b(1),b(10)),new ColumnSlice(b(16),b(20))};
  IDiskAtomFilter sqf=new SliceQueryFilter(slices,false,Integer.MAX_VALUE);
  cf=cfs.getColumnFamily(new QueryFilter(dk(key),CFNAME,sqf,System.currentTimeMillis()));
  rt=rangeTombstones(cf);
  assertEquals(2,rt.size());
}
