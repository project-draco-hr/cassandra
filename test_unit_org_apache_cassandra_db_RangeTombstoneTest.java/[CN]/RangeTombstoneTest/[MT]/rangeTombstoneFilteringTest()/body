{
  CompactionManager.instance.disableAutoCompaction();
  Keyspace keyspace=Keyspace.open(KSNAME);
  ColumnFamilyStore cfs=keyspace.getColumnFamilyStore(CFNAME);
  String key="k111";
  UpdateBuilder builder=UpdateBuilder.create(cfs.metadata,key).withTimestamp(0);
  for (int i=0; i < 40; i+=2)   builder.newRow(i).add("val",i);
  builder.applyUnsafe();
  new RowUpdateBuilder(cfs.metadata,1,key).addRangeTombstone(5,10).build().applyUnsafe();
  new RowUpdateBuilder(cfs.metadata,2,key).addRangeTombstone(15,20).build().applyUnsafe();
  ImmutableBTreePartition partition;
  partition=Util.getOnlyPartitionUnfiltered(Util.cmd(cfs,key).fromIncl(11).toIncl(14).build());
  Collection<RangeTombstone> rt=rangeTombstones(partition);
  assertEquals(0,rt.size());
  partition=Util.getOnlyPartitionUnfiltered(Util.cmd(cfs,key).fromIncl(11).toIncl(15).build());
  rt=rangeTombstones(partition);
  assertEquals(1,rt.size());
  partition=Util.getOnlyPartitionUnfiltered(Util.cmd(cfs,key).fromIncl(20).toIncl(25).build());
  rt=rangeTombstones(partition);
  assertEquals(1,rt.size());
  partition=Util.getOnlyPartitionUnfiltered(Util.cmd(cfs,key).fromIncl(12).toIncl(25).build());
  rt=rangeTombstones(partition);
  assertEquals(1,rt.size());
  partition=Util.getOnlyPartitionUnfiltered(Util.cmd(cfs,key).fromIncl(25).toIncl(35).build());
  rt=rangeTombstones(partition);
  assertEquals(0,rt.size());
  partition=Util.getOnlyPartitionUnfiltered(Util.cmd(cfs,key).fromIncl(1).toIncl(40).build());
  rt=rangeTombstones(partition);
  assertEquals(2,rt.size());
  partition=Util.getOnlyPartitionUnfiltered(Util.cmd(cfs,key).fromIncl(7).toIncl(17).build());
  rt=rangeTombstones(partition);
  assertEquals(2,rt.size());
  partition=Util.getOnlyPartitionUnfiltered(Util.cmd(cfs,key).fromIncl(5).toIncl(20).build());
  rt=rangeTombstones(partition);
  assertEquals(2,rt.size());
  partition=Util.getOnlyPartitionUnfiltered(Util.cmd(cfs,key).fromIncl(5).toIncl(20).build());
  rt=rangeTombstones(partition);
  assertEquals(2,rt.size());
  partition=Util.getOnlyPartitionUnfiltered(Util.cmd(cfs,key).fromIncl(1).toIncl(2).build());
  rt=rangeTombstones(partition);
  assertEquals(0,rt.size());
  partition=Util.getOnlyPartitionUnfiltered(Util.cmd(cfs,key).fromIncl(1).toIncl(5).build());
  rt=rangeTombstones(partition);
  assertEquals(1,rt.size());
  partition=Util.getOnlyPartitionUnfiltered(Util.cmd(cfs,key).fromIncl(1).toIncl(10).build());
  rt=rangeTombstones(partition);
  assertEquals(1,rt.size());
  partition=Util.getOnlyPartitionUnfiltered(Util.cmd(cfs,key).fromIncl(5).toIncl(6).build());
  rt=rangeTombstones(partition);
  assertEquals(1,rt.size());
  partition=Util.getOnlyPartitionUnfiltered(Util.cmd(cfs,key).fromIncl(17).toIncl(20).build());
  rt=rangeTombstones(partition);
  assertEquals(1,rt.size());
  partition=Util.getOnlyPartitionUnfiltered(Util.cmd(cfs,key).fromIncl(17).toIncl(18).build());
  rt=rangeTombstones(partition);
  assertEquals(1,rt.size());
  Slices.Builder sb=new Slices.Builder(cfs.getComparator());
  sb.add(ClusteringBound.create(cfs.getComparator(),true,true,1),ClusteringBound.create(cfs.getComparator(),false,true,10));
  sb.add(ClusteringBound.create(cfs.getComparator(),true,true,16),ClusteringBound.create(cfs.getComparator(),false,true,20));
  partition=Util.getOnlyPartitionUnfiltered(SinglePartitionReadCommand.create(cfs.metadata,FBUtilities.nowInSeconds(),Util.dk(key),sb.build()));
  rt=rangeTombstones(partition);
  assertEquals(2,rt.size());
}
