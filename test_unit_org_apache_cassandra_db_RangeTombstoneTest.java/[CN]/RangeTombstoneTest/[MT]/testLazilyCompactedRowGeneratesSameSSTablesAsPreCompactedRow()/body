{
  Keyspace table=Keyspace.open(KSNAME);
  ColumnFamilyStore cfs=table.getColumnFamilyStore(CFNAME);
  ByteBuffer key=ByteBufferUtil.bytes("k4");
  cfs.truncateBlocking();
  cfs.disableAutoCompaction();
  cfs.setCompactionStrategyClass(SizeTieredCompactionStrategy.class.getCanonicalName());
  RowMutation rm=new RowMutation(KSNAME,key);
  for (int i=0; i < 10; i+=2)   add(rm,i,0);
  rm.apply();
  cfs.forceBlockingFlush();
  rm=new RowMutation(KSNAME,key);
  ColumnFamily cf=rm.addOrGet(CFNAME);
  for (int i=0; i < 10; i+=2)   delete(cf,0,7,0);
  rm.apply();
  cfs.forceBlockingFlush();
  assertEquals(2,cfs.getSSTables().size());
  CompactionManager.instance.performMaximal(cfs);
  assertEquals(1,cfs.getSSTables().size());
  SSTableReader sstable=cfs.getSSTables().iterator().next();
  OnDiskAtomIterator iter=sstable.getScanner().next();
  int cnt=0;
  while (iter.hasNext()) {
    OnDiskAtom atom=iter.next();
    if (cnt == 0)     assertTrue(atom instanceof RangeTombstone);
    if (cnt > 0)     assertTrue(atom instanceof Column);
    cnt++;
  }
  assertEquals(2,cnt);
}
