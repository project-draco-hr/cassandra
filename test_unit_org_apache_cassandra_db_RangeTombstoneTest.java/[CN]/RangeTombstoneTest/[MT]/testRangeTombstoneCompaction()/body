{
  Keyspace table=Keyspace.open(KSNAME);
  ColumnFamilyStore cfs=table.getColumnFamilyStore(CFNAME);
  ByteBuffer key=ByteBufferUtil.bytes("k4");
  cfs.truncateBlocking();
  cfs.disableAutoCompaction();
  cfs.setCompactionStrategyClass(SizeTieredCompactionStrategy.class.getCanonicalName());
  UpdateBuilder builder=UpdateBuilder.create(cfs.metadata,key).withTimestamp(0);
  for (int i=0; i < 10; i+=2)   builder.newRow(i).add("val",i);
  builder.applyUnsafe();
  cfs.forceBlockingFlush();
  new RowUpdateBuilder(cfs.metadata,0,key).addRangeTombstone(0,7).build().applyUnsafe();
  cfs.forceBlockingFlush();
  assertEquals(2,cfs.getSSTables().size());
  CompactionManager.instance.performMaximal(cfs,false);
  assertEquals(1,cfs.getSSTables().size());
  SSTableReader sstable=cfs.getSSTables().iterator().next();
  try (UnfilteredPartitionIterator scanner=sstable.getScanner()){
    try (UnfilteredRowIterator iter=scanner.next()){
      Unfiltered u1=iter.next();
      assertTrue("Expecting open marker, got " + u1.toString(cfs.metadata),u1 instanceof RangeTombstoneMarker);
      Unfiltered u2=iter.next();
      assertTrue("Expecting close marker, got " + u2.toString(cfs.metadata),u2 instanceof RangeTombstoneMarker);
      Unfiltered u3=iter.next();
      assertTrue("Expecting row, got " + u3.toString(cfs.metadata),u3 instanceof Row);
    }
   }
 }
