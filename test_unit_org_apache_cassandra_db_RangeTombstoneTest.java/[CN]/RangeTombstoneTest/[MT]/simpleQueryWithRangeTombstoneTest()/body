{
  Keyspace keyspace=Keyspace.open(KSNAME);
  ColumnFamilyStore cfs=keyspace.getColumnFamilyStore(CFNAME);
  String key="k1";
  Mutation rm;
  ColumnFamily cf;
  rm=new Mutation(KSNAME,ByteBufferUtil.bytes(key));
  for (int i=0; i < 40; i+=2)   add(rm,i,0);
  rm.applyUnsafe();
  cfs.forceBlockingFlush();
  rm=new Mutation(KSNAME,ByteBufferUtil.bytes(key));
  cf=rm.addOrGet(CFNAME);
  delete(cf,10,22,1);
  rm.applyUnsafe();
  cfs.forceBlockingFlush();
  rm=new Mutation(KSNAME,ByteBufferUtil.bytes(key));
  for (int i=1; i < 40; i+=2)   add(rm,i,2);
  rm.applyUnsafe();
  cfs.forceBlockingFlush();
  rm=new Mutation(KSNAME,ByteBufferUtil.bytes(key));
  cf=rm.addOrGet(CFNAME);
  delete(cf,19,27,3);
  rm.applyUnsafe();
  int[] live=new int[]{4,9,11,17,28};
  int[] dead=new int[]{12,19,21,24,27};
  SortedSet<CellName> columns=new TreeSet<CellName>(cfs.getComparator());
  for (  int i : live)   columns.add(b(i));
  for (  int i : dead)   columns.add(b(i));
  cf=cfs.getColumnFamily(QueryFilter.getNamesFilter(dk(key),CFNAME,columns,System.currentTimeMillis()));
  for (  int i : live)   assertTrue("Cell " + i + " should be live",isLive(cf,cf.getColumn(b(i))));
  for (  int i : dead)   assertTrue("Cell " + i + " shouldn't be live",!isLive(cf,cf.getColumn(b(i))));
  cf=cfs.getColumnFamily(QueryFilter.getSliceFilter(dk(key),CFNAME,b(7),b(30),false,Integer.MAX_VALUE,System.currentTimeMillis()));
  for (  int i : new int[]{7,8,9,11,13,15,17,28,29,30})   assertTrue("Cell " + i + " should be live",isLive(cf,cf.getColumn(b(i))));
  for (  int i : new int[]{10,12,14,16,18,19,20,21,22,23,24,25,26,27})   assertTrue("Cell " + i + " shouldn't be live",!isLive(cf,cf.getColumn(b(i))));
}
