{
  Keyspace keyspace=Keyspace.open(KSNAME);
  ColumnFamilyStore cfs=keyspace.getColumnFamilyStore(CFNAME);
  String key="k1";
  UpdateBuilder builder;
  builder=UpdateBuilder.create(cfs.metadata,key).withTimestamp(0);
  for (int i=0; i < 40; i+=2)   builder.newRow(i).add("val",i);
  builder.applyUnsafe();
  cfs.forceBlockingFlush();
  new RowUpdateBuilder(cfs.metadata,1,key).addRangeTombstone(10,22).build().applyUnsafe();
  builder=UpdateBuilder.create(cfs.metadata,key).withTimestamp(2);
  for (int i=1; i < 40; i+=2)   builder.newRow(i).add("val",i);
  builder.applyUnsafe();
  new RowUpdateBuilder(cfs.metadata,3,key).addRangeTombstone(19,27).build().applyUnsafe();
  int[] live=new int[]{4,9,11,17,28};
  int[] dead=new int[]{12,19,21,24,27};
  AbstractReadCommandBuilder.SinglePartitionBuilder cmdBuilder=Util.cmd(cfs,key);
  for (  int i : live)   cmdBuilder.includeRow(i);
  for (  int i : dead)   cmdBuilder.includeRow(i);
  Partition partition=Util.getOnlyPartitionUnfiltered(cmdBuilder.build());
  int nowInSec=FBUtilities.nowInSeconds();
  for (  int i : live)   assertTrue("Row " + i + " should be live",partition.getRow(Clustering.make(bb(i))).hasLiveData(nowInSec));
  for (  int i : dead)   assertFalse("Row " + i + " shouldn't be live",partition.getRow(Clustering.make(bb(i))).hasLiveData(nowInSec));
  partition=Util.getOnlyPartitionUnfiltered(Util.cmd(cfs,key).fromIncl(7).toIncl(30).build());
  for (  int i : new int[]{7,8,9,11,13,15,17,28,29,30})   assertTrue("Row " + i + " should be live",partition.getRow(Clustering.make(bb(i))).hasLiveData(nowInSec));
  for (  int i : new int[]{10,12,14,16,18,19,20,21,22,23,24,25,26,27})   assertFalse("Row " + i + " shouldn't be live",partition.getRow(Clustering.make(bb(i))).hasLiveData(nowInSec));
}
