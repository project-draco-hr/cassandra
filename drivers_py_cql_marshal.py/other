import re
import struct
from uuid import UUID
import cql
__all__ = ['prepare', 'marshal', 'unmarshal_noop', 'unmarshallers']
if hasattr(struct, 'Struct'):
    _have_struct = True
    _long_packer = struct.Struct('>q')
    _int32_packer = struct.Struct('>i')
else:
    _have_struct = False
_param_re = re.compile('(?<!strategy_options)(?<!\\\\)(:[a-zA-Z_][a-zA-Z0-9_]*)', re.M)
BYTES_TYPE = 'org.apache.cassandra.db.marshal.BytesType'
ASCII_TYPE = 'org.apache.cassandra.db.marshal.AsciiType'
UTF8_TYPE = 'org.apache.cassandra.db.marshal.UTF8Type'
INT32_TYPE = 'org.apache.cassandra.db.marshal.Int32Type'
INTEGER_TYPE = 'org.apache.cassandra.db.marshal.IntegerType'
LONG_TYPE = 'org.apache.cassandra.db.marshal.LongType'
UUID_TYPE = 'org.apache.cassandra.db.marshal.UUIDType'
LEXICAL_UUID_TYPE = 'org.apache.cassandra.db.marshal.LexicalType'
TIME_UUID_TYPE = 'org.apache.cassandra.db.marshal.TimeUUIDType'
COUNTER_COLUMN_TYPE = 'org.apache.cassandra.db.marshal.CounterColumnType'
if _have_struct:

    def unmarshal_int32(bytestr):
        return _int32_packer.unpack(bytestr)[0]
else:

    def unmarshal_int32(bytestr):
        return struct.unpack('>i', bytestr)[0]
if _have_struct:

    def unmarshal_long(bytestr):
        return _long_packer.unpack(bytestr)[0]
else:

    def unmarshal_long(bytestr):
        return struct.unpack('>q', bytestr)[0]
unmarshallers = {BYTES_TYPE: unmarshal_noop, ASCII_TYPE: unmarshal_noop, UTF8_TYPE: unmarshal_utf8, INT32_TYPE: unmarshal_int32, INTEGER_TYPE: unmarshal_int, LONG_TYPE: unmarshal_long, UUID_TYPE: unmarshal_uuid, LEXICAL_UUID_TYPE: unmarshal_uuid, TIME_UUID_TYPE: unmarshal_uuid, COUNTER_COLUMN_TYPE: unmarshal_long, }
for (name, typ) in unmarshallers.items():
    short_name = name.split('.')[(-1)]
    unmarshallers[short_name] = typ
