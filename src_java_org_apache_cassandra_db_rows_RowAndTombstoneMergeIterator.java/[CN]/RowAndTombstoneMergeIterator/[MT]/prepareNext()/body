{
  if (next != null)   return;
  if (nextTombstone == null && tombstoneIter.hasNext())   nextTombstone=tombstoneIter.next();
  if (nextRow == null && rowIter.hasNext())   nextRow=rowIter.next();
  if (nextTombstone == null) {
    if (nextRow == null)     return;
    next=nextRow;
    nextRow=null;
  }
 else   if (nextRow == null) {
    if (inTombstone) {
      RangeTombstone rt=nextTombstone;
      nextTombstone=tombstoneIter.hasNext() ? tombstoneIter.next() : null;
      if (nextTombstone != null && RangeTombstone.Bound.Kind.compare(rt.deletedSlice().close(reversed).kind(),nextTombstone.deletedSlice().open(reversed).kind()) == 0) {
        next=RangeTombstoneBoundaryMarker.makeBoundary(reversed,rt.deletedSlice().close(reversed),nextTombstone.deletedSlice().open(reversed),rt.deletionTime(),nextTombstone.deletionTime());
      }
 else {
        inTombstone=false;
        next=new RangeTombstoneBoundMarker(rt.deletedSlice().close(reversed),rt.deletionTime());
      }
    }
 else {
      inTombstone=true;
      next=new RangeTombstoneBoundMarker(nextTombstone.deletedSlice().open(reversed),nextTombstone.deletionTime());
    }
  }
 else   if (inTombstone) {
    if (comparator.compare(nextTombstone.deletedSlice().close(reversed),nextRow.clustering()) < 0) {
      RangeTombstone rt=nextTombstone;
      nextTombstone=tombstoneIter.hasNext() ? tombstoneIter.next() : null;
      if (nextTombstone != null && RangeTombstone.Bound.Kind.compare(rt.deletedSlice().close(reversed).kind(),nextTombstone.deletedSlice().open(reversed).kind()) == 0) {
        next=RangeTombstoneBoundaryMarker.makeBoundary(reversed,rt.deletedSlice().close(reversed),nextTombstone.deletedSlice().open(reversed),rt.deletionTime(),nextTombstone.deletionTime());
      }
 else {
        inTombstone=false;
        next=new RangeTombstoneBoundMarker(rt.deletedSlice().close(reversed),rt.deletionTime());
      }
    }
 else {
      next=nextRow;
      nextRow=null;
    }
  }
 else {
    if (comparator.compare(nextTombstone.deletedSlice().open(reversed),nextRow.clustering()) < 0) {
      inTombstone=true;
      next=new RangeTombstoneBoundMarker(nextTombstone.deletedSlice().open(reversed),nextTombstone.deletionTime());
    }
 else {
      next=nextRow;
      nextRow=null;
    }
  }
}
