{
  CFMetaData cfm=ThriftValidation.validateColumnFamily(keyspace(),columnFamily());
  if (cfm.isCounter())   throw new InvalidRequestException("Secondary indexes are not supported on counter tables");
  IndexTarget target=rawTarget.prepare(cfm);
  ColumnDefinition cd=cfm.getColumnDefinition(target.column);
  if (cd == null)   throw new InvalidRequestException("No column definition found for column " + target.column);
  boolean isMap=cd.type instanceof MapType;
  boolean isFrozenCollection=cd.type.isCollection() && !cd.type.isMultiCell();
  if (target.isCollectionKeys) {
    if (!isMap)     throw new InvalidRequestException("Cannot create index on keys of column " + target + " with non-map type");
    if (!cd.type.isMultiCell())     throw new InvalidRequestException("Cannot create index on keys of frozen<map> column " + target);
  }
 else   if (target.isFullCollection) {
    if (!isFrozenCollection)     throw new InvalidRequestException("full() indexes can only be created on frozen collections");
  }
 else   if (isFrozenCollection) {
    throw new InvalidRequestException("Frozen collections currently only support full-collection indexes. " + "For example, 'CREATE INDEX ON <table>(full(<columnName>))'.");
  }
  if (cd.getIndexType() != null) {
    boolean previousIsKeys=cd.hasIndexOption(SecondaryIndex.INDEX_KEYS_OPTION_NAME);
    if (isMap && target.isCollectionKeys != previousIsKeys) {
      String msg="Cannot create index on %s %s, an index on %s %s already exists and indexing " + "a map on both keys and values at the same time is not currently supported";
      throw new InvalidRequestException(String.format(msg,target.column,target.isCollectionKeys ? "keys" : "values",target.column,previousIsKeys ? "keys" : "values"));
    }
    if (ifNotExists)     return;
 else     throw new InvalidRequestException("Index already exists");
  }
  properties.validate();
  if ((cfm.comparator.isDense() || !cfm.comparator.isCompound()) && cd.isPrimaryKeyColumn())   throw new InvalidRequestException("Secondary indexes are not supported on PRIMARY KEY columns in COMPACT STORAGE tables");
  if (cd.kind == ColumnDefinition.Kind.COMPACT_VALUE)   throw new InvalidRequestException("Secondary indexes are not supported on COMPACT STORAGE tables that have clustering columns");
  if (cd.isStatic())   throw new InvalidRequestException("Secondary indexes are not allowed on static columns");
  if (cd.kind == ColumnDefinition.Kind.PARTITION_KEY && cd.isOnAllComponents())   throw new InvalidRequestException(String.format("Cannot create secondary index on partition key column %s",target.column));
}
