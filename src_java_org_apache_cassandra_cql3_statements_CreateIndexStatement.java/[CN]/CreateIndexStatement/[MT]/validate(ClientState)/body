{
  CFMetaData cfm=ThriftValidation.validateColumnFamily(keyspace(),columnFamily());
  if (cfm.isCounter())   throw new InvalidRequestException("Secondary indexes are not supported on counter tables");
  IndexTarget target=rawTarget.prepare(cfm);
  ColumnDefinition cd=cfm.getColumnDefinition(target.column);
  if (cd == null)   throw new InvalidRequestException("No column definition found for column " + target.column);
  boolean isMap=cd.type instanceof MapType;
  boolean isFrozenCollection=cd.type.isCollection() && !cd.type.isMultiCell();
  if (isFrozenCollection) {
    validateForFrozenCollection(target);
  }
 else {
    validateNotFullIndex(target);
    validateIsValuesIndexIfTargetColumnNotCollection(cd,target);
    validateTargetColumnIsMapIfIndexInvolvesKeys(isMap,target);
  }
  if (cd.getIndexType() != null) {
    IndexTarget.TargetType prevType=IndexTarget.TargetType.fromColumnDefinition(cd);
    if (isMap && target.type != prevType) {
      String msg="Cannot create index on %s(%s): an index on %s(%s) already exists and indexing " + "a map on more than one dimension at the same time is not currently supported";
      throw new InvalidRequestException(String.format(msg,target.type,target.column,prevType,target.column));
    }
    if (ifNotExists)     return;
 else     throw new InvalidRequestException("Index already exists");
  }
  properties.validate();
  if ((cfm.comparator.isDense() || !cfm.comparator.isCompound()) && cd.kind != ColumnDefinition.Kind.REGULAR)   throw new InvalidRequestException("Secondary indexes are not supported on PRIMARY KEY columns in COMPACT STORAGE tables");
  if (cd.isStatic())   throw new InvalidRequestException("Secondary indexes are not allowed on static columns");
  if (cd.kind == ColumnDefinition.Kind.PARTITION_KEY && cd.isOnAllComponents())   throw new InvalidRequestException(String.format("Cannot create secondary index on partition key column %s",target.column));
}
