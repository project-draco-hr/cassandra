{
  CFMetaData cfm=ThriftValidation.validateColumnFamily(keyspace(),columnFamily());
  if (cfm.getDefaultValidator().isCommutative())   throw new InvalidRequestException("Secondary indexes are not supported on counter tables");
  CFDefinition.Name name=cfm.getCfDef().get(columnName);
  if (name == null)   throw new InvalidRequestException("No column definition found for column " + columnName);
switch (name.kind) {
case KEY_ALIAS:
case COLUMN_ALIAS:
    throw new InvalidRequestException(String.format("Cannot create index on PRIMARY KEY part %s",columnName));
case VALUE_ALIAS:
  throw new InvalidRequestException(String.format("Cannot create index on column %s of compact CF",columnName));
case COLUMN_METADATA:
ColumnDefinition cd=cfm.getColumnDefinition(columnName.key);
if (cd.getIndexType() != null) throw new InvalidRequestException("Index already exists");
if (isCustom && indexClass == null) throw new InvalidRequestException("CUSTOM index requires specifiying the index class");
if (!isCustom && indexClass != null) throw new InvalidRequestException("Cannot specify index class for a non-CUSTOM index");
if (cd.getValidator().isCollection() && !isCustom) throw new InvalidRequestException("Indexes on collections are no yet supported");
break;
default :
throw new AssertionError();
}
}
