{
  CFMetaData cfm=ThriftValidation.validateColumnFamily(keyspace(),columnFamily());
  if (cfm.isCounter())   throw new InvalidRequestException("Secondary indexes are not supported on counter tables");
  if (cfm.isCompactTable() && !cfm.isStaticCompactTable())   throw new InvalidRequestException("Secondary indexes are not supported on COMPACT STORAGE tables that have clustering columns");
  List<IndexTarget> targets=new ArrayList<>(rawTargets.size());
  for (  IndexTarget.Raw rawTarget : rawTargets)   targets.add(rawTarget.prepare(cfm));
  if (targets.isEmpty() && !properties.isCustom)   throw new InvalidRequestException("Only CUSTOM indexes can be created without specifying a target column");
  if (targets.size() > 1)   validateTargetsForMultiColumnIndex(targets);
  for (  IndexTarget target : targets) {
    ColumnDefinition cd=cfm.getColumnDefinition(target.column);
    if (cd == null)     throw new InvalidRequestException("No column definition found for column " + target.column);
    if (cfm.isCompactTable() && cd.isPrimaryKeyColumn())     throw new InvalidRequestException("Secondary indexes are not supported on PRIMARY KEY columns in COMPACT STORAGE tables");
    if (!cfm.isCompactTable() && cd.isStatic())     throw new InvalidRequestException("Secondary indexes are not allowed on static columns");
    if (cd.kind == ColumnDefinition.Kind.PARTITION_KEY && cd.isOnAllComponents())     throw new InvalidRequestException(String.format("Cannot create secondary index on partition key column %s",target.column));
    boolean isMap=cd.type instanceof MapType;
    boolean isFrozenCollection=cd.type.isCollection() && !cd.type.isMultiCell();
    if (isFrozenCollection) {
      validateForFrozenCollection(target);
    }
 else {
      validateNotFullIndex(target);
      validateIsSimpleIndexIfTargetColumnNotCollection(cd,target);
      validateTargetColumnIsMapIfIndexInvolvesKeys(isMap,target);
    }
  }
  if (!Strings.isNullOrEmpty(indexName)) {
    if (Schema.instance.getKSMetaData(keyspace()).existingIndexNames(null).contains(indexName)) {
      if (ifNotExists)       return;
 else       throw new InvalidRequestException(String.format("Index %s already exists",indexName));
    }
  }
  properties.validate();
}
