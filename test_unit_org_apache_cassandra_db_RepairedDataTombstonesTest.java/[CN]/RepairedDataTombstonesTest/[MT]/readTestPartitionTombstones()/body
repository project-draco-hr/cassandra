{
  createTable("create table %s (id int, id2 int, t text, t2 text, primary key (id, id2)) with gc_grace_seconds=0 and compaction = {'class':'SizeTieredCompactionStrategy', 'only_purge_repaired_tombstones':true}");
  for (int i=0; i < 10; i++) {
    execute("delete from %s where id=?",i);
  }
  flush();
  SSTableReader repairedSSTable=getCurrentColumnFamilyStore().getSSTables(SSTableSet.LIVE).iterator().next();
  repair(getCurrentColumnFamilyStore(),repairedSSTable);
  Thread.sleep(2000);
  for (int i=10; i < 20; i++) {
    execute("delete from %s where id=?",i);
  }
  flush();
  Thread.sleep(1000);
  ReadCommand cmd=Util.cmd(getCurrentColumnFamilyStore()).build();
  int partitionsFound=0;
  try (ReadOrderGroup orderGroup=cmd.startOrderGroup();UnfilteredPartitionIterator iterator=cmd.executeLocally(orderGroup)){
    while (iterator.hasNext()) {
      partitionsFound++;
      UnfilteredRowIterator rowIter=iterator.next();
      int val=ByteBufferUtil.toInt(rowIter.partitionKey().getKey());
      assertTrue("val=" + val,val >= 10 && val < 20);
    }
  }
   assertEquals(10,partitionsFound);
}
