{
  long rows=0L;
  DecoratedKey key;
  CompactionController controller=new CompactionController(cfs,Collections.<SSTableReader>emptyList(),Integer.MAX_VALUE,true);
  while (!dfile.isEOF()) {
    key=SSTableReader.decodeKey(StorageService.getPartitioner(),desc,ByteBufferUtil.readWithShortLength(dfile));
    long dataSize=SSTableReader.readRowSize(dfile,desc);
    SSTableIdentityIterator iter=new SSTableIdentityIterator(cfs.metadata,dfile,key,dfile.getFilePointer(),dataSize,true);
    AbstractCompactedRow row=controller.getCompactedRow(iter);
    updateCache(key,dataSize,row);
    sstableMetadataCollector.addRowSize(dataSize);
    sstableMetadataCollector.addColumnCount(row.columnCount());
    sstableMetadataCollector.updateMaxTimestamp(row.maxTimestamp());
    iwriter.afterAppend(key,writerDfile.getFilePointer());
    ByteBufferUtil.writeWithShortLength(key.key,writerDfile.stream);
    row.write(writerDfile.stream);
    rows++;
  }
  writeMetadata(desc,sstableMetadataCollector.finalizeMetadata());
  if (writerDfile.getFilePointer() != dfile.getFilePointer()) {
    writerDfile.truncate(writerDfile.getFilePointer());
  }
  writerDfile.sync();
  return rows;
}
