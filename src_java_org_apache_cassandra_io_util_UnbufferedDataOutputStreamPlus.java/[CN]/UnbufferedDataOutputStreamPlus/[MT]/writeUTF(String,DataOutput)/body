{
  int length=str.length();
  int utfCount=0;
  for (int i=0; i < length; i++) {
    int ch=str.charAt(i);
    if ((ch > 0) && (ch <= 127))     utfCount+=1;
 else     if (ch <= 2047)     utfCount+=2;
 else     utfCount+=3;
  }
  if (utfCount > 65535)   throw new UTFDataFormatException();
  byte[] utfBytes=retrieveTemporaryBuffer(utfCount + 2);
  int bufferLength=utfBytes.length;
  if (utfCount == length) {
    utfBytes[0]=(byte)(utfCount >> 8);
    utfBytes[1]=(byte)utfCount;
    int firstIndex=2;
    for (int offset=0; offset < length; offset+=bufferLength) {
      int runLength=Math.min(bufferLength - firstIndex,length - offset) + firstIndex;
      offset-=firstIndex;
      for (int i=firstIndex; i < runLength; i++)       utfBytes[i]=(byte)str.charAt(offset + i);
      out.write(utfBytes,0,runLength);
      offset+=firstIndex;
      firstIndex=0;
    }
  }
 else {
    int utfIndex=2;
    utfBytes[0]=(byte)(utfCount >> 8);
    utfBytes[1]=(byte)utfCount;
    for (int charIndex=0; charIndex < length; charIndex++) {
      if (utfIndex + 3 > bufferLength) {
        out.write(utfBytes,0,utfIndex);
        utfIndex=0;
      }
      char ch=str.charAt(charIndex);
      if ((ch > 0) && (ch <= 127)) {
        utfBytes[utfIndex++]=(byte)ch;
      }
 else       if (ch <= 2047) {
        utfBytes[utfIndex++]=(byte)(0xc0 | (0x1f & (ch >> 6)));
        utfBytes[utfIndex++]=(byte)(0x80 | (0x3f & ch));
      }
 else {
        utfBytes[utfIndex++]=(byte)(0xe0 | (0x0f & (ch >> 12)));
        utfBytes[utfIndex++]=(byte)(0x80 | (0x3f & (ch >> 6)));
        utfBytes[utfIndex++]=(byte)(0x80 | (0x3f & ch));
      }
    }
    out.write(utfBytes,0,utfIndex);
  }
}
