{
  cs=newStrategy("org.apache.cassandra.utils.CoalescingStrategies$MovingAverageCoalescingStrategy",200);
  add(201);
  add(401);
  cs.coalesce(input,output,128);
  assertEquals(2,output.size());
  assertNull(parker.parks.poll());
  clear();
  runBlocker(queueParked);
  add(601);
  add(801);
  release();
  assertEquals(2,output.size());
  assertNull(parker.parks.poll());
  clear();
  runBlocker(queueParked);
  add(0);
  release();
  assertEquals(1,output.size());
  assertNull(parker.parks.poll());
  clear();
  add(0);
  cs.coalesce(input,output,128);
  assertEquals(1,output.size());
  assertNull(parker.parks.poll());
  clear();
  for (long ii=0; ii < 128; ii++)   add(ii * 1000);
  cs.coalesce(input,output,128);
  assertEquals(output.size(),128);
  assertTrue(parker.parks.isEmpty());
  clear();
  runBlocker(queueParked);
  add(129 * 1000);
  release();
  assertTrue(parker.parks.isEmpty());
  clear();
  cs=newStrategy("MOVINGAVERAGE",200);
  for (long ii=0; ii < 128; ii++)   add(ii * 99);
  cs.coalesce(input,output,128);
  assertEquals(output.size(),128);
  assertTrue(parker.parks.isEmpty());
  clear();
  runBlocker(queueParked);
  add(128 * 99);
  add(129 * 99);
  release();
  assertEquals(2,output.size());
  assertEquals(toNanos(198),parker.parks.poll().longValue());
}
