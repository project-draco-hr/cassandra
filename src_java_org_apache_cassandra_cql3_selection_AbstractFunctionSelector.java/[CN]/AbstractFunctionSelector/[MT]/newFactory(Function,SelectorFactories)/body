{
  if (fun.isAggregate()) {
    if (factories.doesAggregation())     throw new InvalidRequestException("aggregate functions cannot be used as arguments of aggregate functions");
  }
 else {
    if (factories.doesAggregation() && !factories.containsOnlyAggregateFunctions())     throw new InvalidRequestException(String.format("the %s function arguments must be either all aggregates or all none aggregates",fun.name().name));
  }
  return new Factory(){
    public ColumnSpecification getColumnSpecification(    CFMetaData cfm){
      return new ColumnSpecification(cfm.ksName,cfm.cfName,new ColumnIdentifier(fun.toString(),true),fun.returnType());
    }
    public Selector newInstance(){
      return fun.isAggregate() ? new AggregateFunctionSelector(fun,factories.newInstances()) : new ScalarFunctionSelector(fun,factories.newInstances());
    }
    public boolean isWritetimeSelectorFactory(){
      return factories.containsWritetimeSelectorFactory();
    }
    public boolean isTTLSelectorFactory(){
      return factories.containsTTLSelectorFactory();
    }
    public boolean isAggregateSelectorFactory(){
      return fun.isAggregate() || factories.containsOnlyAggregateFunctions();
    }
  }
;
}
