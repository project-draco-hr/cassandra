{
  if (fun.isAggregate()) {
    if (factories.doesAggregation())     throw new InvalidRequestException("aggregate functions cannot be used as arguments of aggregate functions");
  }
  return new Factory(){
    protected String getColumnName(){
      return fun.columnName(factories.getColumnNames());
    }
    protected AbstractType<?> getReturnType(){
      return fun.returnType();
    }
    protected void addColumnMapping(    SelectionColumnMapping mapping,    ColumnSpecification resultsColumn){
      SelectionColumnMapping tmpMapping=SelectionColumnMapping.newMapping();
      for (      Factory factory : factories)       factory.addColumnMapping(tmpMapping,resultsColumn);
      if (tmpMapping.getMappings().get(resultsColumn).isEmpty())       mapping.addMapping(resultsColumn,(ColumnDefinition)null);
 else       mapping.addMapping(resultsColumn,tmpMapping.getMappings().values());
    }
    public void addFunctionsTo(    List<Function> functions){
      fun.addFunctionsTo(functions);
      factories.addFunctionsTo(functions);
    }
    public Selector newInstance(    QueryOptions options) throws InvalidRequestException {
      return fun.isAggregate() ? new AggregateFunctionSelector(fun,factories.newInstances(options)) : new ScalarFunctionSelector(fun,factories.newInstances(options));
    }
    public boolean isWritetimeSelectorFactory(){
      return factories.containsWritetimeSelectorFactory();
    }
    public boolean isTTLSelectorFactory(){
      return factories.containsTTLSelectorFactory();
    }
    public boolean isAggregateSelectorFactory(){
      return fun.isAggregate() || factories.doesAggregation();
    }
  }
;
}
