{
  ByteBuffer idBytes=null;
  if (regexPattern.matcher(source).matches()) {
    UUID uuid=null;
    try {
      uuid=UUID.fromString(source);
      idBytes=ByteBuffer.wrap(UUIDGen.decompose(uuid));
    }
 catch (    IllegalArgumentException e) {
      throw new MarshalException(String.format("unable to make UUID from '%s'",source),e);
    }
    if (uuid.version() != 1)     throw new MarshalException("TimeUUID supports only version 1 UUIDs");
  }
 else   if (source.equals("") || source.toLowerCase().equals("now")) {
    idBytes=ByteBuffer.wrap(UUIDGen.decompose(UUIDGen.makeType1UUIDFromHost(FBUtilities.getLocalAddress())));
  }
 else   if (source.matches("^\\d+$")) {
    try {
      idBytes=ByteBuffer.wrap(UUIDGen.getTimeUUIDBytes(Long.parseLong(source)));
    }
 catch (    NumberFormatException e) {
      throw new MarshalException(String.format("unable to make version 1 UUID from '%s'"),e);
    }
  }
 else {
    try {
      long timestamp=DateUtils.parseDate(source,iso8601Patterns).getTime();
      idBytes=ByteBuffer.wrap(UUIDGen.getTimeUUIDBytes(timestamp));
    }
 catch (    ParseException e1) {
      throw new MarshalException(String.format("unable to coherce '%s' to version 1 UUID"),e1);
    }
  }
  return idBytes;
}
