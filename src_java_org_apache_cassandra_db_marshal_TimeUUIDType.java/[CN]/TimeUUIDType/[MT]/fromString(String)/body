{
  if (source.isEmpty())   return ByteBufferUtil.EMPTY_BYTE_BUFFER;
  ByteBuffer idBytes=null;
  if (regexPattern.matcher(source).matches()) {
    UUID uuid=null;
    try {
      uuid=UUID.fromString(source);
      idBytes=decompose(uuid);
    }
 catch (    IllegalArgumentException e) {
      throw new MarshalException(String.format("Unable to make UUID from '%s'",source),e);
    }
    if (uuid.version() != 1)     throw new MarshalException("TimeUUID supports only version 1 UUIDs");
  }
 else {
    Matcher m=functionPattern.matcher(source);
    if (!m.matches())     throw new MarshalException(String.format("Unable to make a time-based UUID from '%s'",source));
    String fct=m.group(1);
    String arg=m.group(2);
    if (fct.equalsIgnoreCase("minTimeUUID")) {
      idBytes=decompose(UUIDGen.minTimeUUID(DateType.dateStringToTimestamp(arg)));
    }
 else     if (fct.equalsIgnoreCase("maxTimeUUID")) {
      idBytes=decompose(UUIDGen.maxTimeUUID(DateType.dateStringToTimestamp(arg)));
    }
 else     if (fct.equalsIgnoreCase("now")) {
      if (!arg.trim().isEmpty())       throw new MarshalException(String.format("The 'now' timeuuid method takes no argument ('%s' provided)",arg));
      idBytes=ByteBuffer.wrap(UUIDGen.getTimeUUIDBytes());
    }
 else {
      throw new MarshalException(String.format("Unknown timeuuid method '%s'",fct));
    }
  }
  return idBytes;
}
