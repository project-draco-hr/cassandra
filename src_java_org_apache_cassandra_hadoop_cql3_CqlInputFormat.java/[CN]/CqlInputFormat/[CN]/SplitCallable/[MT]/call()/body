{
  ArrayList<org.apache.hadoop.mapreduce.InputSplit> splits=new ArrayList<>();
  Map<TokenRange,Long> subSplits;
  subSplits=getSubSplits(keyspace,cfName,tokenRange,conf);
  String[] endpoints=new String[hosts.size()];
  int endpointIndex=0;
  for (  Host endpoint : hosts)   endpoints[endpointIndex++]=endpoint.getAddress().getHostName();
  boolean partitionerIsOpp=partitioner instanceof OrderPreservingPartitioner || partitioner instanceof ByteOrderedPartitioner;
  for (  TokenRange subSplit : subSplits.keySet()) {
    List<TokenRange> ranges=subSplit.unwrap();
    for (    TokenRange subrange : ranges) {
      ColumnFamilySplit split=new ColumnFamilySplit(partitionerIsOpp ? subrange.getStart().toString().substring(2) : subrange.getStart().toString(),partitionerIsOpp ? subrange.getEnd().toString().substring(2) : subrange.getStart().toString(),subSplits.get(subSplit),endpoints);
      logger.debug("adding {}",split);
      splits.add(split);
    }
  }
  return splits;
}
