{
  String query=String.format("SELECT mean_partition_size, partitions_count " + "FROM %s.%s " + "WHERE keyspace_name = ? AND table_name = ? AND range_start = ? AND range_end = ?",SystemKeyspace.NAME,SystemKeyspace.SIZE_ESTIMATES);
  ResultSet resultSet=session.execute(query,keyspace,table,tokenRange.getStart().toString(),tokenRange.getEnd().toString());
  Row row=resultSet.one();
  long meanPartitionSize=0;
  long partitionCount=0;
  int splitCount=0;
  if (row != null) {
    meanPartitionSize=row.getLong("mean_partition_size");
    partitionCount=row.getLong("partitions_count");
    splitCount=(int)((meanPartitionSize * partitionCount) / splitSize);
  }
  if (splitCount == 0) {
    Map<TokenRange,Long> wrappedTokenRange=new HashMap<>();
    wrappedTokenRange.put(tokenRange,(long)128);
    return wrappedTokenRange;
  }
  List<TokenRange> splitRanges=tokenRange.splitEvenly(splitCount);
  Map<TokenRange,Long> rangesWithLength=new HashMap<>();
  for (  TokenRange range : splitRanges)   rangesWithLength.put(range,partitionCount / splitCount);
  return rangesWithLength;
}
