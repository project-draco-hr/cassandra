{
  final Keyspace keyspace=Keyspace.open("Keyspace1");
  final ColumnFamilyStore cfs=keyspace.getColumnFamilyStore("Standard1");
  Mutator mutator=new Mutator(){
    public void mutate(    String key,    String colName,    long timestamp) throws Exception {
      ColumnFamily cf=TreeMapBackedSortedColumns.factory.create(keyspace.getName(),cfs.name);
      cf.addColumn(column(colName,"value",timestamp));
      cf.addColumn(new Cell(cellname("birthdate"),ByteBufferUtil.bytes(new Date(timestamp).toString()),timestamp));
      RowMutation rm=new RowMutation("Keyspace1",ByteBufferUtil.bytes(key),cf);
      logger.debug("Applying row to transfer " + rm);
      rm.apply();
    }
  }
;
  for (int i=1; i <= 6000; i++)   mutator.mutate("key" + i,"col" + i,System.currentTimeMillis());
  cfs.forceBlockingFlush();
  Util.compactAll(cfs,Integer.MAX_VALUE).get();
  SSTableReader sstable=cfs.getSSTables().iterator().next();
  cfs.clearUnsafe();
  IPartitioner p=StorageService.getPartitioner();
  List<Range<Token>> ranges=new ArrayList<>();
  ranges.add(new Range<>(p.getToken(ByteBufferUtil.bytes("key1")),p.getToken(ByteBufferUtil.bytes("key1000"))));
  ranges.add(new Range<>(p.getToken(ByteBufferUtil.bytes("key5")),p.getToken(ByteBufferUtil.bytes("key500"))));
  ranges.add(new Range<>(p.getToken(ByteBufferUtil.bytes("key9")),p.getToken(ByteBufferUtil.bytes("key900"))));
  transfer(sstable,ranges);
  assertEquals(1,cfs.getSSTables().size());
  assertEquals(7,Util.getRangeSlice(cfs).size());
}
