{
  String ks=KEYSPACE1;
  String cfname="StandardInteger1";
  Keyspace keyspace=Keyspace.open(ks);
  ColumnFamilyStore cfs=keyspace.getColumnFamilyStore(cfname);
  ClusteringComparator comparator=cfs.getComparator();
  String key="key1";
  RowUpdateBuilder updates=new RowUpdateBuilder(cfs.metadata,FBUtilities.timestampMicros(),key);
  updates.clustering(1).add("val",ByteBuffer.wrap(new byte[DatabaseDescriptor.getColumnIndexSize() - 64])).build().apply();
  updates=new RowUpdateBuilder(cfs.metadata,FBUtilities.timestampMicros(),key);
  updates.clustering(6).add("val",ByteBuffer.wrap(new byte[DatabaseDescriptor.getColumnIndexSize()])).build().apply();
  updates=new RowUpdateBuilder(cfs.metadata,FBUtilities.timestampMicros() + 1,key);
  updates.addRangeTombstone(Slice.make(comparator.make(5),comparator.make(7))).build().apply();
  cfs.forceBlockingFlush();
  SSTableReader sstable=cfs.getSSTables().iterator().next();
  cfs.clearUnsafe();
  transferSSTables(sstable);
  assertEquals(1,cfs.getSSTables().size());
  Row r=Util.getOnlyRow(Util.cmd(cfs).build());
  Assert.assertFalse(r.isEmpty());
  Assert.assertTrue(1 == Int32Type.instance.compose(r.clustering().get(0)));
}
