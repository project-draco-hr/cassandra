{
  Cell left;
  Cell right;
  Cell reconciled;
  ByteBuffer context;
  left=new DeletedCell(Util.cellname("x"),1,1L);
  right=new DeletedCell(Util.cellname("x"),2,2L);
  Assert.assertEquals(left.reconcile(right).getMarkedForDeleteAt(),right.getMarkedForDeleteAt());
  Assert.assertEquals(right.reconcile(left).getMarkedForDeleteAt(),right.getMarkedForDeleteAt());
  left=new DeletedCell(Util.cellname("x"),1,2L);
  right=new CounterCell(Util.cellname("x"),0L,1L);
  Assert.assertEquals(left.reconcile(right),left);
  left=new DeletedCell(Util.cellname("x"),1,1L);
  right=new CounterCell(Util.cellname("x"),0L,4L,2L);
  Assert.assertEquals(left.reconcile(right),right);
  left=new DeletedCell(Util.cellname("x"),1,2L);
  right=new CounterCell(Util.cellname("x"),0L,4L,2L);
  Assert.assertEquals(left.reconcile(right),right);
  left=new DeletedCell(Util.cellname("x"),1,4L);
  right=new CounterCell(Util.cellname("x"),0L,9L,1L);
  reconciled=left.reconcile(right);
  Assert.assertEquals(reconciled.name(),right.name());
  Assert.assertEquals(reconciled.value(),right.value());
  Assert.assertEquals(reconciled.timestamp(),right.timestamp());
  Assert.assertEquals(((CounterCell)reconciled).timestampOfLastDelete(),left.getMarkedForDeleteAt());
  left=new CounterCell(Util.cellname("x"),0L,1L);
  right=new DeletedCell(Util.cellname("x"),1,2L);
  Assert.assertEquals(left.reconcile(right),right);
  left=new CounterCell(Util.cellname("x"),0L,4L,2L);
  right=new DeletedCell(Util.cellname("x"),1,1L);
  Assert.assertEquals(left.reconcile(right),left);
  left=new CounterCell(Util.cellname("x"),0L,4L,2L);
  right=new DeletedCell(Util.cellname("x"),1,2L);
  Assert.assertEquals(left.reconcile(right),left);
  left=new CounterCell(Util.cellname("x"),0L,9L,1L);
  right=new DeletedCell(Util.cellname("x"),1,4L);
  reconciled=left.reconcile(right);
  Assert.assertEquals(reconciled.name(),left.name());
  Assert.assertEquals(reconciled.value(),left.value());
  Assert.assertEquals(reconciled.timestamp(),left.timestamp());
  Assert.assertEquals(((CounterCell)reconciled).timestampOfLastDelete(),right.getMarkedForDeleteAt());
  left=new CounterCell(Util.cellname("x"),cc.create(CounterId.fromInt(1),2L,3L,false),1L,Long.MIN_VALUE);
  right=new CounterCell(Util.cellname("x"),cc.create(CounterId.fromInt(1),1L,1L,false),4L,3L);
  Assert.assertEquals(left.reconcile(right),right);
  left=new CounterCell(Util.cellname("x"),cc.create(CounterId.fromInt(1),2L,3L,false),6L,5L);
  right=new CounterCell(Util.cellname("x"),cc.create(CounterId.fromInt(1),1L,1L,false),4L,3L);
  Assert.assertEquals(left.reconcile(right),left);
  left=new CounterCell(Util.cellname("x"),cc.create(CounterId.fromInt(1),1L,1L,false),4L,Long.MIN_VALUE);
  right=new CounterCell(Util.cellname("x"),cc.create(CounterId.fromInt(1),2L,3L,false),1L,Long.MIN_VALUE);
  reconciled=left.reconcile(right);
  Assert.assertEquals(reconciled.name(),left.name());
  Assert.assertEquals(3L,((CounterCell)reconciled).total());
  Assert.assertEquals(4L,reconciled.timestamp());
  left=reconciled;
  right=new CounterCell(Util.cellname("x"),cc.create(CounterId.fromInt(2),1L,5L,false),2L,Long.MIN_VALUE);
  reconciled=left.reconcile(right);
  Assert.assertEquals(reconciled.name(),left.name());
  Assert.assertEquals(8L,((CounterCell)reconciled).total());
  Assert.assertEquals(4L,reconciled.timestamp());
  left=reconciled;
  right=new CounterCell(Util.cellname("x"),cc.create(CounterId.fromInt(2),2L,2L,false),6L,Long.MIN_VALUE);
  reconciled=left.reconcile(right);
  Assert.assertEquals(reconciled.name(),left.name());
  Assert.assertEquals(5L,((CounterCell)reconciled).total());
  Assert.assertEquals(6L,reconciled.timestamp());
  context=reconciled.value();
  int hd=2;
  Assert.assertEquals(hd + 2 * stepLength,context.remaining());
  Assert.assertTrue(Util.equalsCounterId(CounterId.fromInt(1),context,hd + 0 * stepLength));
  Assert.assertEquals(2L,context.getLong(hd + 0 * stepLength + idLength));
  Assert.assertEquals(3L,context.getLong(hd + 0 * stepLength + idLength + clockLength));
  Assert.assertTrue(Util.equalsCounterId(CounterId.fromInt(2),context,hd + 1 * stepLength));
  Assert.assertEquals(2L,context.getLong(hd + 1 * stepLength + idLength));
  Assert.assertEquals(2L,context.getLong(hd + 1 * stepLength + idLength + clockLength));
  Assert.assertEquals(Long.MIN_VALUE,((CounterCell)reconciled).timestampOfLastDelete());
}
