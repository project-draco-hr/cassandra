{
  this.split=(ColumnFamilySplit)split;
  Configuration conf=HadoopCompat.getConfiguration(context);
  totalRowCount=(this.split.getLength() < Long.MAX_VALUE) ? (int)this.split.getLength() : ConfigHelper.getInputSplitSize(conf);
  cfName=ConfigHelper.getInputColumnFamily(conf);
  keyspace=ConfigHelper.getInputKeyspace(conf);
  partitioner=ConfigHelper.getInputPartitioner(conf);
  inputColumns=CqlConfigHelper.getInputcolumns(conf);
  userDefinedWhereClauses=CqlConfigHelper.getInputWhereClauses(conf);
  Optional<Integer> pageRowSizeOptional=CqlConfigHelper.getInputPageRowSize(conf);
  try {
    pageRowSize=pageRowSizeOptional.isPresent() ? pageRowSizeOptional.get() : DEFAULT_CQL_PAGE_LIMIT;
  }
 catch (  NumberFormatException e) {
    pageRowSize=DEFAULT_CQL_PAGE_LIMIT;
  }
  try {
    if (cluster != null)     return;
    String[] locations=split.getLocations();
    Exception lastException=null;
    for (    String location : locations) {
      try {
        cluster=CqlConfigHelper.getInputCluster(location,conf);
        break;
      }
 catch (      Exception e) {
        lastException=e;
        logger.warn("Failed to create authenticated client to {}",location);
      }
    }
    if (cluster == null && lastException != null)     throw lastException;
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
  if (cluster != null)   session=cluster.connect(keyspace);
  if (session == null)   throw new RuntimeException("Can't create connection session");
  cqlQuery=CqlConfigHelper.getInputCql(conf);
  if (StringUtils.isNotEmpty(cqlQuery) && (StringUtils.isNotEmpty(inputColumns) || StringUtils.isNotEmpty(userDefinedWhereClauses))) {
    throw new AssertionError("Cannot define a custom query with input columns and / or where clauses");
  }
  if (StringUtils.isEmpty(cqlQuery))   cqlQuery=buildQuery();
  logger.debug("cqlQuery {}",cqlQuery);
  rowIterator=new RowIterator();
  logger.debug("created {}",rowIterator);
}
