{
  String columnKey=(String)(columnKey_.get());
  String columnFamily_column;
  String superColumnKey=null;
  if (superColumnKey_ != null) {
    superColumnKey=(String)(superColumnKey_.get());
    columnFamily_column=cfMetaData_.cfName + ":" + superColumnKey+ ":"+ columnKey;
  }
 else {
    columnFamily_column=cfMetaData_.cfName + ":" + columnKey;
  }
  Row row=null;
  try {
    String key=(String)(rowKey_.get());
    row=StorageProxy.readProtocol(cfMetaData_.tableName,key,columnFamily_column,-1,Integer.MAX_VALUE,StorageService.ConsistencyLevel.WEAK);
  }
 catch (  Exception e) {
    logger_.error(LogUtil.throwableToString(e));
    throw new RuntimeException(RuntimeErrorMsg.GENERIC_ERROR.getMsg());
  }
  if (row != null) {
    Map<String,ColumnFamily> cfMap=row.getColumnFamilyMap();
    if (cfMap != null && cfMap.size() > 0) {
      ColumnFamily cfamily=cfMap.get(cfMetaData_.cfName);
      if (cfamily != null) {
        Collection<IColumn> columns=null;
        if (superColumnKey_ != null) {
          IColumn column=cfamily.getColumn(superColumnKey);
          if (column != null)           columns=column.getSubColumns();
        }
 else {
          columns=cfamily.getAllColumns();
        }
        if (columns != null && columns.size() > 0) {
          if (columns.size() > 1) {
            throw new RuntimeException(RuntimeErrorMsg.INTERNAL_ERROR.getMsg("Too many columns found for: " + columnKey));
          }
          for (          IColumn column : columns) {
            List<Map<String,String>> rows=new LinkedList<Map<String,String>>();
            Map<String,String> result=new HashMap<String,String>();
            result.put(cfMetaData_.n_columnKey,column.name());
            result.put(cfMetaData_.n_columnValue,new String(column.value()));
            result.put(cfMetaData_.n_columnTimestamp,Long.toString(column.timestamp()));
            rows.add(result);
            return rows;
          }
          return null;
        }
      }
    }
  }
  throw new RuntimeException(RuntimeErrorMsg.NO_DATA_FOUND.getMsg());
}
