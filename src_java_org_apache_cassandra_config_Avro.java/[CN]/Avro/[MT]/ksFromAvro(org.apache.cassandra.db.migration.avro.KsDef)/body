{
  Class<? extends AbstractReplicationStrategy> repStratClass;
  try {
    String strategyClassName=KSMetaData.convertOldStrategyName(ks.strategy_class.toString());
    repStratClass=(Class<AbstractReplicationStrategy>)Class.forName(strategyClassName);
  }
 catch (  Exception ex) {
    throw new RuntimeException("Could not create ReplicationStrategy of type " + ks.strategy_class,ex);
  }
  Map<String,String> strategyOptions=new HashMap<String,String>();
  if (ks.strategy_options != null) {
    for (    Map.Entry<CharSequence,CharSequence> e : ks.strategy_options.entrySet()) {
      String name=e.getKey().toString();
      if (repStratClass == NetworkTopologyStrategy.class && name.trim().toLowerCase().equals("replication_factor"))       continue;
      strategyOptions.put(name,e.getValue().toString());
    }
  }
  maybeAddReplicationFactor(strategyOptions,ks.strategy_class.toString(),ks.replication_factor);
  int cfsz=ks.cf_defs.size();
  List<CFMetaData> cfMetaData=new ArrayList<CFMetaData>(cfsz);
  for (  CfDef cf_def : ks.cf_defs) {
    double keysCached=cf_def.key_cache_size == null ? -1 : cf_def.key_cache_size;
    double rowsCached=cf_def.row_cache_size == null ? -1 : cf_def.row_cache_size;
    if (keysCached > 0 && rowsCached > 0)     cf_def.caching=Caching.ALL.name();
 else     if (keysCached <= 0 && rowsCached <= 0)     cf_def.caching=Caching.NONE.name();
 else     if (keysCached > 0 && rowsCached <= 0)     cf_def.caching=Caching.KEYS_ONLY.name();
 else     cf_def.caching=Caching.ROWS_ONLY.name();
    cfMetaData.add(cfFromAvro(cf_def));
  }
  return new KSMetaData(ks.name.toString(),repStratClass,strategyOptions,ks.durable_writes,cfMetaData);
}
