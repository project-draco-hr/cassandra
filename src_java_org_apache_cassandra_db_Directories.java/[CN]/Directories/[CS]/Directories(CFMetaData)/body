{
  this.metadata=metadata;
  String cfId=ByteBufferUtil.bytesToHex(ByteBufferUtil.bytes(metadata.cfId));
  int idx=metadata.cfName.indexOf(SECONDARY_INDEX_NAME_SEPARATOR);
  String directoryName;
  if (idx >= 0) {
    directoryName=metadata.cfName.substring(0,idx) + "-" + cfId+ File.separator+ metadata.cfName.substring(idx);
  }
 else {
    directoryName=metadata.cfName + "-" + cfId;
  }
  this.dataPaths=new File[dataDirectories.length];
  String oldSSTableRelativePath=join(metadata.ksName,idx > 0 ? metadata.cfName.substring(0,idx) : metadata.cfName);
  for (int i=0; i < dataDirectories.length; ++i) {
    dataPaths[i]=new File(dataDirectories[i].location,oldSSTableRelativePath);
  }
  boolean olderDirectoryExists=Iterables.any(Arrays.asList(dataPaths),new Predicate<File>(){
    public boolean apply(    File file){
      return file.exists();
    }
  }
);
  if (!olderDirectoryExists) {
    String newSSTableRelativePath=join(metadata.ksName,directoryName);
    for (int i=0; i < dataDirectories.length; ++i)     dataPaths[i]=new File(dataDirectories[i].location,newSSTableRelativePath);
  }
  for (  File dir : dataPaths) {
    try {
      FileUtils.createDirectory(dir);
    }
 catch (    FSError e) {
      logger.error("Failed to create {} directory",dir);
      FileUtils.handleFSError(e);
    }
  }
}
