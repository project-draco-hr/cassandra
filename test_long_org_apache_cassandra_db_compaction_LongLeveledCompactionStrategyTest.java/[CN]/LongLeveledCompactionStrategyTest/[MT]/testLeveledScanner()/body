{
  testParallelLeveledCompaction();
  String ksname="Keyspace1";
  String cfname="StandardLeveled";
  Keyspace keyspace=Keyspace.open(ksname);
  ColumnFamilyStore store=keyspace.getColumnFamilyStore(cfname);
  store.disableAutoCompaction();
  WrappingCompactionStrategy strategy=((WrappingCompactionStrategy)store.getCompactionStrategy());
  LeveledCompactionStrategy lcs=(LeveledCompactionStrategy)strategy.getWrappedStrategies().get(1);
  ByteBuffer value=ByteBuffer.wrap(new byte[10 * 1024]);
  for (int r=0; r < 10; r++) {
    DecoratedKey key=Util.dk(String.valueOf(r));
    Mutation rm=new Mutation(ksname,key.getKey());
    for (int c=0; c < 10; c++) {
      rm.add(cfname,Util.cellname("column" + c),value,0);
    }
    rm.apply();
  }
  store.forceBlockingFlush();
  Collection<SSTableReader> allSSTables=store.getSSTables();
  for (  SSTableReader sstable : allSSTables) {
    if (sstable.getSSTableLevel() == 0) {
      System.out.println("Mutating L0-SSTABLE level to L1 to simulate a bug: " + sstable.getFilename());
      sstable.descriptor.getMetadataSerializer().mutateLevel(sstable.descriptor,1);
      sstable.reloadSSTableMetadata();
    }
  }
  try (AbstractCompactionStrategy.ScannerList scannerList=lcs.getScanners(allSSTables)){
    for (    ISSTableScanner scanner : scannerList.scanners) {
      DecoratedKey lastKey=null;
      while (scanner.hasNext()) {
        OnDiskAtomIterator row=scanner.next();
        if (lastKey != null) {
          assertTrue("row " + row.getKey() + " received out of order wrt "+ lastKey,row.getKey().compareTo(lastKey) >= 0);
        }
        lastKey=row.getKey();
      }
    }
  }
 }
