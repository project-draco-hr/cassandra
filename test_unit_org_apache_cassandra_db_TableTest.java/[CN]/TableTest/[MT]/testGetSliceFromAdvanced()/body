{
  final Table table=Table.open("Keyspace1");
  final ColumnFamilyStore cfStore=table.getColumnFamilyStore("Standard1");
  final DecoratedKey ROW=Util.dk("row2");
  RowMutation rm=new RowMutation("Keyspace1",ROW.key);
  ColumnFamily cf=ColumnFamily.create("Keyspace1","Standard1");
  cf.addColumn(column("col1","val1",new TimestampClock(1L)));
  cf.addColumn(column("col2","val2",new TimestampClock(1L)));
  cf.addColumn(column("col3","val3",new TimestampClock(1L)));
  cf.addColumn(column("col4","val4",new TimestampClock(1L)));
  cf.addColumn(column("col5","val5",new TimestampClock(1L)));
  cf.addColumn(column("col6","val6",new TimestampClock(1L)));
  rm.add(cf);
  rm.apply();
  cfStore.forceBlockingFlush();
  rm=new RowMutation("Keyspace1",ROW.key);
  cf=ColumnFamily.create("Keyspace1","Standard1");
  cf.addColumn(column("col1","valx",new TimestampClock(2L)));
  cf.addColumn(column("col2","valx",new TimestampClock(2L)));
  cf.addColumn(column("col3","valx",new TimestampClock(2L)));
  rm.add(cf);
  rm.apply();
  Runnable verify=new WrappedRunnable(){
    public void runMayThrow() throws Exception {
      ColumnFamily cf;
      cf=cfStore.getColumnFamily(ROW,new QueryPath("Standard1"),"col2".getBytes(),ArrayUtils.EMPTY_BYTE_ARRAY,false,3);
      assertColumns(cf,"col2","col3","col4");
      assertEquals(new String(cf.getColumn("col2".getBytes()).value()),"valx");
      assertEquals(new String(cf.getColumn("col3".getBytes()).value()),"valx");
      assertEquals(new String(cf.getColumn("col4".getBytes()).value()),"val4");
    }
  }
;
  reTest(table.getColumnFamilyStore("Standard1"),verify);
}
