{
  final Table table=Table.open("Table1");
  final String ROW="row2";
  Runner setup=new Runner(){
    public void run() throws Exception {
      RowMutation rm=new RowMutation("Table1",ROW);
      ColumnFamily cf=ColumnFamily.create("Table1","Standard1");
      cf.addColumn(new Column("col1","val1".getBytes(),1L));
      cf.addColumn(new Column("col2","val2".getBytes(),1L));
      cf.addColumn(new Column("col3","val3".getBytes(),1L));
      cf.addColumn(new Column("col4","val4".getBytes(),1L));
      cf.addColumn(new Column("col5","val5".getBytes(),1L));
      cf.addColumn(new Column("col6","val6".getBytes(),1L));
      rm.add(cf);
      rm.apply();
      table.getColumnFamilyStore("Standard1").forceBlockingFlush();
      rm=new RowMutation("Table1",ROW);
      cf=ColumnFamily.create("Table1","Standard1");
      cf.addColumn(new Column("col1","valx".getBytes(),2L));
      cf.addColumn(new Column("col2","valx".getBytes(),2L));
      cf.addColumn(new Column("col3","valx".getBytes(),2L));
      rm.add(cf);
      rm.apply();
    }
  }
;
  Runner verify=new Runner(){
    public void run() throws Exception {
      Row result;
      ColumnFamily cfres;
      result=table.getSliceFrom(ROW,"Standard1:col2",true,3);
      cfres=result.getColumnFamily("Standard1");
      assertColumns(cfres,"col2","col3","col4");
      assertEquals(new String(cfres.getColumn("col2").value()),"valx");
      assertEquals(new String(cfres.getColumn("col3").value()),"valx");
      assertEquals(new String(cfres.getColumn("col4").value()),"val4");
    }
  }
;
  reTest(setup,table.getColumnFamilyStore("Standard1"),verify);
}
