{
  name=table;
  KSMetaData ksm=DatabaseDescriptor.getKSMetaData(table);
  try {
    createReplicationStrategy(ksm);
  }
 catch (  ConfigurationException e) {
    throw new RuntimeException(e);
  }
  indexLocks=new Object[DatabaseDescriptor.getConcurrentWriters() * 128];
  for (int i=0; i < indexLocks.length; i++)   indexLocks[i]=new Object();
  for (  String dataDir : DatabaseDescriptor.getAllDataFileLocations()) {
    try {
      String keyspaceDir=dataDir + File.separator + table;
      FileUtils.createDirectory(keyspaceDir);
      File streamingDir=new File(keyspaceDir,"stream");
      if (streamingDir.exists())       FileUtils.deleteRecursive(streamingDir);
    }
 catch (    IOException ex) {
      throw new IOError(ex);
    }
  }
  for (  CFMetaData cfm : new ArrayList<CFMetaData>(DatabaseDescriptor.getTableDefinition(table).cfMetaData().values())) {
    logger.debug("Initializing {}.{}",name,cfm.cfName);
    initCf(cfm.cfId,cfm.cfName);
  }
  int minCheckMs=Integer.MAX_VALUE;
  for (  ColumnFamilyStore cfs : columnFamilyStores.values()) {
    minCheckMs=Math.min(minCheckMs,cfs.getMemtableFlushAfterMins() * 60 * 1000);
  }
  Runnable runnable=new Runnable(){
    public void run(){
      for (      ColumnFamilyStore cfs : columnFamilyStores.values()) {
        cfs.forceFlushIfExpired();
      }
    }
  }
;
  flushTask=StorageService.scheduledTasks.scheduleWithFixedDelay(runnable,minCheckMs,minCheckMs,TimeUnit.MILLISECONDS);
}
