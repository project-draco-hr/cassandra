{
  final Comparator<String> comparator=StorageService.getPartitioner().getDecoratedKeyComparator();
  List<Iterator<String>> iterators=new ArrayList<Iterator<String>>();
  for (  String cfName : getApplicationColumnFamilies()) {
    ColumnFamilyStore cfs=getColumnFamilyStore(cfName);
    Iterator<Memtable> memtables=(Iterator<Memtable>)IteratorUtils.chainedIterator(IteratorUtils.singletonIterator(cfs.getMemtable()),MemtableManager.instance().getUnflushedMemtables(cfName).iterator());
    while (memtables.hasNext()) {
      iterators.add(IteratorUtils.filteredIterator(memtables.next().sortedKeyIterator(),new Predicate(){
        public boolean evaluate(        Object key){
          String st=(String)key;
          return comparator.compare(startWith,st) <= 0 && (stopAt.isEmpty() || comparator.compare(st,stopAt) <= 0);
        }
      }
));
    }
    for (    String filename : cfs.getSSTableFilenames()) {
      FileStruct fs=new FileStruct(SequenceFile.reader(filename),StorageService.getPartitioner());
      fs.seekTo(startWith);
      iterators.add(fs);
    }
  }
  Iterator<String> iter=IteratorUtils.collatedIterator(comparator,iterators);
  List<String> keys=new ArrayList<String>();
  String last=null, current=null;
  while (keys.size() < maxResults) {
    if (!iter.hasNext()) {
      break;
    }
    current=iter.next();
    if (!current.equals(last)) {
      if (!stopAt.isEmpty() && comparator.compare(stopAt,current) < 0) {
        break;
      }
      last=current;
      for (      String cfName : getApplicationColumnFamilies()) {
        ColumnFamilyStore cfs=getColumnFamilyStore(cfName);
        ColumnFamily cf=cfs.getColumnFamily(current,cfName,new IdentityFilter(),Integer.MAX_VALUE);
        if (cf != null && cf.getColumns().size() > 0) {
          keys.add(current);
          break;
        }
      }
    }
  }
  return keys;
}
