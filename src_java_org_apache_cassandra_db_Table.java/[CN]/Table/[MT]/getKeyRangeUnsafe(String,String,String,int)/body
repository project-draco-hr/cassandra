{
  final Comparator<String> comparator=StorageService.getPartitioner().getDecoratedKeyComparator();
  List<Iterator<String>> iterators=new ArrayList<Iterator<String>>();
  ColumnFamilyStore cfs=getColumnFamilyStore(cfName);
  Predicate p=new Predicate(){
    public boolean evaluate(    Object key){
      String st=(String)key;
      return comparator.compare(startWith,st) <= 0 && (stopAt.isEmpty() || comparator.compare(st,stopAt) <= 0);
    }
  }
;
  iterators.add(IteratorUtils.filteredIterator(cfs.memtableKeyIterator(),p));
  for (  Memtable memtable : ColumnFamilyStore.getUnflushedMemtables(cfName)) {
    iterators.add(IteratorUtils.filteredIterator(Memtable.getKeyIterator(memtable.getKeys()),p));
  }
  for (  SSTableReader sstable : cfs.getSSTables()) {
    FileStruct fs=sstable.getFileStruct();
    fs.seekTo(startWith);
    iterators.add(fs);
  }
  Iterator<String> collated=IteratorUtils.collatedIterator(comparator,iterators);
  Iterable<String> reduced=new ReducingIterator<String>(collated){
    String current;
    public void reduce(    String current){
      this.current=current;
    }
    protected String getReduced(){
      return current;
    }
  }
;
  try {
    List<String> keys=new ArrayList<String>();
    for (    String current : reduced) {
      if (!stopAt.isEmpty() && comparator.compare(stopAt,current) < 0) {
        break;
      }
      if (ColumnFamilyStore.removeDeleted(cfs.getColumnFamily(new SliceQueryFilter(current,new QueryPath(cfName),"","",true,1)),Integer.MAX_VALUE) != null) {
        keys.add(current);
      }
      if (keys.size() >= maxResults) {
        break;
      }
    }
    return keys;
  }
  finally {
    for (    Iterator iter : iterators) {
      if (iter instanceof FileStruct) {
        ((FileStruct)iter).close();
      }
    }
  }
}
