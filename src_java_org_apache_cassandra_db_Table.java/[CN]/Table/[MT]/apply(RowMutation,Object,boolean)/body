{
  HashMap<ColumnFamilyStore,Memtable> memtablesToFlush=new HashMap<ColumnFamilyStore,Memtable>(2);
  flusherLock.readLock().lock();
  try {
    if (writeCommitLog) {
      Future<CommitLogSegment.CommitLogContext> future=CommitLog.instance().add(mutation,serializedMutation);
      if (waitForCommitLog) {
        try {
          future.get();
        }
 catch (        Exception e) {
          throw new RuntimeException(e);
        }
      }
    }
    for (    ColumnFamily columnFamily : mutation.getColumnFamilies()) {
      Memtable memtableToFlush;
      ColumnFamilyStore cfs=columnFamilyStores.get(columnFamily.name());
      if (cfs == null) {
        logger.error("Attempting to mutate non-existant column family " + columnFamily.name());
      }
 else {
        if ((memtableToFlush=cfs.apply(mutation.key(),columnFamily)) != null)         memtablesToFlush.put(cfs,memtableToFlush);
        ColumnFamily cachedRow=cfs.getRawCachedRow(mutation.key());
        if (cachedRow != null)         cachedRow.addAll(columnFamily);
      }
    }
  }
  finally {
    flusherLock.readLock().unlock();
  }
  for (  Map.Entry<ColumnFamilyStore,Memtable> entry : memtablesToFlush.entrySet())   entry.getKey().maybeSwitchMemtable(entry.getValue(),writeCommitLog);
}
