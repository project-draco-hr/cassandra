{
  HashMap<ColumnFamilyStore,Memtable> memtablesToFlush=new HashMap<ColumnFamilyStore,Memtable>(2);
  flusherLock.readLock().lock();
  try {
    if (writeCommitLog) {
      CommitLog.instance().add(mutation,serializedMutation);
    }
    DecoratedKey key=StorageService.getPartitioner().decorateKey(mutation.key());
    for (    ColumnFamily columnFamily : mutation.getColumnFamilies()) {
      Memtable memtableToFlush;
      ColumnFamilyStore cfs=columnFamilyStores.get(columnFamily.id());
      if (cfs == null) {
        logger.error("Attempting to mutate non-existant column family " + columnFamily.id());
      }
 else {
        if ((memtableToFlush=cfs.apply(key,columnFamily)) != null)         memtablesToFlush.put(cfs,memtableToFlush);
        ColumnFamily cachedRow=cfs.getRawCachedRow(key);
        if (cachedRow != null)         cachedRow.addAll(columnFamily);
      }
    }
  }
  finally {
    flusherLock.readLock().unlock();
  }
  for (  Map.Entry<ColumnFamilyStore,Memtable> entry : memtablesToFlush.entrySet())   entry.getKey().maybeSwitchMemtable(entry.getValue(),writeCommitLog);
}
