{
  ColumnFamilyStore store=Keyspace.open(KS_NAME).getColumnFamilyStore(CLUSTERING_CF_NAME_1);
  executeCQL(CLUSTERING_CF_NAME_1,"INSERT INTO %s.%s (name, location, age, height, score) VALUES (?, ?, ?, ?, ?)","Pavel","US",27,183,1.0);
  executeCQL(CLUSTERING_CF_NAME_1,"INSERT INTO %s.%s (name, location, age, height, score) VALUES (?, ?, ?, ?, ?)","Pavel","BY",28,182,2.0);
  executeCQL(CLUSTERING_CF_NAME_1,"INSERT INTO %s.%s (name, location, age, height, score) VALUES (?, ?, ?, ?, ?)","Jordan","US",27,182,1.0);
  if (forceFlush)   store.forceBlockingFlush();
  UntypedResultSet results;
  results=executeCQL(CLUSTERING_CF_NAME_1,"SELECT * FROM %s.%s WHERE location = ? ALLOW FILTERING","US");
  Assert.assertNotNull(results);
  Assert.assertEquals(2,results.size());
  results=executeCQL(CLUSTERING_CF_NAME_1,"SELECT * FROM %s.%s WHERE age >= ? AND height = ? ALLOW FILTERING",27,182);
  Assert.assertNotNull(results);
  Assert.assertEquals(2,results.size());
  results=executeCQL(CLUSTERING_CF_NAME_1,"SELECT * FROM %s.%s WHERE age = ? AND height = ? ALLOW FILTERING",28,182);
  Assert.assertNotNull(results);
  Assert.assertEquals(1,results.size());
  results=executeCQL(CLUSTERING_CF_NAME_1,"SELECT * FROM %s.%s WHERE age >= ? AND height = ? AND score >= ? ALLOW FILTERING",27,182,1.0);
  Assert.assertNotNull(results);
  Assert.assertEquals(2,results.size());
  results=executeCQL(CLUSTERING_CF_NAME_1,"SELECT * FROM %s.%s WHERE age >= ? AND height = ? AND score = ? ALLOW FILTERING",27,182,1.0);
  Assert.assertNotNull(results);
  Assert.assertEquals(1,results.size());
  results=executeCQL(CLUSTERING_CF_NAME_1,"SELECT * FROM %s.%s WHERE location = ? AND age >= ? ALLOW FILTERING","US",27);
  Assert.assertNotNull(results);
  Assert.assertEquals(2,results.size());
  results=executeCQL(CLUSTERING_CF_NAME_1,"SELECT * FROM %s.%s WHERE location = ? ALLOW FILTERING","BY");
  Assert.assertNotNull(results);
  Assert.assertEquals(1,results.size());
  results=executeCQL(CLUSTERING_CF_NAME_1,"SELECT * FROM %s.%s WHERE location LIKE 'U%%' ALLOW FILTERING");
  Assert.assertNotNull(results);
  Assert.assertEquals(2,results.size());
  results=executeCQL(CLUSTERING_CF_NAME_1,"SELECT * FROM %s.%s WHERE location LIKE 'U%%' AND height >= 183 ALLOW FILTERING");
  Assert.assertNotNull(results);
  Assert.assertEquals(1,results.size());
  results=executeCQL(CLUSTERING_CF_NAME_1,"SELECT * FROM %s.%s WHERE location LIKE 'US%%' ALLOW FILTERING");
  Assert.assertNotNull(results);
  Assert.assertEquals(2,results.size());
  results=executeCQL(CLUSTERING_CF_NAME_1,"SELECT * FROM %s.%s WHERE location LIKE 'US' ALLOW FILTERING");
  Assert.assertNotNull(results);
  Assert.assertEquals(2,results.size());
  try {
    executeCQL(CLUSTERING_CF_NAME_1,"SELECT * FROM %s.%s WHERE location LIKE '%%U' ALLOW FILTERING");
    Assert.fail();
  }
 catch (  InvalidRequestException e) {
    Assert.assertTrue(e.getMessage().contains("only supported"));
  }
  try {
    executeCQL(CLUSTERING_CF_NAME_1,"SELECT * FROM %s.%s WHERE location LIKE '%%' ALLOW FILTERING");
    Assert.fail();
  }
 catch (  SyntaxException e) {
    Assert.assertTrue(e.getMessage().contains("empty"));
  }
  try {
    executeCQL(CLUSTERING_CF_NAME_1,"SELECT * FROM %s.%s WHERE location LIKE '%%%%' ALLOW FILTERING");
    Assert.fail();
  }
 catch (  SyntaxException e) {
    Assert.assertTrue(e.getMessage().contains("empty"));
  }
  store=Keyspace.open(KS_NAME).getColumnFamilyStore(CLUSTERING_CF_NAME_2);
  executeCQL(CLUSTERING_CF_NAME_2,"INSERT INTO %s.%s (name, location, age, height, score) VALUES (?, ?, ?, ?, ?)","Tony","US",43,184,2.0);
  executeCQL(CLUSTERING_CF_NAME_2,"INSERT INTO %s.%s (name, location, age, height, score) VALUES (?, ?, ?, ?, ?)","Christopher","US",27,180,1.0);
  if (forceFlush)   store.forceBlockingFlush();
  results=executeCQL(CLUSTERING_CF_NAME_2,"SELECT * FROM %s.%s WHERE location LIKE 'US' AND age = 43 ALLOW FILTERING");
  Assert.assertNotNull(results);
  Assert.assertEquals(1,results.size());
  Assert.assertEquals("Tony",results.one().getString("name"));
}
