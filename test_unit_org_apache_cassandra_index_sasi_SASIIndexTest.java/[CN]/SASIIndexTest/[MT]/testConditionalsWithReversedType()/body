{
  final String TABLE_NAME="reversed_clustering";
  QueryProcessor.executeOnceInternal(String.format("CREATE TABLE IF NOT EXISTS %s.%s (pk text, ck int, v int, PRIMARY KEY (pk, ck)) " + "WITH CLUSTERING ORDER BY (ck DESC);",KS_NAME,TABLE_NAME));
  QueryProcessor.executeOnceInternal(String.format("CREATE CUSTOM INDEX ON %s.%s (ck) USING 'org.apache.cassandra.index.sasi.SASIIndex'",KS_NAME,TABLE_NAME));
  QueryProcessor.executeOnceInternal(String.format("CREATE CUSTOM INDEX ON %s.%s (v) USING 'org.apache.cassandra.index.sasi.SASIIndex'",KS_NAME,TABLE_NAME));
  QueryProcessor.executeOnceInternal(String.format("INSERT INTO %s.%s (pk, ck, v) VALUES ('Alex', 1, 1);",KS_NAME,TABLE_NAME));
  QueryProcessor.executeOnceInternal(String.format("INSERT INTO %s.%s (pk, ck, v) VALUES ('Alex', 2, 2);",KS_NAME,TABLE_NAME));
  QueryProcessor.executeOnceInternal(String.format("INSERT INTO %s.%s (pk, ck, v) VALUES ('Alex', 3, 3);",KS_NAME,TABLE_NAME));
  QueryProcessor.executeOnceInternal(String.format("INSERT INTO %s.%s (pk, ck, v) VALUES ('Tom', 1, 1);",KS_NAME,TABLE_NAME));
  QueryProcessor.executeOnceInternal(String.format("INSERT INTO %s.%s (pk, ck, v) VALUES ('Tom', 2, 2);",KS_NAME,TABLE_NAME));
  QueryProcessor.executeOnceInternal(String.format("INSERT INTO %s.%s (pk, ck, v) VALUES ('Tom', 3, 3);",KS_NAME,TABLE_NAME));
  UntypedResultSet resultSet=QueryProcessor.executeOnceInternal(String.format("SELECT * FROM %s.%s WHERE ck <= 2;",KS_NAME,TABLE_NAME));
  CQLTester.assertRowsIgnoringOrder(resultSet,CQLTester.row("Alex",1,1),CQLTester.row("Alex",2,2),CQLTester.row("Tom",1,1),CQLTester.row("Tom",2,2));
  resultSet=QueryProcessor.executeOnceInternal(String.format("SELECT * FROM %s.%s WHERE ck <= 2 AND v > 1 ALLOW FILTERING;",KS_NAME,TABLE_NAME));
  CQLTester.assertRowsIgnoringOrder(resultSet,CQLTester.row("Alex",2,2),CQLTester.row("Tom",2,2));
  resultSet=QueryProcessor.executeOnceInternal(String.format("SELECT * FROM %s.%s WHERE ck < 2;",KS_NAME,TABLE_NAME));
  CQLTester.assertRowsIgnoringOrder(resultSet,CQLTester.row("Alex",1,1),CQLTester.row("Tom",1,1));
  resultSet=QueryProcessor.executeOnceInternal(String.format("SELECT * FROM %s.%s WHERE ck >= 2;",KS_NAME,TABLE_NAME));
  CQLTester.assertRowsIgnoringOrder(resultSet,CQLTester.row("Alex",2,2),CQLTester.row("Alex",3,3),CQLTester.row("Tom",2,2),CQLTester.row("Tom",3,3));
  resultSet=QueryProcessor.executeOnceInternal(String.format("SELECT * FROM %s.%s WHERE ck >= 2 AND v < 3 ALLOW FILTERING;",KS_NAME,TABLE_NAME));
  CQLTester.assertRowsIgnoringOrder(resultSet,CQLTester.row("Alex",2,2),CQLTester.row("Tom",2,2));
  resultSet=QueryProcessor.executeOnceInternal(String.format("SELECT * FROM %s.%s WHERE ck > 2;",KS_NAME,TABLE_NAME));
  CQLTester.assertRowsIgnoringOrder(resultSet,CQLTester.row("Alex",3,3),CQLTester.row("Tom",3,3));
}
