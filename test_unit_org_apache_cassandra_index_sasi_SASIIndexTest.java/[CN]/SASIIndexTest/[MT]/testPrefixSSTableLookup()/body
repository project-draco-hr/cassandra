{
  ColumnFamilyStore store=Keyspace.open(KS_NAME).getColumnFamilyStore(CF_NAME);
  final ByteBuffer name=UTF8Type.instance.decompose("first_name_prefix");
  Mutation rm;
  rm=new Mutation(KS_NAME,decoratedKey("key1"));
  update(rm,name,UTF8Type.instance.decompose("Pavel"),System.currentTimeMillis());
  rm.apply();
  rm=new Mutation(KS_NAME,decoratedKey("key2"));
  update(rm,name,UTF8Type.instance.decompose("Jordan"),System.currentTimeMillis());
  rm.apply();
  rm=new Mutation(KS_NAME,decoratedKey("key3"));
  update(rm,name,UTF8Type.instance.decompose("Mikhail"),System.currentTimeMillis());
  rm.apply();
  rm=new Mutation(KS_NAME,decoratedKey("key4"));
  update(rm,name,UTF8Type.instance.decompose("Michael"),System.currentTimeMillis());
  rm.apply();
  rm=new Mutation(KS_NAME,decoratedKey("key5"));
  update(rm,name,UTF8Type.instance.decompose("Johnny"),System.currentTimeMillis());
  rm.apply();
  store.forceBlockingFlush();
  rm=new Mutation(KS_NAME,decoratedKey("key6"));
  update(rm,name,UTF8Type.instance.decompose("Jason"),System.currentTimeMillis());
  rm.apply();
  rm=new Mutation(KS_NAME,decoratedKey("key7"));
  update(rm,name,UTF8Type.instance.decompose("Vijay"),System.currentTimeMillis());
  rm.apply();
  rm=new Mutation(KS_NAME,decoratedKey("key8"));
  update(rm,name,UTF8Type.instance.decompose("Jean-Claude"),System.currentTimeMillis());
  rm.apply();
  store.forceBlockingFlush();
  Set<String> rows;
  rows=getIndexed(store,10,buildExpression(name,Operator.LIKE_PREFIX,UTF8Type.instance.decompose("J")));
  Assert.assertTrue(rows.toString(),Arrays.equals(new String[]{"key2","key5","key6","key8"},rows.toArray(new String[rows.size()])));
  rows=getIndexed(store,10,buildExpression(name,Operator.LIKE_PREFIX,UTF8Type.instance.decompose("j")));
  Assert.assertTrue(rows.toString(),Arrays.equals(new String[]{"key2","key5","key6","key8"},rows.toArray(new String[rows.size()])));
  rows=getIndexed(store,10,buildExpression(name,Operator.LIKE_PREFIX,UTF8Type.instance.decompose("m")));
  Assert.assertTrue(rows.toString(),Arrays.equals(new String[]{"key3","key4"},rows.toArray(new String[rows.size()])));
  rows=getIndexed(store,10,buildExpression(name,Operator.LIKE_PREFIX,UTF8Type.instance.decompose("v")));
  Assert.assertTrue(rows.toString(),Arrays.equals(new String[]{"key7"},rows.toArray(new String[rows.size()])));
  rows=getIndexed(store,10,buildExpression(name,Operator.LIKE_PREFIX,UTF8Type.instance.decompose("p")));
  Assert.assertTrue(rows.toString(),Arrays.equals(new String[]{"key1"},rows.toArray(new String[rows.size()])));
  rows=getIndexed(store,10,buildExpression(name,Operator.LIKE_PREFIX,UTF8Type.instance.decompose("j")),buildExpression(name,Operator.NEQ,UTF8Type.instance.decompose("joh")));
  Assert.assertTrue(rows.toString(),Arrays.equals(new String[]{"key2","key6","key8"},rows.toArray(new String[rows.size()])));
  rows=getIndexed(store,10,buildExpression(name,Operator.LIKE_MATCHES,UTF8Type.instance.decompose("pavel")));
  Assert.assertTrue(rows.toString(),Arrays.equals(new String[]{"key1"},rows.toArray(new String[rows.size()])));
  rows=getIndexed(store,10,buildExpression(name,Operator.EQ,UTF8Type.instance.decompose("Pave")));
  Assert.assertTrue(rows.isEmpty());
  rows=getIndexed(store,10,buildExpression(name,Operator.EQ,UTF8Type.instance.decompose("Pavel")));
  Assert.assertTrue(rows.toString(),Arrays.equals(new String[]{"key1"},rows.toArray(new String[rows.size()])));
  rows=getIndexed(store,10,buildExpression(name,Operator.LIKE_MATCHES,UTF8Type.instance.decompose("JeAn")));
  Assert.assertTrue(rows.toString(),Arrays.equals(new String[]{"key8"},rows.toArray(new String[rows.size()])));
  rows=getIndexed(store,10,buildExpression(name,Operator.LIKE_MATCHES,UTF8Type.instance.decompose("claUde")));
  Assert.assertTrue(rows.toString(),Arrays.equals(new String[]{"key8"},rows.toArray(new String[rows.size()])));
  rows=getIndexed(store,10,buildExpression(name,Operator.EQ,UTF8Type.instance.decompose("Jean")));
  Assert.assertTrue(rows.isEmpty());
  rows=getIndexed(store,10,buildExpression(name,Operator.EQ,UTF8Type.instance.decompose("Jean-Claude")));
  Assert.assertTrue(rows.toString(),Arrays.equals(new String[]{"key8"},rows.toArray(new String[rows.size()])));
}
