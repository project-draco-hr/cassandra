{
  ColumnFamilyStore store=Keyspace.open(KS_NAME).getColumnFamilyStore(CF_NAME);
  final ByteBuffer comment=UTF8Type.instance.decompose("comment");
  Mutation rm=new Mutation(KS_NAME,decoratedKey("key1"));
  update(rm,comment,UTF8Type.instance.decompose("??????????????????????????????????????? and normal ones"),System.currentTimeMillis());
  rm.apply();
  rm=new Mutation(KS_NAME,decoratedKey("key2"));
  update(rm,comment,UTF8Type.instance.decompose("?????????"),System.currentTimeMillis());
  rm.apply();
  rm=new Mutation(KS_NAME,decoratedKey("key3"));
  update(rm,comment,UTF8Type.instance.decompose("??????????????????"),System.currentTimeMillis());
  rm.apply();
  rm=new Mutation(KS_NAME,decoratedKey("key4"));
  update(rm,comment,UTF8Type.instance.decompose("???????????????"),System.currentTimeMillis());
  rm.apply();
  rm=new Mutation(KS_NAME,decoratedKey("key5"));
  update(rm,comment,UTF8Type.instance.decompose("?????????????????? ????????????"),System.currentTimeMillis());
  rm.apply();
  Set<String> rows;
  rows=getIndexed(store,10,buildExpression(comment,Operator.EQ,UTF8Type.instance.decompose("???????????????")));
  Assert.assertTrue(rows.toString(),Arrays.equals(new String[]{"key1"},rows.toArray(new String[rows.size()])));
  rows=getIndexed(store,10,buildExpression(comment,Operator.EQ,UTF8Type.instance.decompose("normal")));
  Assert.assertTrue(rows.toString(),Arrays.equals(new String[]{"key1"},rows.toArray(new String[rows.size()])));
  rows=getIndexed(store,10,buildExpression(comment,Operator.EQ,UTF8Type.instance.decompose("???")));
  Assert.assertTrue(rows.toString(),Arrays.equals(new String[]{"key2"},rows.toArray(new String[rows.size()])));
  rows=getIndexed(store,10,buildExpression(comment,Operator.EQ,UTF8Type.instance.decompose("???")));
  Assert.assertTrue(rows.toString(),Arrays.equals(new String[]{"key2"},rows.toArray(new String[rows.size()])));
  rows=getIndexed(store,10,buildExpression(comment,Operator.EQ,UTF8Type.instance.decompose("??????")));
  Assert.assertTrue(rows.toString(),Arrays.equals(new String[]{"key2"},rows.toArray(new String[rows.size()])));
  rows=getIndexed(store,10,buildExpression(comment,Operator.EQ,UTF8Type.instance.decompose("?????????")));
  Assert.assertTrue(rows.toString(),Arrays.equals(new String[]{"key2"},rows.toArray(new String[rows.size()])));
  rows=getIndexed(store,10,buildExpression(comment,Operator.EQ,UTF8Type.instance.decompose("??????????????????")));
  Assert.assertTrue(rows.toString(),Arrays.equals(new String[]{"key5"},rows.toArray(new String[rows.size()])));
  rows=getIndexed(store,10,buildExpression(comment,Operator.EQ,UTF8Type.instance.decompose("????????????")));
  Assert.assertTrue(rows.toString(),Arrays.equals(new String[]{"key4"},rows.toArray(new String[rows.size()])));
  rows=getIndexed(store,10,buildExpression(comment,Operator.EQ,UTF8Type.instance.decompose("????????????")));
  Assert.assertTrue(rows.toString(),Arrays.equals(new String[]{"key3"},rows.toArray(new String[rows.size()])));
  rows=getIndexed(store,10,buildExpression(comment,Operator.EQ,UTF8Type.instance.decompose("???????????????")));
  Assert.assertTrue(rows.toString(),Arrays.equals(new String[]{"key5"},rows.toArray(new String[rows.size()])));
  store.forceBlockingFlush();
  rows=getIndexed(store,10,buildExpression(comment,Operator.EQ,UTF8Type.instance.decompose("???????????????")));
  Assert.assertTrue(rows.toString(),Arrays.equals(new String[]{"key1"},rows.toArray(new String[rows.size()])));
  rows=getIndexed(store,10,buildExpression(comment,Operator.EQ,UTF8Type.instance.decompose("normal")));
  Assert.assertTrue(rows.toString(),Arrays.equals(new String[]{"key1"},rows.toArray(new String[rows.size()])));
  rows=getIndexed(store,10,buildExpression(comment,Operator.EQ,UTF8Type.instance.decompose("???")));
  Assert.assertTrue(rows.toString(),Arrays.equals(new String[]{"key2"},rows.toArray(new String[rows.size()])));
  rows=getIndexed(store,10,buildExpression(comment,Operator.EQ,UTF8Type.instance.decompose("???")));
  Assert.assertTrue(rows.toString(),Arrays.equals(new String[]{"key2"},rows.toArray(new String[rows.size()])));
  rows=getIndexed(store,10,buildExpression(comment,Operator.EQ,UTF8Type.instance.decompose("??????")));
  Assert.assertTrue(rows.toString(),Arrays.equals(new String[]{"key2"},rows.toArray(new String[rows.size()])));
  rows=getIndexed(store,10,buildExpression(comment,Operator.EQ,UTF8Type.instance.decompose("?????????")));
  Assert.assertTrue(rows.toString(),Arrays.equals(new String[]{"key2"},rows.toArray(new String[rows.size()])));
  rows=getIndexed(store,10,buildExpression(comment,Operator.EQ,UTF8Type.instance.decompose("??????????????????")));
  Assert.assertTrue(rows.toString(),Arrays.equals(new String[]{"key5"},rows.toArray(new String[rows.size()])));
  rows=getIndexed(store,10,buildExpression(comment,Operator.EQ,UTF8Type.instance.decompose("????????????")));
  Assert.assertTrue(rows.toString(),Arrays.equals(new String[]{"key4"},rows.toArray(new String[rows.size()])));
  rows=getIndexed(store,10,buildExpression(comment,Operator.EQ,UTF8Type.instance.decompose("????????????")));
  Assert.assertTrue(rows.toString(),Arrays.equals(new String[]{"key3"},rows.toArray(new String[rows.size()])));
  rows=getIndexed(store,10,buildExpression(comment,Operator.EQ,UTF8Type.instance.decompose("???????????????")));
  Assert.assertTrue(rows.toString(),Arrays.equals(new String[]{"key5"},rows.toArray(new String[rows.size()])));
}
