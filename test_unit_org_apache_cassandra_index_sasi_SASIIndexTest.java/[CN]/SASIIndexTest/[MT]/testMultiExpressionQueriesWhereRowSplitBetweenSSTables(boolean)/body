{
  Map<String,Pair<String,Integer>> part1=new HashMap<String,Pair<String,Integer>>(){
{
      put("key0",Pair.create("Maxie",-1));
      put("key1",Pair.create("Chelsie",33));
      put("key2",Pair.create((String)null,43));
      put("key3",Pair.create("Shanna",27));
      put("key4",Pair.create("Amiya",36));
    }
  }
;
  loadData(part1,forceFlush);
  Map<String,Pair<String,Integer>> part2=new HashMap<String,Pair<String,Integer>>(){
{
      put("key5",Pair.create("Americo",20));
      put("key6",Pair.create("Fiona",39));
      put("key7",Pair.create("Francis",41));
      put("key8",Pair.create("Charley",21));
      put("key9",Pair.create("Amely",40));
      put("key14",Pair.create((String)null,28));
    }
  }
;
  loadData(part2,forceFlush);
  Map<String,Pair<String,Integer>> part3=new HashMap<String,Pair<String,Integer>>(){
{
      put("key0",Pair.create((String)null,43));
      put("key10",Pair.create("Eddie",42));
      put("key11",Pair.create("Oswaldo",35));
      put("key12",Pair.create("Susana",35));
      put("key13",Pair.create("Alivia",42));
      put("key14",Pair.create("Demario",-1));
      put("key2",Pair.create("Josephine",-1));
    }
  }
;
  ColumnFamilyStore store=loadData(part3,forceFlush);
  final ByteBuffer firstName=UTF8Type.instance.decompose("first_name");
  final ByteBuffer age=UTF8Type.instance.decompose("age");
  Set<String> rows=getIndexed(store,10,buildExpression(firstName,Operator.EQ,UTF8Type.instance.decompose("Fiona")),buildExpression(age,Operator.LT,Int32Type.instance.decompose(40)));
  Assert.assertTrue(rows.toString(),Arrays.equals(new String[]{"key6"},rows.toArray(new String[rows.size()])));
  rows=getIndexed(store,10,buildExpression(firstName,Operator.LIKE_CONTAINS,UTF8Type.instance.decompose("a")));
  Assert.assertTrue(rows.toString(),Arrays.equals(new String[]{"key0","key11","key12","key13","key14","key3","key4","key6","key7","key8"},rows.toArray(new String[rows.size()])));
  rows=getIndexed(store,5,buildExpression(firstName,Operator.LIKE_CONTAINS,UTF8Type.instance.decompose("a")));
  Assert.assertEquals(rows.toString(),5,rows.size());
  rows=getIndexed(store,10,buildExpression(firstName,Operator.LIKE_CONTAINS,UTF8Type.instance.decompose("a")),buildExpression(age,Operator.GTE,Int32Type.instance.decompose(35)));
  Assert.assertTrue(rows.toString(),Arrays.equals(new String[]{"key0","key11","key12","key13","key4","key6","key7"},rows.toArray(new String[rows.size()])));
  rows=getIndexed(store,10,buildExpression(firstName,Operator.LIKE_CONTAINS,UTF8Type.instance.decompose("a")),buildExpression(age,Operator.LT,Int32Type.instance.decompose(32)));
  Assert.assertTrue(rows.toString(),Arrays.equals(new String[]{"key14","key3","key8"},rows.toArray(new String[rows.size()])));
  rows=getIndexed(store,10,buildExpression(firstName,Operator.LIKE_CONTAINS,UTF8Type.instance.decompose("a")),buildExpression(age,Operator.GT,Int32Type.instance.decompose(27)),buildExpression(age,Operator.LT,Int32Type.instance.decompose(32)));
  Assert.assertTrue(rows.toString(),Arrays.equals(new String[]{"key14"},rows.toArray(new String[rows.size()])));
  Map<String,Pair<String,Integer>> part4=new HashMap<String,Pair<String,Integer>>(){
{
      put("key12",Pair.create((String)null,12));
      put("key14",Pair.create("Demario",42));
      put("key2",Pair.create("Frank",-1));
    }
  }
;
  store=loadData(part4,forceFlush);
  rows=getIndexed(store,10,buildExpression(firstName,Operator.EQ,UTF8Type.instance.decompose("Susana")),buildExpression(age,Operator.LTE,Int32Type.instance.decompose(13)),buildExpression(age,Operator.GT,Int32Type.instance.decompose(10)));
  Assert.assertTrue(rows.toString(),Arrays.equals(new String[]{"key12"},rows.toArray(new String[rows.size()])));
  rows=getIndexed(store,10,buildExpression(firstName,Operator.EQ,UTF8Type.instance.decompose("Demario")),buildExpression(age,Operator.LTE,Int32Type.instance.decompose(30)));
  Assert.assertTrue(rows.toString(),rows.size() == 0);
  rows=getIndexed(store,10,buildExpression(firstName,Operator.EQ,UTF8Type.instance.decompose("Josephine")));
  Assert.assertTrue(rows.toString(),rows.size() == 0);
  rows=getIndexed(store,10,buildExpression(firstName,Operator.LIKE_CONTAINS,UTF8Type.instance.decompose("a")),buildExpression(age,Operator.GT,Int32Type.instance.decompose(10)));
  Assert.assertEquals(rows.toString(),10,rows.size());
  rows=getIndexed(store,10,buildExpression(firstName,Operator.LIKE_CONTAINS,UTF8Type.instance.decompose("a")),buildExpression(age,Operator.LTE,Int32Type.instance.decompose(50)));
  Assert.assertEquals(rows.toString(),10,rows.size());
  rows=getIndexed(store,10,buildExpression(firstName,Operator.LIKE_SUFFIX,UTF8Type.instance.decompose("ie")),buildExpression(age,Operator.LTE,Int32Type.instance.decompose(43)));
  Assert.assertTrue(rows.toString(),Arrays.equals(new String[]{"key0","key1","key10"},rows.toArray(new String[rows.size()])));
}
