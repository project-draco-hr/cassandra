{
  String containsTable="sasi_like_contains_test";
  String prefixTable="sasi_like_prefix_test";
  String analyzedPrefixTable="sasi_like_analyzed_prefix_test";
  String tokenizedContainsTable="sasi_like_analyzed_contains_test";
  QueryProcessor.executeOnceInternal(String.format("CREATE TABLE IF NOT EXISTS %s.%s (k int primary key, v text);",KS_NAME,containsTable));
  QueryProcessor.executeOnceInternal(String.format("CREATE TABLE IF NOT EXISTS %s.%s (k int primary key, v text);",KS_NAME,prefixTable));
  QueryProcessor.executeOnceInternal(String.format("CREATE TABLE IF NOT EXISTS %s.%s (k int primary key, v text);",KS_NAME,analyzedPrefixTable));
  QueryProcessor.executeOnceInternal(String.format("CREATE TABLE IF NOT EXISTS %s.%s (k int primary key, v text);",KS_NAME,tokenizedContainsTable));
  QueryProcessor.executeOnceInternal(String.format("CREATE CUSTOM INDEX IF NOT EXISTS ON %s.%s(v) " + "USING 'org.apache.cassandra.index.sasi.SASIIndex' WITH OPTIONS = { 'mode' : 'CONTAINS', " + "'analyzer_class': 'org.apache.cassandra.index.sasi.analyzer.NonTokenizingAnalyzer', "+ "'case_sensitive': 'false' };",KS_NAME,containsTable));
  QueryProcessor.executeOnceInternal(String.format("CREATE CUSTOM INDEX IF NOT EXISTS ON %s.%s(v) " + "USING 'org.apache.cassandra.index.sasi.SASIIndex' WITH OPTIONS = { 'mode' : 'PREFIX' };",KS_NAME,prefixTable));
  QueryProcessor.executeOnceInternal(String.format("CREATE CUSTOM INDEX IF NOT EXISTS ON %s.%s(v) " + "USING 'org.apache.cassandra.index.sasi.SASIIndex' WITH OPTIONS = { 'mode' : 'PREFIX', 'analyzed': 'true' };",KS_NAME,analyzedPrefixTable));
  QueryProcessor.executeOnceInternal(String.format("CREATE CUSTOM INDEX IF NOT EXISTS ON %s.%s(v) " + "USING 'org.apache.cassandra.index.sasi.SASIIndex' WITH OPTIONS = " + "{ 'mode' : 'CONTAINS', 'analyzer_class': 'org.apache.cassandra.index.sasi.analyzer.StandardAnalyzer',"+ "'analyzed': 'true', 'tokenization_enable_stemming': 'true', 'tokenization_normalize_lowercase': 'true', "+ "'tokenization_locale': 'en' };",KS_NAME,tokenizedContainsTable));
  testLIKEAndEQSemanticsWithDifferenceKindsOfIndexes(containsTable,prefixTable,analyzedPrefixTable,tokenizedContainsTable,false);
  testLIKEAndEQSemanticsWithDifferenceKindsOfIndexes(containsTable,prefixTable,analyzedPrefixTable,tokenizedContainsTable,true);
}
