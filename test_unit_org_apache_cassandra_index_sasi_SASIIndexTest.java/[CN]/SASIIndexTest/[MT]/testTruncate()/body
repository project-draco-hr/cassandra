{
  Map<String,Pair<String,Integer>> part1=new HashMap<String,Pair<String,Integer>>(){
{
      put("key01",Pair.create("Ali",33));
      put("key02",Pair.create("Jeremy",41));
      put("key03",Pair.create("Elvera",22));
      put("key04",Pair.create("Bailey",45));
      put("key05",Pair.create("Emerson",32));
      put("key06",Pair.create("Kadin",38));
      put("key07",Pair.create("Maggie",36));
      put("key08",Pair.create("Kailey",36));
      put("key09",Pair.create("Armand",21));
      put("key10",Pair.create("Arnold",35));
    }
  }
;
  Map<String,Pair<String,Integer>> part2=new HashMap<String,Pair<String,Integer>>(){
{
      put("key11",Pair.create("Ken",38));
      put("key12",Pair.create("Penelope",43));
      put("key13",Pair.create("Wyatt",34));
      put("key14",Pair.create("Johnpaul",34));
      put("key15",Pair.create("Trycia",43));
      put("key16",Pair.create("Aida",21));
      put("key17",Pair.create("Devon",42));
    }
  }
;
  Map<String,Pair<String,Integer>> part3=new HashMap<String,Pair<String,Integer>>(){
{
      put("key18",Pair.create("Christina",20));
      put("key19",Pair.create("Rick",19));
      put("key20",Pair.create("Fannie",22));
      put("key21",Pair.create("Keegan",29));
      put("key22",Pair.create("Ignatius",36));
      put("key23",Pair.create("Ellis",26));
      put("key24",Pair.create("Annamarie",29));
      put("key25",Pair.create("Tianna",31));
      put("key26",Pair.create("Dennis",32));
    }
  }
;
  ColumnFamilyStore store=loadData(part1,1000,true);
  loadData(part2,2000,true);
  loadData(part3,3000,true);
  final ByteBuffer firstName=UTF8Type.instance.decompose("first_name");
  Set<String> rows=getIndexed(store,100,buildExpression(firstName,Operator.EQ,UTF8Type.instance.decompose("a")));
  Assert.assertEquals(rows.toString(),16,rows.size());
  store.indexManager.truncateAllIndexesBlocking(500);
  rows=getIndexed(store,100,buildExpression(firstName,Operator.EQ,UTF8Type.instance.decompose("a")));
  Assert.assertEquals(rows.toString(),16,rows.size());
  store.indexManager.truncateAllIndexesBlocking(1500);
  rows=getIndexed(store,100,buildExpression(firstName,Operator.EQ,UTF8Type.instance.decompose("a")));
  Assert.assertEquals(rows.toString(),10,rows.size());
  store.indexManager.truncateAllIndexesBlocking(2500);
  rows=getIndexed(store,100,buildExpression(firstName,Operator.EQ,UTF8Type.instance.decompose("a")));
  Assert.assertEquals(rows.toString(),6,rows.size());
  store.indexManager.truncateAllIndexesBlocking(3500);
  rows=getIndexed(store,100,buildExpression(firstName,Operator.EQ,UTF8Type.instance.decompose("a")));
  Assert.assertEquals(rows.toString(),0,rows.size());
  Map<String,Pair<String,Integer>> part4=new HashMap<String,Pair<String,Integer>>(){
{
      put("key40",Pair.create("Tianna",31));
      put("key41",Pair.create("Dennis",32));
    }
  }
;
  loadData(part4,4000,true);
  rows=getIndexed(store,100,buildExpression(firstName,Operator.EQ,UTF8Type.instance.decompose("a")));
  Assert.assertEquals(rows.toString(),1,rows.size());
}
