{
{
    final ScheduledExecutorService exec=Executors.newScheduledThreadPool(2);
    final OpOrder order=new OpOrder();
    final OpOrder.Group group=order.start();
    final CountDownLatch canClean=new CountDownLatch(1);
    final CountDownLatch isClean=new CountDownLatch(1);
    final AtomicReference<NativeAllocator> allocatorRef=new AtomicReference<>();
    final AtomicReference<OpOrder.Barrier> barrier=new AtomicReference<>();
    final NativeAllocator allocator=new NativeAllocator(new NativePool(1,100,0.75f,new Runnable(){
      public void run(){
        try {
          canClean.await();
        }
 catch (        InterruptedException e) {
          throw new AssertionError();
        }
        if (isClean.getCount() > 0) {
          allocatorRef.get().offHeap().release(80);
          isClean.countDown();
        }
      }
    }
));
    allocatorRef.set(allocator);
    final Runnable markBlocking=new Runnable(){
      public void run(){
        barrier.set(order.newBarrier());
        barrier.get().issue();
        barrier.get().markBlocking();
      }
    }
;
    final Runnable run=new Runnable(){
      public void run(){
        allocator.allocate(10,group);
        Assert.assertEquals(10,allocator.offHeap().owns());
        Uninterruptibles.sleepUninterruptibly(10L,TimeUnit.MILLISECONDS);
        Assert.assertEquals(1,isClean.getCount());
        allocator.allocate(70,group);
        Assert.assertEquals(80,allocator.offHeap().owns());
        canClean.countDown();
        try {
          isClean.await(10L,TimeUnit.MILLISECONDS);
        }
 catch (        InterruptedException e) {
          throw new AssertionError();
        }
        Assert.assertEquals(0,isClean.getCount());
        Assert.assertEquals(0,allocator.offHeap().owns());
        exec.schedule(markBlocking,10L,TimeUnit.MILLISECONDS);
        allocator.allocate(110,group);
        Assert.assertNotNull(barrier.get());
        Assert.assertEquals(110,allocator.offHeap().owns());
      }
    }
;
    exec.submit(run).get();
  }
}
