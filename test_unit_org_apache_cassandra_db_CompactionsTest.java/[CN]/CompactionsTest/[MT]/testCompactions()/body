{
  Table table=Table.open("Keyspace1");
  ColumnFamilyStore store=table.getColumnFamilyStore("Standard1");
  final int ROWS_PER_SSTABLE=10;
  Set<String> inserted=new HashSet<String>();
  for (int j=0; j < (SSTableReader.indexInterval() * 3) / ROWS_PER_SSTABLE; j++) {
    for (int i=0; i < ROWS_PER_SSTABLE; i++) {
      String key=String.valueOf(i % 2);
      RowMutation rm=new RowMutation("Keyspace1",key);
      rm.add(new QueryPath("Standard1",null,String.valueOf(i / 2).getBytes()),new byte[0],j * ROWS_PER_SSTABLE + i);
      rm.apply();
      inserted.add(key);
    }
    store.forceBlockingFlush();
    assertEquals(table.getColumnFamilyStore("Standard1").getKeyRange("","",10000).keys.size(),inserted.size());
  }
  while (true) {
    Future<Integer> ft=MinorCompactionManager.instance().submit(store);
    if (ft.get() == 0)     break;
  }
  if (store.getSSTables().size() > 1) {
    store.doCompaction(store.getSSTables().size());
  }
  assertEquals(table.getColumnFamilyStore("Standard1").getKeyRange("","",10000).keys.size(),inserted.size());
}
