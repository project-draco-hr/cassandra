{
  CompactionManager.instance.disableAutoCompaction();
  Table table=Table.open(TABLE1);
  ColumnFamilyStore store=table.getColumnFamilyStore("Standard1");
  final int ROWS_PER_SSTABLE=10;
  Set<DecoratedKey> inserted=new HashSet<DecoratedKey>();
  for (int j=0; j < (DatabaseDescriptor.getIndexInterval() * 3) / ROWS_PER_SSTABLE; j++) {
    for (int i=0; i < ROWS_PER_SSTABLE; i++) {
      DecoratedKey key=Util.dk(String.valueOf(i % 2));
      RowMutation rm=new RowMutation(TABLE1,key.key);
      rm.add(new QueryPath("Standard1",null,ByteBuffer.wrap(String.valueOf(i / 2).getBytes())),FBUtilities.EMPTY_BYTE_BUFFER,j * ROWS_PER_SSTABLE + i);
      rm.apply();
      inserted.add(key);
    }
    store.forceBlockingFlush();
    assertEquals(inserted.toString(),inserted.size(),Util.getRangeSlice(store).size());
  }
  while (true) {
    Future<Integer> ft=CompactionManager.instance.submitMinorIfNeeded(store);
    if (ft.get() == 0)     break;
  }
  if (store.getSSTables().size() > 1) {
    CompactionManager.instance.performMajor(store);
  }
  assertEquals(inserted.size(),Util.getRangeSlice(store).size());
}
