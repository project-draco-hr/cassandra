{
  for (  String compactOption : new String[]{""," WITH COMPACT STORAGE"}) {
    createTable("CREATE TABLE %s (partitionKey int," + "clustering_1 int," + "clustering_2 int,"+ "value int,"+ " PRIMARY KEY (partitionKey, clustering_1, clustering_2))"+ compactOption);
    execute("INSERT INTO %s (partitionKey, clustering_1, clustering_2, value) VALUES (0, 0, 0, 0)");
    execute("INSERT INTO %s (partitionKey, clustering_1, clustering_2, value) VALUES (0, 0, 1, 1)");
    execute("INSERT INTO %s (partitionKey, clustering_1, clustering_2, value) VALUES (0, 0, 2, 2)");
    execute("INSERT INTO %s (partitionKey, clustering_1, clustering_2, value) VALUES (0, 0, 3, 3)");
    execute("INSERT INTO %s (partitionKey, clustering_1, clustering_2, value) VALUES (0, 1, 1, 4)");
    execute("INSERT INTO %s (partitionKey, clustering_1, clustering_2, value) VALUES (0, 1, 2, 5)");
    execute("INSERT INTO %s (partitionKey, clustering_1, clustering_2, value) VALUES (1, 0, 0, 6)");
    flush(forceFlush);
    execute("UPDATE %s SET value = ? WHERE partitionKey = ? AND clustering_1 = ? AND clustering_2 = ?",7,0,1,1);
    flush(forceFlush);
    assertRows(execute("SELECT value FROM %s WHERE partitionKey = ? AND clustering_1 = ? AND clustering_2 = ?",0,1,1),row(7));
    execute("UPDATE %s SET value = ? WHERE partitionKey = ? AND (clustering_1, clustering_2) = (?, ?)",8,0,1,2);
    flush(forceFlush);
    assertRows(execute("SELECT value FROM %s WHERE partitionKey = ? AND clustering_1 = ? AND clustering_2 = ?",0,1,2),row(8));
    execute("UPDATE %s SET value = ? WHERE partitionKey IN (?, ?) AND clustering_1 = ? AND clustering_2 = ?",9,0,1,0,0);
    flush(forceFlush);
    assertRows(execute("SELECT * FROM %s WHERE partitionKey IN (?, ?) AND clustering_1 = ? AND clustering_2 = ?",0,1,0,0),row(0,0,0,9),row(1,0,0,9));
    execute("UPDATE %s SET value = ? WHERE partitionKey IN ? AND clustering_1 = ? AND clustering_2 = ?",9,Arrays.asList(0,1),0,0);
    flush(forceFlush);
    assertRows(execute("SELECT * FROM %s WHERE partitionKey IN ? AND clustering_1 = ? AND clustering_2 = ?",Arrays.asList(0,1),0,0),row(0,0,0,9),row(1,0,0,9));
    execute("UPDATE %s SET value = ? WHERE partitionKey = ? AND clustering_1 = ? AND clustering_2 IN (?, ?)",12,0,1,1,2);
    flush(forceFlush);
    assertRows(execute("SELECT * FROM %s WHERE partitionKey = ? AND clustering_1 = ? AND clustering_2 IN (?, ?)",0,1,1,2),row(0,1,1,12),row(0,1,2,12));
    execute("UPDATE %s SET value = ? WHERE partitionKey = ? AND clustering_1 IN (?, ?) AND clustering_2 IN (?, ?)",10,0,1,0,1,2);
    flush(forceFlush);
    assertRows(execute("SELECT * FROM %s WHERE partitionKey = ? AND clustering_1 IN (?, ?) AND clustering_2 IN (?, ?)",0,1,0,1,2),row(0,0,1,10),row(0,0,2,10),row(0,1,1,10),row(0,1,2,10));
    execute("UPDATE %s SET value = ? WHERE partitionKey = ? AND (clustering_1, clustering_2) IN ((?, ?), (?, ?))",20,0,0,2,1,2);
    flush(forceFlush);
    assertRows(execute("SELECT * FROM %s WHERE partitionKey = ? AND (clustering_1, clustering_2) IN ((?, ?), (?, ?))",0,0,2,1,2),row(0,0,2,20),row(0,1,2,20));
    execute("UPDATE %s SET value = ? WHERE partitionKey = ? AND clustering_1 = ? AND clustering_2 = ?",null,0,0,2);
    flush(forceFlush);
    if (isEmpty(compactOption)) {
      assertRows(execute("SELECT * FROM %s WHERE partitionKey = ? AND (clustering_1, clustering_2) IN ((?, ?), (?, ?))",0,0,2,1,2),row(0,0,2,null),row(0,1,2,20));
    }
 else {
      assertRows(execute("SELECT * FROM %s WHERE partitionKey = ? AND (clustering_1, clustering_2) IN ((?, ?), (?, ?))",0,0,2,1,2),row(0,1,2,20));
    }
    assertInvalidMessage("Some partition key parts are missing: partitionkey","UPDATE %s SET value = ? WHERE clustering_1 = ? AND clustering_2 = ?",7,1,1);
    String errorMsg=isEmpty(compactOption) ? "Some clustering keys are missing: clustering_1" : "PRIMARY KEY column \"clustering_2\" cannot be restricted as preceding column \"clustering_1\" is not restricted";
    assertInvalidMessage(errorMsg,"UPDATE %s SET value = ? WHERE partitionKey = ? AND clustering_2 = ?",7,0,1);
    assertInvalidMessage("Some clustering keys are missing: clustering_1, clustering_2","UPDATE %s SET value = ? WHERE partitionKey = ?",7,0);
    assertInvalidMessage("The token function cannot be used in WHERE clauses for UPDATE statements","UPDATE %s SET value = ? WHERE token(partitionKey) = token(?) AND clustering_1 = ? AND clustering_2 = ?",7,0,1,1);
    assertInvalidSyntax("UPDATE %s SET value = ?, value = ? WHERE partitionKey = ? AND clustering_1 = ? AND clustering_2 = ?",7,0,1,1);
    assertInvalidMessage("clustering_1 cannot be restricted by more than one relation if it includes an Equal","UPDATE %s SET value = ? WHERE partitionKey = ? AND clustering_1 = ? AND clustering_2 = ? AND clustering_1 = ?",7,0,1,1,1);
    assertInvalidMessage("Unknown identifier value1","UPDATE %s SET value1 = ? WHERE partitionKey = ? AND clustering_1 = ? AND clustering_2 = ?",7,0,1,1);
    assertInvalidMessage("Undefined name partitionkey1 in where clause ('partitionkey1 = ?')","UPDATE %s SET value = ? WHERE partitionKey1 = ? AND clustering_1 = ? AND clustering_2 = ?",7,0,1,1);
    assertInvalidMessage("Undefined name clustering_3 in where clause ('clustering_3 = ?')","UPDATE %s SET value = ? WHERE partitionKey = ? AND clustering_1 = ? AND clustering_3 = ?",7,0,1,1);
    assertInvalidMessage("Only EQ and IN relation are supported on the partition key (unless you use the token() function)","UPDATE %s SET value = ? WHERE partitionKey > ? AND clustering_1 = ? AND clustering_2 = ?",7,0,1,1);
    assertInvalidMessage("Cannot use CONTAINS on non-collection column partitionkey","UPDATE %s SET value = ? WHERE partitionKey CONTAINS ? AND clustering_1 = ? AND clustering_2 = ?",7,0,1,1);
    assertInvalidMessage("Non PRIMARY KEY columns found in where clause: value","UPDATE %s SET value = ? WHERE partitionKey = ? AND clustering_1 = ? AND clustering_2 = ? AND value = ?",7,0,1,1,3);
    assertInvalidMessage("Slice restrictions are not supported on the clustering columns in UPDATE statements","UPDATE %s SET value = ? WHERE partitionKey = ? AND clustering_1 > ?",7,0,1);
    assertInvalidMessage("Slice restrictions are not supported on the clustering columns in UPDATE statements","UPDATE %s SET value = ? WHERE partitionKey = ? AND (clustering_1, clustering_2) > (?, ?)",7,0,1,1);
  }
}
