{
  Assert.assertEquals(defs,Lists.newArrayList(columns));
  boolean hasSimple=false, hasComplex=false;
  int firstComplexIdx=0;
  int i=0;
  Iterator<ColumnDefinition> simple=columns.simpleColumns();
  Iterator<ColumnDefinition> complex=columns.complexColumns();
  Iterator<ColumnDefinition> all=columns.iterator();
  Predicate<ColumnDefinition> predicate=columns.inOrderInclusionTester();
  for (  ColumnDefinition def : defs) {
    Assert.assertEquals(def,all.next());
    Assert.assertTrue(columns.contains(def));
    Assert.assertTrue(predicate.test(def));
    if (def.isSimple()) {
      hasSimple=true;
      Assert.assertEquals(i,columns.simpleIdx(def));
      Assert.assertEquals(def,simple.next());
      ++firstComplexIdx;
    }
 else {
      Assert.assertFalse(simple.hasNext());
      hasComplex=true;
      Assert.assertEquals(i - firstComplexIdx,columns.complexIdx(def));
      Assert.assertEquals(def,complex.next());
    }
    i++;
  }
  Assert.assertEquals(defs.isEmpty(),columns.isEmpty());
  Assert.assertFalse(simple.hasNext());
  Assert.assertFalse(complex.hasNext());
  Assert.assertFalse(all.hasNext());
  Assert.assertEquals(hasSimple,columns.hasSimple());
  Assert.assertEquals(hasComplex,columns.hasComplex());
}
