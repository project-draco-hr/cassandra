{
  final Row.Builder toRemove=BTreeRow.sortedBuilder();
  toRemove.newRow(existing.clustering());
  final Row.Builder toInsert=BTreeRow.sortedBuilder();
  toInsert.newRow(updated.clustering());
  RowDiffListener diffListener=new RowDiffListener(){
    public void onPrimaryKeyLivenessInfo(    int i,    Clustering clustering,    LivenessInfo merged,    LivenessInfo original){
      if (merged != null && merged != original)       toInsert.addPrimaryKeyLivenessInfo(merged);
    }
    public void onDeletion(    int i,    Clustering clustering,    DeletionTime merged,    DeletionTime original){
    }
    public void onComplexDeletion(    int i,    Clustering clustering,    ColumnDefinition column,    DeletionTime merged,    DeletionTime original){
    }
    public void onCell(    int i,    Clustering clustering,    Cell merged,    Cell original){
      if (merged != null && merged != original)       toInsert.addCell(merged);
      if (merged == null || (original != null && shouldCleanupOldValue(original,merged)))       toRemove.addCell(original);
    }
  }
;
  Rows.diff(diffListener,updated,existing);
  Row oldRow=toRemove.build();
  Row newRow=toInsert.build();
  for (  Index.Indexer indexer : indexers)   indexer.updateRow(oldRow,newRow);
}
