{
  if (dataCenters != null && !dataCenters.contains(DatabaseDescriptor.getLocalDataCenter()))   throw new IllegalArgumentException("The local data center must be part of the repair");
  StorageService ss=StorageService.instance;
  Map<Range<Token>,List<InetAddress>> replicaSets=ss.getRangeToAddressMap(keyspaceName);
  Range<Token> rangeSuperSet=null;
  for (  Range<Token> range : ss.getLocalRanges(keyspaceName)) {
    if (range.contains(toRepair)) {
      rangeSuperSet=range;
      break;
    }
 else     if (range.intersects(toRepair)) {
      throw new IllegalArgumentException("Requested range intersects a local range but is not fully contained in one; this would lead to imprecise repair");
    }
  }
  if (rangeSuperSet == null || !replicaSets.containsKey(rangeSuperSet))   return Collections.emptySet();
  Set<InetAddress> neighbors=new HashSet<>(replicaSets.get(rangeSuperSet));
  neighbors.remove(FBUtilities.getBroadcastAddress());
  if (dataCenters != null) {
    TokenMetadata.Topology topology=ss.getTokenMetadata().cloneOnlyTokenMap().getTopology();
    Set<InetAddress> dcEndpoints=Sets.newHashSet();
    Multimap<String,InetAddress> dcEndpointsMap=topology.getDatacenterEndpoints();
    for (    String dc : dataCenters) {
      Collection<InetAddress> c=dcEndpointsMap.get(dc);
      if (c != null)       dcEndpoints.addAll(c);
    }
    return Sets.intersection(neighbors,dcEndpoints);
  }
  return neighbors;
}
