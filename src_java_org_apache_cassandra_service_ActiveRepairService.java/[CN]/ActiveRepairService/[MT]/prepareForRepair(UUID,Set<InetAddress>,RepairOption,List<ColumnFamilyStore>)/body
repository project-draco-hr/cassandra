{
  long timestamp=System.currentTimeMillis();
  registerParentRepairSession(parentRepairSession,columnFamilyStores,options.getRanges(),options.isIncremental(),timestamp);
  final CountDownLatch prepareLatch=new CountDownLatch(endpoints.size());
  final AtomicBoolean status=new AtomicBoolean(true);
  final Set<String> failedNodes=Collections.synchronizedSet(new HashSet<String>());
  IAsyncCallbackWithFailure callback=new IAsyncCallbackWithFailure(){
    public void response(    MessageIn msg){
      prepareLatch.countDown();
    }
    public boolean isLatencyForSnitch(){
      return false;
    }
    public void onFailure(    InetAddress from){
      status.set(false);
      failedNodes.add(from.getHostAddress());
      prepareLatch.countDown();
    }
  }
;
  List<UUID> cfIds=new ArrayList<>(columnFamilyStores.size());
  for (  ColumnFamilyStore cfs : columnFamilyStores)   cfIds.add(cfs.metadata.cfId);
  for (  InetAddress neighbour : endpoints) {
    PrepareMessage message=new PrepareMessage(parentRepairSession,cfIds,options.getRanges(),options.isIncremental(),timestamp);
    MessageOut<RepairMessage> msg=message.createMessage();
    MessagingService.instance().sendRR(msg,neighbour,callback,TimeUnit.HOURS.toMillis(1),true);
  }
  try {
    prepareLatch.await(1,TimeUnit.HOURS);
  }
 catch (  InterruptedException e) {
    parentRepairSessions.remove(parentRepairSession);
    throw new RuntimeException("Did not get replies from all endpoints. List of failed endpoint(s): " + failedNodes.toString(),e);
  }
  if (!status.get()) {
    parentRepairSessions.remove(parentRepairSession);
    throw new RuntimeException("Did not get positive replies from all endpoints. List of failed endpoint(s): " + failedNodes.toString());
  }
  return parentRepairSession;
}
