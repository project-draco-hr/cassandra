{
  return new IRoleManager(){
    public Set<Option> supportedOptions(){
      return ImmutableSet.copyOf(supportedOptions);
    }
    public Set<Option> alterableOptions(){
      return null;
    }
    public void createRole(    AuthenticatedUser performer,    RoleResource role,    RoleOptions options) throws RequestValidationException, RequestExecutionException {
    }
    public void dropRole(    AuthenticatedUser performer,    RoleResource role) throws RequestValidationException, RequestExecutionException {
    }
    public void alterRole(    AuthenticatedUser performer,    RoleResource role,    RoleOptions options) throws RequestValidationException, RequestExecutionException {
    }
    public void grantRole(    AuthenticatedUser performer,    RoleResource role,    RoleResource grantee) throws RequestValidationException, RequestExecutionException {
    }
    public void revokeRole(    AuthenticatedUser performer,    RoleResource role,    RoleResource revokee) throws RequestValidationException, RequestExecutionException {
    }
    public Set<RoleResource> getRoles(    RoleResource grantee,    boolean includeInherited) throws RequestValidationException, RequestExecutionException {
      return null;
    }
    public Set<RoleResource> getAllRoles() throws RequestValidationException, RequestExecutionException {
      return null;
    }
    public boolean isSuper(    RoleResource role){
      return false;
    }
    public boolean canLogin(    RoleResource role){
      return false;
    }
    public Map<String,String> getCustomOptions(    RoleResource role){
      return Collections.EMPTY_MAP;
    }
    public boolean isExistingRole(    RoleResource role){
      return false;
    }
    public Set<? extends IResource> protectedResources(){
      return null;
    }
    public void validateConfiguration() throws ConfigurationException {
    }
    public void setup(){
    }
  }
;
}
