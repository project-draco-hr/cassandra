{
  int type=ast.getType();
  if (type != CqlParser.A_SUPERCOLUMN_MAP_VALUE) {
    throw new SemanticException(CompilerErrorMsg.INVALID_TYPE.getMsg(ast));
  }
  int size=ast.getChildCount();
  SuperColumnMapExpr result=new SuperColumnMapExpr();
  for (int idx=0; idx < size; idx++) {
    CommonTree entryNode=(CommonTree)(ast.getChild(idx));
    OperandDef superColumnKey=getSimpleExpr((CommonTree)(entryNode.getChild(0)));
    ColumnMapExpr columnMapExpr=getColumnMapExpr((CommonTree)(entryNode.getChild(1)));
    Pair<OperandDef,ColumnMapExpr> entry=new Pair<OperandDef,ColumnMapExpr>(superColumnKey,columnMapExpr);
    result.add(entry);
  }
  return result;
}
