{
  Function fun=Functions.get(keyspace,name,terms,receiver.ksName,receiver.cfName);
  if (fun == null)   throw new InvalidRequestException(String.format("Unknown function %s called",name));
  if (!receiver.type.isValueCompatibleWith(fun.returnType()))   throw new InvalidRequestException(String.format("Type error: cannot assign result of function %s (type %s) to %s (type %s)",fun.name(),fun.returnType().asCQL3Type(),receiver.name,receiver.type.asCQL3Type()));
  if (fun.argTypes().size() != terms.size())   throw new InvalidRequestException(String.format("Incorrect number of arguments specified for function %s (expected %d, found %d)",fun.name(),fun.argTypes().size(),terms.size()));
  List<Term> parameters=new ArrayList<Term>(terms.size());
  boolean allTerminal=true;
  for (int i=0; i < terms.size(); i++) {
    Term t=terms.get(i).prepare(keyspace,Functions.makeArgSpec(receiver.ksName,receiver.cfName,fun,i));
    if (t instanceof NonTerminal)     allTerminal=false;
    parameters.add(t);
  }
  return allTerminal && fun.isPure() ? makeTerminal(fun,execute(fun,parameters),QueryOptions.DEFAULT.getProtocolVersion()) : new FunctionCall(fun,parameters);
}
