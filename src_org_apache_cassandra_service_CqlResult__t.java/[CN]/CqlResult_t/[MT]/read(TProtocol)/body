{
  TField field;
  iprot.readStructBegin();
  while (true) {
    field=iprot.readFieldBegin();
    if (field.type == TType.STOP) {
      break;
    }
switch (field.id) {
case ERRORCODE:
      if (field.type == TType.I32) {
        this.errorCode=iprot.readI32();
        this.__isset.errorCode=true;
      }
 else {
        TProtocolUtil.skip(iprot,field.type);
      }
    break;
case ERRORTXT:
  if (field.type == TType.STRING) {
    this.errorTxt=iprot.readString();
  }
 else {
    TProtocolUtil.skip(iprot,field.type);
  }
break;
case RESULTSET:
if (field.type == TType.LIST) {
{
  TList _list22=iprot.readListBegin();
  this.resultSet=new ArrayList<Map<String,String>>(_list22.size);
  for (int _i23=0; _i23 < _list22.size; ++_i23) {
    Map<String,String> _elem24;
{
      TMap _map25=iprot.readMapBegin();
      _elem24=new HashMap<String,String>(2 * _map25.size);
      for (int _i26=0; _i26 < _map25.size; ++_i26) {
        String _key27;
        String _val28;
        _key27=iprot.readString();
        _val28=iprot.readString();
        _elem24.put(_key27,_val28);
      }
      iprot.readMapEnd();
    }
    this.resultSet.add(_elem24);
  }
  iprot.readListEnd();
}
}
 else {
TProtocolUtil.skip(iprot,field.type);
}
break;
default :
TProtocolUtil.skip(iprot,field.type);
break;
}
iprot.readFieldEnd();
}
iprot.readStructEnd();
validate();
}
