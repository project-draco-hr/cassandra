{
  TField field;
  iprot.readStructBegin();
  while (true) {
    field=iprot.readFieldBegin();
    if (field.type == TType.STOP) {
      break;
    }
switch (field.id) {
case ERRORCODE:
      if (field.type == TType.I32) {
        this.errorCode=iprot.readI32();
        this.__isset.errorCode=true;
      }
 else {
        TProtocolUtil.skip(iprot,field.type);
      }
    break;
case ERRORTXT:
  if (field.type == TType.STRING) {
    this.errorTxt=iprot.readString();
    this.__isset.errorTxt=true;
  }
 else {
    TProtocolUtil.skip(iprot,field.type);
  }
break;
case RESULTSET:
if (field.type == TType.LIST) {
{
  TList _list40=iprot.readListBegin();
  this.resultSet=new ArrayList<Map<String,String>>(_list40.size);
  for (int _i41=0; _i41 < _list40.size; ++_i41) {
    Map<String,String> _elem42;
{
      TMap _map43=iprot.readMapBegin();
      _elem42=new HashMap<String,String>(2 * _map43.size);
      for (int _i44=0; _i44 < _map43.size; ++_i44) {
        String _key45;
        String _val46;
        _key45=iprot.readString();
        _val46=iprot.readString();
        _elem42.put(_key45,_val46);
      }
      iprot.readMapEnd();
    }
    this.resultSet.add(_elem42);
  }
  iprot.readListEnd();
}
this.__isset.resultSet=true;
}
 else {
TProtocolUtil.skip(iprot,field.type);
}
break;
default :
TProtocolUtil.skip(iprot,field.type);
break;
}
iprot.readFieldEnd();
}
iprot.readStructEnd();
validate();
}
