{
  byte[] context=new byte[stepLength * 10];
  cc.writeElementAtStepOffset(context,0,FBUtilities.toByteArray(5),1L,1L);
  cc.writeElementAtStepOffset(context,1,FBUtilities.toByteArray(3),1L,1L);
  cc.writeElementAtStepOffset(context,2,FBUtilities.toByteArray(6),1L,1L);
  cc.writeElementAtStepOffset(context,3,FBUtilities.toByteArray(7),1L,1L);
  cc.writeElementAtStepOffset(context,4,FBUtilities.toByteArray(8),1L,1L);
  cc.writeElementAtStepOffset(context,5,FBUtilities.toByteArray(9),1L,1L);
  cc.writeElementAtStepOffset(context,6,FBUtilities.toByteArray(2),1L,1L);
  cc.writeElementAtStepOffset(context,7,FBUtilities.toByteArray(4),1L,1L);
  cc.writeElementAtStepOffset(context,8,FBUtilities.toByteArray(1),1L,1L);
  cc.writeElementAtStepOffset(context,9,FBUtilities.toByteArray(3),1L,1L);
  byte[] sorted=cc.sortElementsById(context);
  assertEquals(1,FBUtilities.byteArrayToInt(sorted,0 * stepLength));
  assertEquals(2,FBUtilities.byteArrayToInt(sorted,1 * stepLength));
  assertEquals(3,FBUtilities.byteArrayToInt(sorted,2 * stepLength));
  assertEquals(3,FBUtilities.byteArrayToInt(sorted,3 * stepLength));
  assertEquals(4,FBUtilities.byteArrayToInt(sorted,4 * stepLength));
  assertEquals(5,FBUtilities.byteArrayToInt(sorted,5 * stepLength));
  assertEquals(6,FBUtilities.byteArrayToInt(sorted,6 * stepLength));
  assertEquals(7,FBUtilities.byteArrayToInt(sorted,7 * stepLength));
  assertEquals(8,FBUtilities.byteArrayToInt(sorted,8 * stepLength));
  assertEquals(9,FBUtilities.byteArrayToInt(sorted,9 * stepLength));
}
