{
  ContextState left;
  ContextState right;
  left=ContextState.allocate(0,0,3,allocator);
  left.writeRemote(CounterId.fromInt(3),3L,0L);
  left.writeRemote(CounterId.fromInt(6),2L,0L);
  left.writeRemote(CounterId.fromInt(9),1L,0L);
  right=ContextState.wrap(ByteBufferUtil.clone(left.context));
  assertEquals(Relationship.EQUAL,cc.diff(left.context,right.context));
  left=ContextState.allocate(0,0,4,allocator);
  left.writeRemote(CounterId.fromInt(3),3L,0L);
  left.writeRemote(CounterId.fromInt(6),2L,0L);
  left.writeRemote(CounterId.fromInt(9),1L,0L);
  left.writeRemote(CounterId.fromInt(12),0L,0L);
  right=ContextState.allocate(0,0,3,allocator);
  right.writeRemote(CounterId.fromInt(3),3L,0L);
  right.writeRemote(CounterId.fromInt(6),2L,0L);
  right.writeRemote(CounterId.fromInt(9),1L,0L);
  assertEquals(Relationship.GREATER_THAN,cc.diff(left.context,right.context));
  left=ContextState.allocate(0,0,3,allocator);
  left.writeRemote(CounterId.fromInt(3),3L,0L);
  left.writeRemote(CounterId.fromInt(6),2L,0L);
  left.writeRemote(CounterId.fromInt(9),1L,0L);
  right=ContextState.allocate(0,0,4,allocator);
  right.writeRemote(CounterId.fromInt(3),3L,0L);
  right.writeRemote(CounterId.fromInt(6),2L,0L);
  right.writeRemote(CounterId.fromInt(9),1L,0L);
  right.writeRemote(CounterId.fromInt(12),0L,0L);
  assertEquals(Relationship.LESS_THAN,cc.diff(left.context,right.context));
  left=ContextState.allocate(0,0,3,allocator);
  left.writeRemote(CounterId.fromInt(3),3L,0L);
  left.writeRemote(CounterId.fromInt(6),2L,0L);
  left.writeRemote(CounterId.fromInt(9),3L,0L);
  right=ContextState.allocate(0,0,3,allocator);
  right.writeRemote(CounterId.fromInt(3),3L,0L);
  right.writeRemote(CounterId.fromInt(6),2L,0L);
  right.writeRemote(CounterId.fromInt(9),1L,0L);
  assertEquals(Relationship.GREATER_THAN,cc.diff(left.context,right.context));
  left=ContextState.allocate(0,0,3,allocator);
  left.writeRemote(CounterId.fromInt(3),3L,0L);
  left.writeRemote(CounterId.fromInt(6),2L,0L);
  left.writeRemote(CounterId.fromInt(9),3L,0L);
  right=ContextState.allocate(0,0,3,allocator);
  right.writeRemote(CounterId.fromInt(3),3L,0L);
  right.writeRemote(CounterId.fromInt(6),9L,0L);
  right.writeRemote(CounterId.fromInt(9),3L,0L);
  assertEquals(Relationship.LESS_THAN,cc.diff(left.context,right.context));
  left=ContextState.allocate(0,0,3,allocator);
  left.writeRemote(CounterId.fromInt(3),1L,0L);
  left.writeRemote(CounterId.fromInt(4),1L,0L);
  left.writeRemote(CounterId.fromInt(9),1L,0L);
  right=ContextState.allocate(0,0,3,allocator);
  right.writeRemote(CounterId.fromInt(3),1L,0L);
  right.writeRemote(CounterId.fromInt(6),1L,0L);
  right.writeRemote(CounterId.fromInt(9),1L,0L);
  assertEquals(Relationship.DISJOINT,cc.diff(left.context,right.context));
  left=ContextState.allocate(0,0,3,allocator);
  left.writeRemote(CounterId.fromInt(3),1L,0L);
  left.writeRemote(CounterId.fromInt(4),1L,0L);
  left.writeRemote(CounterId.fromInt(9),1L,0L);
  right=ContextState.allocate(0,0,3,allocator);
  right.writeRemote(CounterId.fromInt(2),1L,0L);
  right.writeRemote(CounterId.fromInt(6),1L,0L);
  right.writeRemote(CounterId.fromInt(12),1L,0L);
  assertEquals(Relationship.DISJOINT,cc.diff(left.context,right.context));
  left=ContextState.allocate(0,0,3,allocator);
  left.writeRemote(CounterId.fromInt(3),1L,0L);
  left.writeRemote(CounterId.fromInt(6),3L,0L);
  left.writeRemote(CounterId.fromInt(9),1L,0L);
  right=ContextState.allocate(0,0,3,allocator);
  right.writeRemote(CounterId.fromInt(3),1L,0L);
  right.writeRemote(CounterId.fromInt(6),1L,0L);
  right.writeRemote(CounterId.fromInt(9),5L,0L);
  assertEquals(Relationship.DISJOINT,cc.diff(left.context,right.context));
  left=ContextState.allocate(0,0,3,allocator);
  left.writeRemote(CounterId.fromInt(3),2L,0L);
  left.writeRemote(CounterId.fromInt(6),3L,0L);
  left.writeRemote(CounterId.fromInt(9),1L,0L);
  right=ContextState.allocate(0,0,3,allocator);
  right.writeRemote(CounterId.fromInt(3),1L,0L);
  right.writeRemote(CounterId.fromInt(6),9L,0L);
  right.writeRemote(CounterId.fromInt(9),5L,0L);
  assertEquals(Relationship.DISJOINT,cc.diff(left.context,right.context));
  left=ContextState.allocate(0,0,4,allocator);
  left.writeRemote(CounterId.fromInt(3),2L,0L);
  left.writeRemote(CounterId.fromInt(6),3L,0L);
  left.writeRemote(CounterId.fromInt(9),1L,0L);
  left.writeRemote(CounterId.fromInt(12),1L,0L);
  right=ContextState.allocate(0,0,3,allocator);
  right.writeRemote(CounterId.fromInt(3),4L,0L);
  right.writeRemote(CounterId.fromInt(6),9L,0L);
  right.writeRemote(CounterId.fromInt(9),5L,0L);
  assertEquals(Relationship.DISJOINT,cc.diff(left.context,right.context));
  left=ContextState.allocate(0,0,3,allocator);
  left.writeRemote(CounterId.fromInt(3),5L,0L);
  left.writeRemote(CounterId.fromInt(6),3L,0L);
  left.writeRemote(CounterId.fromInt(9),2L,0L);
  right=ContextState.allocate(0,0,4,allocator);
  right.writeRemote(CounterId.fromInt(3),4L,0L);
  right.writeRemote(CounterId.fromInt(6),3L,0L);
  right.writeRemote(CounterId.fromInt(9),2L,0L);
  right.writeRemote(CounterId.fromInt(12),1L,0L);
  assertEquals(Relationship.DISJOINT,cc.diff(left.context,right.context));
  left=ContextState.allocate(0,0,3,allocator);
  left.writeRemote(CounterId.fromInt(3),5L,0L);
  left.writeRemote(CounterId.fromInt(6),2L,0L);
  left.writeRemote(CounterId.fromInt(9),2L,0L);
  right=ContextState.allocate(0,0,4,allocator);
  right.writeRemote(CounterId.fromInt(3),4L,0L);
  right.writeRemote(CounterId.fromInt(6),3L,0L);
  right.writeRemote(CounterId.fromInt(9),2L,0L);
  right.writeRemote(CounterId.fromInt(12),1L,0L);
  assertEquals(Relationship.DISJOINT,cc.diff(left.context,right.context));
  left=ContextState.allocate(0,0,4,allocator);
  left.writeRemote(CounterId.fromInt(3),5L,0L);
  left.writeRemote(CounterId.fromInt(6),2L,0L);
  left.writeRemote(CounterId.fromInt(7),2L,0L);
  left.writeRemote(CounterId.fromInt(9),2L,0L);
  right=ContextState.allocate(0,0,3,allocator);
  right.writeRemote(CounterId.fromInt(3),4L,0L);
  right.writeRemote(CounterId.fromInt(6),3L,0L);
  right.writeRemote(CounterId.fromInt(9),2L,0L);
  assertEquals(Relationship.DISJOINT,cc.diff(left.context,right.context));
}
