{
  byte[] left=new byte[4 * stepLength];
  cc.writeElementAtStepOffset(left,0,FBUtilities.toByteArray(1),1L,1L);
  cc.writeElementAtStepOffset(left,1,FBUtilities.toByteArray(2),2L,2L);
  cc.writeElementAtStepOffset(left,2,FBUtilities.toByteArray(4),6L,3L);
  cc.writeElementAtStepOffset(left,3,FBUtilities.getLocalAddress().getAddress(),7L,3L);
  byte[] right=new byte[3 * stepLength];
  cc.writeElementAtStepOffset(right,2,FBUtilities.toByteArray(5),5L,5L);
  cc.writeElementAtStepOffset(right,1,FBUtilities.toByteArray(4),4L,4L);
  cc.writeElementAtStepOffset(right,0,FBUtilities.getLocalAddress().getAddress(),2L,9L);
  byte[] merged=cc.merge(left,right);
  assertEquals(0,FBUtilities.compareUnsigned(FBUtilities.getLocalAddress().getAddress(),merged,0,0 * stepLength,4,4));
  assertEquals(9L,FBUtilities.byteArrayToLong(merged,0 * stepLength + idLength));
  assertEquals(12L,FBUtilities.byteArrayToLong(merged,0 * stepLength + idLength + clockLength));
  assertEquals(4,FBUtilities.byteArrayToInt(merged,1 * stepLength));
  assertEquals(6L,FBUtilities.byteArrayToLong(merged,1 * stepLength + idLength));
  assertEquals(3L,FBUtilities.byteArrayToLong(merged,1 * stepLength + idLength + clockLength));
  assertEquals(5,FBUtilities.byteArrayToInt(merged,2 * stepLength));
  assertEquals(5L,FBUtilities.byteArrayToLong(merged,2 * stepLength + idLength));
  assertEquals(5L,FBUtilities.byteArrayToLong(merged,2 * stepLength + idLength + clockLength));
  assertEquals(2,FBUtilities.byteArrayToInt(merged,3 * stepLength));
  assertEquals(2L,FBUtilities.byteArrayToLong(merged,3 * stepLength + idLength));
  assertEquals(2L,FBUtilities.byteArrayToLong(merged,3 * stepLength + idLength + clockLength));
  assertEquals(1,FBUtilities.byteArrayToInt(merged,4 * stepLength));
  assertEquals(1L,FBUtilities.byteArrayToLong(merged,4 * stepLength + idLength));
  assertEquals(1L,FBUtilities.byteArrayToLong(merged,4 * stepLength + idLength + clockLength));
}
