{
  ByteBuffer left=ByteBuffer.allocate(4 * stepLength);
  cc.writeElementAtOffset(left,0 * stepLength,FBUtilities.toByteArray(1),1L,1L);
  cc.writeElementAtOffset(left,1 * stepLength,FBUtilities.toByteArray(2),2L,2L);
  cc.writeElementAtOffset(left,2 * stepLength,FBUtilities.toByteArray(4),6L,3L);
  cc.writeElementAtOffset(left,3 * stepLength,FBUtilities.getLocalAddress().getAddress(),7L,3L);
  ByteBuffer right=ByteBuffer.allocate(3 * stepLength);
  cc.writeElementAtOffset(right,0 * stepLength,FBUtilities.toByteArray(4),4L,4L);
  cc.writeElementAtOffset(right,1 * stepLength,FBUtilities.toByteArray(5),5L,5L);
  cc.writeElementAtOffset(right,2 * stepLength,FBUtilities.getLocalAddress().getAddress(),2L,9L);
  ByteBuffer merged=cc.merge(left,right);
  assertEquals(5 * stepLength,merged.remaining());
  assertEquals(0,ByteBufferUtil.compareSubArrays(ByteBuffer.wrap(FBUtilities.getLocalAddress().getAddress()),0,merged,4 * stepLength,4));
  assertEquals(9L,merged.getLong(4 * stepLength + idLength));
  assertEquals(12L,merged.getLong(4 * stepLength + idLength + clockLength));
  assertEquals(4,merged.getInt(2 * stepLength));
  assertEquals(6L,merged.getLong(2 * stepLength + idLength));
  assertEquals(3L,merged.getLong(2 * stepLength + idLength + clockLength));
  assertEquals(5,merged.getInt(3 * stepLength));
  assertEquals(5L,merged.getLong(3 * stepLength + idLength));
  assertEquals(5L,merged.getLong(3 * stepLength + idLength + clockLength));
  assertEquals(2,merged.getInt(1 * stepLength));
  assertEquals(2L,merged.getLong(1 * stepLength + idLength));
  assertEquals(2L,merged.getLong(1 * stepLength + idLength + clockLength));
  assertEquals(1,merged.getInt(0 * stepLength));
  assertEquals(1L,merged.getLong(0 * stepLength + idLength));
  assertEquals(1L,merged.getLong(0 * stepLength + idLength + clockLength));
}
