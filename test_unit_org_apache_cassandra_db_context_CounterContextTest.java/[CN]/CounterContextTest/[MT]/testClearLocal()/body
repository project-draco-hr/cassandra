{
  ContextState state;
  ByteBuffer marked;
  ByteBuffer cleared;
  state=ContextState.allocate(0,0,1);
  state.writeRemote(CounterId.fromInt(1),1L,1L);
  assertFalse(cc.shouldClearLocal(state.context));
  marked=cc.markLocalToBeCleared(state.context);
  assertEquals(0,marked.getShort(marked.position()));
  assertSame(state.context,marked);
  cleared=cc.clearAllLocal(marked);
  assertSame(cleared,marked);
  state=ContextState.allocate(0,1,0);
  state.writeLocal(CounterId.fromInt(1),1L,1L);
  assertFalse(cc.shouldClearLocal(state.context));
  marked=cc.markLocalToBeCleared(state.context);
  assertTrue(cc.shouldClearLocal(marked));
  assertEquals(-1,marked.getShort(marked.position()));
  assertNotSame(state.context,marked);
  cleared=cc.clearAllLocal(marked);
  assertFalse(cc.shouldClearLocal(cleared));
  assertEquals(0,cleared.getShort(cleared.position()));
  state=ContextState.allocate(2,1,0);
  state.writeLocal(CounterId.fromInt(1),1L,1L);
  state.writeGlobal(CounterId.fromInt(2),2L,2L);
  state.writeGlobal(CounterId.fromInt(3),3L,3L);
  assertFalse(cc.shouldClearLocal(state.context));
  marked=cc.markLocalToBeCleared(state.context);
  assertTrue(cc.shouldClearLocal(marked));
  assertEquals(-3,marked.getShort(marked.position()));
  assertEquals(0,marked.getShort(marked.position() + headerSizeLength));
  assertEquals(Short.MIN_VALUE + 1,marked.getShort(marked.position() + headerSizeLength + headerEltLength));
  assertEquals(Short.MIN_VALUE + 2,marked.getShort(marked.position() + headerSizeLength + 2 * headerEltLength));
  int headerLength=headerSizeLength + 3 * headerEltLength;
  assertTrue(Util.equalsCounterId(CounterId.fromInt(1),marked,headerLength));
  assertEquals(1L,marked.getLong(marked.position() + headerLength + idLength));
  assertEquals(1L,marked.getLong(marked.position() + headerLength + idLength+ clockLength));
  assertTrue(Util.equalsCounterId(CounterId.fromInt(2),marked,headerLength + stepLength));
  assertEquals(2L,marked.getLong(marked.position() + headerLength + stepLength+ idLength));
  assertEquals(2L,marked.getLong(marked.position() + headerLength + stepLength+ idLength+ clockLength));
  assertTrue(Util.equalsCounterId(CounterId.fromInt(3),marked,headerLength + 2 * stepLength));
  assertEquals(3L,marked.getLong(marked.position() + headerLength + 2 * stepLength + idLength));
  assertEquals(3L,marked.getLong(marked.position() + headerLength + 2 * stepLength + idLength + clockLength));
  cleared=cc.clearAllLocal(marked);
  assertFalse(cc.shouldClearLocal(cleared));
  assertEquals(2,cleared.getShort(cleared.position()));
  assertEquals(Short.MIN_VALUE + 1,cleared.getShort(marked.position() + headerEltLength));
  assertEquals(Short.MIN_VALUE + 2,cleared.getShort(marked.position() + headerSizeLength + headerEltLength));
  headerLength=headerSizeLength + 2 * headerEltLength;
  assertTrue(Util.equalsCounterId(CounterId.fromInt(1),cleared,headerLength));
  assertEquals(1L,cleared.getLong(cleared.position() + headerLength + idLength));
  assertEquals(1L,cleared.getLong(cleared.position() + headerLength + idLength+ clockLength));
  assertTrue(Util.equalsCounterId(CounterId.fromInt(2),cleared,headerLength + stepLength));
  assertEquals(2L,cleared.getLong(cleared.position() + headerLength + stepLength+ idLength));
  assertEquals(2L,cleared.getLong(cleared.position() + headerLength + stepLength+ idLength+ clockLength));
  assertTrue(Util.equalsCounterId(CounterId.fromInt(3),cleared,headerLength + 2 * stepLength));
  assertEquals(3L,cleared.getLong(cleared.position() + headerLength + 2 * stepLength + idLength));
  assertEquals(3L,cleared.getLong(cleared.position() + headerLength + 2 * stepLength + idLength + clockLength));
  state=ContextState.allocate(1,0,0);
  state.writeGlobal(CounterId.fromInt(1),1L,1L);
  assertFalse(cc.shouldClearLocal(state.context));
  marked=cc.markLocalToBeCleared(state.context);
  assertEquals(1,marked.getShort(marked.position()));
  assertSame(state.context,marked);
  cleared=cc.clearAllLocal(marked);
  assertSame(cleared,marked);
}
