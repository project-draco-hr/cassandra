{
  ContextState state=ContextState.allocate(3,3,3,HeapAllocator.instance);
  state.writeGlobal(CounterId.fromInt(1),1L,1L);
  state.writeRemote(CounterId.fromInt(2),2L,2L);
  state.writeLocal(CounterId.fromInt(3),3L,3L);
  state.writeGlobal(CounterId.fromInt(4),4L,4L);
  state.writeRemote(CounterId.fromInt(5),5L,5L);
  state.writeLocal(CounterId.fromInt(6),6L,6L);
  state.writeGlobal(CounterId.fromInt(7),7L,7L);
  state.writeRemote(CounterId.fromInt(8),8L,8L);
  state.writeLocal(CounterId.fromInt(9),9L,9L);
  assertEquals(ClockAndCount.create(1L,1L),cc.getClockAndCountOf(state.context,CounterId.fromInt(1)));
  assertEquals(ClockAndCount.create(2L,2L),cc.getClockAndCountOf(state.context,CounterId.fromInt(2)));
  assertEquals(ClockAndCount.create(3L,3L),cc.getClockAndCountOf(state.context,CounterId.fromInt(3)));
  assertEquals(ClockAndCount.create(4L,4L),cc.getClockAndCountOf(state.context,CounterId.fromInt(4)));
  assertEquals(ClockAndCount.create(5L,5L),cc.getClockAndCountOf(state.context,CounterId.fromInt(5)));
  assertEquals(ClockAndCount.create(6L,6L),cc.getClockAndCountOf(state.context,CounterId.fromInt(6)));
  assertEquals(ClockAndCount.create(7L,7L),cc.getClockAndCountOf(state.context,CounterId.fromInt(7)));
  assertEquals(ClockAndCount.create(8L,8L),cc.getClockAndCountOf(state.context,CounterId.fromInt(8)));
  assertEquals(ClockAndCount.create(9L,9L),cc.getClockAndCountOf(state.context,CounterId.fromInt(9)));
  assertEquals(ClockAndCount.create(0L,0L),cc.getClockAndCountOf(state.context,CounterId.fromInt(0)));
  assertEquals(ClockAndCount.create(0L,0L),cc.getClockAndCountOf(state.context,CounterId.fromInt(10)));
  assertEquals(ClockAndCount.create(0L,0L),cc.getClockAndCountOf(state.context,CounterId.fromInt(15)));
  assertEquals(ClockAndCount.create(0L,0L),cc.getClockAndCountOf(state.context,CounterId.fromInt(20)));
}
