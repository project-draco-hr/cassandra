{
  TokenMetadata tmd=new TokenMetadata();
  IPartitioner partitioner=new RandomPartitioner();
  AbstractReplicationStrategy strategy=new RackUnawareStrategy(tmd,partitioner,3);
  Token[] endPointTokens=new Token[5];
  Token[] keyTokens=new Token[5];
  for (int i=0; i < 5; i++) {
    endPointTokens[i]=new BigIntegerToken(String.valueOf(10 * i));
    keyTokens[i]=new BigIntegerToken(String.valueOf(10 * i + 5));
  }
  List<InetAddress> hosts=new ArrayList<InetAddress>();
  for (int i=0; i < endPointTokens.length; i++) {
    InetAddress ep=InetAddress.getByName("127.0.0." + String.valueOf(i + 1));
    tmd.update(endPointTokens[i],ep);
    hosts.add(ep);
  }
  Token bsToken=new BigIntegerToken(String.valueOf(25));
  InetAddress bootstrapEndPoint=InetAddress.getByName("127.0.0.6");
  StorageService.updateBootstrapRanges(strategy,tmd,bsToken,bootstrapEndPoint);
  for (int i=0; i < keyTokens.length; i++) {
    Collection<InetAddress> endPoints=strategy.getWriteEndpoints(keyTokens[i],strategy.getNaturalEndpoints(keyTokens[i]));
    assertTrue(endPoints.size() >= 3);
    for (int j=0; j < 3; j++) {
      assertTrue(endPoints.contains(hosts.get((i + j + 1) % hosts.size())));
    }
    if (i < 3)     assertTrue(endPoints.contains(bootstrapEndPoint));
  }
}
