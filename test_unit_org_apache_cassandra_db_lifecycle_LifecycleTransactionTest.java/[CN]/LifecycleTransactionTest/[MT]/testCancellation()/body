{
  Tracker tracker=new Tracker(null,false);
  List<SSTableReader> readers=readers(0,3);
  tracker.addInitialSSTables(readers);
  LifecycleTransaction txn=tracker.tryModify(readers,OperationType.UNKNOWN);
  SSTableReader cancel=readers.get(0);
  SSTableReader update=readers(1,2).get(0);
  SSTableReader fresh=readers(3,4).get(0);
  SSTableReader notPresent=readers(4,5).get(0);
  txn.cancel(cancel);
  txn.update(update,true);
  txn.update(fresh,false);
  testBadCancel(txn,cancel);
  testBadCancel(txn,update);
  testBadCancel(txn,fresh);
  testBadCancel(txn,notPresent);
  Assert.assertEquals(2,txn.originals().size());
  Assert.assertEquals(2,tracker.getView().compacting.size());
  Assert.assertTrue(all(readers.subList(1,3),idIn(tracker.getView().compacting)));
  txn.checkpoint();
  testBadCancel(txn,cancel);
  testBadCancel(txn,update);
  testBadCancel(txn,fresh);
  testBadCancel(txn,notPresent);
  Assert.assertEquals(2,txn.originals().size());
  Assert.assertEquals(3,tracker.getView().compacting.size());
  Assert.assertEquals(3,size(txn.current()));
  Assert.assertTrue(all(concat(readers.subList(1,3),of(fresh)),idIn(tracker.getView().compacting)));
  txn.cancel(readers.get(2));
  Assert.assertEquals(1,txn.originals().size());
  Assert.assertEquals(2,tracker.getView().compacting.size());
  Assert.assertEquals(2,size(txn.current()));
  Assert.assertTrue(all(of(readers.get(1),fresh),idIn(tracker.getView().compacting)));
}
