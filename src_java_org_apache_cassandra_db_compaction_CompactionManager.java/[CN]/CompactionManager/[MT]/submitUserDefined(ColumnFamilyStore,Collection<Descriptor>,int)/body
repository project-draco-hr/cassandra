{
  Runnable runnable=new WrappedRunnable(){
    protected void runMayThrow() throws IOException {
      compactionLock.readLock().lock();
      try {
        Collection<SSTableReader> sstables=new ArrayList<SSTableReader>(dataFiles.size());
        for (        Descriptor desc : dataFiles) {
          SSTableReader sstable=lookupSSTable(cfs,desc);
          if (sstable == null) {
            logger.info("Will not compact {}: it is not an active sstable",desc);
          }
 else {
            sstables.add(sstable);
          }
        }
        try {
          if (sstables.isEmpty()) {
            logger.info("No file to compact for user defined compaction");
          }
 else           if (cfs.getDataTracker().markCompacting(sstables)) {
            try {
              AbstractCompactionStrategy strategy=cfs.getCompactionStrategy();
              AbstractCompactionTask task=strategy.getUserDefinedTask(sstables,gcBefore);
              task.execute(metrics);
            }
  finally {
              cfs.getDataTracker().unmarkCompacting(sstables);
            }
          }
 else {
            logger.info("SSTables for user defined compaction are already being compacted.");
          }
        }
  finally {
          SSTableReader.releaseReferences(sstables);
        }
      }
  finally {
        compactionLock.readLock().unlock();
      }
    }
  }
;
  return executor.submit(runnable);
}
