{
  logger.debug("Scheduling a background task check for {}.{} with {}",new Object[]{cfs.table.name,cfs.columnFamily,cfs.getCompactionStrategy().getClass().getSimpleName()});
  Runnable runnable=new Runnable(){
    public void run(){
      compactionLock.readLock().lock();
      try {
        logger.debug("Checking {}.{}",cfs.table.name,cfs.columnFamily);
        if (!cfs.isValid()) {
          logger.debug("Aborting compaction for dropped CF");
          return;
        }
        AbstractCompactionStrategy strategy=cfs.getCompactionStrategy();
        AbstractCompactionTask task=strategy.getNextBackgroundTask(getDefaultGcBefore(cfs));
        if (task == null) {
          logger.debug("No tasks available");
          return;
        }
        if (!task.markSSTablesForCompaction()) {
          logger.debug("Unable to mark SSTables for {}",task);
          return;
        }
        try {
          task.execute(metrics);
        }
  finally {
          task.unmarkSSTables();
        }
        submitBackground(cfs);
      }
  finally {
        compactionLock.readLock().unlock();
      }
    }
  }
;
  return executor.submit(runnable);
}
