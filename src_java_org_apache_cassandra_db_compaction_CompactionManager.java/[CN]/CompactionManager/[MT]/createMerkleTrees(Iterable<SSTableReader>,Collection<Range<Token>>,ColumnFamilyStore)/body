{
  MerkleTrees tree=new MerkleTrees(cfs.getPartitioner());
  long allPartitions=0;
  Map<Range<Token>,Long> rangePartitionCounts=new HashMap<>();
  for (  Range<Token> range : ranges) {
    long numPartitions=0;
    for (    SSTableReader sstable : sstables)     numPartitions+=sstable.estimatedKeysForRanges(Collections.singleton(range));
    rangePartitionCounts.put(range,numPartitions);
    allPartitions+=numPartitions;
  }
  for (  Range<Token> range : ranges) {
    long numPartitions=rangePartitionCounts.get(range);
    double rangeOwningRatio=allPartitions > 0 ? (double)numPartitions / allPartitions : 0;
    int maxDepth=rangeOwningRatio > 0 ? (int)Math.floor(20 - Math.log(1 / rangeOwningRatio) / Math.log(2)) : 0;
    int depth=numPartitions > 0 ? (int)Math.min(Math.floor(Math.log(numPartitions)),maxDepth) : 0;
    tree.addMerkleTree((int)Math.pow(2,depth),range);
  }
  if (logger.isDebugEnabled()) {
    logger.debug("Created {} merkle trees with merkle trees size {}, {} partitions, {} bytes",tree.ranges().size(),tree.size(),allPartitions,MerkleTrees.serializer.serializedSize(tree,0));
  }
  return tree;
}
