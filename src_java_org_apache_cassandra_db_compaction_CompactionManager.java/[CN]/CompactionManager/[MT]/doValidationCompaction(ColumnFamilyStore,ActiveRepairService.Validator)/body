{
  if (!cfs.isValid())   return;
  Collection<SSTableReader> sstables;
  int gcBefore;
  if (cfs.snapshotExists(validator.request.sessionid)) {
    sstables=cfs.getSnapshotSSTableReader(validator.request.sessionid);
    gcBefore=cfs.gcBefore(cfs.getSnapshotCreationTime(validator.request.sessionid));
  }
 else {
    StorageService.instance.forceTableFlush(cfs.table.getName(),cfs.name);
    sstables=cfs.markCurrentSSTablesReferenced();
    if (validator.request.gcBefore > 0)     gcBefore=validator.request.gcBefore;
 else     gcBefore=getDefaultGcBefore(cfs);
  }
  CompactionIterable ci=new ValidationCompactionIterable(cfs,sstables,validator.request.range,gcBefore);
  CloseableIterator<AbstractCompactedRow> iter=ci.iterator();
  metrics.beginCompaction(ci);
  try {
    validator.prepare(cfs);
    while (iter.hasNext()) {
      if (ci.isStopRequested())       throw new CompactionInterruptedException(ci.getCompactionInfo());
      AbstractCompactedRow row=iter.next();
      validator.add(row);
    }
    validator.complete();
  }
  finally {
    SSTableReader.releaseReferences(sstables);
    iter.close();
    if (cfs.table.snapshotExists(validator.request.sessionid))     cfs.table.clearSnapshot(validator.request.sessionid);
    metrics.finishCompaction(ci);
  }
}
