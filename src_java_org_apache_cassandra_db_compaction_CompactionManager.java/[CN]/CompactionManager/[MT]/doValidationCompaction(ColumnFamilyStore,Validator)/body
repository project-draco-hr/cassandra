{
  if (!cfs.isValid())   return;
  Collection<SSTableReader> sstables;
  String snapshotName=validator.desc.sessionId.toString();
  int gcBefore;
  boolean isSnapshotValidation=cfs.snapshotExists(snapshotName);
  if (isSnapshotValidation) {
    sstables=cfs.getSnapshotSSTableReader(snapshotName);
    gcBefore=cfs.gcBefore(cfs.getSnapshotCreationTime(snapshotName));
  }
 else {
    StorageService.instance.forceKeyspaceFlush(cfs.keyspace.getName(),cfs.name);
    sstables=cfs.markCurrentSSTablesReferenced();
    if (validator.gcBefore > 0)     gcBefore=validator.gcBefore;
 else     gcBefore=getDefaultGcBefore(cfs);
  }
  CompactionIterable ci=new ValidationCompactionIterable(cfs,sstables,validator.desc.range,gcBefore);
  CloseableIterator<AbstractCompactedRow> iter=ci.iterator();
  metrics.beginCompaction(ci);
  try {
    validator.prepare(cfs);
    while (iter.hasNext()) {
      if (ci.isStopRequested())       throw new CompactionInterruptedException(ci.getCompactionInfo());
      AbstractCompactedRow row=iter.next();
      validator.add(row);
    }
    validator.complete();
  }
  finally {
    iter.close();
    if (isSnapshotValidation) {
      for (      SSTableReader sstable : sstables)       FileUtils.closeQuietly(sstable);
      cfs.clearSnapshot(snapshotName);
    }
 else {
      SSTableReader.releaseReferences(sstables);
    }
    metrics.finishCompaction(ci);
  }
}
