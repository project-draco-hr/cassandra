{
  if (!cfs.isValid())   return;
  Refs<SSTableReader> sstables=null;
  try {
    String snapshotName=validator.desc.sessionId.toString();
    int gcBefore;
    int nowInSec=FBUtilities.nowInSeconds();
    boolean isSnapshotValidation=cfs.snapshotExists(snapshotName);
    if (isSnapshotValidation) {
      sstables=cfs.getSnapshotSSTableReader(snapshotName);
      gcBefore=cfs.gcBefore((int)(cfs.getSnapshotCreationTime(snapshotName) / 1000));
    }
 else {
      StorageService.instance.forceKeyspaceFlush(cfs.keyspace.getName(),cfs.name);
      sstables=getSSTablesToValidate(cfs,validator);
      if (sstables == null)       return;
      if (validator.gcBefore > 0)       gcBefore=validator.gcBefore;
 else       gcBefore=getDefaultGcBefore(cfs,nowInSec);
    }
    MerkleTrees tree=createMerkleTrees(sstables,validator.desc.ranges,cfs);
    long start=System.nanoTime();
    try (AbstractCompactionStrategy.ScannerList scanners=cfs.getCompactionStrategyManager().getScanners(sstables,validator.desc.ranges);ValidationCompactionController controller=new ValidationCompactionController(cfs,gcBefore);CompactionIterator ci=new ValidationCompactionIterator(scanners.scanners,controller,nowInSec,metrics)){
      validator.prepare(cfs,tree);
      while (ci.hasNext()) {
        if (ci.isStopRequested())         throw new CompactionInterruptedException(ci.getCompactionInfo());
        try (UnfilteredRowIterator partition=ci.next()){
          validator.add(partition);
        }
       }
      validator.complete();
    }
  finally {
      if (isSnapshotValidation) {
        cfs.clearSnapshot(snapshotName);
      }
    }
    if (logger.isDebugEnabled()) {
      long duration=TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - start);
      logger.debug("Validation finished in {} msec, for {}",duration,validator.desc);
    }
  }
  finally {
    if (sstables != null)     sstables.release();
  }
}
