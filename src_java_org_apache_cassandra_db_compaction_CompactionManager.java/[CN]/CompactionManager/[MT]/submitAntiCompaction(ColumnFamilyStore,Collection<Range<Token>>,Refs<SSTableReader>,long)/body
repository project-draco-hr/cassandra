{
  Runnable runnable=new WrappedRunnable(){
    @Override public void runMayThrow() throws Exception {
      boolean success=false;
      while (!success) {
        for (        SSTableReader compactingSSTable : cfs.getDataTracker().getCompacting())         sstables.releaseIfHolds(compactingSSTable);
        Set<SSTableReader> compactedSSTables=new HashSet<>();
        for (        SSTableReader sstable : sstables)         if (sstable.isMarkedCompacted())         compactedSSTables.add(sstable);
        sstables.release(compactedSSTables);
        success=sstables.isEmpty() || cfs.getDataTracker().markCompacting(sstables);
      }
      performAnticompaction(cfs,ranges,sstables,repairedAt);
    }
  }
;
  if (executor.isShutdown()) {
    logger.info("Compaction executor has shut down, not submitting anticompaction");
    return Futures.immediateCancelledFuture();
  }
  ListenableFutureTask<?> task=ListenableFutureTask.create(runnable,null);
  executor.submit(task);
  return task;
}
