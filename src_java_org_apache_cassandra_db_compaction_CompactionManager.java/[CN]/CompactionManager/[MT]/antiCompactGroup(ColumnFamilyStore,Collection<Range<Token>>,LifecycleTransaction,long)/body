{
  long groupMaxDataAge=-1;
  for (Iterator<SSTableReader> i=anticompactionGroup.originals().iterator(); i.hasNext(); ) {
    SSTableReader sstable=i.next();
    if (!new File(sstable.getFilename()).exists()) {
      logger.info("Skipping anticompaction for {}, required sstable was compacted and is no longer available.",sstable);
      i.remove();
      continue;
    }
    if (groupMaxDataAge < sstable.maxDataAge)     groupMaxDataAge=sstable.maxDataAge;
  }
  if (anticompactionGroup.originals().size() == 0) {
    logger.info("No valid anticompactions for this group, All sstables were compacted and are no longer available");
    return 0;
  }
  logger.info("Anticompacting {}",anticompactionGroup);
  Set<SSTableReader> sstableAsSet=anticompactionGroup.originals();
  File destination=cfs.directories.getWriteableLocationAsFile(cfs.getExpectedCompactedFileSize(sstableAsSet,OperationType.ANTICOMPACTION));
  long repairedKeyCount=0;
  long unrepairedKeyCount=0;
  CompactionStrategyManager strategy=cfs.getCompactionStrategyManager();
  try (SSTableRewriter repairedSSTableWriter=new SSTableRewriter(cfs,anticompactionGroup,groupMaxDataAge,false,false);SSTableRewriter unRepairedSSTableWriter=new SSTableRewriter(cfs,anticompactionGroup,groupMaxDataAge,false,false);AbstractCompactionStrategy.ScannerList scanners=strategy.getScanners(anticompactionGroup.originals());CompactionController controller=new CompactionController(cfs,sstableAsSet,getDefaultGcBefore(cfs))){
    int expectedBloomFilterSize=Math.max(cfs.metadata.getMinIndexInterval(),(int)(SSTableReader.getApproximateKeyCount(sstableAsSet)));
    repairedSSTableWriter.switchWriter(CompactionManager.createWriterForAntiCompaction(cfs,destination,expectedBloomFilterSize,repairedAt,sstableAsSet));
    unRepairedSSTableWriter.switchWriter(CompactionManager.createWriterForAntiCompaction(cfs,destination,expectedBloomFilterSize,ActiveRepairService.UNREPAIRED_SSTABLE,sstableAsSet));
    CompactionIterable ci=new CompactionIterable(OperationType.ANTICOMPACTION,scanners.scanners,controller,DatabaseDescriptor.getSSTableFormat(),UUIDGen.getTimeUUID());
    metrics.beginCompaction(ci);
    try {
      @SuppressWarnings("resource") CloseableIterator<AbstractCompactedRow> iter=ci.iterator();
      while (iter.hasNext()) {
        @SuppressWarnings("resource") AbstractCompactedRow row=iter.next();
        if (Range.isInRanges(row.key.getToken(),ranges)) {
          repairedSSTableWriter.append(row);
          repairedKeyCount++;
        }
 else {
          unRepairedSSTableWriter.append(row);
          unrepairedKeyCount++;
        }
      }
    }
  finally {
      metrics.finishCompaction(ci);
    }
    List<SSTableReader> anticompactedSSTables=new ArrayList<>();
    anticompactionGroup.permitRedundantTransitions();
    repairedSSTableWriter.setRepairedAt(repairedAt).prepareToCommit();
    unRepairedSSTableWriter.prepareToCommit();
    anticompactedSSTables.addAll(repairedSSTableWriter.finished());
    anticompactedSSTables.addAll(unRepairedSSTableWriter.finished());
    repairedSSTableWriter.commit();
    unRepairedSSTableWriter.commit();
    logger.debug("Repaired {} keys out of {} for {}/{} in {}",repairedKeyCount,repairedKeyCount + unrepairedKeyCount,cfs.keyspace.getName(),cfs.getColumnFamilyName(),anticompactionGroup);
    return anticompactedSSTables.size();
  }
 catch (  Throwable e) {
    JVMStabilityInspector.inspectThrowable(e);
    logger.error("Error anticompacting " + anticompactionGroup,e);
  }
  return 0;
}
