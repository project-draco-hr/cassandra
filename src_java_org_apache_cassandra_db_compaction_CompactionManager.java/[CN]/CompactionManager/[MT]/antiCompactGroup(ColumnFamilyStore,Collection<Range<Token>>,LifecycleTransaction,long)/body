{
  long groupMaxDataAge=-1;
  for (Iterator<SSTableReader> i=anticompactionGroup.originals().iterator(); i.hasNext(); ) {
    SSTableReader sstable=i.next();
    if (groupMaxDataAge < sstable.maxDataAge)     groupMaxDataAge=sstable.maxDataAge;
  }
  if (anticompactionGroup.originals().size() == 0) {
    logger.info("No valid anticompactions for this group, All sstables were compacted and are no longer available");
    return 0;
  }
  logger.info("Anticompacting {}",anticompactionGroup);
  Set<SSTableReader> sstableAsSet=anticompactionGroup.originals();
  File destination=cfs.getDirectories().getWriteableLocationAsFile(cfs.getExpectedCompactedFileSize(sstableAsSet,OperationType.ANTICOMPACTION));
  long repairedKeyCount=0;
  long unrepairedKeyCount=0;
  int nowInSec=FBUtilities.nowInSeconds();
  CompactionStrategyManager strategy=cfs.getCompactionStrategyManager();
  try (SSTableRewriter repairedSSTableWriter=SSTableRewriter.constructWithoutEarlyOpening(anticompactionGroup,false,groupMaxDataAge);SSTableRewriter unRepairedSSTableWriter=SSTableRewriter.constructWithoutEarlyOpening(anticompactionGroup,false,groupMaxDataAge);AbstractCompactionStrategy.ScannerList scanners=strategy.getScanners(anticompactionGroup.originals());CompactionController controller=new CompactionController(cfs,sstableAsSet,getDefaultGcBefore(cfs,nowInSec));CompactionIterator ci=new CompactionIterator(OperationType.ANTICOMPACTION,scanners.scanners,controller,nowInSec,UUIDGen.getTimeUUID(),metrics)){
    int expectedBloomFilterSize=Math.max(cfs.metadata.params.minIndexInterval,(int)(SSTableReader.getApproximateKeyCount(sstableAsSet)));
    repairedSSTableWriter.switchWriter(CompactionManager.createWriterForAntiCompaction(cfs,destination,expectedBloomFilterSize,repairedAt,sstableAsSet,anticompactionGroup));
    unRepairedSSTableWriter.switchWriter(CompactionManager.createWriterForAntiCompaction(cfs,destination,expectedBloomFilterSize,ActiveRepairService.UNREPAIRED_SSTABLE,sstableAsSet,anticompactionGroup));
    Range.OrderedRangeContainmentChecker containmentChecker=new Range.OrderedRangeContainmentChecker(ranges);
    while (ci.hasNext()) {
      try (UnfilteredRowIterator partition=ci.next()){
        if (containmentChecker.contains(partition.partitionKey().getToken())) {
          repairedSSTableWriter.append(partition);
          repairedKeyCount++;
        }
 else {
          unRepairedSSTableWriter.append(partition);
          unrepairedKeyCount++;
        }
      }
     }
    List<SSTableReader> anticompactedSSTables=new ArrayList<>();
    anticompactionGroup.permitRedundantTransitions();
    repairedSSTableWriter.setRepairedAt(repairedAt).prepareToCommit();
    unRepairedSSTableWriter.prepareToCommit();
    anticompactedSSTables.addAll(repairedSSTableWriter.finished());
    anticompactedSSTables.addAll(unRepairedSSTableWriter.finished());
    repairedSSTableWriter.commit();
    unRepairedSSTableWriter.commit();
    logger.trace("Repaired {} keys out of {} for {}/{} in {}",repairedKeyCount,repairedKeyCount + unrepairedKeyCount,cfs.keyspace.getName(),cfs.getColumnFamilyName(),anticompactionGroup);
    return anticompactedSSTables.size();
  }
 catch (  Throwable e) {
    JVMStabilityInspector.inspectThrowable(e);
    logger.error("Error anticompacting " + anticompactionGroup,e);
  }
  return 0;
}
