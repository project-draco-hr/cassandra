{
  int len, pos;
  a_=0x09e3779b9L;
  b_=0x09e3779b9L;
  c_=initialValue;
  pos=0;
  for (len=buffer.length; len >= 12; len-=12) {
    a_=add(a_,fourByteToLong(buffer,pos));
    b_=add(b_,fourByteToLong(buffer,pos + 4));
    c_=add(c_,fourByteToLong(buffer,pos + 8));
    hashMix();
    pos+=12;
  }
  c_+=buffer.length;
switch (len) {
case 11:
    c_=add(c_,leftShift(byteToLong(buffer[pos + 10]),24));
case 10:
  c_=add(c_,leftShift(byteToLong(buffer[pos + 9]),16));
case 9:
c_=add(c_,leftShift(byteToLong(buffer[pos + 8]),8));
case 8:
b_=add(b_,leftShift(byteToLong(buffer[pos + 7]),24));
case 7:
b_=add(b_,leftShift(byteToLong(buffer[pos + 6]),16));
case 6:
b_=add(b_,leftShift(byteToLong(buffer[pos + 5]),8));
case 5:
b_=add(b_,byteToLong(buffer[pos + 4]));
case 4:
a_=add(a_,leftShift(byteToLong(buffer[pos + 3]),24));
case 3:
a_=add(a_,leftShift(byteToLong(buffer[pos + 2]),16));
case 2:
a_=add(a_,leftShift(byteToLong(buffer[pos + 1]),8));
case 1:
a_=add(a_,byteToLong(buffer[pos + 0]));
}
hashMix();
return c_;
}
