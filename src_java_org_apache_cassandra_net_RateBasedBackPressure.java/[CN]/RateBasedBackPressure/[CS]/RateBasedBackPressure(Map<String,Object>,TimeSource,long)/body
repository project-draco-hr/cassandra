{
  if (args.size() != 3) {
    throw new IllegalArgumentException(RateBasedBackPressure.class.getCanonicalName() + " requires 3 arguments: high ratio, back-pressure factor and flow type.");
  }
  try {
    highRatio=Double.parseDouble(args.getOrDefault(HIGH_RATIO,"").toString().trim());
    factor=Integer.parseInt(args.getOrDefault(FACTOR,"").toString().trim());
    flow=Flow.valueOf(args.getOrDefault(FLOW,"").toString().trim().toUpperCase());
  }
 catch (  Exception ex) {
    throw new IllegalArgumentException(ex.getMessage(),ex);
  }
  if (highRatio <= 0 || highRatio > 1) {
    throw new IllegalArgumentException("Back-pressure high ratio must be > 0 and <= 1");
  }
  if (factor < 1) {
    throw new IllegalArgumentException("Back-pressure factor must be >= 1");
  }
  if (windowSize < 10) {
    throw new IllegalArgumentException("Back-pressure window size must be >= 10");
  }
  this.timeSource=timeSource;
  this.windowSize=windowSize;
  logger.info("Initialized back-pressure with high ratio: {}, factor: {}, flow: {}, window size: {}.",highRatio,factor,flow,windowSize);
}
