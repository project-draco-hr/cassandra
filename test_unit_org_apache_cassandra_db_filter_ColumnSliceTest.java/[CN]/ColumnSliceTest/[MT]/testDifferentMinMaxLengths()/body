{
  List<AbstractType<?>> types=new ArrayList<>();
  types.add(Int32Type.instance);
  types.add(Int32Type.instance);
  types.add(Int32Type.instance);
  CompoundDenseCellNameType nameType=new CompoundDenseCellNameType(types);
  ColumnSlice slice=new ColumnSlice(composite(),composite());
  assertTrue(slice.intersects(columnNames(),columnNames(1),nameType,false));
  slice=new ColumnSlice(composite(),composite());
  assertTrue(slice.intersects(columnNames(1),columnNames(1,2),nameType,false));
  slice=new ColumnSlice(composite(),composite(1));
  assertTrue(slice.intersects(columnNames(),columnNames(1),nameType,false));
  slice=new ColumnSlice(composite(1),composite());
  assertTrue(slice.intersects(columnNames(),columnNames(1),nameType,false));
  slice=new ColumnSlice(composite(1),composite(1));
  assertTrue(slice.intersects(columnNames(),columnNames(1),nameType,false));
  slice=new ColumnSlice(composite(0),composite(1,2,3));
  assertTrue(slice.intersects(columnNames(),columnNames(1),nameType,false));
  slice=new ColumnSlice(composite(1,2,3),composite(2));
  assertTrue(slice.intersects(columnNames(),columnNames(1),nameType,false));
  slice=new ColumnSlice(composite(2),composite(3,4,5));
  assertFalse(slice.intersects(columnNames(),columnNames(1),nameType,false));
  slice=new ColumnSlice(composite(0),composite(0,1,2));
  assertFalse(slice.intersects(columnNames(1),columnNames(1,2),nameType,false));
}
