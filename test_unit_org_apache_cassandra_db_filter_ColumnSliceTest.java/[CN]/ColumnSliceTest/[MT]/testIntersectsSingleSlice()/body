{
  List<AbstractType<?>> types=new ArrayList<>();
  types.add(Int32Type.instance);
  types.add(Int32Type.instance);
  types.add(Int32Type.instance);
  CompoundDenseCellNameType nameType=new CompoundDenseCellNameType(types);
  ColumnSlice slice=new ColumnSlice(composite(0,0,0),composite(1,0,0));
  assertFalse(slice.intersects(columnNames(2,0,0),columnNames(3,0,0),nameType,false));
  slice=new ColumnSlice(composite(),composite(1,0,0));
  assertFalse(slice.intersects(columnNames(2,0,0),columnNames(3,0,0),nameType,false));
  slice=new ColumnSlice(composite(0),composite(1,0,0));
  assertFalse(slice.intersects(columnNames(2,0,0),columnNames(3,0,0),nameType,false));
  slice=new ColumnSlice(composite(0),composite(1,0));
  assertFalse(slice.intersects(columnNames(2,0,0),columnNames(3,0,0),nameType,false));
  slice=new ColumnSlice(composite(0,0,0),composite(1,0,0));
  assertFalse(slice.intersects(columnNames(1,1,0),columnNames(3,0,0),nameType,false));
  slice=new ColumnSlice(composite(0),composite(1,0,0));
  assertFalse(slice.intersects(columnNames(1,1,0),columnNames(3,0,0),nameType,false));
  slice=new ColumnSlice(composite(0),composite(1,0));
  assertFalse(slice.intersects(columnNames(1,1,0),columnNames(3,0,0),nameType,false));
  slice=new ColumnSlice(composite(0,0,0),composite(1,1,0));
  assertFalse(slice.intersects(columnNames(1,1,1),columnNames(3,1,1),nameType,false));
  slice=new ColumnSlice(composite(0,0,0),composite(1,1,1));
  assertTrue(slice.intersects(columnNames(1,1,1),columnNames(3,1,1),nameType,false));
  slice=new ColumnSlice(composite(4,0,0),composite(4,0,0));
  assertFalse(slice.intersects(columnNames(2,0,0),columnNames(3,0,0),nameType,false));
  slice=new ColumnSlice(composite(4,0,0),composite());
  assertFalse(slice.intersects(columnNames(2,0,0),columnNames(3,0,0),nameType,false));
  slice=new ColumnSlice(composite(4,0,0),composite(1));
  assertFalse(slice.intersects(columnNames(2,0,0),columnNames(3,0,0),nameType,false));
  slice=new ColumnSlice(composite(4,0),composite(1));
  assertFalse(slice.intersects(columnNames(2,0,0),columnNames(3,0,0),nameType,false));
  slice=new ColumnSlice(composite(1,1,1),composite(2,0,0));
  assertFalse(slice.intersects(columnNames(0,0,0),columnNames(1,0,0),nameType,false));
  slice=new ColumnSlice(composite(1,1,1),composite(2,0,0));
  assertFalse(slice.intersects(columnNames(0,0,0),columnNames(1,1,0),nameType,false));
  slice=new ColumnSlice(composite(1,1,1),composite(2,0,0));
  assertTrue(slice.intersects(columnNames(0,0,0),columnNames(1,1,1),nameType,false));
  slice=new ColumnSlice(composite(0,0,0),composite(2,0,0));
  assertTrue(slice.intersects(columnNames(1,0,0),columnNames(1,1,1),nameType,false));
  slice=new ColumnSlice(composite(),composite());
  assertTrue(slice.intersects(columnNames(1,0,0),columnNames(1,1,1),nameType,false));
  slice=new ColumnSlice(composite(0),composite(2,0));
  assertTrue(slice.intersects(columnNames(1,0,0),columnNames(1,1,1),nameType,false));
  slice=new ColumnSlice(composite(1,0,0),composite(2,0,0));
  assertTrue(slice.intersects(columnNames(1,0,0),columnNames(1,1,1),nameType,false));
  slice=new ColumnSlice(composite(0,0,0),composite(1,1,1));
  assertTrue(slice.intersects(columnNames(1,0,0),columnNames(1,1,1),nameType,false));
  slice=new ColumnSlice(composite(1,0,0),composite(1,1,1));
  assertTrue(slice.intersects(columnNames(1,0,0),columnNames(1,1,1),nameType,false));
  slice=new ColumnSlice(composite(1,0,0),composite(1,1,0));
  assertTrue(slice.intersects(columnNames(1,0,0),columnNames(1,1,1),nameType,false));
  slice=new ColumnSlice(composite(1,0,0),composite(1,1));
  assertTrue(slice.intersects(columnNames(1,0,0),columnNames(1,1,1),nameType,false));
  slice=new ColumnSlice(composite(1,1,0),composite(1,1,1));
  assertTrue(slice.intersects(columnNames(1,0,0),columnNames(1,1,1),nameType,false));
  slice=new ColumnSlice(composite(1,1),composite(1,1,1));
  assertTrue(slice.intersects(columnNames(1,0,0),columnNames(1,1,1),nameType,false));
  slice=new ColumnSlice(composite(1,1,0),composite(1,1,1));
  assertTrue(slice.intersects(columnNames(1,0,0),columnNames(2,2,2),nameType,false));
  slice=new ColumnSlice(composite(1,1),composite(1,1,1));
  assertTrue(slice.intersects(columnNames(1,0,0),columnNames(2,2,2),nameType,false));
  slice=new ColumnSlice(composite(1),composite(1,2));
  assertTrue(slice.intersects(columnNames(1,0,0),columnNames(2,2,2),nameType,false));
  slice=new ColumnSlice(composite(1,1,1),composite(1,1,1));
  assertTrue(slice.intersects(columnNames(1,0,0),columnNames(2,2,2),nameType,false));
  slice=new ColumnSlice(composite(1,1,1),composite());
  assertTrue(slice.intersects(columnNames(1,0,0),columnNames(2,0,0),nameType,false));
  slice=new ColumnSlice(composite(1,1,1),composite(3));
  assertTrue(slice.intersects(columnNames(1,0,0),columnNames(2,0,0),nameType,false));
  slice=new ColumnSlice(composite(1,0,0),composite());
  assertTrue(slice.intersects(columnNames(1,0,0),columnNames(2,0,0),nameType,false));
  slice=new ColumnSlice(composite(1,0,0),composite(3));
  assertTrue(slice.intersects(columnNames(1,0,0),columnNames(2,0,0),nameType,false));
  slice=new ColumnSlice(composite(2,0,0),composite());
  assertTrue(slice.intersects(columnNames(1,0,0),columnNames(2,0,0),nameType,false));
  slice=new ColumnSlice(composite(2,0,0),composite(3));
  assertTrue(slice.intersects(columnNames(1,0,0),columnNames(2,0,0),nameType,false));
  slice=new ColumnSlice(composite(),composite(1,1,1));
  assertTrue(slice.intersects(columnNames(1,0,0),columnNames(2,0,0),nameType,false));
  slice=new ColumnSlice(composite(0),composite(1,1,1));
  assertTrue(slice.intersects(columnNames(1,0,0),columnNames(2,0,0),nameType,false));
  slice=new ColumnSlice(composite(),composite(1,0,0));
  assertTrue(slice.intersects(columnNames(1,0,0),columnNames(2,0,0),nameType,false));
  slice=new ColumnSlice(composite(0),composite(1,0,0));
  assertTrue(slice.intersects(columnNames(1,0,0),columnNames(2,0,0),nameType,false));
  slice=new ColumnSlice(composite(),composite(2,0,0));
  assertTrue(slice.intersects(columnNames(1,0,0),columnNames(2,0,0),nameType,false));
  slice=new ColumnSlice(composite(0),composite(2,0,0));
  assertTrue(slice.intersects(columnNames(1,0,0),columnNames(2,0,0),nameType,false));
  slice=new ColumnSlice(composite(1,2,0),composite(1,3,0));
  assertFalse(slice.intersects(columnNames(1,0,0),columnNames(2,1,0),nameType,false));
  slice=new ColumnSlice(composite(1,2),composite(1,3,0));
  assertFalse(slice.intersects(columnNames(1,0,0),columnNames(2,1,0),nameType,false));
  slice=new ColumnSlice(composite(1,2,0),composite(1,3));
  assertFalse(slice.intersects(columnNames(1,0,0),columnNames(2,1,0),nameType,false));
  slice=new ColumnSlice(composite(1,2),composite(1,3));
  assertFalse(slice.intersects(columnNames(1,0,0),columnNames(2,1,0),nameType,false));
  slice=new ColumnSlice(composite(1,2,0),composite(1,2,0));
  assertFalse(slice.intersects(columnNames(1,0,0),columnNames(2,1,0),nameType,false));
  slice=new ColumnSlice(composite(1,2),composite(1,2,0));
  assertFalse(slice.intersects(columnNames(1,0,0),columnNames(2,1,0),nameType,false));
  slice=new ColumnSlice(composite(1,2,0),composite(1,2));
  assertFalse(slice.intersects(columnNames(1,0,0),columnNames(2,1,0),nameType,false));
  slice=new ColumnSlice(composite(1,2),composite(1,2));
  assertFalse(slice.intersects(columnNames(1,0,0),columnNames(2,1,0),nameType,false));
  slice=new ColumnSlice(composite(1,1,2),composite(1,1,3));
  assertFalse(slice.intersects(columnNames(1,1,0),columnNames(2,2,1),nameType,false));
  slice=new ColumnSlice(composite(1,0,0),composite(0,0,0));
  assertFalse(slice.intersects(columnNames(2,0,0),columnNames(3,0,0),nameType,true));
  slice=new ColumnSlice(composite(1,0,0),composite(0,0,0));
  assertFalse(slice.intersects(columnNames(1,1,0),columnNames(3,0,0),nameType,true));
  slice=new ColumnSlice(composite(1,1,1),composite(1,1,0));
  assertTrue(slice.intersects(columnNames(1,0,0),columnNames(2,2,2),nameType,true));
}
