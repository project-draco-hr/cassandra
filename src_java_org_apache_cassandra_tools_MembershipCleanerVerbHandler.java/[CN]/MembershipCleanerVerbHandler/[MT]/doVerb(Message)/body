{
  byte[] body=message.getMessageBody();
  try {
    DataInputBuffer bufIn=new DataInputBuffer();
    bufIn.reset(body,body.length);
    MembershipCleaner.MembershipCleanerMessage mcMessage=MembershipCleaner.MembershipCleanerMessage.serializer().deserialize(bufIn);
    String target=mcMessage.getTarget();
    logger_.info("Removing the node [" + target + "] from membership");
    EndPoint targetEndPoint=new EndPoint(target,DatabaseDescriptor.getControlPort());
    StorageService.instance().removeTokenState(targetEndPoint);
    Map<String,byte[]> headers=message.getHeaders();
    headers.remove(StorageService.getLocalStorageEndPoint().getHost());
    if (logger_.isDebugEnabled())     logger_.debug("Number of nodes in the header " + headers.size());
    Set<String> nodes=headers.keySet();
    for (    String node : nodes) {
      if (logger_.isDebugEnabled())       logger_.debug("Processing node " + node);
      headers.remove(node);
      EndPoint targetNode=new EndPoint(node,DatabaseDescriptor.getStoragePort());
      if (logger_.isDebugEnabled())       logger_.debug("Sending a membership clean message to " + targetNode);
      MessagingService.instance().sendOneWay(message,targetNode);
      break;
    }
  }
 catch (  IOException ex) {
    if (logger_.isDebugEnabled())     logger_.debug(LogUtil.throwableToString(ex));
  }
}
