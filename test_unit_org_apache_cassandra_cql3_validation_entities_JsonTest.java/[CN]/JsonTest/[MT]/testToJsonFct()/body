{
  String typeName=createType("CREATE TYPE %s (a int, b uuid, c set<text>)");
  createTable("CREATE TABLE %s (" + "k int PRIMARY KEY, " + "asciival ascii, "+ "bigintval bigint, "+ "blobval blob, "+ "booleanval boolean, "+ "dateval date, "+ "decimalval decimal, "+ "doubleval double, "+ "floatval float, "+ "inetval inet, "+ "intval int, "+ "smallintval smallint, "+ "textval text, "+ "timeval time, "+ "timestampval timestamp, "+ "timeuuidval timeuuid, "+ "tinyintval tinyint, "+ "uuidval uuid,"+ "varcharval varchar, "+ "varintval varint, "+ "listval list<int>, "+ "frozenlistval frozen<list<int>>, "+ "setval set<uuid>, "+ "frozensetval frozen<set<uuid>>, "+ "mapval map<ascii, int>, "+ "frozenmapval frozen<map<ascii, int>>, "+ "tupleval frozen<tuple<int, ascii, uuid>>,"+ "udtval frozen<" + typeName + ">)");
  assertInvalidMessage("toJson() may only be used within the selection clause","INSERT INTO %s (k, asciival) VALUES (?, toJson(?))",0,0);
  assertInvalidMessage("toJson() may only be used within the selection clause","UPDATE %s SET asciival = toJson(?) WHERE k = ?",0,0);
  assertInvalidMessage("toJson() may only be used within the selection clause","DELETE FROM %s WHERE k = fromJson(toJson(?))",0);
  execute("INSERT INTO %s (k, asciival) VALUES (?, ?)",0,"ascii text");
  assertRows(execute("SELECT k, toJson(asciival) FROM %s WHERE k = ?",0),row(0,"\"ascii text\""));
  execute("INSERT INTO %s (k, asciival) VALUES (?, ?)",0,"");
  assertRows(execute("SELECT k, toJson(asciival) FROM %s WHERE k = ?",0),row(0,"\"\""));
  execute("INSERT INTO %s (k, bigintval) VALUES (?, ?)",0,123123123123L);
  assertRows(execute("SELECT k, toJson(bigintval) FROM %s WHERE k = ?",0),row(0,"123123123123"));
  execute("INSERT INTO %s (k, bigintval) VALUES (?, ?)",0,0L);
  assertRows(execute("SELECT k, toJson(bigintval) FROM %s WHERE k = ?",0),row(0,"0"));
  execute("INSERT INTO %s (k, bigintval) VALUES (?, ?)",0,-123123123123L);
  assertRows(execute("SELECT k, toJson(bigintval) FROM %s WHERE k = ?",0),row(0,"-123123123123"));
  execute("INSERT INTO %s (k, blobval) VALUES (?, ?)",0,ByteBufferUtil.bytes(1));
  assertRows(execute("SELECT k, toJson(blobval) FROM %s WHERE k = ?",0),row(0,"\"0x00000001\""));
  execute("INSERT INTO %s (k, blobval) VALUES (?, ?)",0,ByteBufferUtil.EMPTY_BYTE_BUFFER);
  assertRows(execute("SELECT k, toJson(blobval) FROM %s WHERE k = ?",0),row(0,"\"0x\""));
  execute("INSERT INTO %s (k, booleanval) VALUES (?, ?)",0,true);
  assertRows(execute("SELECT k, toJson(booleanval) FROM %s WHERE k = ?",0),row(0,"true"));
  execute("INSERT INTO %s (k, booleanval) VALUES (?, ?)",0,false);
  assertRows(execute("SELECT k, toJson(booleanval) FROM %s WHERE k = ?",0),row(0,"false"));
  execute("INSERT INTO %s (k, dateval) VALUES (?, ?)",0,SimpleDateSerializer.dateStringToDays("1987-03-23"));
  assertRows(execute("SELECT k, toJson(dateval) FROM %s WHERE k = ?",0),row(0,"\"1987-03-23\""));
  execute("INSERT INTO %s (k, decimalval) VALUES (?, ?)",0,new BigDecimal("123123.123123"));
  assertRows(execute("SELECT k, toJson(decimalval) FROM %s WHERE k = ?",0),row(0,"123123.123123"));
  execute("INSERT INTO %s (k, decimalval) VALUES (?, ?)",0,new BigDecimal("-1.23E-12"));
  assertRows(execute("SELECT k, toJson(decimalval) FROM %s WHERE k = ?",0),row(0,"-1.23E-12"));
  execute("INSERT INTO %s (k, doubleval) VALUES (?, ?)",0,123123.123123d);
  assertRows(execute("SELECT k, toJson(doubleval) FROM %s WHERE k = ?",0),row(0,"123123.123123"));
  execute("INSERT INTO %s (k, doubleval) VALUES (?, ?)",0,123123d);
  assertRows(execute("SELECT k, toJson(doubleval) FROM %s WHERE k = ?",0),row(0,"123123.0"));
  execute("INSERT INTO %s (k, floatval) VALUES (?, ?)",0,123.123f);
  assertRows(execute("SELECT k, toJson(floatval) FROM %s WHERE k = ?",0),row(0,"123.123"));
  execute("INSERT INTO %s (k, floatval) VALUES (?, ?)",0,123123f);
  assertRows(execute("SELECT k, toJson(floatval) FROM %s WHERE k = ?",0),row(0,"123123.0"));
  execute("INSERT INTO %s (k, inetval) VALUES (?, ?)",0,InetAddress.getByName("127.0.0.1"));
  assertRows(execute("SELECT k, toJson(inetval) FROM %s WHERE k = ?",0),row(0,"\"127.0.0.1\""));
  execute("INSERT INTO %s (k, inetval) VALUES (?, ?)",0,InetAddress.getByName("::1"));
  assertRows(execute("SELECT k, toJson(inetval) FROM %s WHERE k = ?",0),row(0,"\"0:0:0:0:0:0:0:1\""));
  execute("INSERT INTO %s (k, intval) VALUES (?, ?)",0,123123);
  assertRows(execute("SELECT k, toJson(intval) FROM %s WHERE k = ?",0),row(0,"123123"));
  execute("INSERT INTO %s (k, intval) VALUES (?, ?)",0,0);
  assertRows(execute("SELECT k, toJson(intval) FROM %s WHERE k = ?",0),row(0,"0"));
  execute("INSERT INTO %s (k, intval) VALUES (?, ?)",0,-123123);
  assertRows(execute("SELECT k, toJson(intval) FROM %s WHERE k = ?",0),row(0,"-123123"));
  execute("INSERT INTO %s (k, smallintval) VALUES (?, ?)",0,(short)32767);
  assertRows(execute("SELECT k, toJson(smallintval) FROM %s WHERE k = ?",0),row(0,"32767"));
  execute("INSERT INTO %s (k, smallintval) VALUES (?, ?)",0,(short)0);
  assertRows(execute("SELECT k, toJson(smallintval) FROM %s WHERE k = ?",0),row(0,"0"));
  execute("INSERT INTO %s (k, smallintval) VALUES (?, ?)",0,(short)-32768);
  assertRows(execute("SELECT k, toJson(smallintval) FROM %s WHERE k = ?",0),row(0,"-32768"));
  execute("INSERT INTO %s (k, tinyintval) VALUES (?, ?)",0,(byte)127);
  assertRows(execute("SELECT k, toJson(tinyintval) FROM %s WHERE k = ?",0),row(0,"127"));
  execute("INSERT INTO %s (k, tinyintval) VALUES (?, ?)",0,(byte)0);
  assertRows(execute("SELECT k, toJson(tinyintval) FROM %s WHERE k = ?",0),row(0,"0"));
  execute("INSERT INTO %s (k, tinyintval) VALUES (?, ?)",0,(byte)-128);
  assertRows(execute("SELECT k, toJson(tinyintval) FROM %s WHERE k = ?",0),row(0,"-128"));
  execute("INSERT INTO %s (k, textval) VALUES (?, ?)",0,"");
  assertRows(execute("SELECT k, toJson(textval) FROM %s WHERE k = ?",0),row(0,"\"\""));
  execute("INSERT INTO %s (k, textval) VALUES (?, ?)",0,"abcd");
  assertRows(execute("SELECT k, toJson(textval) FROM %s WHERE k = ?",0),row(0,"\"abcd\""));
  execute("INSERT INTO %s (k, textval) VALUES (?, ?)",0,"\u8422");
  assertRows(execute("SELECT k, toJson(textval) FROM %s WHERE k = ?",0),row(0,"\"\u8422\""));
  execute("INSERT INTO %s (k, textval) VALUES (?, ?)",0,"\u0000");
  assertRows(execute("SELECT k, toJson(textval) FROM %s WHERE k = ?",0),row(0,"\"\\u0000\""));
  execute("INSERT INTO %s (k, timeval) VALUES (?, ?)",0,123L);
  assertRows(execute("SELECT k, toJson(timeval) FROM %s WHERE k = ?",0),row(0,"\"00:00:00.000000123\""));
  SimpleDateFormat sdf=new SimpleDateFormat("y-M-d");
  sdf.setTimeZone(TimeZone.getTimeZone("UDT"));
  execute("INSERT INTO %s (k, timestampval) VALUES (?, ?)",0,sdf.parse("2014-01-01"));
  assertRows(execute("SELECT k, toJson(timestampval) FROM %s WHERE k = ?",0),row(0,"\"2014-01-01 00:00:00.000Z\""));
  execute("INSERT INTO %s (k, timeuuidval) VALUES (?, ?)",0,UUID.fromString("6bddc89a-5644-11e4-97fc-56847afe9799"));
  assertRows(execute("SELECT k, toJson(timeuuidval) FROM %s WHERE k = ?",0),row(0,"\"6bddc89a-5644-11e4-97fc-56847afe9799\""));
  execute("INSERT INTO %s (k, uuidval) VALUES (?, ?)",0,UUID.fromString("6bddc89a-5644-11e4-97fc-56847afe9799"));
  assertRows(execute("SELECT k, toJson(uuidval) FROM %s WHERE k = ?",0),row(0,"\"6bddc89a-5644-11e4-97fc-56847afe9799\""));
  execute("INSERT INTO %s (k, varintval) VALUES (?, ?)",0,new BigInteger("123123123123123123123"));
  assertRows(execute("SELECT k, toJson(varintval) FROM %s WHERE k = ?",0),row(0,"123123123123123123123"));
  execute("INSERT INTO %s (k, listval) VALUES (?, ?)",0,list(1,2,3));
  assertRows(execute("SELECT k, toJson(listval) FROM %s WHERE k = ?",0),row(0,"[1, 2, 3]"));
  execute("INSERT INTO %s (k, listval) VALUES (?, ?)",0,list());
  assertRows(execute("SELECT k, toJson(listval) FROM %s WHERE k = ?",0),row(0,"null"));
  execute("INSERT INTO %s (k, frozenlistval) VALUES (?, ?)",0,list(1,2,3));
  assertRows(execute("SELECT k, toJson(frozenlistval) FROM %s WHERE k = ?",0),row(0,"[1, 2, 3]"));
  execute("INSERT INTO %s (k, setval) VALUES (?, ?)",0,set(UUID.fromString("6bddc89a-5644-11e4-97fc-56847afe9798"),(UUID.fromString("6bddc89a-5644-11e4-97fc-56847afe9799"))));
  assertRows(execute("SELECT k, toJson(setval) FROM %s WHERE k = ?",0),row(0,"[\"6bddc89a-5644-11e4-97fc-56847afe9798\", \"6bddc89a-5644-11e4-97fc-56847afe9799\"]"));
  execute("INSERT INTO %s (k, setval) VALUES (?, ?)",0,set());
  assertRows(execute("SELECT k, toJson(setval) FROM %s WHERE k = ?",0),row(0,"null"));
  execute("INSERT INTO %s (k, frozensetval) VALUES (?, ?)",0,set(UUID.fromString("6bddc89a-5644-11e4-97fc-56847afe9798"),(UUID.fromString("6bddc89a-5644-11e4-97fc-56847afe9799"))));
  assertRows(execute("SELECT k, toJson(frozensetval) FROM %s WHERE k = ?",0),row(0,"[\"6bddc89a-5644-11e4-97fc-56847afe9798\", \"6bddc89a-5644-11e4-97fc-56847afe9799\"]"));
  execute("INSERT INTO %s (k, mapval) VALUES (?, ?)",0,map("a",1,"b",2));
  assertRows(execute("SELECT k, toJson(mapval) FROM %s WHERE k = ?",0),row(0,"{\"a\": 1, \"b\": 2}"));
  execute("INSERT INTO %s (k, mapval) VALUES (?, ?)",0,map());
  assertRows(execute("SELECT k, toJson(mapval) FROM %s WHERE k = ?",0),row(0,"null"));
  execute("INSERT INTO %s (k, frozenmapval) VALUES (?, ?)",0,map("a",1,"b",2));
  assertRows(execute("SELECT k, toJson(frozenmapval) FROM %s WHERE k = ?",0),row(0,"{\"a\": 1, \"b\": 2}"));
  execute("INSERT INTO %s (k, tupleval) VALUES (?, ?)",0,tuple(1,"foobar",UUID.fromString("6bddc89a-5644-11e4-97fc-56847afe9799")));
  assertRows(execute("SELECT k, toJson(tupleval) FROM %s WHERE k = ?",0),row(0,"[1, \"foobar\", \"6bddc89a-5644-11e4-97fc-56847afe9799\"]"));
  execute("INSERT INTO %s (k, tupleval) VALUES (?, ?)",0,tuple(1,"foobar",null));
  assertRows(execute("SELECT k, toJson(tupleval) FROM %s WHERE k = ?",0),row(0,"[1, \"foobar\", null]"));
  execute("INSERT INTO %s (k, udtval) VALUES (?, {a: ?, b: ?, c: ?})",0,1,UUID.fromString("6bddc89a-5644-11e4-97fc-56847afe9799"),set("foo","bar"));
  assertRows(execute("SELECT k, toJson(udtval) FROM %s WHERE k = ?",0),row(0,"{\"a\": 1, \"b\": \"6bddc89a-5644-11e4-97fc-56847afe9799\", \"c\": [\"bar\", \"foo\"]}"));
  execute("INSERT INTO %s (k, udtval) VALUES (?, {a: ?, b: ?})",0,1,UUID.fromString("6bddc89a-5644-11e4-97fc-56847afe9799"));
  assertRows(execute("SELECT k, toJson(udtval) FROM %s WHERE k = ?",0),row(0,"{\"a\": 1, \"b\": \"6bddc89a-5644-11e4-97fc-56847afe9799\", \"c\": null}"));
}
