{
  String typeName=createType("CREATE TYPE %s (a int, b uuid, c set<text>)");
  createTable("CREATE TABLE %s (" + "k int PRIMARY KEY, " + "asciival ascii, "+ "bigintval bigint, "+ "blobval blob, "+ "booleanval boolean, "+ "dateval date, "+ "decimalval decimal, "+ "doubleval double, "+ "floatval float, "+ "inetval inet, "+ "intval int, "+ "smallintval smallint, "+ "textval text, "+ "timeval time, "+ "timestampval timestamp, "+ "timeuuidval timeuuid, "+ "tinyintval tinyint, "+ "uuidval uuid,"+ "varcharval varchar, "+ "varintval varint, "+ "listval list<int>, "+ "frozenlistval frozen<list<int>>, "+ "setval set<uuid>, "+ "frozensetval frozen<set<uuid>>, "+ "mapval map<ascii, int>,"+ "frozenmapval frozen<map<ascii, int>>,"+ "tupleval frozen<tuple<int, ascii, uuid>>,"+ "udtval frozen<" + typeName + ">)");
  assertInvalidMessage("fromJson() cannot be used in the selection clause","SELECT fromJson(asciival) FROM %s",0,0);
  String func1=createFunction(KEYSPACE,"int","CREATE FUNCTION %s (a int) CALLED ON NULL INPUT RETURNS text LANGUAGE java AS $$ return a.toString(); $$");
  createFunctionOverload(func1,"int","CREATE FUNCTION %s (a text) CALLED ON NULL INPUT RETURNS text LANGUAGE java AS $$ return new String(a); $$");
  assertInvalidMessage("Ambiguous call to function","INSERT INTO %s (k, textval) VALUES (?, " + func1 + "(fromJson(?)))",0,"123");
  assertInvalidMessage("Could not decode JSON string '\u038E\u0394\u03B4\u03E0'","INSERT INTO %s (k, asciival) VALUES (?, fromJson(?))",0,"\u038E\u0394\u03B4\u03E0");
  execute("INSERT INTO %s (k, asciival) VALUES (?, fromJson(?))",0,null);
  execute("INSERT INTO %s (k, asciival) VALUES (?, fromJson(?))",0,"\"ascii text\"");
  assertRows(execute("SELECT k, asciival FROM %s WHERE k = ?",0),row(0,"ascii text"));
  execute("INSERT INTO %s (k, asciival) VALUES (?, fromJson(?))",0,"\"ascii \\\" text\"");
  assertRows(execute("SELECT k, asciival FROM %s WHERE k = ?",0),row(0,"ascii \" text"));
  assertInvalidMessage("Invalid ASCII character in string literal","INSERT INTO %s (k, asciival) VALUES (?, fromJson(?))",0,"\"\\u1fff\\u2013\\u33B4\\u2014\"");
  assertInvalidMessage("Expected an ascii string, but got a Integer","INSERT INTO %s (k, asciival) VALUES (?, fromJson(?))",0,"123");
  assertRows(execute("SELECT asciival FROM %s WHERE k = fromJson(?)","0"),row("ascii \" text"));
  execute("UPDATE %s SET asciival = fromJson(?) WHERE k = fromJson(?)","\"ascii \\\" text\"","0");
  execute("DELETE FROM %s WHERE k = fromJson(?)","0");
  execute("INSERT INTO %s (k, bigintval) VALUES (?, fromJson(?))",0,"123123123123");
  assertRows(execute("SELECT k, bigintval FROM %s WHERE k = ?",0),row(0,123123123123L));
  execute("INSERT INTO %s (k, bigintval) VALUES (?, fromJson(?))",0,"\"123123123123\"");
  assertRows(execute("SELECT k, bigintval FROM %s WHERE k = ?",0),row(0,123123123123L));
  assertInvalidMessage("Expected a bigint value, but got a","INSERT INTO %s (k, bigintval) VALUES (?, fromJson(?))",0,"9223372036854775808");
  assertInvalidMessage("Expected a bigint value, but got a","INSERT INTO %s (k, bigintval) VALUES (?, fromJson(?))",0,"123.456");
  assertInvalidMessage("Unable to make long from","INSERT INTO %s (k, bigintval) VALUES (?, fromJson(?))",0,"\"abc\"");
  assertInvalidMessage("Expected a bigint value, but got a","INSERT INTO %s (k, bigintval) VALUES (?, fromJson(?))",0,"[\"abc\"]");
  execute("INSERT INTO %s (k, blobval) VALUES (?, fromJson(?))",0,"\"0x00000001\"");
  assertRows(execute("SELECT k, blobval FROM %s WHERE k = ?",0),row(0,ByteBufferUtil.bytes(1)));
  assertInvalidMessage("Value 'xyzz' is not a valid blob representation","INSERT INTO %s (k, blobval) VALUES (?, fromJson(?))",0,"\"xyzz\"");
  assertInvalidMessage("String representation of blob is missing 0x prefix: 123","INSERT INTO %s (k, blobval) VALUES (?, fromJson(?))",0,"\"123\"");
  assertInvalidMessage("Value '0x123' is not a valid blob representation","INSERT INTO %s (k, blobval) VALUES (?, fromJson(?))",0,"\"0x123\"");
  assertInvalidMessage("Value '123' is not a valid blob representation","INSERT INTO %s (k, blobval) VALUES (?, fromJson(?))",0,"123");
  execute("INSERT INTO %s (k, booleanval) VALUES (?, fromJson(?))",0,"true");
  assertRows(execute("SELECT k, booleanval FROM %s WHERE k = ?",0),row(0,true));
  execute("INSERT INTO %s (k, booleanval) VALUES (?, fromJson(?))",0,"false");
  assertRows(execute("SELECT k, booleanval FROM %s WHERE k = ?",0),row(0,false));
  execute("INSERT INTO %s (k, booleanval) VALUES (?, fromJson(?))",0,"\"false\"");
  assertRows(execute("SELECT k, booleanval FROM %s WHERE k = ?",0),row(0,false));
  assertInvalidMessage("Unable to make boolean from","INSERT INTO %s (k, booleanval) VALUES (?, fromJson(?))",0,"\"abc\"");
  assertInvalidMessage("Expected a boolean value, but got a Integer","INSERT INTO %s (k, booleanval) VALUES (?, fromJson(?))",0,"123");
  execute("INSERT INTO %s (k, dateval) VALUES (?, fromJson(?))",0,"\"1987-03-23\"");
  assertRows(execute("SELECT k, dateval FROM %s WHERE k = ?",0),row(0,SimpleDateSerializer.dateStringToDays("1987-03-23")));
  assertInvalidMessage("Expected a string representation of a date","INSERT INTO %s (k, dateval) VALUES (?, fromJson(?))",0,"123");
  assertInvalidMessage("Unable to coerce 'xyz' to a formatted date","INSERT INTO %s (k, dateval) VALUES (?, fromJson(?))",0,"\"xyz\"");
  execute("INSERT INTO %s (k, decimalval) VALUES (?, fromJson(?))",0,"123123.123123");
  assertRows(execute("SELECT k, decimalval FROM %s WHERE k = ?",0),row(0,new BigDecimal("123123.123123")));
  execute("INSERT INTO %s (k, decimalval) VALUES (?, fromJson(?))",0,"123123");
  assertRows(execute("SELECT k, decimalval FROM %s WHERE k = ?",0),row(0,new BigDecimal("123123")));
  execute("INSERT INTO %s (k, decimalval) VALUES (?, fromJson(?))",0,"\"123123.123123\"");
  assertRows(execute("SELECT k, decimalval FROM %s WHERE k = ?",0),row(0,new BigDecimal("123123.123123")));
  execute("INSERT INTO %s (k, decimalval) VALUES (?, fromJson(?))",0,"\"-1.23E-12\"");
  assertRows(execute("SELECT k, decimalval FROM %s WHERE k = ?",0),row(0,new BigDecimal("-1.23E-12")));
  assertInvalidMessage("Value 'xyzz' is not a valid representation of a decimal value","INSERT INTO %s (k, decimalval) VALUES (?, fromJson(?))",0,"\"xyzz\"");
  assertInvalidMessage("Value 'true' is not a valid representation of a decimal value","INSERT INTO %s (k, decimalval) VALUES (?, fromJson(?))",0,"true");
  execute("INSERT INTO %s (k, doubleval) VALUES (?, fromJson(?))",0,"123123.123123");
  assertRows(execute("SELECT k, doubleval FROM %s WHERE k = ?",0),row(0,123123.123123d));
  execute("INSERT INTO %s (k, doubleval) VALUES (?, fromJson(?))",0,"123123");
  assertRows(execute("SELECT k, doubleval FROM %s WHERE k = ?",0),row(0,123123.0d));
  execute("INSERT INTO %s (k, doubleval) VALUES (?, fromJson(?))",0,"\"123123\"");
  assertRows(execute("SELECT k, doubleval FROM %s WHERE k = ?",0),row(0,123123.0d));
  assertInvalidMessage("Unable to make double from","INSERT INTO %s (k, doubleval) VALUES (?, fromJson(?))",0,"\"xyzz\"");
  assertInvalidMessage("Expected a double value, but got","INSERT INTO %s (k, doubleval) VALUES (?, fromJson(?))",0,"true");
  execute("INSERT INTO %s (k, floatval) VALUES (?, fromJson(?))",0,"123123.123123");
  assertRows(execute("SELECT k, floatval FROM %s WHERE k = ?",0),row(0,123123.123123f));
  execute("INSERT INTO %s (k, floatval) VALUES (?, fromJson(?))",0,"123123");
  assertRows(execute("SELECT k, floatval FROM %s WHERE k = ?",0),row(0,123123.0f));
  execute("INSERT INTO %s (k, floatval) VALUES (?, fromJson(?))",0,"\"123123.0\"");
  assertRows(execute("SELECT k, floatval FROM %s WHERE k = ?",0),row(0,123123.0f));
  assertInvalidMessage("Unable to make float from","INSERT INTO %s (k, floatval) VALUES (?, fromJson(?))",0,"\"xyzz\"");
  assertInvalidMessage("Expected a float value, but got a","INSERT INTO %s (k, floatval) VALUES (?, fromJson(?))",0,"true");
  execute("INSERT INTO %s (k, inetval) VALUES (?, fromJson(?))",0,"\"127.0.0.1\"");
  assertRows(execute("SELECT k, inetval FROM %s WHERE k = ?",0),row(0,InetAddress.getByName("127.0.0.1")));
  execute("INSERT INTO %s (k, inetval) VALUES (?, fromJson(?))",0,"\"::1\"");
  assertRows(execute("SELECT k, inetval FROM %s WHERE k = ?",0),row(0,InetAddress.getByName("::1")));
  assertInvalidMessage("Unable to make inet address from 'xyzz'","INSERT INTO %s (k, inetval) VALUES (?, fromJson(?))",0,"\"xyzz\"");
  assertInvalidMessage("Expected a string representation of an inet value, but got a Integer","INSERT INTO %s (k, inetval) VALUES (?, fromJson(?))",0,"123");
  execute("INSERT INTO %s (k, intval) VALUES (?, fromJson(?))",0,"123123");
  assertRows(execute("SELECT k, intval FROM %s WHERE k = ?",0),row(0,123123));
  execute("INSERT INTO %s (k, intval) VALUES (?, fromJson(?))",0,"\"123123\"");
  assertRows(execute("SELECT k, intval FROM %s WHERE k = ?",0),row(0,123123));
  assertInvalidMessage("Expected an int value, but got a","INSERT INTO %s (k, intval) VALUES (?, fromJson(?))",0,"2147483648");
  assertInvalidMessage("Expected an int value, but got a","INSERT INTO %s (k, intval) VALUES (?, fromJson(?))",0,"123.456");
  assertInvalidMessage("Unable to make int from","INSERT INTO %s (k, intval) VALUES (?, fromJson(?))",0,"\"xyzz\"");
  assertInvalidMessage("Expected an int value, but got a","INSERT INTO %s (k, intval) VALUES (?, fromJson(?))",0,"true");
  execute("INSERT INTO %s (k, smallintval) VALUES (?, fromJson(?))",0,"32767");
  assertRows(execute("SELECT k, smallintval FROM %s WHERE k = ?",0),row(0,(short)32767));
  execute("INSERT INTO %s (k, smallintval) VALUES (?, fromJson(?))",0,"\"32767\"");
  assertRows(execute("SELECT k, smallintval FROM %s WHERE k = ?",0),row(0,(short)32767));
  assertInvalidMessage("Unable to make short from","INSERT INTO %s (k, smallintval) VALUES (?, fromJson(?))",0,"32768");
  assertInvalidMessage("Unable to make short from","INSERT INTO %s (k, smallintval) VALUES (?, fromJson(?))",0,"123.456");
  assertInvalidMessage("Unable to make short from","INSERT INTO %s (k, smallintval) VALUES (?, fromJson(?))",0,"\"xyzz\"");
  assertInvalidMessage("Expected a short value, but got a Boolean","INSERT INTO %s (k, smallintval) VALUES (?, fromJson(?))",0,"true");
  execute("INSERT INTO %s (k, tinyintval) VALUES (?, fromJson(?))",0,"127");
  assertRows(execute("SELECT k, tinyintval FROM %s WHERE k = ?",0),row(0,(byte)127));
  execute("INSERT INTO %s (k, tinyintval) VALUES (?, fromJson(?))",0,"\"127\"");
  assertRows(execute("SELECT k, tinyintval FROM %s WHERE k = ?",0),row(0,(byte)127));
  assertInvalidMessage("Unable to make byte from","INSERT INTO %s (k, tinyintval) VALUES (?, fromJson(?))",0,"128");
  assertInvalidMessage("Unable to make byte from","INSERT INTO %s (k, tinyintval) VALUES (?, fromJson(?))",0,"123.456");
  assertInvalidMessage("Unable to make byte from","INSERT INTO %s (k, tinyintval) VALUES (?, fromJson(?))",0,"\"xyzz\"");
  assertInvalidMessage("Expected a byte value, but got a Boolean","INSERT INTO %s (k, tinyintval) VALUES (?, fromJson(?))",0,"true");
  execute("INSERT INTO %s (k, textval) VALUES (?, fromJson(?))",0,"\"\"");
  assertRows(execute("SELECT k, textval FROM %s WHERE k = ?",0),row(0,""));
  execute("INSERT INTO %s (k, textval) VALUES (?, fromJson(?))",0,"\"abcd\"");
  assertRows(execute("SELECT k, textval FROM %s WHERE k = ?",0),row(0,"abcd"));
  execute("INSERT INTO %s (k, textval) VALUES (?, fromJson(?))",0,"\"some \\\" text\"");
  assertRows(execute("SELECT k, textval FROM %s WHERE k = ?",0),row(0,"some \" text"));
  execute("INSERT INTO %s (k, textval) VALUES (?, fromJson(?))",0,"\"\\u2013\"");
  assertRows(execute("SELECT k, textval FROM %s WHERE k = ?",0),row(0,"\u2013"));
  assertInvalidMessage("Expected a UTF-8 string, but got a Integer","INSERT INTO %s (k, textval) VALUES (?, fromJson(?))",0,"123");
  execute("INSERT INTO %s (k, timeval) VALUES (?, fromJson(?))",0,"\"07:35:07.000111222\"");
  assertRows(execute("SELECT k, timeval FROM %s WHERE k = ?",0),row(0,TimeSerializer.timeStringToLong("07:35:07.000111222")));
  assertInvalidMessage("Expected a string representation of a time value","INSERT INTO %s (k, timeval) VALUES (?, fromJson(?))",0,"123456");
  assertInvalidMessage("Unable to coerce 'xyz' to a formatted time","INSERT INTO %s (k, timeval) VALUES (?, fromJson(?))",0,"\"xyz\"");
  execute("INSERT INTO %s (k, timestampval) VALUES (?, fromJson(?))",0,"123123123123");
  assertRows(execute("SELECT k, timestampval FROM %s WHERE k = ?",0),row(0,new Date(123123123123L)));
  execute("INSERT INTO %s (k, timestampval) VALUES (?, fromJson(?))",0,"\"2014-01-01\"");
  assertRows(execute("SELECT k, timestampval FROM %s WHERE k = ?",0),row(0,new SimpleDateFormat("y-M-d").parse("2014-01-01")));
  assertInvalidMessage("Expected a long or a datestring representation of a timestamp value, but got a Double","INSERT INTO %s (k, timestampval) VALUES (?, fromJson(?))",0,"123.456");
  assertInvalidMessage("Unable to coerce 'abcd' to a formatted date","INSERT INTO %s (k, timestampval) VALUES (?, fromJson(?))",0,"\"abcd\"");
  execute("INSERT INTO %s (k, timeuuidval) VALUES (?, fromJson(?))",0,"\"6bddc89a-5644-11e4-97fc-56847afe9799\"");
  assertRows(execute("SELECT k, timeuuidval FROM %s WHERE k = ?",0),row(0,UUID.fromString("6bddc89a-5644-11e4-97fc-56847afe9799")));
  execute("INSERT INTO %s (k, timeuuidval) VALUES (?, fromJson(?))",0,"\"6BDDC89A-5644-11E4-97FC-56847AFE9799\"");
  assertRows(execute("SELECT k, timeuuidval FROM %s WHERE k = ?",0),row(0,UUID.fromString("6bddc89a-5644-11e4-97fc-56847afe9799")));
  assertInvalidMessage("TimeUUID supports only version 1 UUIDs","INSERT INTO %s (k, timeuuidval) VALUES (?, fromJson(?))",0,"\"00000000-0000-0000-0000-000000000000\"");
  assertInvalidMessage("Expected a string representation of a timeuuid, but got a Integer","INSERT INTO %s (k, timeuuidval) VALUES (?, fromJson(?))",0,"123");
  execute("INSERT INTO %s (k, uuidval) VALUES (?, fromJson(?))",0,"\"6bddc89a-5644-11e4-97fc-56847afe9799\"");
  assertRows(execute("SELECT k, uuidval FROM %s WHERE k = ?",0),row(0,UUID.fromString("6bddc89a-5644-11e4-97fc-56847afe9799")));
  execute("INSERT INTO %s (k, uuidval) VALUES (?, fromJson(?))",0,"\"6BDDC89A-5644-11E4-97FC-56847AFE9799\"");
  assertRows(execute("SELECT k, uuidval FROM %s WHERE k = ?",0),row(0,UUID.fromString("6bddc89a-5644-11e4-97fc-56847afe9799")));
  assertInvalidMessage("Unable to make UUID from","INSERT INTO %s (k, uuidval) VALUES (?, fromJson(?))",0,"\"00000000-0000-0000-zzzz-000000000000\"");
  assertInvalidMessage("Expected a string representation of a uuid, but got a Integer","INSERT INTO %s (k, uuidval) VALUES (?, fromJson(?))",0,"123");
  execute("INSERT INTO %s (k, varintval) VALUES (?, fromJson(?))",0,"123123123123");
  assertRows(execute("SELECT k, varintval FROM %s WHERE k = ?",0),row(0,new BigInteger("123123123123")));
  execute("INSERT INTO %s (k, varintval) VALUES (?, fromJson(?))",0,"\"1234567890123456789012345678901234567890\"");
  assertRows(execute("SELECT k, varintval FROM %s WHERE k = ?",0),row(0,new BigInteger("1234567890123456789012345678901234567890")));
  assertInvalidMessage("Value '123123.123' is not a valid representation of a varint value","INSERT INTO %s (k, varintval) VALUES (?, fromJson(?))",0,"123123.123");
  assertInvalidMessage("Value 'xyzz' is not a valid representation of a varint value","INSERT INTO %s (k, varintval) VALUES (?, fromJson(?))",0,"\"xyzz\"");
  assertInvalidMessage("Value '' is not a valid representation of a varint value","INSERT INTO %s (k, varintval) VALUES (?, fromJson(?))",0,"\"\"");
  assertInvalidMessage("Value 'true' is not a valid representation of a varint value","INSERT INTO %s (k, varintval) VALUES (?, fromJson(?))",0,"true");
  execute("INSERT INTO %s (k, listval) VALUES (?, fromJson(?))",0,"[1, 2, 3]");
  assertRows(execute("SELECT k, listval FROM %s WHERE k = ?",0),row(0,list(1,2,3)));
  execute("INSERT INTO %s (k, listval) VALUES (?, fromJson(?))",0,"[]");
  assertRows(execute("SELECT k, listval FROM %s WHERE k = ?",0),row(0,null));
  assertInvalidMessage("Expected a list, but got a Integer","INSERT INTO %s (k, listval) VALUES (?, fromJson(?))",0,"123");
  assertInvalidMessage("Unable to make int from","INSERT INTO %s (k, listval) VALUES (?, fromJson(?))",0,"[\"abc\"]");
  assertInvalidMessage("Invalid null element in list","INSERT INTO %s (k, listval) VALUES (?, fromJson(?))",0,"[null]");
  execute("INSERT INTO %s (k, frozenlistval) VALUES (?, fromJson(?))",0,"[1, 2, 3]");
  assertRows(execute("SELECT k, frozenlistval FROM %s WHERE k = ?",0),row(0,list(1,2,3)));
  execute("INSERT INTO %s (k, setval) VALUES (?, fromJson(?))",0,"[\"6bddc89a-5644-11e4-97fc-56847afe9798\", \"6bddc89a-5644-11e4-97fc-56847afe9799\"]");
  assertRows(execute("SELECT k, setval FROM %s WHERE k = ?",0),row(0,set(UUID.fromString("6bddc89a-5644-11e4-97fc-56847afe9798"),(UUID.fromString("6bddc89a-5644-11e4-97fc-56847afe9799")))));
  execute("INSERT INTO %s (k, setval) VALUES (?, fromJson(?))",0,"[\"6bddc89a-5644-11e4-97fc-56847afe9798\", \"6bddc89a-5644-11e4-97fc-56847afe9798\", \"6bddc89a-5644-11e4-97fc-56847afe9799\"]");
  assertRows(execute("SELECT k, setval FROM %s WHERE k = ?",0),row(0,set(UUID.fromString("6bddc89a-5644-11e4-97fc-56847afe9798"),(UUID.fromString("6bddc89a-5644-11e4-97fc-56847afe9799")))));
  execute("INSERT INTO %s (k, setval) VALUES (?, fromJson(?))",0,"[]");
  assertRows(execute("SELECT k, setval FROM %s WHERE k = ?",0),row(0,null));
  assertInvalidMessage("Expected a list (representing a set), but got a Integer","INSERT INTO %s (k, setval) VALUES (?, fromJson(?))",0,"123");
  assertInvalidMessage("Unable to make UUID from","INSERT INTO %s (k, setval) VALUES (?, fromJson(?))",0,"[\"abc\"]");
  assertInvalidMessage("Invalid null element in set","INSERT INTO %s (k, setval) VALUES (?, fromJson(?))",0,"[null]");
  execute("INSERT INTO %s (k, frozensetval) VALUES (?, fromJson(?))",0,"[\"6bddc89a-5644-11e4-97fc-56847afe9798\", \"6bddc89a-5644-11e4-97fc-56847afe9799\"]");
  assertRows(execute("SELECT k, frozensetval FROM %s WHERE k = ?",0),row(0,set(UUID.fromString("6bddc89a-5644-11e4-97fc-56847afe9798"),(UUID.fromString("6bddc89a-5644-11e4-97fc-56847afe9799")))));
  execute("INSERT INTO %s (k, frozensetval) VALUES (?, fromJson(?))",0,"[\"6bddc89a-5644-11e4-97fc-56847afe9799\", \"6bddc89a-5644-11e4-97fc-56847afe9798\"]");
  assertRows(execute("SELECT k, frozensetval FROM %s WHERE k = ?",0),row(0,set(UUID.fromString("6bddc89a-5644-11e4-97fc-56847afe9798"),(UUID.fromString("6bddc89a-5644-11e4-97fc-56847afe9799")))));
  execute("INSERT INTO %s (k, mapval) VALUES (?, fromJson(?))",0,"{\"a\": 1, \"b\": 2}");
  assertRows(execute("SELECT k, mapval FROM %s WHERE k = ?",0),row(0,map("a",1,"b",2)));
  execute("INSERT INTO %s (k, mapval) VALUES (?, fromJson(?))",0,"{}");
  assertRows(execute("SELECT k, mapval FROM %s WHERE k = ?",0),row(0,null));
  assertInvalidMessage("Expected a map, but got a Integer","INSERT INTO %s (k, mapval) VALUES (?, fromJson(?))",0,"123");
  assertInvalidMessage("Invalid ASCII character in string literal","INSERT INTO %s (k, mapval) VALUES (?, fromJson(?))",0,"{\"\\u1fff\\u2013\\u33B4\\u2014\": 1}");
  assertInvalidMessage("Invalid null value in map","INSERT INTO %s (k, mapval) VALUES (?, fromJson(?))",0,"{\"a\": null}");
  execute("INSERT INTO %s (k, frozenmapval) VALUES (?, fromJson(?))",0,"{\"a\": 1, \"b\": 2}");
  assertRows(execute("SELECT k, frozenmapval FROM %s WHERE k = ?",0),row(0,map("a",1,"b",2)));
  execute("INSERT INTO %s (k, frozenmapval) VALUES (?, fromJson(?))",0,"{\"b\": 2, \"a\": 1}");
  assertRows(execute("SELECT k, frozenmapval FROM %s WHERE k = ?",0),row(0,map("a",1,"b",2)));
  execute("INSERT INTO %s (k, tupleval) VALUES (?, fromJson(?))",0,"[1, \"foobar\", \"6bddc89a-5644-11e4-97fc-56847afe9799\"]");
  assertRows(execute("SELECT k, tupleval FROM %s WHERE k = ?",0),row(0,tuple(1,"foobar",UUID.fromString("6bddc89a-5644-11e4-97fc-56847afe9799"))));
  execute("INSERT INTO %s (k, tupleval) VALUES (?, fromJson(?))",0,"[1, null, \"6bddc89a-5644-11e4-97fc-56847afe9799\"]");
  assertRows(execute("SELECT k, tupleval FROM %s WHERE k = ?",0),row(0,tuple(1,null,UUID.fromString("6bddc89a-5644-11e4-97fc-56847afe9799"))));
  assertInvalidMessage("Tuple contains extra items","INSERT INTO %s (k, tupleval) VALUES (?, fromJson(?))",0,"[1, \"foobar\", \"6bddc89a-5644-11e4-97fc-56847afe9799\", 1, 2, 3]");
  assertInvalidMessage("Tuple is missing items","INSERT INTO %s (k, tupleval) VALUES (?, fromJson(?))",0,"[1, \"foobar\"]");
  assertInvalidMessage("Unable to make int from","INSERT INTO %s (k, tupleval) VALUES (?, fromJson(?))",0,"[\"not an int\", \"foobar\", \"6bddc89a-5644-11e4-97fc-56847afe9799\"]");
  execute("INSERT INTO %s (k, udtval) VALUES (?, fromJson(?))",0,"{\"a\": 1, \"b\": \"6bddc89a-5644-11e4-97fc-56847afe9799\", \"c\": [\"foo\", \"bar\"]}");
  assertRows(execute("SELECT k, udtval.a, udtval.b, udtval.c FROM %s WHERE k = ?",0),row(0,1,UUID.fromString("6bddc89a-5644-11e4-97fc-56847afe9799"),set("bar","foo")));
  execute("INSERT INTO %s (k, udtval) VALUES (?, fromJson(?))",0,"{\"b\": \"6bddc89a-5644-11e4-97fc-56847afe9799\", \"a\": 1, \"c\": [\"foo\", \"bar\"]}");
  assertRows(execute("SELECT k, udtval.a, udtval.b, udtval.c FROM %s WHERE k = ?",0),row(0,1,UUID.fromString("6bddc89a-5644-11e4-97fc-56847afe9799"),set("bar","foo")));
  execute("INSERT INTO %s (k, udtval) VALUES (?, fromJson(?))",0,"{\"a\": null, \"b\": \"6bddc89a-5644-11e4-97fc-56847afe9799\", \"c\": [\"foo\", \"bar\"]}");
  assertRows(execute("SELECT k, udtval.a, udtval.b, udtval.c FROM %s WHERE k = ?",0),row(0,null,UUID.fromString("6bddc89a-5644-11e4-97fc-56847afe9799"),set("bar","foo")));
  execute("INSERT INTO %s (k, udtval) VALUES (?, fromJson(?))",0,"{\"a\": 1, \"b\": \"6bddc89a-5644-11e4-97fc-56847afe9799\"}");
  assertRows(execute("SELECT k, udtval.a, udtval.b, udtval.c FROM %s WHERE k = ?",0),row(0,1,UUID.fromString("6bddc89a-5644-11e4-97fc-56847afe9799"),null));
  assertInvalidMessage("Unknown field","INSERT INTO %s (k, udtval) VALUES (?, fromJson(?))",0,"{\"xxx\": 1}");
  assertInvalidMessage("Unable to make int from","INSERT INTO %s (k, udtval) VALUES (?, fromJson(?))",0,"{\"a\": \"foobar\"}");
}
