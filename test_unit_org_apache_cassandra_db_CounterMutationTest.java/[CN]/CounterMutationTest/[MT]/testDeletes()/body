{
  ColumnFamilyStore cfs=Keyspace.open(KEYSPACE1).getColumnFamilyStore(CF1);
  cfs.truncateBlocking();
  ColumnDefinition cOne=cfs.metadata.getColumnDefinition(ByteBufferUtil.bytes("val"));
  ColumnDefinition cTwo=cfs.metadata.getColumnDefinition(ByteBufferUtil.bytes("val2"));
  new CounterMutation(new RowUpdateBuilder(cfs.metadata,5,"key1").clustering("cc").add("val",1L).add("val2",-1L).build(),ConsistencyLevel.ONE).apply();
  Row row=Util.getOnlyRow(Util.cmd(cfs).includeRow("cc").columns("val","val2").build());
  assertEquals(1L,CounterContext.instance().total(row.getCell(cOne).value()));
  assertEquals(-1L,CounterContext.instance().total(row.getCell(cTwo).value()));
  new CounterMutation(new RowUpdateBuilder(cfs.metadata,5,"key1").clustering("cc").delete(cOne).add("val2",-5L).build(),ConsistencyLevel.ONE).apply();
  row=Util.getOnlyRow(Util.cmd(cfs).includeRow("cc").columns("val","val2").build());
  assertEquals(null,row.getCell(cOne));
  assertEquals(-6L,CounterContext.instance().total(row.getCell(cTwo).value()));
  new CounterMutation(new RowUpdateBuilder(cfs.metadata,5,"key1").clustering("cc").add("val",1L).build(),ConsistencyLevel.ONE).apply();
  row=Util.getOnlyRow(Util.cmd(cfs).includeRow("cc").columns("val","val2").build());
  assertEquals(null,row.getCell(cOne));
  RowUpdateBuilder.deleteRow(cfs.metadata,6,"key1","cc").applyUnsafe();
  Util.assertEmpty(Util.cmd(cfs).includeRow("cc").columns("val","val2").build());
  new CounterMutation(new RowUpdateBuilder(cfs.metadata,6,"key1").clustering("cc").add("val",1L).add("val2",1L).build(),ConsistencyLevel.ONE).apply();
  Util.assertEmpty(Util.cmd(cfs).includeRow("cc").columns("val","val2").build());
}
