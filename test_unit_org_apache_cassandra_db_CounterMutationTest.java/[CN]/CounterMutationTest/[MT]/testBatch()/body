{
  ColumnFamilyStore cfs1=Keyspace.open(KS).getColumnFamilyStore(CF1);
  ColumnFamilyStore cfs2=Keyspace.open(KS).getColumnFamilyStore(CF2);
  cfs1.truncateBlocking();
  cfs2.truncateBlocking();
  ColumnFamily cells1=ArrayBackedSortedColumns.factory.create(cfs1.metadata);
  cells1.addCounter(cellname(1),1L);
  cells1.addCounter(cellname(2),-1L);
  ColumnFamily cells2=ArrayBackedSortedColumns.factory.create(cfs2.metadata);
  cells2.addCounter(cellname(1),2L);
  cells2.addCounter(cellname(2),-2L);
  Mutation mutation=new Mutation(KS,bytes(1));
  mutation.add(cells1);
  mutation.add(cells2);
  new CounterMutation(mutation,ConsistencyLevel.ONE).apply();
  ColumnFamily current1=cfs1.getColumnFamily(QueryFilter.getIdentityFilter(dk(bytes(1)),CF1,System.currentTimeMillis()));
  ColumnFamily current2=cfs2.getColumnFamily(QueryFilter.getIdentityFilter(dk(bytes(1)),CF2,System.currentTimeMillis()));
  assertEquals(1L,CounterContext.instance().total(current1.getColumn(cellname(1)).value()));
  assertEquals(-1L,CounterContext.instance().total(current1.getColumn(cellname(2)).value()));
  assertEquals(2L,CounterContext.instance().total(current2.getColumn(cellname(1)).value()));
  assertEquals(-2L,CounterContext.instance().total(current2.getColumn(cellname(2)).value()));
  assertEquals(ClockAndCount.create(1L,1L),cfs1.getCachedCounter(bytes(1),cellname(1)));
  assertEquals(ClockAndCount.create(1L,-1L),cfs1.getCachedCounter(bytes(1),cellname(2)));
  assertEquals(ClockAndCount.create(1L,2L),cfs2.getCachedCounter(bytes(1),cellname(1)));
  assertEquals(ClockAndCount.create(1L,-2L),cfs2.getCachedCounter(bytes(1),cellname(2)));
}
