{
  ColumnFamilyStore cfsOne=Keyspace.open(KEYSPACE1).getColumnFamilyStore(CF1);
  ColumnFamilyStore cfsTwo=Keyspace.open(KEYSPACE1).getColumnFamilyStore(CF2);
  cfsOne.truncateBlocking();
  cfsTwo.truncateBlocking();
  Mutation batch=new Mutation(KEYSPACE1,Util.dk("key1"));
  batch.add(new RowUpdateBuilder(cfsOne.metadata,5,"key1").clustering("cc").add("val",1L).add("val2",-1L).build().get(cfsOne.metadata));
  batch.add(new RowUpdateBuilder(cfsTwo.metadata,5,"key1").clustering("cc").add("val",2L).add("val2",-2L).build().get(cfsTwo.metadata));
  new CounterMutation(batch,ConsistencyLevel.ONE).apply();
  ColumnDefinition c1cfs1=cfsOne.metadata.getColumnDefinition(ByteBufferUtil.bytes("val"));
  ColumnDefinition c2cfs1=cfsOne.metadata.getColumnDefinition(ByteBufferUtil.bytes("val2"));
  Row row=Util.getOnlyRow(Util.cmd(cfsOne).includeRow("cc").columns("val","val2").build());
  assertEquals(1L,CounterContext.instance().total(row.getCell(c1cfs1).value()));
  assertEquals(-1L,CounterContext.instance().total(row.getCell(c2cfs1).value()));
  ColumnDefinition c1cfs2=cfsTwo.metadata.getColumnDefinition(ByteBufferUtil.bytes("val"));
  ColumnDefinition c2cfs2=cfsTwo.metadata.getColumnDefinition(ByteBufferUtil.bytes("val2"));
  row=Util.getOnlyRow(Util.cmd(cfsTwo).includeRow("cc").columns("val","val2").build());
  assertEquals(2L,CounterContext.instance().total(row.getCell(c1cfs2).value()));
  assertEquals(-2L,CounterContext.instance().total(row.getCell(c2cfs2).value()));
  CBuilder cb=CBuilder.create(cfsOne.metadata.comparator);
  cb.add("cc");
  assertEquals(ClockAndCount.create(1L,1L),cfsOne.getCachedCounter(Util.dk("key1").getKey(),cb.build(),c1cfs1,null));
  assertEquals(ClockAndCount.create(1L,-1L),cfsOne.getCachedCounter(Util.dk("key1").getKey(),cb.build(),c2cfs1,null));
  assertEquals(ClockAndCount.create(1L,2L),cfsTwo.getCachedCounter(Util.dk("key1").getKey(),cb.build(),c1cfs2,null));
  assertEquals(ClockAndCount.create(1L,-2L),cfsTwo.getCachedCounter(Util.dk("key1").getKey(),cb.build(),c2cfs2,null));
}
