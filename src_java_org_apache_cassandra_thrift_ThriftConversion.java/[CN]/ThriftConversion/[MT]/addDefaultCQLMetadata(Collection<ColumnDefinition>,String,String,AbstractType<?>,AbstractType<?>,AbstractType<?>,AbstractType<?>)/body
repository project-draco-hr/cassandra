{
  CompactTables.DefaultNames names=CompactTables.defaultNameGenerator(defs);
  if (keyValidator != null) {
    if (keyValidator instanceof CompositeType) {
      List<AbstractType<?>> subTypes=((CompositeType)keyValidator).types;
      for (int i=0; i < subTypes.size(); i++)       defs.add(ColumnDefinition.partitionKeyDef(ks,cf,names.defaultPartitionKeyName(),subTypes.get(i),i));
    }
 else {
      defs.add(ColumnDefinition.partitionKeyDef(ks,cf,names.defaultPartitionKeyName(),keyValidator,null));
    }
  }
  if (subComparator != null) {
    defs.add(ColumnDefinition.clusteringKeyDef(ks,cf,names.defaultClusteringName(),comparator,0));
    defs.add(ColumnDefinition.regularDef(ks,cf,CompactTables.SUPER_COLUMN_MAP_COLUMN_STR,MapType.getInstance(subComparator,defaultValidator,true),null));
  }
 else {
    List<AbstractType<?>> subTypes=comparator instanceof CompositeType ? ((CompositeType)comparator).types : Collections.<AbstractType<?>>singletonList(comparator);
    for (int i=0; i < subTypes.size(); i++)     defs.add(ColumnDefinition.clusteringKeyDef(ks,cf,names.defaultClusteringName(),subTypes.get(i),i));
    defs.add(ColumnDefinition.regularDef(ks,cf,names.defaultCompactValueName(),defaultValidator,null));
  }
}
