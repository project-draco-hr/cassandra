{
  PoolingOptions poolingOpts=new PoolingOptions();
  poolingOpts.setCoreConnectionsPerHost(HostDistance.LOCAL,8);
  Cluster.Builder clusterBuilder=Cluster.builder().addContactPoint(host).withPort(port).withPoolingOptions(poolingOpts).withProtocolVersion(ProtocolVersion.NEWEST_SUPPORTED).withoutMetrics();
  if (whitelist != null)   clusterBuilder.withLoadBalancingPolicy(whitelist);
  clusterBuilder.withCompression(compression);
  if (encryptionOptions.enabled) {
    SSLContext sslContext;
    sslContext=SSLFactory.createSSLContext(encryptionOptions,true);
    SSLOptions sslOptions=new SSLOptions(sslContext,encryptionOptions.cipher_suites);
    clusterBuilder.withSSL(sslOptions);
  }
  if (authProvider != null) {
    clusterBuilder.withAuthProvider(authProvider);
  }
 else   if (username != null) {
    clusterBuilder.withCredentials(username,password);
  }
  cluster=clusterBuilder.build();
  Metadata metadata=cluster.getMetadata();
  System.out.printf("Connected to cluster: %s%n",metadata.getClusterName());
  for (  Host host : metadata.getAllHosts()) {
    System.out.printf("Datatacenter: %s; Host: %s; Rack: %s%n",host.getDatacenter(),host.getAddress(),host.getRack());
  }
  session=cluster.connect();
}
