{
  byte[] bytes=message.getMessageBody();
  ByteArrayInputStream buffer=new ByteArrayInputStream(bytes);
  try {
    Truncation t=Truncation.serializer().deserialize(new DataInputStream(buffer),message.getVersion());
    logger.debug("Applying {}",t);
    try {
      Table.open(t.keyspace).truncate(t.columnFamily);
    }
 catch (    IOException e) {
      logger.error("Error in truncation",e);
      respondError(t,message);
      throw e;
    }
catch (    InterruptedException e) {
      logger.error("Error in truncation",e);
      respondError(t,message);
      throw e;
    }
catch (    ExecutionException e) {
      logger.error("Error in truncation",e);
      respondError(t,message);
      throw e;
    }
    logger.debug("Truncate operation succeeded at this host");
    TruncateResponse response=new TruncateResponse(t.keyspace,t.columnFamily,true);
    Message responseMessage=TruncateResponse.makeTruncateResponseMessage(message,response);
    logger.debug("{} applied.  Sending response to {}@{} ",new Object[]{t,id,message.getFrom()});
    MessagingService.instance().sendReply(responseMessage,id,message.getFrom());
  }
 catch (  IOException e) {
    logger.error("Error in truncation",e);
    throw new RuntimeException("Error in truncation",e);
  }
catch (  InterruptedException e) {
    logger.error("Error in truncation",e);
    throw new RuntimeException("Error in truncation",e);
  }
catch (  ExecutionException e) {
    logger.error("Error in truncation",e);
    throw new RuntimeException("Error in truncation",e);
  }
}
