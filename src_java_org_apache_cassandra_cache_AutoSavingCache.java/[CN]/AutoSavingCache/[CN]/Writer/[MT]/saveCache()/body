{
  logger.debug("Deleting old {} files.",cacheType);
  deleteOldCacheFiles();
  if (!keyIterator.hasNext()) {
    logger.debug("Skipping {} save, cache is empty.",cacheType);
    return;
  }
  long start=System.nanoTime();
  WrappedDataOutputStreamPlus writer=null;
  Pair<File,File> cacheFilePaths=tempCacheFiles();
  try {
    try {
      writer=new WrappedDataOutputStreamPlus(streamFactory.getOutputStream(cacheFilePaths.left,cacheFilePaths.right));
    }
 catch (    FileNotFoundException e) {
      throw new RuntimeException(e);
    }
    try {
      UUID schemaVersion=Schema.instance.getVersion();
      if (schemaVersion == null) {
        Schema.instance.updateVersion();
        schemaVersion=Schema.instance.getVersion();
      }
      writer.writeLong(schemaVersion.getMostSignificantBits());
      writer.writeLong(schemaVersion.getLeastSignificantBits());
      while (keyIterator.hasNext()) {
        K key=keyIterator.next();
        ColumnFamilyStore cfs=Schema.instance.getColumnFamilyStoreIncludingIndexes(key.ksAndCFName);
        if (cfs == null)         continue;
        cacheLoader.serialize(key,writer,cfs);
        keysWritten++;
        if (keysWritten >= keysEstimate)         break;
      }
    }
 catch (    IOException e) {
      throw new FSWriteError(e,cacheFilePaths.left);
    }
  }
  finally {
    if (writer != null)     FileUtils.closeQuietly(writer);
  }
  File cacheFile=getCacheDataPath(CURRENT_VERSION);
  File crcFile=getCacheCrcPath(CURRENT_VERSION);
  cacheFile.delete();
  crcFile.delete();
  if (!cacheFilePaths.left.renameTo(cacheFile))   logger.error("Unable to rename {} to {}",cacheFilePaths.left,cacheFile);
  if (!cacheFilePaths.right.renameTo(crcFile))   logger.error("Unable to rename {} to {}",cacheFilePaths.right,crcFile);
  logger.info("Saved {} ({} items) in {} ms",cacheType,keysWritten,TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - start));
}
