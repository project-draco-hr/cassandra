{
  logger.debug("Deleting old {} files.",cacheType);
  deleteOldCacheFiles();
  if (!keyIterator.hasNext()) {
    logger.debug("Skipping {} save, cache is empty.",cacheType);
    return;
  }
  long start=System.nanoTime();
  HashMap<UUID,DataOutputPlus> dataOutputs=new HashMap<>();
  HashMap<UUID,SequentialWriter> sequentialWriters=new HashMap<>();
  HashMap<UUID,Pair<File,File>> paths=new HashMap<>();
  try {
    while (keyIterator.hasNext()) {
      K key=keyIterator.next();
      UUID cfId=key.getCFId();
      if (!Schema.instance.hasCF(key.getCFId()))       continue;
      DataOutputPlus writer=dataOutputs.get(cfId);
      if (writer == null) {
        Pair<File,File> cacheFilePaths=tempCacheFiles(cfId);
        SequentialWriter sequentialWriter;
        try {
          sequentialWriter=streamFactory.getOutputWriter(cacheFilePaths.left,cacheFilePaths.right);
          writer=new WrappedDataOutputStreamPlus(sequentialWriter);
        }
 catch (        FileNotFoundException e) {
          throw new RuntimeException(e);
        }
        paths.put(cfId,cacheFilePaths);
        sequentialWriters.put(cfId,sequentialWriter);
        dataOutputs.put(cfId,writer);
      }
      try {
        cacheLoader.serialize(key,writer);
      }
 catch (      IOException e) {
        throw new FSWriteError(e,paths.get(cfId).left);
      }
      keysWritten++;
      if (keysWritten >= keysEstimate)       break;
    }
  }
  finally {
    if (keyIterator instanceof Closeable)     try {
      ((Closeable)keyIterator).close();
    }
 catch (    IOException ignored) {
    }
    for (    SequentialWriter writer : sequentialWriters.values()) {
      writer.finish();
      FileUtils.closeQuietly(writer);
    }
  }
  for (  Map.Entry<UUID,DataOutputPlus> entry : dataOutputs.entrySet()) {
    UUID cfId=entry.getKey();
    Pair<File,File> tmpFiles=paths.get(cfId);
    File cacheFile=getCacheDataPath(cfId,CURRENT_VERSION);
    File crcFile=getCacheCrcPath(cfId,CURRENT_VERSION);
    cacheFile.delete();
    crcFile.delete();
    if (!tmpFiles.left.renameTo(cacheFile))     logger.error("Unable to rename {} to {}",tmpFiles.left,cacheFile);
    if (!tmpFiles.right.renameTo(crcFile))     logger.error("Unable to rename {} to {}",tmpFiles.right,crcFile);
  }
  logger.info("Saved {} ({} items) in {} ms",cacheType,keysWritten,TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - start));
}
