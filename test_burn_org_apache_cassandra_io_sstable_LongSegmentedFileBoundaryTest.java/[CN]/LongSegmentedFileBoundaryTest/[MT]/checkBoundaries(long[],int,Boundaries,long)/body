{
  if (length == 0)   return;
  long[] boundaries=new long[(int)(10 + 2 * (length / Integer.MAX_VALUE))];
  int count=1;
  int prev=0;
  while (true) {
    int p=candidates[prev + 1] - boundaries[count - 1] >= Integer.MAX_VALUE ? prev + 1 : Arrays.binarySearch(candidates,prev,candidateCount,boundaries[count - 1] + Integer.MAX_VALUE);
    if (p < 0)     p=-2 - p;
    if (p >= candidateCount - 1 || candidates[p] >= length)     break;
    boundaries[count++]=candidates[p];
    if (candidates[p + 1] >= length)     break;
    prev=p;
  }
  if (candidates[candidateCount - 1] < length && length - boundaries[count - 1] >= Integer.MAX_VALUE)   boundaries[count++]=candidates[candidateCount - 1];
  boundaries[count++]=length;
  final long[] canon=Arrays.copyOf(boundaries,count);
  final long[] check=builder.finish(length,false);
  if (!Arrays.equals(canon,check))   Assert.assertTrue("\n" + Arrays.toString(canon) + "\n"+ Arrays.toString(check),Arrays.equals(canon,check));
}
