{
  this.split=(ColumnFamilySplit)split;
  Configuration conf=context.getConfiguration();
  predicate=ConfigHelper.getInputSlicePredicate(conf);
  isEmptyPredicate=isEmptyPredicate(predicate);
  totalRowCount=ConfigHelper.getInputSplitSize(conf);
  batchRowCount=ConfigHelper.getRangeBatchSize(conf);
  cfName=ConfigHelper.getInputColumnFamily(conf);
  consistencyLevel=ConsistencyLevel.valueOf(ConfigHelper.getReadConsistencyLevel(conf));
  keyspace=ConfigHelper.getInputKeyspace(conf);
  try {
    if (socket != null && socket.isOpen())     return;
    String location=getLocation();
    socket=new TSocket(location,ConfigHelper.getRpcPort(conf));
    TBinaryProtocol binaryProtocol=new TBinaryProtocol(new TFramedTransport(socket));
    client=new Cassandra.Client(binaryProtocol);
    socket.open();
    client.set_keyspace(keyspace);
    if (ConfigHelper.getInputKeyspaceUserName(conf) != null) {
      Map<String,String> creds=new HashMap<String,String>();
      creds.put(SimpleAuthenticator.USERNAME_KEY,ConfigHelper.getInputKeyspaceUserName(conf));
      creds.put(SimpleAuthenticator.PASSWORD_KEY,ConfigHelper.getInputKeyspacePassword(conf));
      AuthenticationRequest authRequest=new AuthenticationRequest(creds);
      client.login(authRequest);
    }
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
  iter=new RowIterator();
}
