{
  if (rows != null && i >= rows.size())   rows=null;
  if (rows != null)   return;
  String startToken;
  if (lastRow == null) {
    startToken=split.getStartToken();
  }
 else {
    startToken=partitioner.getTokenFactory().toString(partitioner.getToken(lastRow.key));
    if (startToken.equals(split.getEndToken())) {
      rows=null;
      return;
    }
  }
  KeyRange keyRange=new KeyRange(batchSize).setStart_token(startToken).setEnd_token(split.getEndToken()).setRow_filter(filter);
  try {
    rows=client.get_range_slices(new ColumnParent(cfName),predicate,keyRange,consistencyLevel);
    if (rows.isEmpty()) {
      rows=null;
      return;
    }
    lastRow=Iterables.getLast(rows);
    if (isEmptyPredicate) {
      Iterator<KeySlice> it=rows.iterator();
      while (it.hasNext()) {
        KeySlice ks=it.next();
        if (ks.getColumnsSize() == 0) {
          it.remove();
        }
      }
      if (rows.isEmpty()) {
        maybeInit();
        return;
      }
    }
    i=0;
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
}
