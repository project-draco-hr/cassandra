{
  if (rows != null && i >= rows.size())   rows=null;
  if (rows != null)   return;
  TSocket socket=new TSocket(getLocation(),DatabaseDescriptor.getRpcPort());
  TBinaryProtocol binaryProtocol=new TBinaryProtocol(socket,false,false);
  Cassandra.Client client=new Cassandra.Client(binaryProtocol);
  try {
    socket.open();
  }
 catch (  TTransportException e) {
    throw new RuntimeException(e);
  }
  if (startToken == null) {
    startToken=split.getStartToken();
  }
 else   if (startToken.equals(split.getEndToken())) {
    rows=null;
    return;
  }
  KeyRange keyRange=new KeyRange(batchRowCount).setStart_token(startToken).setEnd_token(split.getEndToken());
  try {
    client.set_keyspace(keyspace);
    if (!(DatabaseDescriptor.getAuthenticator() instanceof AllowAllAuthenticator)) {
      client.login(authRequest);
    }
    Map<String,Map<String,String>> desc=client.describe_keyspace(keyspace);
    Map<String,String> ksProps=desc.get(cfName);
    String compClass=ksProps.get("CompareWith");
    comparator=(AbstractType)Class.forName(compClass).newInstance();
    rows=client.get_range_slices(new ColumnParent(cfName),predicate,keyRange,ConsistencyLevel.ONE);
    if (rows.isEmpty()) {
      rows=null;
      return;
    }
    i=0;
    KeySlice lastRow=rows.get(rows.size() - 1);
    IPartitioner p=DatabaseDescriptor.getPartitioner();
    byte[] rowkey=lastRow.getKey();
    startToken=p.getTokenFactory().toString(p.getToken(rowkey));
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
}
