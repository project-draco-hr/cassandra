{
  CfDef cfDef=new CfDef();
  try {
    partitioner=FBUtilities.newPartitioner(client.describe_partitioner());
    String query="SELECT comparator," + "       subcomparator," + "       type "+ "FROM system.schema_columnfamilies "+ "WHERE keyspace_name = '%s' "+ "  AND columnfamily_name = '%s' ";
    CqlResult result=client.execute_cql3_query(ByteBufferUtil.bytes(String.format(query,keyspace,cfName)),Compression.NONE,ConsistencyLevel.ONE);
    Iterator<CqlRow> iteraRow=result.rows.iterator();
    if (iteraRow.hasNext()) {
      CqlRow cqlRow=iteraRow.next();
      cfDef.comparator_type=ByteBufferUtil.string(cqlRow.columns.get(0).value);
      ByteBuffer subComparator=cqlRow.columns.get(1).value;
      if (subComparator != null)       cfDef.subcomparator_type=ByteBufferUtil.string(subComparator);
      ByteBuffer type=cqlRow.columns.get(2).value;
      if (type != null)       cfDef.column_type=ByteBufferUtil.string(type);
    }
    comparator=CellNames.fromAbstractType(TypeParser.parse(cfDef.comparator_type),true);
    subComparator=cfDef.subcomparator_type == null ? null : TypeParser.parse(cfDef.subcomparator_type);
  }
 catch (  ConfigurationException e) {
    throw new RuntimeException("unable to load sub/comparator",e);
  }
catch (  TException e) {
    throw new RuntimeException("error communicating via Thrift",e);
  }
catch (  Exception e) {
    throw new RuntimeException("unable to load keyspace " + keyspace,e);
  }
  isSuper="Super".equalsIgnoreCase(cfDef.column_type);
}
