def run(self):
    begin = self.range[0]
    end = self.range[(-1)]
    current = begin
    last = (current + options.rangecount)
    fmt = (('%0' + str(len(str(total_keys)))) + 'd')
    p = SlicePredicate(slice_range=SliceRange('', '', False, columns_per_key))
    if ('super' == options.cftype):
        while (current < end):
            start = (fmt % current)
            finish = (fmt % last)
            res = []
            for j in xrange(supers_per_key):
                parent = ColumnParent('Super1', chr((ord('A') + j)))
                begin = time.time()
                try:
                    res = self.cclient.get_range_slice(parent, p, start, finish, options.rangecount, ConsistencyLevel.ONE)
                    if (not res):
                        raise RuntimeError(('Key %s not found' % key))
                except KeyboardInterrupt:
                    raise
                except Exception as e:
                    if options.ignore:
                        print e
                    else:
                        raise
                self.latencies[self.idx] += (time.time() - begin)
                self.opcounts[self.idx] += 1
            current += (len(r) + 1)
            last = ((current + len(r)) + 1)
            self.keycounts[self.idx] += len(r)
    else:
        parent = ColumnParent('Standard1')
        while (current < end):
            start = (fmt % current)
            finish = (fmt % last)
            begin = time.time()
            try:
                r = self.cclient.get_range_slice(parent, p, start, finish, options.rangecount, ConsistencyLevel.ONE)
                if (not r):
                    raise RuntimeError('Range not found:', start, finish)
            except KeyboardInterrupt:
                raise
            except Exception as e:
                if options.ignore:
                    print e
                else:
                    print start, finish
                    raise
            current += (len(r) + 1)
            last = ((current + len(r)) + 1)
            self.latencies[self.idx] += (time.time() - begin)
            self.opcounts[self.idx] += 1
            self.keycounts[self.idx] += len(r)
