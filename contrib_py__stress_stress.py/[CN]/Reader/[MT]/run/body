def run(self):
    p = SlicePredicate(slice_range=SliceRange('', '', False, columns_per_key))
    if ('super' == options.cftype):
        for i in xrange(keys_per_thread):
            key = key_generator()
            for j in xrange(supers_per_key):
                parent = ColumnParent('Super1', ('S' + str(j)))
                start = time.time()
                try:
                    r = self.cclient.get_slice('Keyspace1', key, parent, p, ConsistencyLevel.ONE)
                    if (not r):
                        raise RuntimeError(('Key %s not found' % key))
                except KeyboardInterrupt:
                    raise
                except Exception as e:
                    if options.ignore:
                        print e
                    else:
                        raise
                self.latencies[self.idx] += (time.time() - start)
                self.opcounts[self.idx] += 1
                self.keycounts[self.idx] += 1
    else:
        parent = ColumnParent('Standard1')
        for i in xrange(keys_per_thread):
            key = key_generator()
            start = time.time()
            try:
                r = self.cclient.get_slice('Keyspace1', key, parent, p, ConsistencyLevel.ONE)
                if (not r):
                    raise RuntimeError(('Key %s not found' % key))
            except KeyboardInterrupt:
                raise
            except Exception as e:
                if options.ignore:
                    print e
                else:
                    raise
            self.latencies[self.idx] += (time.time() - start)
            self.opcounts[self.idx] += 1
            self.keycounts[self.idx] += 1
