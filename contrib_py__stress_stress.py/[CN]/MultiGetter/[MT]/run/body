def run(self):
    p = SlicePredicate(slice_range=SliceRange('', '', False, columns_per_key))
    if ('super' == options.cftype):
        keys = [key_generator() for i in xrange(keys_per_thread)]
        for j in xrange(supers_per_key):
            parent = ColumnParent('Super1', ('S' + str(j)))
            start = time.time()
            try:
                r = self.cclient.multiget_slice(keys, parent, p, consistency)
                if (not r):
                    raise RuntimeError(('Keys %s not found' % keys))
            except KeyboardInterrupt:
                raise
            except Exception as e:
                if options.ignore:
                    print e
                else:
                    raise
            self.latencies[self.idx] += (time.time() - start)
            self.opcounts[self.idx] += 1
            self.keycounts[self.idx] += len(keys)
    else:
        parent = ColumnParent('Standard1')
        for zslab in xrange(n_threads):
            kpt = (keys_per_thread / n_threads)
            keys = [key_generator() for i in xrange((kpt * zslab), (kpt * (zslab + 1)))]
            start = time.time()
            try:
                r = self.cclient.multiget_slice(keys, parent, p, consistency)
                if (not r):
                    raise RuntimeError(('Keys %s not found' % keys))
            except KeyboardInterrupt:
                raise
            except Exception as e:
                if options.ignore:
                    print e
                else:
                    raise
            self.latencies[self.idx] += (time.time() - start)
            self.opcounts[self.idx] += 1
            self.keycounts[self.idx] += len(keys)
