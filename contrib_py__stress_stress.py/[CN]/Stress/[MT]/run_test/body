def run_test(self, filename, threads):
    start_t = time.time()
    if filename:
        outf = open(filename, 'w')
    else:
        outf = sys.stdout
    outf.write('total,interval_op_rate,interval_key_rate,avg_latency,elapsed_time\n')
    epoch = total = old_total = latency = keycount = old_keycount = old_latency = 0
    epoch_intervals = (options.interval * 10)
    terminate = False
    while (not terminate):
        time.sleep(0.1)
        if (not [th for th in threads if th.isAlive()]):
            terminate = True
        epoch = (epoch + 1)
        if (terminate or (epoch > epoch_intervals)):
            epoch = 0
            (old_total, old_latency, old_keycount) = (total, latency, keycount)
            total = sum((self.opcounts[th.idx] for th in threads))
            latency = sum((self.latencies[th.idx] for th in threads))
            keycount = sum((self.keycounts[th.idx] for th in threads))
            opdelta = (total - old_total)
            keydelta = (keycount - old_keycount)
            delta_latency = (latency - old_latency)
            if (opdelta > 0):
                delta_formatted = (delta_latency / opdelta)
            else:
                delta_formatted = 'NaN'
            elapsed_t = int((time.time() - start_t))
            outf.write(('%d,%d,%d,%s,%d\n' % (total, (opdelta / options.interval), (keydelta / options.interval), delta_formatted, elapsed_t)))
