from __future__ import with_statement
have_multiproc = False
try:
    from multiprocessing import Array as array, Process as Thread
    from uuid import uuid1 as get_ident
    array('i', 1)
    Thread.isAlive = Thread.is_alive
    have_multiproc = True
except ImportError:
    from threading import Thread
    from thread import get_ident
    from array import array
from hashlib import md5
import time, random, sys, os
from random import randint, gauss
from optparse import OptionParser
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol
try:
    from cassandra import Cassandra
    from cassandra.ttypes import *
except ImportError:
    L = os.path.abspath(__file__).split(os.path.sep)[:(-3)]
    root = os.path.sep.join(L)
    _ipath = os.path.join(root, 'interface', 'thrift', 'gen-py')
    sys.path.append(os.path.join(_ipath, 'cassandra'))
    import Cassandra
    from ttypes import *
except ImportError:
    print "Cassandra thrift bindings not found, please run 'ant gen-thrift-py'"
    sys.exit(2)
try:
    from thrift.protocol import fastbinary
except ImportError:
    print 'WARNING: thrift binary extension not found, benchmark will not be accurate!'
parser = OptionParser()
parser.add_option('-n', '--num-keys', type='int', dest='numkeys', help='Number of keys', default=(1000 ** 2))
parser.add_option('-N', '--skip-keys', type='float', dest='skipkeys', help='Fraction of keys to skip initially', default=0)
parser.add_option('-t', '--threads', type='int', dest='threads', help='Number of threads/procs to use', default=50)
parser.add_option('-c', '--columns', type='int', dest='columns', help='Number of columns per key', default=5)
parser.add_option('-S', '--column-size', type='int', dest='column_size', help='Size of column values in bytes', default=34)
parser.add_option('-C', '--cardinality', type='int', dest='cardinality', help='Number of unique values stored in columns', default=50)
parser.add_option('-d', '--nodes', type='string', dest='nodes', help='Host nodes (comma separated)', default='localhost')
parser.add_option('-D', '--nodefile', type='string', dest='nodefile', help='File containing list of nodes (one per line)', default=None)
parser.add_option('-s', '--stdev', type='float', dest='stdev', default=0.1, help='standard deviation factor')
parser.add_option('-r', '--random', action='store_true', dest='random', help='use random key generator (stdev will have no effect)')
parser.add_option('-f', '--file', type='string', dest='file', help='write output to file')
parser.add_option('-p', '--port', type='int', default=9160, dest='port', help='thrift port')
parser.add_option('-m', '--unframed', action='store_true', dest='unframed', help='use unframed transport')
parser.add_option('-o', '--operation', type='choice', dest='operation', default='insert', choices=('insert', 'read', 'rangeslice', 'indexedrangeslice', 'multiget'), help='operation to perform')
parser.add_option('-u', '--supercolumns', type='int', dest='supers', default=1, help='number of super columns per key')
parser.add_option('-y', '--family-type', type='choice', dest='cftype', choices=('regular', 'super'), default='regular', help='column family type')
parser.add_option('-k', '--keep-going', action='store_true', dest='ignore', help='ignore errors inserting or reading')
parser.add_option('-i', '--progress-interval', type='int', default=10, dest='interval', help='progress report interval (seconds)')
parser.add_option('-g', '--keys-per-call', type='int', default=1000, dest='rangecount', help='amount of keys to get_range_slices or multiget per call')
parser.add_option('-l', '--replication-factor', type='int', default=1, dest='replication', help='replication factor to use when creating needed column families')
parser.add_option('-e', '--consistency-level', type='str', default='ONE', dest='consistency', help='consistency level to use')
parser.add_option('-x', '--create-index', type='choice', choices=('keys', 'keys_bitmap', 'none'), default='none', dest='index', help='type of index to create on needed column families')
(options, args) = parser.parse_args()
total_keys = options.numkeys
n_threads = options.threads
keys_per_thread = (total_keys / n_threads)
columns_per_key = options.columns
supers_per_key = options.supers
nodes = options.nodes.split(',')
if (options.nodefile != None):
    with open(options.nodefile) as f:
        nodes = [n.strip() for n in f.readlines() if (len(n.strip()) > 0)]
stdev = (total_keys * options.stdev)
mean = (total_keys / 2)
consistency = getattr(ConsistencyLevel, options.consistency, None)
if (consistency is None):
    print ('%s is not a valid consistency level' % options.consistency)
    sys.exit(3)
key_generator = key_generator_gauss
if options.random:
    key_generator = key_generator_random
stresser = Stress()
benchmark = getattr(stresser, options.operation, None)
if (not have_multiproc):
    print 'WARNING: multiprocessing not present, threading will be used.\n        Benchmark may not be accurate!'
if (options.operation == 'insert'):
    make_keyspaces()
benchmark()
