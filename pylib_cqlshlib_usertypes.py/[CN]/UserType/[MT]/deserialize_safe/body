@classmethod
def deserialize_safe(cls, byts):
    p = 0
    Result = collections.namedtuple(cls.typename, cls.fieldnames)
    result = []
    for col_type in cls.subtypes:
        if (p == len(byts)):
            break
        itemlen = uint16_unpack(byts[p:(p + 2)])
        p += 2
        item = byts[p:(p + itemlen)]
        p += itemlen
        result.append(col_type.from_binary(item))
        p += 1
    if (len(result) < len(cls.subtypes)):
        nones = ([None] * (len(cls.subtypes) - len(result)))
        result = (result + nones)
    return Result(*result)
