{
  CompositeType comparator=CompositeType.getInstance(Int32Type.instance,Int32Type.instance,Int32Type.instance);
  SliceQueryFilter filter=new SliceQueryFilter(composite(0,0,0),composite(1,0,0),false,1);
  assertFalse(comparator.intersects(columnNames(2,0,0),columnNames(3,0,0),filter));
  filter=new SliceQueryFilter(ByteBufferUtil.EMPTY_BYTE_BUFFER,composite(1,0,0),false,1);
  assertFalse(comparator.intersects(columnNames(2,0,0),columnNames(3,0,0),filter));
  filter=new SliceQueryFilter(composite(0),composite(1,0,0),false,1);
  assertFalse(comparator.intersects(columnNames(2,0,0),columnNames(3,0,0),filter));
  filter=new SliceQueryFilter(composite(0),composite(1,0),false,1);
  assertFalse(comparator.intersects(columnNames(2,0,0),columnNames(3,0,0),filter));
  filter=new SliceQueryFilter(composite(0,0,0),composite(1,0,0),false,1);
  assertFalse(comparator.intersects(columnNames(1,1,0),columnNames(3,0,0),filter));
  filter=new SliceQueryFilter(composite(0),composite(1,0,0),false,1);
  assertFalse(comparator.intersects(columnNames(1,1,0),columnNames(3,0,0),filter));
  filter=new SliceQueryFilter(composite(0),composite(1,0),false,1);
  assertFalse(comparator.intersects(columnNames(1,1,0),columnNames(3,0,0),filter));
  filter=new SliceQueryFilter(composite(0,0,0),composite(1,1,0),false,1);
  assertFalse(comparator.intersects(columnNames(1,1,1),columnNames(3,1,1),filter));
  filter=new SliceQueryFilter(composite(0,0,0),composite(1,1,1),false,1);
  assertTrue(comparator.intersects(columnNames(1,1,1),columnNames(3,1,1),filter));
  filter=new SliceQueryFilter(composite(4,0,0),composite(4,0,0),false,1);
  assertFalse(comparator.intersects(columnNames(2,0,0),columnNames(3,0,0),filter));
  filter=new SliceQueryFilter(composite(4,0,0),ByteBufferUtil.EMPTY_BYTE_BUFFER,false,1);
  assertFalse(comparator.intersects(columnNames(2,0,0),columnNames(3,0,0),filter));
  filter=new SliceQueryFilter(composite(4,0,0),composite(1),false,1);
  assertFalse(comparator.intersects(columnNames(2,0,0),columnNames(3,0,0),filter));
  filter=new SliceQueryFilter(composite(4,0),composite(1),false,1);
  assertFalse(comparator.intersects(columnNames(2,0,0),columnNames(3,0,0),filter));
  filter=new SliceQueryFilter(composite(1,1,1),composite(2,0,0),false,1);
  assertFalse(comparator.intersects(columnNames(0,0,0),columnNames(1,0,0),filter));
  filter=new SliceQueryFilter(composite(1,1,1),composite(2,0,0),false,1);
  assertFalse(comparator.intersects(columnNames(0,0,0),columnNames(1,1,0),filter));
  filter=new SliceQueryFilter(composite(1,1,1),composite(2,0,0),false,1);
  assertTrue(comparator.intersects(columnNames(0,0,0),columnNames(1,1,1),filter));
  filter=new SliceQueryFilter(composite(0,0,0),composite(2,0,0),false,1);
  assertTrue(comparator.intersects(columnNames(1,0,0),columnNames(1,1,1),filter));
  filter=new SliceQueryFilter(ByteBufferUtil.EMPTY_BYTE_BUFFER,ByteBufferUtil.EMPTY_BYTE_BUFFER,false,1);
  assertTrue(comparator.intersects(columnNames(1,0,0),columnNames(1,1,1),filter));
  filter=new SliceQueryFilter(composite(0),composite(2,0),false,1);
  assertTrue(comparator.intersects(columnNames(1,0,0),columnNames(1,1,1),filter));
  filter=new SliceQueryFilter(composite(1,0,0),composite(2,0,0),false,1);
  assertTrue(comparator.intersects(columnNames(1,0,0),columnNames(1,1,1),filter));
  filter=new SliceQueryFilter(composite(0,0,0),composite(1,1,1),false,1);
  assertTrue(comparator.intersects(columnNames(1,0,0),columnNames(1,1,1),filter));
  filter=new SliceQueryFilter(composite(1,0,0),composite(1,1,1),false,1);
  assertTrue(comparator.intersects(columnNames(1,0,0),columnNames(1,1,1),filter));
  filter=new SliceQueryFilter(composite(1,0,0),composite(1,1,0),false,1);
  assertTrue(comparator.intersects(columnNames(1,0,0),columnNames(1,1,1),filter));
  filter=new SliceQueryFilter(composite(1,0,0),composite(1,1),false,1);
  assertTrue(comparator.intersects(columnNames(1,0,0),columnNames(1,1,1),filter));
  filter=new SliceQueryFilter(composite(1,1,0),composite(1,1,1),false,1);
  assertTrue(comparator.intersects(columnNames(1,0,0),columnNames(1,1,1),filter));
  filter=new SliceQueryFilter(composite(1,1),composite(1,1,1),false,1);
  assertTrue(comparator.intersects(columnNames(1,0,0),columnNames(1,1,1),filter));
  filter=new SliceQueryFilter(composite(1,1,0),composite(1,1,1),false,1);
  assertTrue(comparator.intersects(columnNames(1,0,0),columnNames(2,2,2),filter));
  filter=new SliceQueryFilter(composite(1,1),composite(1,1,1),false,1);
  assertTrue(comparator.intersects(columnNames(1,0,0),columnNames(2,2,2),filter));
  filter=new SliceQueryFilter(composite(1),composite(1,2),false,1);
  assertTrue(comparator.intersects(columnNames(1,0,0),columnNames(2,2,2),filter));
  filter=new SliceQueryFilter(composite(1,1,1),composite(1,1,1),false,1);
  assertTrue(comparator.intersects(columnNames(1,0,0),columnNames(2,2,2),filter));
  filter=new SliceQueryFilter(composite(1,1,1),ByteBufferUtil.EMPTY_BYTE_BUFFER,false,1);
  assertTrue(comparator.intersects(columnNames(1,0,0),columnNames(2,0,0),filter));
  filter=new SliceQueryFilter(composite(1,1,1),composite(3),false,1);
  assertTrue(comparator.intersects(columnNames(1,0,0),columnNames(2,0,0),filter));
  filter=new SliceQueryFilter(composite(1,0,0),ByteBufferUtil.EMPTY_BYTE_BUFFER,false,1);
  assertTrue(comparator.intersects(columnNames(1,0,0),columnNames(2,0,0),filter));
  filter=new SliceQueryFilter(composite(1,0,0),composite(3),false,1);
  assertTrue(comparator.intersects(columnNames(1,0,0),columnNames(2,0,0),filter));
  filter=new SliceQueryFilter(composite(2,0,0),ByteBufferUtil.EMPTY_BYTE_BUFFER,false,1);
  assertTrue(comparator.intersects(columnNames(1,0,0),columnNames(2,0,0),filter));
  filter=new SliceQueryFilter(composite(2,0,0),composite(3),false,1);
  assertTrue(comparator.intersects(columnNames(1,0,0),columnNames(2,0,0),filter));
  filter=new SliceQueryFilter(ByteBufferUtil.EMPTY_BYTE_BUFFER,composite(1,1,1),false,1);
  assertTrue(comparator.intersects(columnNames(1,0,0),columnNames(2,0,0),filter));
  filter=new SliceQueryFilter(composite(0),composite(1,1,1),false,1);
  assertTrue(comparator.intersects(columnNames(1,0,0),columnNames(2,0,0),filter));
  filter=new SliceQueryFilter(ByteBufferUtil.EMPTY_BYTE_BUFFER,composite(1,0,0),false,1);
  assertTrue(comparator.intersects(columnNames(1,0,0),columnNames(2,0,0),filter));
  filter=new SliceQueryFilter(composite(0),composite(1,0,0),false,1);
  assertTrue(comparator.intersects(columnNames(1,0,0),columnNames(2,0,0),filter));
  filter=new SliceQueryFilter(ByteBufferUtil.EMPTY_BYTE_BUFFER,composite(2,0,0),false,1);
  assertTrue(comparator.intersects(columnNames(1,0,0),columnNames(2,0,0),filter));
  filter=new SliceQueryFilter(composite(0),composite(2,0,0),false,1);
  assertTrue(comparator.intersects(columnNames(1,0,0),columnNames(2,0,0),filter));
  filter=new SliceQueryFilter(composite(1,2,0),composite(1,3,0),false,1);
  assertFalse(comparator.intersects(columnNames(1,0,0),columnNames(2,1,0),filter));
  filter=new SliceQueryFilter(composite(1,2),composite(1,3,0),false,1);
  assertFalse(comparator.intersects(columnNames(1,0,0),columnNames(2,1,0),filter));
  filter=new SliceQueryFilter(composite(1,2,0),composite(1,3),false,1);
  assertFalse(comparator.intersects(columnNames(1,0,0),columnNames(2,1,0),filter));
  filter=new SliceQueryFilter(composite(1,2),composite(1,3),false,1);
  assertFalse(comparator.intersects(columnNames(1,0,0),columnNames(2,1,0),filter));
  filter=new SliceQueryFilter(composite(1,2),composite(1),false,1);
  assertFalse(comparator.intersects(columnNames(1,0,0),columnNames(2,1,0),filter));
  filter=new SliceQueryFilter(composite(1,2,0),composite(1,2,0),false,1);
  assertFalse(comparator.intersects(columnNames(1,0,0),columnNames(2,1,0),filter));
  filter=new SliceQueryFilter(composite(1,2),composite(1,2,0),false,1);
  assertFalse(comparator.intersects(columnNames(1,0,0),columnNames(2,1,0),filter));
  filter=new SliceQueryFilter(composite(1,2,0),composite(1,2),false,1);
  assertFalse(comparator.intersects(columnNames(1,0,0),columnNames(2,1,0),filter));
  filter=new SliceQueryFilter(composite(1,2),composite(1,2),false,1);
  assertFalse(comparator.intersects(columnNames(1,0,0),columnNames(2,1,0),filter));
  filter=new SliceQueryFilter(composite(1,1,2),composite(1,1,3),false,1);
  assertFalse(comparator.intersects(columnNames(1,1,0),columnNames(2,2,1),filter));
  filter=new SliceQueryFilter(composite(1,0,0),composite(0,0,0),true,1);
  assertFalse(comparator.intersects(columnNames(2,0,0),columnNames(3,0,0),filter));
  filter=new SliceQueryFilter(composite(1,0,0),composite(0,0,0),true,1);
  assertFalse(comparator.intersects(columnNames(1,1,0),columnNames(3,0,0),filter));
  filter=new SliceQueryFilter(composite(1,1,1),composite(1,1,0),true,1);
  assertTrue(comparator.intersects(columnNames(1,0,0),columnNames(2,2,2),filter));
}
