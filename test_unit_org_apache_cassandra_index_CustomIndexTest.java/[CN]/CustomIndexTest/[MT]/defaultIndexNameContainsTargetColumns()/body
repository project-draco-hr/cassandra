{
  createTable("CREATE TABLE %s(k int, c int, v1 int, v2 int, PRIMARY KEY(k,c))");
  createIndex(String.format("CREATE CUSTOM INDEX ON %%s(v1, v2) USING '%s'",StubIndex.class.getName()));
  assertEquals(1,getCurrentColumnFamilyStore().metadata.getIndexes().size());
  assertIndexCreated(currentTable() + "_idx","v1","v2");
  createIndex(String.format("CREATE CUSTOM INDEX ON %%s(c, v1, v2) USING '%s'",StubIndex.class.getName()));
  assertEquals(2,getCurrentColumnFamilyStore().metadata.getIndexes().size());
  assertIndexCreated(currentTable() + "_idx_1","c","v1","v2");
  createIndex(String.format("CREATE CUSTOM INDEX ON %%s(c, v2) USING '%s'",StubIndex.class.getName()));
  assertEquals(3,getCurrentColumnFamilyStore().metadata.getIndexes().size());
  assertIndexCreated(currentTable() + "_idx_2","c","v2");
  createIndex(String.format("CREATE CUSTOM INDEX ON %%s(c, v2) USING '%s' WITH OPTIONS = {'foo':'bar'}",StubIndex.class.getName()));
  assertEquals(4,getCurrentColumnFamilyStore().metadata.getIndexes().size());
  Map<String,String> options=new HashMap<>();
  options.put("foo","bar");
  assertIndexCreated(currentTable() + "_idx_3",options,"c","v2");
}
