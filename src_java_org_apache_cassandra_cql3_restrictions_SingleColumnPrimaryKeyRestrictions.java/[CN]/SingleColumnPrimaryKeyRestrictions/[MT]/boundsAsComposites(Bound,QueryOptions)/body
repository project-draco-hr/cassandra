{
  CBuilder builder=ctype.builder();
  List<ColumnDefinition> defs=new ArrayList<>(restrictions.getColumnDefs());
  CompositesBuilder compositeBuilder=new CompositesBuilder(builder,ctype);
  int keyPosition=0;
  for (  ColumnDefinition def : defs) {
    Bound b=!def.isReversedType() ? bound : bound.reverse();
    Restriction r=restrictions.getRestriction(def);
    if (keyPosition != def.position() || r.isContains())     return compositeBuilder.buildWithEOC(bound.isEnd() ? EOC.END : EOC.START);
    if (r.isSlice()) {
      if (!r.hasBound(b)) {
        return compositeBuilder.buildWithEOC(bound.isEnd() ? EOC.END : EOC.START);
      }
      ByteBuffer value=checkNotNull(r.bounds(b,options).get(0),"Invalid null clustering key part %s",r);
      compositeBuilder.addElementToAll(value);
      Composite.EOC eoc=eocFor(r,bound,b);
      return compositeBuilder.buildWithEOC(eoc);
    }
    List<ByteBuffer> values=r.values(options);
    if (values.isEmpty())     return Collections.emptyList();
    compositeBuilder.addEachElementToAll(values);
    checkFalse(compositeBuilder.containsNull(),"Invalid null clustering key part %s",def.name);
    keyPosition++;
  }
  EOC eoc=!compositeBuilder.hasRemaining() ? EOC.NONE : (bound.isEnd() ? EOC.END : EOC.START);
  return compositeBuilder.buildWithEOC(eoc);
}
