{
  createTable("CREATE TABLE %s (key int primary key, lst list<double>, st set<text>, mp map<int, boolean>)");
  String fName1=createFunction(KEYSPACE_PER_TEST,"list<double>","CREATE FUNCTION %s( lst list<double> ) " + "RETURNS NULL ON NULL INPUT " + "RETURNS list<double> "+ "LANGUAGE javascript\n"+ "AS 'lst;';");
  String fName2=createFunction(KEYSPACE_PER_TEST,"set<text>","CREATE FUNCTION %s( st set<text> ) " + "RETURNS NULL ON NULL INPUT " + "RETURNS set<text> "+ "LANGUAGE javascript\n"+ "AS 'st;';");
  String fName3=createFunction(KEYSPACE_PER_TEST,"map<int, boolean>","CREATE FUNCTION %s( mp map<int, boolean> ) " + "RETURNS NULL ON NULL INPUT " + "RETURNS map<int, boolean> "+ "LANGUAGE javascript\n"+ "AS 'mp;';");
  List<Double> list=Arrays.asList(1d,2d,3d);
  Set<String> set=new TreeSet<>(Arrays.asList("one","three","two"));
  Map<Integer,Boolean> map=new TreeMap<>();
  map.put(1,true);
  map.put(2,false);
  map.put(3,true);
  execute("INSERT INTO %s (key, lst, st, mp) VALUES (1, ?, ?, ?)",list,set,map);
  assertRows(execute("SELECT lst, st, mp FROM %s WHERE key = 1"),row(list,set,map));
  assertRows(execute("SELECT " + fName1 + "(lst), "+ fName2+ "(st), "+ fName3+ "(mp) FROM %s WHERE key = 1"),row(list,set,map));
  for (int version=Server.VERSION_2; version <= maxProtocolVersion; version++)   assertRowsNet(version,executeNet(version,"SELECT " + fName1 + "(lst), "+ fName2+ "(st), "+ fName3+ "(mp) FROM %s WHERE key = 1"),row(list,set,map));
}
