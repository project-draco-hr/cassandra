{
  String query="SELECT column_name, " + "       validator, " + "       index_type, "+ "       type "+ "FROM system.schema_columns "+ "WHERE keyspace_name = '%s' "+ "  AND columnfamily_name = '%s'";
  CqlResult result=client.execute_cql3_query(ByteBufferUtil.bytes(String.format(query,keyspace,column_family)),Compression.NONE,ConsistencyLevel.ONE);
  List<CqlRow> rows=result.rows;
  List<ColumnDef> columnDefs=new ArrayList<ColumnDef>();
  if (rows == null || rows.isEmpty()) {
    if (cassandraStorage)     return columnDefs;
    CFDefinition cfDefinition=getCfDefinition(keyspace,column_family,client);
    for (    CFDefinition.Name column : Iterables.concat(cfDefinition.staticColumns(),cfDefinition.regularColumns())) {
      ColumnDef cDef=new ColumnDef();
      String columnName=column.name.toString();
      String type=column.type.toString();
      logger.debug("name: {}, type: {} ",columnName,type);
      cDef.name=ByteBufferUtil.bytes(columnName);
      cDef.validation_class=type;
      columnDefs.add(cDef);
    }
    if (columnDefs.size() == 0 && includeCompactValueColumn) {
      String value=cfDefinition.compactValue() != null ? cfDefinition.compactValue().toString() : null;
      if ("value".equals(value)) {
        ColumnDef cDef=new ColumnDef();
        cDef.name=ByteBufferUtil.bytes(value);
        cDef.validation_class=cfDefinition.compactValue().type.toString();
        columnDefs.add(cDef);
      }
    }
    return columnDefs;
  }
  Iterator<CqlRow> iterator=rows.iterator();
  while (iterator.hasNext()) {
    CqlRow row=iterator.next();
    ColumnDef cDef=new ColumnDef();
    String type=ByteBufferUtil.string(row.getColumns().get(3).value);
    if (!type.equals("regular"))     continue;
    cDef.setName(ByteBufferUtil.clone(row.getColumns().get(0).value));
    cDef.validation_class=ByteBufferUtil.string(row.getColumns().get(1).value);
    ByteBuffer indexType=row.getColumns().get(2).value;
    if (indexType != null)     cDef.index_type=getIndexType(ByteBufferUtil.string(indexType));
    columnDefs.add(cDef);
  }
  return columnDefs;
}
