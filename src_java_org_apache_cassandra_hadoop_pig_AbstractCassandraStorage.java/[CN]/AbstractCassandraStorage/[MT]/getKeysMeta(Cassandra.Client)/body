{
  String query="SELECT key_aliases, " + "       column_aliases, " + "       key_validator, "+ "       comparator, "+ "       keyspace_name, "+ "       value_alias, "+ "       default_validator  "+ "FROM system.schema_columnfamilies "+ "WHERE keyspace_name = '%s'"+ "  AND columnfamily_name = '%s' ";
  CqlResult result=client.execute_cql3_query(ByteBufferUtil.bytes(String.format(query,keyspace,column_family)),Compression.NONE,ConsistencyLevel.ONE);
  if (result == null || result.rows == null || result.rows.isEmpty())   return null;
  List<CqlRow> rows=result.rows;
  Iterator<CqlRow> iteraRow=rows.iterator();
  List<ColumnDef> keys=new ArrayList<ColumnDef>();
  if (iteraRow.hasNext()) {
    CqlRow cqlRow=iteraRow.next();
    String name=ByteBufferUtil.string(cqlRow.columns.get(4).value);
    logger.debug("Found ksDef name: {}",name);
    String keyString=ByteBufferUtil.string(ByteBuffer.wrap(cqlRow.columns.get(0).getValue()));
    logger.debug("partition keys: {}",keyString);
    List<String> keyNames=FBUtilities.fromJsonList(keyString);
    Iterator<String> iterator=keyNames.iterator();
    while (iterator.hasNext()) {
      ColumnDef cDef=new ColumnDef();
      cDef.name=ByteBufferUtil.bytes(iterator.next());
      keys.add(cDef);
    }
    keyString=ByteBufferUtil.string(ByteBuffer.wrap(cqlRow.columns.get(1).getValue()));
    logger.debug("cluster keys: {}",keyString);
    keyNames=FBUtilities.fromJsonList(keyString);
    iterator=keyNames.iterator();
    while (iterator.hasNext()) {
      ColumnDef cDef=new ColumnDef();
      cDef.name=ByteBufferUtil.bytes(iterator.next());
      keys.add(cDef);
    }
    String validator=ByteBufferUtil.string(ByteBuffer.wrap(cqlRow.columns.get(2).getValue()));
    logger.debug("row key validator: {}",validator);
    AbstractType<?> keyValidator=parseType(validator);
    Iterator<ColumnDef> keyItera=keys.iterator();
    if (keyValidator instanceof CompositeType) {
      Iterator<AbstractType<?>> typeItera=((CompositeType)keyValidator).types.iterator();
      while (typeItera.hasNext())       keyItera.next().validation_class=typeItera.next().toString();
    }
 else     keyItera.next().validation_class=keyValidator.toString();
    validator=ByteBufferUtil.string(ByteBuffer.wrap(cqlRow.columns.get(3).getValue()));
    logger.debug("cluster key validator: {}",validator);
    if (keyItera.hasNext() && validator != null && !validator.isEmpty()) {
      AbstractType<?> clusterKeyValidator=parseType(validator);
      if (clusterKeyValidator instanceof CompositeType) {
        Iterator<AbstractType<?>> typeItera=((CompositeType)clusterKeyValidator).types.iterator();
        while (keyItera.hasNext())         keyItera.next().validation_class=typeItera.next().toString();
      }
 else       keyItera.next().validation_class=clusterKeyValidator.toString();
    }
    if (cqlRow.columns.get(5).value != null) {
      try {
        String compactValidator=ByteBufferUtil.string(ByteBuffer.wrap(cqlRow.columns.get(6).getValue()));
        logger.debug("default validator: {}",compactValidator);
        AbstractType<?> defaultValidator=parseType(compactValidator);
        ColumnDef cDef=new ColumnDef();
        cDef.name=cqlRow.columns.get(5).value;
        cDef.validation_class=defaultValidator.toString();
        keys.add(cDef);
      }
 catch (      Exception e) {
      }
    }
  }
  return keys;
}
