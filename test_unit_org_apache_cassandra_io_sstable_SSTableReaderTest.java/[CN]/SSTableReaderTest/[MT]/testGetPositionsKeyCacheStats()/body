{
  Keyspace keyspace=Keyspace.open("Keyspace1");
  ColumnFamilyStore store=keyspace.getColumnFamilyStore("Standard2");
  CacheService.instance.keyCache.setCapacity(1000);
  CompactionManager.instance.disableAutoCompaction();
  for (int j=0; j < 10; j++) {
    ByteBuffer key=ByteBufferUtil.bytes(String.valueOf(j));
    RowMutation rm=new RowMutation("Keyspace1",key);
    rm.add("Standard2",ByteBufferUtil.bytes("0"),ByteBufferUtil.EMPTY_BYTE_BUFFER,j);
    rm.apply();
  }
  store.forceBlockingFlush();
  CompactionManager.instance.performMaximal(store);
  SSTableReader sstable=store.getSSTables().iterator().next();
  sstable.getPosition(k(2),SSTableReader.Operator.EQ);
  assertEquals(0,sstable.getKeyCacheHit());
  assertEquals(1,sstable.getBloomFilterTruePositiveCount());
  sstable.getPosition(k(2),SSTableReader.Operator.EQ);
  assertEquals(1,sstable.getKeyCacheHit());
  assertEquals(2,sstable.getBloomFilterTruePositiveCount());
  sstable.getPosition(k(15),SSTableReader.Operator.EQ);
  assertEquals(1,sstable.getKeyCacheHit());
  assertEquals(2,sstable.getBloomFilterTruePositiveCount());
}
