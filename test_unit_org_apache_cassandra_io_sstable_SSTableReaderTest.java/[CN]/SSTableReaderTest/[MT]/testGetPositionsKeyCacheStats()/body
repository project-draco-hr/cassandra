{
  Keyspace keyspace=Keyspace.open(KEYSPACE1);
  ColumnFamilyStore store=keyspace.getColumnFamilyStore("Standard2");
  CacheService.instance.keyCache.setCapacity(1000);
  CompactionManager.instance.disableAutoCompaction();
  for (int j=0; j < 10; j++) {
    new RowUpdateBuilder(store.metadata,j,String.valueOf(j)).clustering("0").add("val",ByteBufferUtil.EMPTY_BYTE_BUFFER).build().applyUnsafe();
  }
  store.forceBlockingFlush();
  CompactionManager.instance.performMaximal(store,false);
  SSTableReader sstable=store.getLiveSSTables().iterator().next();
  sstable.getPosition(k(2),SSTableReader.Operator.EQ);
  assertEquals(0,sstable.getKeyCacheHit());
  assertEquals(1,sstable.getBloomFilterTruePositiveCount());
  sstable.getPosition(k(2),SSTableReader.Operator.EQ);
  assertEquals(1,sstable.getKeyCacheHit());
  assertEquals(2,sstable.getBloomFilterTruePositiveCount());
  sstable.getPosition(k(15),SSTableReader.Operator.EQ);
  assertEquals(1,sstable.getKeyCacheHit());
  assertEquals(2,sstable.getBloomFilterTruePositiveCount());
}
