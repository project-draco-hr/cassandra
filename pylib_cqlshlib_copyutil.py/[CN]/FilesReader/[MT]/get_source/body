def get_source(self, paths):
    '\n         Return a source generator. Each source is a named tuple\n         wrapping the source input, file name and a boolean indicating\n         if it requires closing.\n        '

    def make_source(fname):
        try:
            return open(fname, 'rb')
        except IOError as e:
            self.printmsg(("Can't open %r for reading: %s" % (fname, e)))
            return None
    for path in paths.split(','):
        path = path.strip()
        if os.path.isfile(path):
            yield make_source(path)
        else:
            for f in glob.glob(path):
                yield make_source(f)
