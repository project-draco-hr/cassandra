def convert_rows(self, conv, rows):
    '\n        Try to convert each row. If conversion is OK then add the converted result to converted_rows\n        and the original string to good_rows. Else add the original string to error_rows. Return the three\n        arrays.\n        '
    good_rows = []
    errors = defaultdict(list)
    converted_rows = []
    for r in rows:
        row = self.filter_row_values(r)
        if (len(row) != len(self.valid_columns)):
            msg = ('Invalid row length %d should be %d' % (len(row), len(self.valid_columns)))
            errors[msg].append(row)
            continue
        try:
            converted_rows.append(conv.get_row_values(row))
            good_rows.append(row)
        except ParseError as err:
            errors[err.message].append(row)
    return (good_rows, converted_rows, errors)
