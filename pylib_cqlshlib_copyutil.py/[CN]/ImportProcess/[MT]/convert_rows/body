def convert_rows(self, conv, chunk):
    '\n        Return converted rows and report any errors during conversion.\n        '

    def filter_row_values(row):
        return [v for (i, v) in enumerate(row) if (i not in self.skip_column_indexes)]
    if self.skip_column_indexes:
        rows = [filter_row_values(r) for r in list(csv.reader(chunk['rows'], **self.dialect_options))]
    else:
        rows = list(csv.reader(chunk['rows'], **self.dialect_options))
    errors = defaultdict(list)

    def convert_row(r):
        try:
            return conv.convert_row(r)
        except Exception as err:
            errors[err.message].append(r)
            return None
    converted_rows = filter(None, [convert_row(r) for r in rows])
    if errors:
        for (msg, rows) in errors.iteritems():
            self.report_error(ParseError(msg), chunk, rows)
    return converted_rows
