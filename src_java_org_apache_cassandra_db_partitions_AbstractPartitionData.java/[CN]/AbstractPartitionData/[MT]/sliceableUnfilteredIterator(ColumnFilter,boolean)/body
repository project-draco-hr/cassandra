{
  return new AbstractSliceableIterator(this,selection.fetchedColumns(),reversed){
    private final RowIterator rowIterator=createRowIterator(selection,reversed);
    private RowAndTombstoneMergeIterator mergeIterator=new RowAndTombstoneMergeIterator(metadata.comparator,reversed);
    protected Unfiltered computeNext(){
      if (!mergeIterator.isSet())       mergeIterator.setTo(rowIterator,deletionInfo.rangeIterator(reversed));
      return mergeIterator.hasNext() ? mergeIterator.next() : endOfData();
    }
    public Iterator<Unfiltered> slice(    Slice slice){
      return mergeIterator.setTo(rowIterator.slice(slice),deletionInfo.rangeIterator(slice,reversed));
    }
  }
;
}
