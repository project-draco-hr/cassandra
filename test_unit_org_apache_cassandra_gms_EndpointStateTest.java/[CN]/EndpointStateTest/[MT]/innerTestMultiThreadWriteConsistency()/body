{
  final Token token=DatabaseDescriptor.getPartitioner().getRandomToken();
  final List<Token> tokens=Collections.singletonList(token);
  final String ip="127.0.0.1";
  final UUID hostId=UUID.randomUUID();
  final HeartBeatState hb=new HeartBeatState(0);
  final EndpointState state=new EndpointState(hb);
  Thread t1=new Thread(new Runnable(){
    public void run(){
      Map<ApplicationState,VersionedValue> states=new EnumMap<>(ApplicationState.class);
      states.put(ApplicationState.TOKENS,valueFactory.tokens(tokens));
      states.put(ApplicationState.STATUS,valueFactory.normal(tokens));
      state.addApplicationStates(states);
    }
  }
);
  Thread t2=new Thread(new Runnable(){
    public void run(){
      Map<ApplicationState,VersionedValue> states=new EnumMap<>(ApplicationState.class);
      states.put(ApplicationState.INTERNAL_IP,valueFactory.internalIP(ip));
      states.put(ApplicationState.HOST_ID,valueFactory.hostId(hostId));
      state.addApplicationStates(states);
    }
  }
);
  t1.start();
  t2.start();
  t1.join();
  t2.join();
  Set<Map.Entry<ApplicationState,VersionedValue>> states=state.states();
  assertEquals(4,states.size());
  Map<ApplicationState,VersionedValue> values=new EnumMap<>(ApplicationState.class);
  for (  Map.Entry<ApplicationState,VersionedValue> entry : states)   values.put(entry.getKey(),entry.getValue());
  assertTrue(values.containsKey(ApplicationState.STATUS));
  assertTrue(values.containsKey(ApplicationState.TOKENS));
  assertTrue(values.containsKey(ApplicationState.INTERNAL_IP));
  assertTrue(values.containsKey(ApplicationState.HOST_ID));
}
