{
  try {
    logger.info("Hostname: {}",InetAddress.getLocalHost().getHostName());
  }
 catch (  UnknownHostException e1) {
    logger.info("Could not resolve local host");
  }
  long now=System.currentTimeMillis();
  if (now < EARLIEST_LAUNCH_DATE) {
    logger.error("current machine time is {}, but that is seemingly incorrect. exiting now.",new Date(now));
    System.exit(3);
  }
  if (!DatabaseDescriptor.hasLargeAddressSpace())   logger.info("32bit JVM detected.  It is recommended to run Cassandra on a 64bit JVM for better performance.");
  String javaVersion=System.getProperty("java.version");
  String javaVmName=System.getProperty("java.vm.name");
  logger.info("JVM vendor/version: {}/{}",javaVmName,javaVersion);
  if (javaVmName.contains("OpenJDK")) {
    logger.warn("OpenJDK is not recommended. Please upgrade to the newest Oracle Java release");
  }
 else   if (!javaVmName.contains("HotSpot")) {
    logger.warn("Non-Oracle JVM detected.  Some features, such as immediate unmap of compacted SSTables, may not work as intended");
  }
  logger.info("Heap size: {}/{}",Runtime.getRuntime().totalMemory(),Runtime.getRuntime().maxMemory());
  for (  MemoryPoolMXBean pool : ManagementFactory.getMemoryPoolMXBeans())   logger.info("{} {}: {}",pool.getName(),pool.getType(),pool.getPeakUsage());
  logger.info("Classpath: {}",System.getProperty("java.class.path"));
  if (!CLibrary.jnaAvailable()) {
    boolean jnaRequired=!Boolean.getBoolean("cassandra.boot_without_jna");
    if (jnaRequired) {
      logger.error("JNA failing to initialize properly. Use -Dcassandra.boot_without_jna=true to bootstrap even so.");
      System.exit(3);
    }
  }
  CLibrary.tryMlockall();
  maybeInitJmx();
  Thread.setDefaultUncaughtExceptionHandler(new Thread.UncaughtExceptionHandler(){
    public void uncaughtException(    Thread t,    Throwable e){
      StorageMetrics.exceptions.inc();
      logger.error("Exception in thread {}",t,e);
      Tracing.trace("Exception in thread {}",t,e);
      for (Throwable e2=e; e2 != null; e2=e2.getCause()) {
        JVMStabilityInspector.inspectThrowable(e2);
        if (e2 instanceof FSError) {
          if (e2 != e)           logger.error("Exception in thread {}",t,e2);
          FileUtils.handleFSError((FSError)e2);
        }
        if (e2 instanceof CorruptSSTableException) {
          if (e2 != e)           logger.error("Exception in thread " + t,e2);
          FileUtils.handleCorruptSSTable((CorruptSSTableException)e2);
        }
      }
    }
  }
);
  Iterable<String> dirs=Iterables.concat(Arrays.asList(DatabaseDescriptor.getAllDataFileLocations()),Arrays.asList(DatabaseDescriptor.getCommitLogLocation(),DatabaseDescriptor.getSavedCachesLocation()));
  for (  String dataDir : dirs) {
    logger.debug("Checking directory {}",dataDir);
    File dir=new File(dataDir);
    if (!dir.exists()) {
      logger.error("Directory {} doesn't exist",dataDir);
      if (!dir.mkdirs()) {
        logger.error("Has no permission to create {} directory",dataDir);
        System.exit(3);
      }
    }
    if (!Directories.verifyFullPermissions(dir,dataDir)) {
      System.exit(3);
    }
  }
  if (CacheService.instance == null)   throw new RuntimeException("Failed to initialize Cache Service.");
  for (  CFMetaData cfm : Schema.instance.getKeyspaceMetaData(Keyspace.SYSTEM_KS).values())   ColumnFamilyStore.scrubDataDirectories(cfm);
  try {
    SystemKeyspace.checkHealth();
  }
 catch (  ConfigurationException e) {
    logger.error("Fatal exception during initialization",e);
    System.exit(100);
  }
  DatabaseDescriptor.loadSchemas();
  Map<Pair<String,String>,Map<Integer,UUID>> unfinishedCompactions=SystemKeyspace.getUnfinishedCompactions();
  for (  Pair<String,String> kscf : unfinishedCompactions.keySet()) {
    CFMetaData cfm=Schema.instance.getCFMetaData(kscf.left,kscf.right);
    if (cfm != null)     ColumnFamilyStore.removeUnfinishedCompactionLeftovers(cfm,unfinishedCompactions.get(kscf));
  }
  SystemKeyspace.discardCompactionsInProgress();
  for (  String keyspaceName : Schema.instance.getKeyspaces()) {
    if (keyspaceName.equals(Keyspace.SYSTEM_KS))     continue;
    for (    CFMetaData cfm : Schema.instance.getKeyspaceMetaData(keyspaceName).values())     ColumnFamilyStore.scrubDataDirectories(cfm);
  }
  Keyspace.setInitialized();
  for (  String keyspaceName : Schema.instance.getKeyspaces()) {
    if (logger.isDebugEnabled())     logger.debug("opening keyspace {}",keyspaceName);
    for (    ColumnFamilyStore cfs : Keyspace.open(keyspaceName).getColumnFamilyStores()) {
      for (      ColumnFamilyStore store : cfs.concatWithIndexes()) {
        store.disableAutoCompaction();
      }
    }
  }
  if (CacheService.instance.keyCache.size() > 0)   logger.info("completed pre-loading ({} keys) key cache.",CacheService.instance.keyCache.size());
  if (CacheService.instance.rowCache.size() > 0)   logger.info("completed pre-loading ({} keys) row cache.",CacheService.instance.rowCache.size());
  try {
    GCInspector.register();
  }
 catch (  Throwable t) {
    JVMStabilityInspector.inspectThrowable(t);
    logger.warn("Unable to start GCInspector (currently only supported on the Sun JVM)");
  }
  try {
    CommitLog.instance.recover();
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
  for (  Keyspace keyspace : Keyspace.all()) {
    for (    ColumnFamilyStore cfs : keyspace.getColumnFamilyStores()) {
      for (      final ColumnFamilyStore store : cfs.concatWithIndexes()) {
        if (store.getCompactionStrategy().shouldBeEnabled())         store.enableAutoCompaction();
      }
    }
  }
  SystemKeyspace.finishStartup();
  StorageService.instance.registerDaemon(this);
  try {
    StorageService.instance.initServer();
  }
 catch (  ConfigurationException e) {
    logger.error("Fatal configuration error",e);
    System.err.println(e.getMessage() + "\nFatal configuration error; unable to start server.  See log for stacktrace.");
    System.exit(1);
  }
  Mx4jTool.maybeLoad();
  String metricsReporterConfigFile=System.getProperty("cassandra.metricsReporterConfigFile");
  if (metricsReporterConfigFile != null) {
    logger.info("Trying to load metrics-reporter-config from file: {}",metricsReporterConfigFile);
    try {
      String reportFileLocation=CassandraDaemon.class.getClassLoader().getResource(metricsReporterConfigFile).getFile();
      ReporterConfig.loadFromFile(reportFileLocation).enableAll();
    }
 catch (    Exception e) {
      logger.warn("Failed to load metrics-reporter-config, metric sinks will not be activated",e);
    }
  }
  if (!FBUtilities.getBroadcastAddress().equals(InetAddress.getLoopbackAddress()))   waitForGossipToSettle();
  ScheduledExecutors.optionalTasks.scheduleWithFixedDelay(ColumnFamilyStore.getBackgroundCompactionTaskSubmitter(),5,1,TimeUnit.MINUTES);
  int sizeRecorderInterval=Integer.getInteger("cassandra.size_recorder_interval",5 * 60);
  if (sizeRecorderInterval > 0)   ScheduledExecutors.optionalTasks.scheduleWithFixedDelay(SizeEstimatesRecorder.instance,30,sizeRecorderInterval,TimeUnit.SECONDS);
  InetAddress rpcAddr=DatabaseDescriptor.getRpcAddress();
  int rpcPort=DatabaseDescriptor.getRpcPort();
  int listenBacklog=DatabaseDescriptor.getRpcListenBacklog();
  thriftServer=new ThriftServer(rpcAddr,rpcPort,listenBacklog);
  InetAddress nativeAddr=DatabaseDescriptor.getRpcAddress();
  int nativePort=DatabaseDescriptor.getNativeTransportPort();
  nativeServer=new org.apache.cassandra.transport.Server(nativeAddr,nativePort);
  setupCompleted=true;
}
