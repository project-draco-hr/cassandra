{
  FileUtils.setFSErrorHandler(new DefaultFSErrorHandler());
  if (FBUtilities.isWindows())   WindowsFailedSnapshotTracker.deleteOldSnapshots();
  ThreadAwareSecurityManager.install();
  logSystemInfo();
  CLibrary.tryMlockall();
  try {
    startupChecks.verify();
  }
 catch (  StartupException e) {
    exitOrFail(e.returnCode,e.getMessage(),e.getCause());
  }
  try {
    if (SystemKeyspace.snapshotOnVersionChange()) {
      SystemKeyspace.migrateDataDirs();
    }
  }
 catch (  IOException e) {
    exitOrFail(3,e.getMessage(),e.getCause());
  }
  SystemKeyspace.persistLocalMetadata();
  maybeInitJmx();
  Thread.setDefaultUncaughtExceptionHandler(new Thread.UncaughtExceptionHandler(){
    public void uncaughtException(    Thread t,    Throwable e){
      StorageMetrics.exceptions.inc();
      logger.error("Exception in thread {}",t,e);
      Tracing.trace("Exception in thread {}",t,e);
      for (Throwable e2=e; e2 != null; e2=e2.getCause()) {
        JVMStabilityInspector.inspectThrowable(e2);
        if (e2 instanceof FSError) {
          if (e2 != e)           logger.error("Exception in thread {}",t,e2);
          FileUtils.handleFSError((FSError)e2);
        }
        if (e2 instanceof CorruptSSTableException) {
          if (e2 != e)           logger.error("Exception in thread " + t,e2);
          FileUtils.handleCorruptSSTable((CorruptSSTableException)e2);
        }
      }
    }
  }
);
  LegacySchemaMigrator.migrate();
  StorageService.instance.populateTokenMetadata();
  Schema.instance.loadFromDisk();
  for (  String keyspaceName : Schema.instance.getKeyspaces()) {
    if (keyspaceName.equals(SystemKeyspace.NAME))     continue;
    for (    CFMetaData cfm : Schema.instance.getTablesAndViews(keyspaceName))     ColumnFamilyStore.scrubDataDirectories(cfm);
  }
  Keyspace.setInitialized();
  for (  String keyspaceName : Schema.instance.getKeyspaces()) {
    if (logger.isDebugEnabled())     logger.debug("opening keyspace {}",keyspaceName);
    for (    ColumnFamilyStore cfs : Keyspace.open(keyspaceName).getColumnFamilyStores()) {
      for (      ColumnFamilyStore store : cfs.concatWithIndexes()) {
        store.disableAutoCompaction();
      }
    }
  }
  try {
    loadRowAndKeyCacheAsync().get();
  }
 catch (  Throwable t) {
    JVMStabilityInspector.inspectThrowable(t);
    logger.warn("Error loading key or row cache",t);
  }
  try {
    GCInspector.register();
  }
 catch (  Throwable t) {
    JVMStabilityInspector.inspectThrowable(t);
    logger.warn("Unable to start GCInspector (currently only supported on the Sun JVM)");
  }
  try {
    CommitLog.instance.recover();
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
  StorageService.instance.populateTokenMetadata();
  new LegacyHintsMigrator(DatabaseDescriptor.getHintsDirectory(),DatabaseDescriptor.getMaxHintsFileSize()).migrate();
  LegacyBatchlogMigrator.migrate();
  for (  Keyspace keyspace : Keyspace.all()) {
    for (    ColumnFamilyStore cfs : keyspace.getColumnFamilyStores()) {
      for (      final ColumnFamilyStore store : cfs.concatWithIndexes()) {
        if (store.getCompactionStrategyManager().shouldBeEnabled())         store.enableAutoCompaction();
      }
    }
  }
  Runnable viewRebuild=new Runnable(){
    @Override public void run(){
      for (      Keyspace keyspace : Keyspace.all()) {
        keyspace.viewManager.buildAllViews();
      }
    }
  }
;
  ScheduledExecutors.optionalTasks.schedule(viewRebuild,StorageService.RING_DELAY,TimeUnit.MILLISECONDS);
  SystemKeyspace.finishStartup();
  StorageService.instance.registerDaemon(this);
  try {
    StorageService.instance.initServer();
  }
 catch (  ConfigurationException e) {
    System.err.println(e.getMessage() + "\nFatal configuration error; unable to start server.  See log for stacktrace.");
    exitOrFail(1,"Fatal configuration error",e);
  }
  Mx4jTool.maybeLoad();
  String metricsReporterConfigFile=System.getProperty("cassandra.metricsReporterConfigFile");
  if (metricsReporterConfigFile != null) {
    logger.info("Trying to load metrics-reporter-config from file: {}",metricsReporterConfigFile);
    try {
      String reportFileLocation=CassandraDaemon.class.getClassLoader().getResource(metricsReporterConfigFile).getFile();
      ReporterConfig.loadFromFile(reportFileLocation).enableAll(CassandraMetricsRegistry.Metrics);
    }
 catch (    Exception e) {
      logger.warn("Failed to load metrics-reporter-config, metric sinks will not be activated",e);
    }
  }
  if (!FBUtilities.getBroadcastAddress().equals(InetAddress.getLoopbackAddress()))   waitForGossipToSettle();
  ScheduledExecutors.optionalTasks.scheduleWithFixedDelay(ColumnFamilyStore.getBackgroundCompactionTaskSubmitter(),5,1,TimeUnit.MINUTES);
  int sizeRecorderInterval=Integer.getInteger("cassandra.size_recorder_interval",5 * 60);
  if (sizeRecorderInterval > 0)   ScheduledExecutors.optionalTasks.scheduleWithFixedDelay(SizeEstimatesRecorder.instance,30,sizeRecorderInterval,TimeUnit.SECONDS);
  InetAddress rpcAddr=DatabaseDescriptor.getRpcAddress();
  int rpcPort=DatabaseDescriptor.getRpcPort();
  int listenBacklog=DatabaseDescriptor.getRpcListenBacklog();
  thriftServer=new ThriftServer(rpcAddr,rpcPort,listenBacklog);
  nativeTransportService=new NativeTransportService();
  completeSetup();
}
