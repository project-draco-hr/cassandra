{
  int listenPort=DatabaseDescriptor.getThriftPort();
  String listenAddr=DatabaseDescriptor.getThriftAddress();
  if (listenAddr == null)   listenAddr=FBUtilities.getHostAddress();
  Thread.setDefaultUncaughtExceptionHandler(new Thread.UncaughtExceptionHandler(){
    public void uncaughtException(    Thread t,    Throwable e){
      logger.error("Fatal exception in thread " + t,e);
      if (e instanceof OutOfMemoryError) {
        System.exit(100);
      }
    }
  }
);
  CalloutManager.instance().onStart();
  Set<String> tables=DatabaseDescriptor.getTableToColumnFamilyMap().keySet();
  for (  String table : tables) {
    if (logger.isDebugEnabled())     logger.debug("opening keyspace " + table);
    Table tbl=Table.open(table);
    tbl.onStart();
  }
  RecoveryManager recoveryMgr=RecoveryManager.instance();
  recoveryMgr.doRecovery();
  CassandraServer peerStorageServer=new CassandraServer();
  peerStorageServer.start();
  Cassandra.Processor processor=new Cassandra.Processor(peerStorageServer);
  TServerSocket tServerSocket=new TServerSocket(new InetSocketAddress(listenAddr,listenPort));
  if (logger.isDebugEnabled())   logger.debug(String.format("Binding thrift service to %s:%s",listenAddr,listenPort));
  TProtocolFactory tProtocolFactory=new TBinaryProtocol.Factory();
  TTransportFactory inTransportFactory, outTransportFactory;
  if (DatabaseDescriptor.isThriftFramed()) {
    inTransportFactory=new TFramedTransport.Factory();
    outTransportFactory=new TFramedTransport.Factory();
  }
 else {
    inTransportFactory=new TTransportFactory();
    outTransportFactory=new TTransportFactory();
  }
  TThreadPoolServer.Options options=new TThreadPoolServer.Options();
  options.minWorkerThreads=64;
  serverEngine=new TThreadPoolServer(new TProcessorFactory(processor),tServerSocket,inTransportFactory,outTransportFactory,tProtocolFactory,tProtocolFactory,options);
}
