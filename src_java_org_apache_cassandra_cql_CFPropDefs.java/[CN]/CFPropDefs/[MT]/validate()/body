{
  compactionStrategyClass=CFMetaData.DEFAULT_COMPACTION_STRATEGY_CLASS;
  Set<String> propsToRemove=new HashSet<String>();
  for (  String property : properties.keySet()) {
    if (!property.contains(":"))     continue;
    String key=property.split(":")[1];
    String val=properties.get(property);
    if (property.startsWith(COMPACTION_OPTIONS_PREFIX)) {
      compactionStrategyOptions.put(key,val);
      propsToRemove.add(property);
    }
    if (property.startsWith(COMPRESSION_PARAMETERS_PREFIX)) {
      compressionParameters.put(key,val);
      propsToRemove.add(property);
    }
  }
  for (  String property : propsToRemove)   properties.remove(property);
  for (  String bogus : Sets.difference(properties.keySet(),allowedKeywords))   throw new InvalidRequestException(bogus + " is not a valid keyword argument for CREATE COLUMNFAMILY");
  for (  String obsolete : Sets.intersection(properties.keySet(),obsoleteKeywords))   logger.warn("Ignoring obsolete property {}",obsolete);
  Integer minCompaction=getPropertyInt(KW_MINCOMPACTIONTHRESHOLD,null);
  Integer maxCompaction=getPropertyInt(KW_MAXCOMPACTIONTHRESHOLD,null);
  if ((minCompaction != null) && (maxCompaction != null)) {
    if ((minCompaction > maxCompaction) && (maxCompaction != 0))     throw new InvalidRequestException(String.format("%s cannot be larger than %s",KW_MINCOMPACTIONTHRESHOLD,KW_MAXCOMPACTIONTHRESHOLD));
  }
 else   if (minCompaction != null) {
    if (minCompaction > CFMetaData.DEFAULT_MAX_COMPACTION_THRESHOLD)     throw new InvalidRequestException(String.format("%s cannot be larger than %s, (default %s)",KW_MINCOMPACTIONTHRESHOLD,KW_MAXCOMPACTIONTHRESHOLD,CFMetaData.DEFAULT_MAX_COMPACTION_THRESHOLD));
  }
 else   if (maxCompaction != null) {
    if ((maxCompaction < CFMetaData.DEFAULT_MIN_COMPACTION_THRESHOLD) && (maxCompaction != 0))     throw new InvalidRequestException(String.format("%s cannot be smaller than %s, (default %s)",KW_MAXCOMPACTIONTHRESHOLD,KW_MINCOMPACTIONTHRESHOLD,CFMetaData.DEFAULT_MIN_COMPACTION_THRESHOLD));
  }
  CFMetaData.validateCompactionOptions(compactionStrategyClass,compactionStrategyOptions,false);
}
