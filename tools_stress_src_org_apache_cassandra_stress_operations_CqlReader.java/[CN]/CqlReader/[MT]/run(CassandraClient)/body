{
  if (session.getColumnFamilyType() == ColumnFamilyType.Super)   throw new RuntimeException("Super columns are not implemented for CQL");
  if (cqlQuery == null) {
    StringBuilder query=new StringBuilder("SELECT ");
    if (session.columnNames == null) {
      if (session.cqlVersion.startsWith("2"))       query.append("FIRST ").append(session.getColumnsPerKey()).append(" ''..''");
 else       query.append("*");
    }
 else {
      for (int i=0; i < session.columnNames.size(); i++) {
        if (i > 0)         query.append(",");
        query.append('?');
      }
    }
    query.append(" FROM ").append(wrapInQuotesIfRequired("Standard1"));
    if (session.cqlVersion.startsWith("2"))     query.append(" USING CONSISTENCY ").append(session.getConsistencyLevel().toString());
    query.append(" WHERE KEY=?");
    cqlQuery=query.toString();
  }
  List<String> queryParams=new ArrayList<String>();
  if (session.columnNames != null)   for (int i=0; i < session.columnNames.size(); i++)   queryParams.add(getUnQuotedCqlBlob(session.columnNames.get(i).array(),session.cqlVersion.startsWith("3")));
  byte[] key=generateKey();
  queryParams.add(getUnQuotedCqlBlob(key,session.cqlVersion.startsWith("3")));
  String formattedQuery=null;
  TimerContext context=session.latency.time();
  boolean success=false;
  String exceptionMessage=null;
  for (int t=0; t < session.getRetryTimes(); t++) {
    if (success)     break;
    try {
      CqlResult result=null;
      if (session.usePreparedStatements()) {
        Integer stmntId=getPreparedStatement(client,cqlQuery);
        if (session.cqlVersion.startsWith("3"))         result=client.execute_prepared_cql3_query(stmntId,queryParamsAsByteBuffer(queryParams),session.getConsistencyLevel());
 else         result=client.execute_prepared_cql_query(stmntId,queryParamsAsByteBuffer(queryParams));
      }
 else {
        if (formattedQuery == null)         formattedQuery=formatCqlQuery(cqlQuery,queryParams);
        if (session.cqlVersion.startsWith("3"))         result=client.execute_cql3_query(ByteBuffer.wrap(formattedQuery.getBytes()),Compression.NONE,session.getConsistencyLevel());
 else         result=client.execute_cql_query(ByteBuffer.wrap(formattedQuery.getBytes()),Compression.NONE);
      }
      success=(result.rows.get(0).columns.size() != 0);
    }
 catch (    Exception e) {
      exceptionMessage=getExceptionMessage(e);
      success=false;
    }
  }
  if (!success) {
    error(String.format("Operation [%d] retried %d times - error reading key %s %s%n with query %s",index,session.getRetryTimes(),new String(key),(exceptionMessage == null) ? "" : "(" + exceptionMessage + ")",cqlQuery));
  }
  session.operations.getAndIncrement();
  session.keys.getAndIncrement();
  context.stop();
}
