{
  SlicePredicate predicate=new SlicePredicate().setSlice_range(new SliceRange(ByteBufferUtil.EMPTY_BYTE_BUFFER,ByteBufferUtil.EMPTY_BYTE_BUFFER,false,session.getColumnsPerKey()));
  int offset=index * session.getKeysPerThread();
  Map<ByteBuffer,List<ColumnOrSuperColumn>> results;
  if (session.getColumnFamilyType() == ColumnFamilyType.Super) {
    List<ByteBuffer> keys=generateKeys(offset,offset + session.getKeysPerCall());
    for (int j=0; j < session.getSuperColumns(); j++) {
      ColumnParent parent=new ColumnParent("Super1").setSuper_column(ByteBufferUtil.bytes("S" + j));
      TimerContext context=session.latency.time();
      boolean success=false;
      String exceptionMessage=null;
      for (int t=0; t < session.getRetryTimes(); t++) {
        if (success)         break;
        try {
          results=client.multiget_slice(keys,parent,predicate,session.getConsistencyLevel());
          success=(results.size() != 0);
        }
 catch (        Exception e) {
          exceptionMessage=getExceptionMessage(e);
        }
      }
      if (!success) {
        error(String.format("Operation [%d] retried %d times - error on calling multiget_slice for keys %s %s%n",index,session.getRetryTimes(),keys,(exceptionMessage == null) ? "" : "(" + exceptionMessage + ")"));
      }
      session.operations.getAndIncrement();
      session.keys.getAndAdd(keys.size());
      context.stop();
      offset+=session.getKeysPerCall();
    }
  }
 else {
    ColumnParent parent=new ColumnParent("Standard1");
    List<ByteBuffer> keys=generateKeys(offset,offset + session.getKeysPerCall());
    TimerContext context=session.latency.time();
    boolean success=false;
    String exceptionMessage=null;
    for (int t=0; t < session.getRetryTimes(); t++) {
      if (success)       break;
      try {
        results=client.multiget_slice(keys,parent,predicate,session.getConsistencyLevel());
        success=(results.size() != 0);
      }
 catch (      Exception e) {
        exceptionMessage=getExceptionMessage(e);
        success=false;
      }
    }
    if (!success) {
      error(String.format("Operation [%d] retried %d times - error on calling multiget_slice for keys %s %s%n",index,session.getRetryTimes(),keys,(exceptionMessage == null) ? "" : "(" + exceptionMessage + ")"));
    }
    session.operations.getAndIncrement();
    session.keys.getAndAdd(keys.size());
    context.stop();
    offset+=session.getKeysPerCall();
  }
}
