{
  for (int version=Server.MIN_SUPPORTED_VERSION; version <= Server.CURRENT_VERSION; version++) {
    Value value=new Value("[]",ListType.getInstance(UTF8Type.instance,false).asCQL3Type(),ByteBufferUtil.EMPTY_BYTE_BUFFER);
    compareCqlLiteral(version,value);
    value=new Value("{}",SetType.getInstance(UTF8Type.instance,false).asCQL3Type(),ByteBufferUtil.EMPTY_BYTE_BUFFER);
    compareCqlLiteral(version,value);
    value=new Value("{}",MapType.getInstance(UTF8Type.instance,UTF8Type.instance,false).asCQL3Type(),ByteBufferUtil.EMPTY_BYTE_BUFFER);
    compareCqlLiteral(version,value);
    value=new Value("[]",ListType.getInstance(UTF8Type.instance,true).asCQL3Type(),ByteBufferUtil.EMPTY_BYTE_BUFFER);
    compareCqlLiteral(version,value);
    value=new Value("{}",SetType.getInstance(UTF8Type.instance,true).asCQL3Type(),ByteBufferUtil.EMPTY_BYTE_BUFFER);
    compareCqlLiteral(version,value);
    value=new Value("{}",MapType.getInstance(UTF8Type.instance,UTF8Type.instance,true).asCQL3Type(),ByteBufferUtil.EMPTY_BYTE_BUFFER);
    compareCqlLiteral(version,value);
    value=new Value("null",ListType.getInstance(UTF8Type.instance,false).asCQL3Type(),null);
    compareCqlLiteral(version,value);
    value=new Value("null",SetType.getInstance(UTF8Type.instance,false).asCQL3Type(),null);
    compareCqlLiteral(version,value);
    value=new Value("null",MapType.getInstance(UTF8Type.instance,UTF8Type.instance,false).asCQL3Type(),null);
    compareCqlLiteral(version,value);
    value=new Value("[]",ListType.getInstance(UTF8Type.instance,true).asCQL3Type(),null);
    compareCqlLiteral(version,value);
    value=new Value("{}",SetType.getInstance(UTF8Type.instance,true).asCQL3Type(),null);
    compareCqlLiteral(version,value);
    value=new Value("{}",MapType.getInstance(UTF8Type.instance,UTF8Type.instance,true).asCQL3Type(),null);
    compareCqlLiteral(version,value);
  }
}
