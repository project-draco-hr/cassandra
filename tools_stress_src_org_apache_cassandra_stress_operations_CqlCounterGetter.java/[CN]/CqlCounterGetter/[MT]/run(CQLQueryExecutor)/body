{
  if (session.getColumnFamilyType() == ColumnFamilyType.Super)   throw new RuntimeException("Super columns are not implemented for CQL");
  if (cqlQuery == null) {
    StringBuilder query=new StringBuilder("SELECT ");
    if (session.cqlVersion.startsWith("2"))     query.append("FIRST ").append(session.getColumnsPerKey()).append(" ''..''");
 else     query.append("*");
    String counterCF=session.cqlVersion.startsWith("2") ? "Counter1" : "Counter3";
    query.append(" FROM ").append(wrapInQuotesIfRequired(counterCF));
    if (session.cqlVersion.startsWith("2"))     query.append(" USING CONSISTENCY ").append(session.getConsistencyLevel().toString());
    cqlQuery=query.append(" WHERE KEY=?").toString();
  }
  byte[] key=generateKey();
  List<String> queryParams=Collections.singletonList(getUnQuotedCqlBlob(key,session.cqlVersion.startsWith("3")));
  Context context=session.latency.time();
  boolean success=false;
  String exceptionMessage=null;
  for (int t=0; t < session.getRetryTimes(); t++) {
    if (success)     break;
    try {
      success=executor.execute(cqlQuery,queryParams);
    }
 catch (    Exception e) {
      exceptionMessage=getExceptionMessage(e);
      success=false;
    }
  }
  if (!success) {
    error(String.format("Operation [%d] retried %d times - error reading counter key %s %s%n",index,session.getRetryTimes(),new String(key),(exceptionMessage == null) ? "" : "(" + exceptionMessage + ")"));
  }
  session.operations.getAndIncrement();
  session.keys.getAndIncrement();
  context.stop();
}
