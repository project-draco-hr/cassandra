{
  CompactionManager.instance.disableAutoCompaction();
  Keyspace keyspace=Keyspace.open(KEYSPACE);
  ColumnFamilyStore cfs=keyspace.getColumnFamilyStore(CORRUPT_CF2);
  fillCF(cfs,KEYSPACE,CORRUPT_CF2,2);
  List<Row> rows=cfs.getRangeSlice(Util.range("",""),null,new IdentityQueryFilter(),1000);
  SSTableReader sstable=cfs.getSSTables().iterator().next();
  long row0Start=sstable.getPosition(RowPosition.ForKey.get(ByteBufferUtil.bytes("0"),sstable.partitioner),SSTableReader.Operator.EQ).position;
  long row1Start=sstable.getPosition(RowPosition.ForKey.get(ByteBufferUtil.bytes("1"),sstable.partitioner),SSTableReader.Operator.EQ).position;
  long startPosition=row0Start < row1Start ? row0Start : row1Start;
  long endPosition=row0Start < row1Start ? row1Start : row0Start;
  RandomAccessFile file=new RandomAccessFile(sstable.getFilename(),"rw");
  file.seek(startPosition);
  file.writeBytes(StringUtils.repeat('z',(int)2));
  file.close();
  writeChecksum(simpleFullChecksum(sstable.getFilename()),sstable.descriptor.filenameFor(Component.DIGEST));
  Verifier verifier=new Verifier(cfs,sstable,false);
  try {
    verifier.verify(false);
  }
 catch (  CorruptSSTableException err) {
    fail("Simple verify should have succeeded as digest matched");
  }
  try {
    verifier.verify(true);
  }
 catch (  CorruptSSTableException err) {
    return;
  }
  fail("Expected a CorruptSSTableException to be thrown");
}
