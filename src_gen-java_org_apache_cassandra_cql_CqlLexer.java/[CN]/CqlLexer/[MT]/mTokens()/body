{
  int alt14=72;
  alt14=dfa14.predict(input);
switch (alt14) {
case 1:
{
      mT__80();
    }
  break;
case 2:
{
  mT__81();
}
break;
case 3:
{
mT__82();
}
break;
case 4:
{
mT__83();
}
break;
case 5:
{
mT__84();
}
break;
case 6:
{
mT__85();
}
break;
case 7:
{
mT__86();
}
break;
case 8:
{
mT__87();
}
break;
case 9:
{
mT__88();
}
break;
case 10:
{
mT__89();
}
break;
case 11:
{
mT__90();
}
break;
case 12:
{
mT__91();
}
break;
case 13:
{
mT__92();
}
break;
case 14:
{
mT__93();
}
break;
case 15:
{
mT__94();
}
break;
case 16:
{
mT__95();
}
break;
case 17:
{
mT__96();
}
break;
case 18:
{
mT__97();
}
break;
case 19:
{
mT__98();
}
break;
case 20:
{
mT__99();
}
break;
case 21:
{
mT__100();
}
break;
case 22:
{
mT__101();
}
break;
case 23:
{
mT__102();
}
break;
case 24:
{
mT__103();
}
break;
case 25:
{
mT__104();
}
break;
case 26:
{
mK_SELECT();
}
break;
case 27:
{
mK_FROM();
}
break;
case 28:
{
mK_WHERE();
}
break;
case 29:
{
mK_AND();
}
break;
case 30:
{
mK_KEY();
}
break;
case 31:
{
mK_INSERT();
}
break;
case 32:
{
mK_UPDATE();
}
break;
case 33:
{
mK_WITH();
}
break;
case 34:
{
mK_LIMIT();
}
break;
case 35:
{
mK_USING();
}
break;
case 36:
{
mK_CONSISTENCY();
}
break;
case 37:
{
mK_LEVEL();
}
break;
case 38:
{
mK_USE();
}
break;
case 39:
{
mK_FIRST();
}
break;
case 40:
{
mK_REVERSED();
}
break;
case 41:
{
mK_COUNT();
}
break;
case 42:
{
mK_SET();
}
break;
case 43:
{
mK_BEGIN();
}
break;
case 44:
{
mK_APPLY();
}
break;
case 45:
{
mK_BATCH();
}
break;
case 46:
{
mK_TRUNCATE();
}
break;
case 47:
{
mK_DELETE();
}
break;
case 48:
{
mK_IN();
}
break;
case 49:
{
mK_CREATE();
}
break;
case 50:
{
mK_KEYSPACE();
}
break;
case 51:
{
mK_COLUMNFAMILY();
}
break;
case 52:
{
mK_INDEX();
}
break;
case 53:
{
mK_ON();
}
break;
case 54:
{
mK_DROP();
}
break;
case 55:
{
mK_PRIMARY();
}
break;
case 56:
{
mK_INTO();
}
break;
case 57:
{
mK_VALUES();
}
break;
case 58:
{
mK_TIMESTAMP();
}
break;
case 59:
{
mK_TTL();
}
break;
case 60:
{
mK_ALTER();
}
break;
case 61:
{
mK_ADD();
}
break;
case 62:
{
mK_TYPE();
}
break;
case 63:
{
mSTRING_LITERAL();
}
break;
case 64:
{
mRANGEOP();
}
break;
case 65:
{
mINTEGER();
}
break;
case 66:
{
mFLOAT();
}
break;
case 67:
{
mIDENT();
}
break;
case 68:
{
mCOMPIDENT();
}
break;
case 69:
{
mUUID();
}
break;
case 70:
{
mWS();
}
break;
case 71:
{
mCOMMENT();
}
break;
case 72:
{
mMULTILINE_COMMENT();
}
break;
}
}
