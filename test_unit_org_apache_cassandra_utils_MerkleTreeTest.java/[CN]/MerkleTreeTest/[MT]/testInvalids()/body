{
  Iterator<TreeRange> ranges;
  ranges=mt.invalids(new Range(tok(-1),tok(-1)));
  assertEquals(new Range(tok(-1),tok(-1)),ranges.next());
  assertFalse(ranges.hasNext());
  mt.split(tok(4));
  mt.split(tok(2));
  mt.split(tok(6));
  mt.split(tok(3));
  mt.split(tok(5));
  ranges=mt.invalids(new Range(tok(-1),tok(-1)));
  assertEquals(new Range(tok(-1),tok(2)),ranges.next());
  assertEquals(new Range(tok(2),tok(3)),ranges.next());
  assertEquals(new Range(tok(3),tok(4)),ranges.next());
  assertEquals(new Range(tok(4),tok(5)),ranges.next());
  assertEquals(new Range(tok(5),tok(6)),ranges.next());
  assertEquals(new Range(tok(6),tok(-1)),ranges.next());
  assertFalse(ranges.hasNext());
  mt.get(tok(2)).hash("non-null!".getBytes());
  mt.get(tok(4)).hash("non-null!".getBytes());
  mt.get(tok(5)).hash("non-null!".getBytes());
  mt.get(tok(-1)).hash("non-null!".getBytes());
  ranges=mt.invalids(new Range(tok(-1),tok(-1)));
  assertEquals(new Range(tok(2),tok(3)),ranges.next());
  assertEquals(new Range(tok(5),tok(6)),ranges.next());
  assertFalse(ranges.hasNext());
  ranges=mt.invalids(new Range(tok(-1),tok(6)));
  assertEquals(new Range(tok(2),tok(3)),ranges.next());
  assertEquals(new Range(tok(5),tok(6)),ranges.next());
  assertFalse(ranges.hasNext());
  ranges=mt.invalids(new Range(tok(2),tok(-1)));
  assertEquals(new Range(tok(2),tok(3)),ranges.next());
  assertEquals(new Range(tok(5),tok(6)),ranges.next());
  assertFalse(ranges.hasNext());
}
