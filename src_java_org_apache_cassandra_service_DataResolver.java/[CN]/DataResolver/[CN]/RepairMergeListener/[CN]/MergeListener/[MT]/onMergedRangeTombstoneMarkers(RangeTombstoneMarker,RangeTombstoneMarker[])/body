{
  for (int i=0; i < versions.length; i++) {
    RangeTombstoneMarker marker=versions[i];
    if (merged.isClose(isReversed) && markerOpen[i] != null) {
      Slice.Bound open=markerOpen[i];
      Slice.Bound close=merged.isBoundary() ? ((RangeTombstoneBoundaryMarker)merged).createCorrespondingCloseBound(isReversed).clustering() : merged.clustering();
      update(i).addRangeTombstone(Slice.make(isReversed ? close : open,isReversed ? open : close),markerTime[i]);
    }
    if (merged.isOpen(isReversed) && (marker == null || merged.openDeletionTime(isReversed).supersedes(marker.openDeletionTime(isReversed)))) {
      markerOpen[i]=merged.isBoundary() ? ((RangeTombstoneBoundaryMarker)merged).createCorrespondingOpenBound(isReversed).clustering() : merged.clustering();
      markerTime[i]=merged.openDeletionTime(isReversed);
    }
  }
}
