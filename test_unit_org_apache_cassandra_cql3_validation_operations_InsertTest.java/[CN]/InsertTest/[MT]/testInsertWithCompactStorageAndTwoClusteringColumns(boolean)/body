{
  createTable("CREATE TABLE %s (partitionKey int," + "clustering_1 int," + "clustering_2 int,"+ "value int,"+ " PRIMARY KEY (partitionKey, clustering_1, clustering_2)) WITH COMPACT STORAGE");
  execute("INSERT INTO %s (partitionKey, clustering_1, value) VALUES (0, 0, 0)");
  execute("INSERT INTO %s (partitionKey, clustering_1, clustering_2, value) VALUES (0, 0, 0, 0)");
  execute("INSERT INTO %s (partitionKey, clustering_1, clustering_2, value) VALUES (0, 0, 1, 1)");
  flush(forceFlush);
  assertRows(execute("SELECT * FROM %s"),row(0,0,null,0),row(0,0,0,0),row(0,0,1,1));
  assertInvalidMessage("PRIMARY KEY column \"clustering_2\" cannot be restricted as preceding column \"clustering_1\" is not restricted","INSERT INTO %s (partitionKey, clustering_2, value) VALUES (0, 0, 0)");
  assertInvalidMessage("Column value is mandatory for this COMPACT STORAGE table","INSERT INTO %s (partitionKey, clustering_1, clustering_2) VALUES (0, 0, 0)");
  assertInvalidMessage("Some partition key parts are missing: partitionkey","INSERT INTO %s (clustering_1, clustering_2, value) VALUES (0, 0, 1)");
  assertInvalidMessage("PRIMARY KEY column \"clustering_2\" cannot be restricted as preceding column \"clustering_1\" is not restricted","INSERT INTO %s (partitionKey, clustering_2, value) VALUES (0, 0, 2)");
  assertInvalidMessage("The column names contains duplicates","INSERT INTO %s (partitionKey, clustering_1, value, clustering_2, value) VALUES (0, 0, 2, 0, 2)");
  assertInvalidMessage("The column names contains duplicates","INSERT INTO %s (partitionKey, clustering_1, clustering_1, clustering_2, value) VALUES (0, 0, 0, 0, 2)");
  assertInvalidMessage("Undefined column name clustering_1x","INSERT INTO %s (partitionKey, clustering_1x, clustering_2, value) VALUES (0, 0, 0, 2)");
  assertInvalidMessage("Undefined column name valuex","INSERT INTO %s (partitionKey, clustering_1, clustering_2, valuex) VALUES (0, 0, 0, 2)");
}
