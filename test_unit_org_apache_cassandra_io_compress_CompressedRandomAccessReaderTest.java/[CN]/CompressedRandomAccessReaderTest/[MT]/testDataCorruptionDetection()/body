{
  String CONTENT="Lorem ipsum dolor sit amet, consectetur adipiscing elit. Etiam vitae.";
  File file=new File("testDataCorruptionDetection");
  file.deleteOnExit();
  File metadata=new File(file.getPath() + ".meta");
  metadata.deleteOnExit();
  assertTrue(file.createNewFile());
  assertTrue(metadata.createNewFile());
  MetadataCollector sstableMetadataCollector=new MetadataCollector(new ClusteringComparator(BytesType.instance));
  try (SequentialWriter writer=new CompressedSequentialWriter(file,metadata.getPath(),null,SequentialWriterOption.DEFAULT,CompressionParams.snappy(),sstableMetadataCollector)){
    writer.write(CONTENT.getBytes());
    writer.finish();
  }
   CompressionMetadata meta=new CompressionMetadata(metadata.getPath(),file.length(),ChecksumType.CRC32);
  CompressionMetadata.Chunk chunk=meta.chunkFor(0);
  try (FileHandle.Builder builder=new FileHandle.Builder(file.getPath()).withCompressionMetadata(meta);FileHandle fh=builder.complete();RandomAccessReader reader=fh.createReader()){
    assertEquals(CONTENT,reader.readLine());
    Random random=new Random();
    RandomAccessFile checksumModifier=null;
    try {
      checksumModifier=new RandomAccessFile(file,"rw");
      byte[] checksum=new byte[4];
      checksumModifier.seek(chunk.length);
      checksumModifier.read(checksum);
      checksumModifier.seek(chunk.length);
      for (int i=0; i < checksum.length; i++) {
        checksumModifier.write(random.nextInt());
        SyncUtil.sync(checksumModifier);
        try (final RandomAccessReader r=fh.createReader()){
          Throwable exception=null;
          try {
            r.readLine();
          }
 catch (          Throwable t) {
            exception=t;
          }
          assertNotNull(exception);
          assertSame(exception.getClass(),CorruptSSTableException.class);
          assertSame(exception.getCause().getClass(),CorruptBlockException.class);
        }
       }
      updateChecksum(checksumModifier,chunk.length,checksum);
      try (RandomAccessReader cr=fh.createReader()){
        assertEquals(CONTENT,cr.readLine());
      }
     }
  finally {
      if (checksumModifier != null)       checksumModifier.close();
    }
  }
 }
