{
  if (!bf.isPresent(partitioner.convertToDiskFormat(decoratedKey)))   return null;
  Pair<Descriptor,DecoratedKey> unifiedKey=new Pair<Descriptor,DecoratedKey>(desc,decoratedKey);
  if (keyCache != null && keyCache.getCapacity() > 0) {
    PositionSize cachedPosition=keyCache.get(unifiedKey);
    if (cachedPosition != null) {
      return cachedPosition;
    }
  }
  KeyPosition sampledPosition=getIndexScanPosition(decoratedKey);
  if (sampledPosition == null) {
    return null;
  }
  if (spannedIndexDataPositions != null) {
    PositionSize info=spannedIndexDataPositions.get(sampledPosition);
    if (info != null)     return info;
  }
  long p=sampledPosition.position;
  FileDataInput input=null;
  try {
    if (indexBuffers == null) {
      input=new BufferedRandomAccessFile(indexFilename(),"r");
      ((BufferedRandomAccessFile)input).seek(p);
    }
 else {
      input=new MappedFileDataInput(indexBuffers[bufferIndex(p)],indexFilename(),(int)(p % BUFFER_SIZE));
    }
    int i=0;
    do {
      DecoratedKey indexDecoratedKey;
      try {
        indexDecoratedKey=partitioner.convertFromDiskFormat(input.readUTF());
      }
 catch (      EOFException e) {
        return null;
      }
      long position=input.readLong();
      int v=indexDecoratedKey.compareTo(decoratedKey);
      if (v == 0) {
        PositionSize info;
        if (!input.isEOF()) {
          int utflen=input.readUnsignedShort();
          if (utflen != input.skipBytes(utflen))           throw new EOFException();
          info=new PositionSize(position,input.readLong() - position);
        }
 else {
          info=new PositionSize(position,length() - position);
        }
        if (keyCache != null && keyCache.getCapacity() > 0)         keyCache.put(unifiedKey,info);
        return info;
      }
      if (v > 0)       return null;
    }
 while (++i < INDEX_INTERVAL);
  }
 catch (  IOException e) {
    throw new IOError(e);
  }
 finally {
    try {
      if (input != null)       input.close();
    }
 catch (    IOException e) {
      logger.error("error closing file",e);
    }
  }
  return null;
}
