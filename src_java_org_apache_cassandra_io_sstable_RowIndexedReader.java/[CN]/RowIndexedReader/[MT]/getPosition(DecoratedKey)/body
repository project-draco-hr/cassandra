{
  if (!bf.isPresent(partitioner.convertToDiskFormat(decoratedKey)))   return null;
  Pair<Descriptor,DecoratedKey> unifiedKey=new Pair<Descriptor,DecoratedKey>(desc,decoratedKey);
  if (keyCache != null && keyCache.getCapacity() > 0) {
    PositionSize cachedPosition=keyCache.get(unifiedKey);
    if (cachedPosition != null) {
      return cachedPosition;
    }
  }
  IndexSummary.KeyPosition sampledPosition=getIndexScanPosition(decoratedKey);
  if (sampledPosition == null)   return null;
  PositionSize info=indexSummary.getSpannedPosition(sampledPosition);
  if (info != null)   return info;
  long p=sampledPosition.indexPosition;
  FileDataInput input;
  int bufferIndex=bufferIndex(p);
  try {
    if (indexBuffers == null) {
      input=new BufferedRandomAccessFile(indexFilename(),"r");
      ((BufferedRandomAccessFile)input).seek(p);
    }
 else {
      input=new MappedFileDataInput(indexBuffers[bufferIndex],indexFilename(),BUFFER_SIZE * bufferIndex,(int)(p % BUFFER_SIZE));
    }
  }
 catch (  IOException e) {
    throw new IOError(e);
  }
  try {
    int i=0;
    do {
      if (input.isEOF() || indexSummary.getSpannedPosition(input.getAbsolutePosition()) != null) {
        if (indexBuffers == null || ++bufferIndex == indexBuffers.length)         break;
        input=new MappedFileDataInput(indexBuffers[bufferIndex],indexFilename(),BUFFER_SIZE * bufferIndex,0);
        continue;
      }
      DecoratedKey indexDecoratedKey=partitioner.convertFromDiskFormat(input.readUTF());
      long dataPosition=input.readLong();
      int v=indexDecoratedKey.compareTo(decoratedKey);
      if (v == 0) {
        info=getDataPositionSize(input,dataPosition);
        if (keyCache != null && keyCache.getCapacity() > 0)         keyCache.put(unifiedKey,info);
        return info;
      }
      if (v > 0)       return null;
    }
 while (++i < IndexSummary.INDEX_INTERVAL);
  }
 catch (  IOException e) {
    throw new IOError(e);
  }
 finally {
    try {
      if (input != null)       input.close();
    }
 catch (    IOException e) {
      logger.error("error closing file",e);
    }
  }
  return null;
}
