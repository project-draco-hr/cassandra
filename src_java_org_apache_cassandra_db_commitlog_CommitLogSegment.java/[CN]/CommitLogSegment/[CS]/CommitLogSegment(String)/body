{
  id=getNextId();
  descriptor=new CommitLogDescriptor(id);
  logFile=new File(DatabaseDescriptor.getCommitLogLocation(),descriptor.fileName());
  try {
    if (filePath != null) {
      File oldFile=new File(filePath);
      if (oldFile.exists()) {
        logger.debug("Re-using discarded CommitLog segment for {} from {}",id,filePath);
        if (!oldFile.renameTo(logFile))         throw new IOException("Rename from " + filePath + " to "+ id+ " failed");
      }
 else {
        logger.debug("Creating new CommitLog segment: " + logFile);
      }
    }
    if (logFile.length() != DatabaseDescriptor.getCommitLogSegmentSize()) {
      try (RandomAccessFile raf=new RandomAccessFile(logFile,"rw")){
        raf.setLength(DatabaseDescriptor.getCommitLogSegmentSize());
      }
 catch (      IOException e) {
        throw new FSWriteError(e,logFile);
      }
    }
    channel=FileChannel.open(logFile.toPath(),StandardOpenOption.WRITE,StandardOpenOption.READ);
    fd=CLibrary.getfd(channel);
    buffer=channel.map(FileChannel.MapMode.READ_WRITE,0,DatabaseDescriptor.getCommitLogSegmentSize());
    CommitLogDescriptor.writeHeader(buffer,descriptor);
    buffer.putInt(CommitLogDescriptor.HEADER_SIZE,0);
    buffer.putLong(CommitLogDescriptor.HEADER_SIZE + 4,0);
    allocatePosition.set(CommitLogDescriptor.HEADER_SIZE + SYNC_MARKER_SIZE);
    lastSyncedOffset=CommitLogDescriptor.HEADER_SIZE;
  }
 catch (  IOException e) {
    throw new FSWriteError(e,logFile);
  }
}
