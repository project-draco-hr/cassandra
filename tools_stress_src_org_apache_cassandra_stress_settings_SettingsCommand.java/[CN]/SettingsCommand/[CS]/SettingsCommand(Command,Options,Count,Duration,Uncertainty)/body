{
  this.type=type;
  this.tries=Math.max(1,Integer.parseInt(options.retries.value()) + 1);
  this.ignoreErrors=options.ignoreErrors.setByUser();
  this.consistencyLevel=ConsistencyLevel.valueOf(options.consistencyLevel.value().toUpperCase());
  this.noWarmup=options.noWarmup.setByUser();
  if (count != null) {
    this.count=Long.parseLong(count.count.value());
    this.duration=0;
    this.durationUnits=null;
    this.targetUncertainty=-1;
    this.minimumUncertaintyMeasurements=-1;
    this.maximumUncertaintyMeasurements=-1;
  }
 else   if (duration != null) {
    this.count=-1;
    this.duration=Long.parseLong(duration.duration.value().substring(0,duration.duration.value().length() - 1));
switch (duration.duration.value().toLowerCase().charAt(duration.duration.value().length() - 1)) {
case 's':
      this.durationUnits=TimeUnit.SECONDS;
    break;
case 'm':
  this.durationUnits=TimeUnit.MINUTES;
break;
case 'h':
this.durationUnits=TimeUnit.HOURS;
break;
default :
throw new IllegalStateException();
}
this.targetUncertainty=-1;
this.minimumUncertaintyMeasurements=-1;
this.maximumUncertaintyMeasurements=-1;
}
 else {
this.count=-1;
this.duration=0;
this.durationUnits=null;
this.targetUncertainty=Double.parseDouble(uncertainty.uncertainty.value());
this.minimumUncertaintyMeasurements=Integer.parseInt(uncertainty.minMeasurements.value());
this.maximumUncertaintyMeasurements=Integer.parseInt(uncertainty.maxMeasurements.value());
}
}
