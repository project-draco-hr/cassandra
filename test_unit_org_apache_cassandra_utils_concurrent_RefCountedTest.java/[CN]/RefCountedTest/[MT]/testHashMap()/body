{
  final Map<Object,Object> map=new HashMap<Object,Object>();
  RefCounted.Tidy tidier=new RefCounted.Tidy(){
    Object ref=map;
    @Override public void tidy() throws Exception {
    }
    @Override public String name(){
      return "42";
    }
  }
;
  Ref<Object> ref=new Ref(new AtomicReference<Map<Object,Object>>(map),tidier);
  Object o=new Object();
  for (int i=0; i < entryCount; i++) {
    map.put(new Object(),o);
  }
  Visitor visitor=new Visitor();
  visitor.run();
  ref.close();
  System.out.println("HashMap visited " + visitor.lastVisitedCount + " iterations "+ visitor.iterations);
  Assert.assertTrue(visitor.lastVisitedCount > (entryCount * 2) && visitor.lastVisitedCount < (entryCount * 2) + fudgeFactor);
  Assert.assertTrue(visitor.iterations > (entryCount * 3) && visitor.iterations < (entryCount * 3) + fudgeFactor);
}
