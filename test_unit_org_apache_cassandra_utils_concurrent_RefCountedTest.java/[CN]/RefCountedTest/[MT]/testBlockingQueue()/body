{
  final BlockingQueue<Object> iterable=new LinkedBlockingQueue<Object>();
  Pair<Object,Object> p=Pair.create(iterable,iterable);
  RefCounted.Tidy tidier=new RefCounted.Tidy(){
    Object ref=iterable;
    @Override public void tidy() throws Exception {
    }
    @Override public String name(){
      return "42";
    }
  }
;
  Ref<Object> ref=new Ref(new AtomicReference<BlockingQueue<Object>>(iterable),tidier);
  for (int i=0; i < entryCount; i++) {
    iterable.add(p);
  }
  Visitor visitor=new Visitor();
  visitor.run();
  ref.close();
  System.out.println("BlockingQueue visited " + visitor.lastVisitedCount + " iterations "+ visitor.iterations);
  Assert.assertTrue(visitor.lastVisitedCount < 10);
  Assert.assertTrue(visitor.iterations > entryCount && visitor.iterations < entryCount + fudgeFactor);
}
