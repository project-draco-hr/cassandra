{
  dos.writeUTF(sliceCommand.keyspace);
  dos.writeUTF(sliceCommand.column_family);
  ByteBuffer sc=sliceCommand.super_column;
  dos.writeInt(sc == null ? 0 : sc.remaining());
  if (sc != null)   ByteBufferUtil.write(sc,dos);
  if (version < MessagingService.VERSION_12) {
    FBUtilities.serialize(new TSerializer(new TBinaryProtocol.Factory()),sliceCommand.predicate,dos);
  }
 else {
    SliceRange range=sliceCommand.predicate.slice_range;
    if (range != null) {
      dos.writeByte(0);
      ByteBufferUtil.writeWithShortLength(range.start,dos);
      ByteBufferUtil.writeWithShortLength(range.finish,dos);
      dos.writeBoolean(range.reversed);
      dos.writeInt(range.count);
    }
 else {
      dos.writeByte(1);
      List<ByteBuffer> columns=sliceCommand.predicate.column_names;
      dos.writeInt(columns.size());
      for (      ByteBuffer column : columns)       ByteBufferUtil.writeWithShortLength(column,dos);
    }
  }
  if (version >= MessagingService.VERSION_11) {
    if (sliceCommand.row_filter == null) {
      dos.writeInt(0);
    }
 else {
      dos.writeInt(sliceCommand.row_filter.size());
      for (      IndexExpression expr : sliceCommand.row_filter) {
        if (version < MessagingService.VERSION_12) {
          FBUtilities.serialize(new TSerializer(new TBinaryProtocol.Factory()),expr,dos);
        }
 else {
          ByteBufferUtil.writeWithShortLength(expr.column_name,dos);
          dos.writeInt(expr.op.getValue());
          ByteBufferUtil.writeWithLength(expr.value,dos);
        }
      }
    }
  }
  AbstractBounds.serializer.serialize(sliceCommand.range,dos,version);
  dos.writeInt(sliceCommand.maxResults);
  if (version >= MessagingService.VERSION_11) {
    dos.writeBoolean(sliceCommand.maxIsColumns);
    dos.writeBoolean(sliceCommand.isPaging);
  }
}
