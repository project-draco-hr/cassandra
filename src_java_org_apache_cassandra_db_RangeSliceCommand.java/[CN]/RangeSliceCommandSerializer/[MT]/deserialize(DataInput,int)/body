{
  String keyspace=dis.readUTF();
  String columnFamily=dis.readUTF();
  int scLength=dis.readInt();
  ByteBuffer superColumn=null;
  if (scLength > 0) {
    byte[] buf=new byte[scLength];
    dis.readFully(buf);
    superColumn=ByteBuffer.wrap(buf);
  }
  IDiskAtomFilter predicate;
  AbstractType<?> comparator=ColumnFamily.getComparatorFor(keyspace,columnFamily,superColumn);
  if (version < MessagingService.VERSION_12) {
    SlicePredicate pred=new SlicePredicate();
    FBUtilities.deserialize(new TDeserializer(new TBinaryProtocol.Factory()),pred,dis);
    predicate=ThriftValidation.asIFilter(pred,comparator);
  }
 else {
    predicate=IDiskAtomFilter.Serializer.instance.deserialize(dis,version,comparator);
  }
  List<IndexExpression> rowFilter=null;
  if (version >= MessagingService.VERSION_11) {
    int filterCount=dis.readInt();
    rowFilter=new ArrayList<IndexExpression>(filterCount);
    for (int i=0; i < filterCount; i++) {
      IndexExpression expr;
      if (version < MessagingService.VERSION_12) {
        expr=new IndexExpression();
        FBUtilities.deserialize(new TDeserializer(new TBinaryProtocol.Factory()),expr,dis);
      }
 else {
        expr=new IndexExpression(ByteBufferUtil.readWithShortLength(dis),IndexOperator.findByValue(dis.readInt()),ByteBufferUtil.readWithShortLength(dis));
      }
      rowFilter.add(expr);
    }
  }
  AbstractBounds<RowPosition> range=AbstractBounds.serializer.deserialize(dis,version).toRowBounds();
  int maxResults=dis.readInt();
  boolean maxIsColumns=false;
  boolean isPaging=false;
  if (version >= MessagingService.VERSION_11) {
    maxIsColumns=dis.readBoolean();
    isPaging=dis.readBoolean();
  }
  return new RangeSliceCommand(keyspace,columnFamily,superColumn,predicate,range,rowFilter,maxResults,maxIsColumns,isPaging);
}
