{
  int ksLength=FBUtilities.encodedUTF8Length(rangeSliceCommand.keyspace);
  long size=TypeSizes.NATIVE.sizeof(ksLength) + ksLength;
  int cfLength=FBUtilities.encodedUTF8Length(rangeSliceCommand.column_family);
  size+=TypeSizes.NATIVE.sizeof(cfLength) + cfLength;
  ByteBuffer sc=rangeSliceCommand.super_column;
  if (sc != null) {
    size+=TypeSizes.NATIVE.sizeof(sc.remaining());
    size+=sc.remaining();
  }
 else {
    size+=TypeSizes.NATIVE.sizeof(0);
  }
  TSerializer ser=new TSerializer(new TBinaryProtocol.Factory());
  try {
    int predicateLength=ser.serialize(rangeSliceCommand.predicate).length;
    size+=TypeSizes.NATIVE.sizeof(predicateLength);
    size+=predicateLength;
  }
 catch (  TException e) {
    throw new RuntimeException(e);
  }
  if (version >= MessagingService.VERSION_11) {
    if (rangeSliceCommand.row_filter == null) {
      size+=TypeSizes.NATIVE.sizeof(0);
    }
 else {
      size+=TypeSizes.NATIVE.sizeof(rangeSliceCommand.row_filter.size());
      for (      IndexExpression expr : rangeSliceCommand.row_filter) {
        try {
          int filterLength=ser.serialize(expr).length;
          size+=TypeSizes.NATIVE.sizeof(filterLength);
          size+=filterLength;
        }
 catch (        TException e) {
          throw new RuntimeException(e);
        }
      }
    }
  }
  size+=AbstractBounds.serializer.serializedSize(rangeSliceCommand.range,version);
  size+=TypeSizes.NATIVE.sizeof(rangeSliceCommand.maxResults);
  if (version >= MessagingService.VERSION_11) {
    size+=TypeSizes.NATIVE.sizeof(rangeSliceCommand.maxIsColumns);
    size+=TypeSizes.NATIVE.sizeof(rangeSliceCommand.isPaging);
  }
  return size;
}
