{
  if (logger_.isDebugEnabled())   logger_.debug("resolving " + responses.size() + " responses");
  long startTime=System.currentTimeMillis();
  List<ColumnFamily> versions=new ArrayList<ColumnFamily>(responses.size());
  List<InetAddress> endpoints=new ArrayList<InetAddress>(responses.size());
  DecoratedKey key=null;
  ByteBuffer digest=FBUtilities.EMPTY_BYTE_BUFFER;
  boolean isDigestQuery=false;
  for (  Message message : responses) {
    ReadResponse result=results.get(message);
    if (result == null)     continue;
    if (result.isDigestQuery()) {
      digest=result.digest();
      isDigestQuery=true;
    }
 else {
      versions.add(result.row().cf);
      endpoints.add(message.getFrom());
      key=result.row().key;
    }
  }
  if (isDigestQuery) {
    for (    ColumnFamily cf : versions) {
      if (!ColumnFamily.digest(cf).equals(digest)) {
        String s=String.format("Mismatch for key %s (%s vs %s)",key,FBUtilities.bytesToHex(ColumnFamily.digest(cf)),FBUtilities.bytesToHex(digest));
        throw new DigestMismatchException(s);
      }
    }
    if (logger_.isDebugEnabled())     logger_.debug("digests verified");
  }
  ColumnFamily resolved;
  if (versions.size() > 1) {
    resolved=resolveSuperset(versions);
    if (logger_.isDebugEnabled())     logger_.debug("versions merged");
    maybeScheduleRepairs(resolved,table,key,versions,endpoints);
  }
 else {
    resolved=versions.get(0);
  }
  if (logger_.isDebugEnabled())   logger_.debug("resolve: " + (System.currentTimeMillis() - startTime) + " ms.");
  return new Row(key,resolved);
}
