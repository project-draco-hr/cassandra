{
  if (logger_.isDebugEnabled())   logger_.debug("resolving " + results.size() + " responses");
  long startTime=System.currentTimeMillis();
  List<ColumnFamily> versions=new ArrayList<ColumnFamily>();
  List<InetAddress> endpoints=new ArrayList<InetAddress>();
  for (  Map.Entry<Message,ReadResponse> entry : results.entrySet()) {
    ReadResponse result=entry.getValue();
    Message message=entry.getKey();
    ByteBuffer resultDigest=result.isDigestQuery() ? result.digest() : ColumnFamily.digest(result.row().cf);
    if (digest == null)     digest=resultDigest;
 else     if (!digest.equals(resultDigest))     throw new DigestMismatchException(key,digest,resultDigest);
    if (!result.isDigestQuery()) {
      versions.add(result.row().cf);
      endpoints.add(message.getFrom());
    }
  }
  if (logger_.isDebugEnabled())   logger_.debug("digests verified");
  ColumnFamily resolved;
  if (versions.size() > 1) {
    resolved=resolveSuperset(versions);
    if (logger_.isDebugEnabled())     logger_.debug("versions merged");
    maybeScheduleRepairs(resolved,table,key,versions,endpoints);
  }
 else {
    resolved=versions.get(0);
  }
  if (logger_.isDebugEnabled())   logger_.debug("resolve: " + (System.currentTimeMillis() - startTime) + " ms.");
  return new Row(key,resolved);
}
