{
  if (logger_.isDebugEnabled())   logger_.debug("resolving " + results.size() + " responses");
  long startTime=System.currentTimeMillis();
  List<ColumnFamily> versions=new ArrayList<ColumnFamily>();
  List<InetAddress> endpoints=new ArrayList<InetAddress>();
  ByteBuffer digest=null;
  for (  Map.Entry<Message,ReadResponse> entry : results.entrySet()) {
    ReadResponse result=entry.getValue();
    Message message=entry.getKey();
    if (result.isDigestQuery()) {
      if (digest != null)       checkDigest(key,digest,result.digest());
      digest=result.digest();
    }
 else {
      ColumnFamily cf=result.row().cf;
      InetAddress from=message.getFrom();
      if (cf != null) {
        AbstractType defaultValidator=cf.metadata().getDefaultValidator();
        if (!FBUtilities.getLocalAddress().equals(from) && defaultValidator.isCommutative()) {
          cf=cf.cloneMe();
          ((AbstractCommutativeType)defaultValidator).cleanContext(cf,FBUtilities.getLocalAddress());
        }
      }
      versions.add(cf);
      endpoints.add(from);
    }
  }
  if (digest != null) {
    for (    ColumnFamily cf : versions) {
      checkDigest(key,digest,ColumnFamily.digest(cf));
    }
    if (logger_.isDebugEnabled())     logger_.debug("digests verified");
  }
  ColumnFamily resolved;
  if (versions.size() > 1) {
    resolved=resolveSuperset(versions);
    if (logger_.isDebugEnabled())     logger_.debug("versions merged");
    maybeScheduleRepairs(resolved,table,key,versions,endpoints);
  }
 else {
    resolved=versions.get(0);
  }
  if (logger_.isDebugEnabled())   logger_.debug("resolve: " + (System.currentTimeMillis() - startTime) + " ms.");
  return new Row(key,resolved);
}
