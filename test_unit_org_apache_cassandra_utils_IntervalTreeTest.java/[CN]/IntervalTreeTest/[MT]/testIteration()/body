{
  List<Interval<Integer,Void>> intervals=new ArrayList<Interval<Integer,Void>>();
  intervals.add(Interval.<Integer,Void>create(-300,-200));
  intervals.add(Interval.<Integer,Void>create(-3,-2));
  intervals.add(Interval.<Integer,Void>create(1,2));
  intervals.add(Interval.<Integer,Void>create(3,6));
  intervals.add(Interval.<Integer,Void>create(2,4));
  intervals.add(Interval.<Integer,Void>create(5,7));
  intervals.add(Interval.<Integer,Void>create(1,3));
  intervals.add(Interval.<Integer,Void>create(4,6));
  intervals.add(Interval.<Integer,Void>create(8,9));
  intervals.add(Interval.<Integer,Void>create(15,20));
  intervals.add(Interval.<Integer,Void>create(40,50));
  intervals.add(Interval.<Integer,Void>create(49,60));
  IntervalTree<Integer,Void,Interval<Integer,Void>> it=IntervalTree.build(intervals);
  Collections.sort(intervals,it.minOrdering);
  List<Interval<Integer,Void>> l=new ArrayList<Interval<Integer,Void>>();
  for (  Interval<Integer,Void> i : it)   l.add(i);
  assertEquals(intervals,l);
}
