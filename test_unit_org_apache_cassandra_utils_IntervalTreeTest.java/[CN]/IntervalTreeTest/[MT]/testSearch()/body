{
  List<Interval<Integer,Void>> intervals=new ArrayList<Interval<Integer,Void>>();
  intervals.add(Interval.<Integer,Void>create(-300,-200));
  intervals.add(Interval.<Integer,Void>create(-3,-2));
  intervals.add(Interval.<Integer,Void>create(1,2));
  intervals.add(Interval.<Integer,Void>create(3,6));
  intervals.add(Interval.<Integer,Void>create(2,4));
  intervals.add(Interval.<Integer,Void>create(5,7));
  intervals.add(Interval.<Integer,Void>create(1,3));
  intervals.add(Interval.<Integer,Void>create(4,6));
  intervals.add(Interval.<Integer,Void>create(8,9));
  intervals.add(Interval.<Integer,Void>create(15,20));
  intervals.add(Interval.<Integer,Void>create(40,50));
  intervals.add(Interval.<Integer,Void>create(49,60));
  IntervalTree<Integer,Void,Interval<Integer,Void>> it=IntervalTree.build(intervals);
  assertEquals(3,it.search(Interval.<Integer,Void>create(4,4)).size());
  assertEquals(4,it.search(Interval.<Integer,Void>create(4,5)).size());
  assertEquals(7,it.search(Interval.<Integer,Void>create(-1,10)).size());
  assertEquals(0,it.search(Interval.<Integer,Void>create(-1,-1)).size());
  assertEquals(5,it.search(Interval.<Integer,Void>create(1,4)).size());
  assertEquals(2,it.search(Interval.<Integer,Void>create(0,1)).size());
  assertEquals(0,it.search(Interval.<Integer,Void>create(10,12)).size());
  List<Interval<Integer,Void>> intervals2=new ArrayList<Interval<Integer,Void>>();
  intervals2.add(Interval.<Integer,Void>create(1880,1971));
  intervals2.add(Interval.<Integer,Void>create(1874,1951));
  intervals2.add(Interval.<Integer,Void>create(1843,1907));
  intervals2.add(Interval.<Integer,Void>create(1779,1828));
  intervals2.add(Interval.<Integer,Void>create(1756,1828));
  intervals2.add(Interval.<Integer,Void>create(1585,1672));
  IntervalTree<Integer,Void,Interval<Integer,Void>> it2=IntervalTree.build(intervals2);
  assertEquals(0,it2.search(Interval.<Integer,Void>create(1829,1842)).size());
  List<Void> intersection1=it2.search(Interval.<Integer,Void>create(1907,1907));
  assertEquals(3,intersection1.size());
  intersection1=it2.search(Interval.<Integer,Void>create(1780,1790));
  assertEquals(2,intersection1.size());
}
