{
  pig.registerQuery(initialQuery);
  Iterator<Tuple> it=pig.openIterator("rows");
  if (it.hasNext()) {
    Tuple t=it.next();
    Assert.assertEquals(t.get(0),1);
    Assert.assertEquals(t.get(1),"ascii");
    Assert.assertEquals(t.get(2),12345678L);
    Assert.assertEquals(t.get(3),new DataByteArray(Hex.hexToBytes("23446c6c6f")));
    Assert.assertEquals(t.get(4),false);
    Assert.assertEquals(t.get(5),"23.4567");
    Assert.assertEquals(t.get(6),12345678.12345678d);
    Assert.assertEquals(t.get(7),123.12f);
    Assert.assertEquals(t.get(8),"127.0.0.1");
    Assert.assertEquals(t.get(9),123);
    Assert.assertEquals(t.get(10),"text");
    Assert.assertEquals(t.get(11),1296705900000L);
    Assert.assertEquals(t.get(12),new DataByteArray((TimeUUIDType.instance.fromString("e23f450f-53a6-11e2-7f7f-7f7f7f7f7f7f").array())));
    Assert.assertEquals(t.get(13),new DataByteArray((UUIDType.instance.fromString("550e8400-e29b-41d4-a716-446655440000").array())));
    Assert.assertEquals(t.get(14),"varchar");
    Assert.assertEquals(t.get(15),123);
  }
 else {
    Assert.fail("Failed to get data for query " + initialQuery);
  }
}
