{
  pig.registerQuery(initialQuery);
  Iterator<Tuple> it=pig.openIterator("list_rows");
  if (it.hasNext()) {
    Tuple t=it.next();
    Assert.assertEquals(t.get(0),1);
    Tuple innerTuple=(Tuple)t.get(1);
    Assert.assertEquals(innerTuple.get(1),"ascii1");
    Assert.assertEquals(innerTuple.get(0),"ascii2");
    innerTuple=(Tuple)t.get(2);
    Assert.assertEquals(innerTuple.get(1),12345678L);
    Assert.assertEquals(innerTuple.get(0),12345679L);
    innerTuple=(Tuple)t.get(3);
    Assert.assertEquals(innerTuple.get(1),new DataByteArray(Hex.hexToBytes("68656c6c6f")));
    Assert.assertEquals(innerTuple.get(0),new DataByteArray(Hex.hexToBytes("68656c6c6e")));
    innerTuple=(Tuple)t.get(4);
    Assert.assertEquals(innerTuple.get(1),false);
    Assert.assertEquals(innerTuple.get(0),true);
    innerTuple=(Tuple)t.get(5);
    Assert.assertEquals(innerTuple.get(1),"23.4567");
    Assert.assertEquals(innerTuple.get(0),"23.4568");
    innerTuple=(Tuple)t.get(6);
    Assert.assertEquals(innerTuple.get(1),12345678.12345678d);
    Assert.assertEquals(innerTuple.get(0),12345678.12345679d);
    innerTuple=(Tuple)t.get(7);
    Assert.assertEquals(innerTuple.get(1),123.12f);
    Assert.assertEquals(innerTuple.get(0),123.13f);
    innerTuple=(Tuple)t.get(8);
    Assert.assertEquals(innerTuple.get(1),"127.0.0.1");
    Assert.assertEquals(innerTuple.get(0),"127.0.0.2");
    innerTuple=(Tuple)t.get(9);
    Assert.assertEquals(innerTuple.get(1),123);
    Assert.assertEquals(innerTuple.get(0),124);
    innerTuple=(Tuple)t.get(10);
    Assert.assertEquals(innerTuple.get(1),"text1");
    Assert.assertEquals(innerTuple.get(0),"text2");
    innerTuple=(Tuple)t.get(11);
    Assert.assertEquals(innerTuple.get(1),1296705900000L);
    Assert.assertEquals(innerTuple.get(0),1296792300000L);
    innerTuple=(Tuple)t.get(12);
    Assert.assertEquals(innerTuple.get(1),new DataByteArray((TimeUUIDType.instance.fromString("e23f450f-53a6-11e2-7f7f-7f7f7f7f7f7f").array())));
    Assert.assertEquals(innerTuple.get(0),new DataByteArray((TimeUUIDType.instance.fromString("e23f450f-53a6-11e2-7f7f-7f7f7f7f7f77").array())));
    innerTuple=(Tuple)t.get(13);
    Assert.assertEquals(innerTuple.get(1),new DataByteArray((UUIDType.instance.fromString("550e8400-e29b-41d4-a716-446655440000").array())));
    Assert.assertEquals(innerTuple.get(0),new DataByteArray((UUIDType.instance.fromString("550e8400-e29b-41d4-a716-446655440001").array())));
    innerTuple=(Tuple)t.get(14);
    Assert.assertEquals(innerTuple.get(1),"varchar1");
    Assert.assertEquals(innerTuple.get(0),"varchar2");
    innerTuple=(Tuple)t.get(15);
    Assert.assertEquals(innerTuple.get(1),123);
    Assert.assertEquals(innerTuple.get(0),124);
  }
 else {
    Assert.fail("Failed to get data for query " + initialQuery);
  }
}
