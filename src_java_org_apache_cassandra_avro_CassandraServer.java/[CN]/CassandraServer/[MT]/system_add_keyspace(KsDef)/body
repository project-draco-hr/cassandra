{
  if (StageManager.getStage(StageManager.MIGRATION_STAGE).getQueue().size() > 0)   throw newInvalidRequestException("This node appears to be handling gossiped migrations.");
  try {
    Collection<CFMetaData> cfDefs=new ArrayList<CFMetaData>((int)ksDef.cf_defs.size());
    for (    CfDef cfDef : ksDef.cf_defs) {
      String cfType, compare, subCompare, reconcilerName;
      cfType=cfDef.column_type == null ? D_CF_CFTYPE : cfDef.column_type.toString();
      ClockType clockType=ClockType.create(cfDef.clock_type == null ? D_CF_CFCLOCKTYPE : cfDef.clock_type.toString());
      compare=cfDef.comparator_type == null ? D_CF_COMPTYPE : cfDef.comparator_type.toString();
      subCompare=cfDef.subcomparator_type == null ? D_CF_SUBCOMPTYPE : cfDef.subcomparator_type.toString();
      reconcilerName=cfDef.reconciler == null ? null : cfDef.reconciler.toString();
      AbstractReconciler reconciler=DatabaseDescriptor.getReconciler(reconcilerName);
      if (reconciler == null) {
        if (clockType == ClockType.Timestamp)         reconciler=new TimestampReconciler();
 else         throw new ConfigurationException("No reconciler specified for column family " + cfDef.name.toString());
      }
      CFMetaData cfmeta=new CFMetaData(cfDef.keyspace.toString(),cfDef.name.toString(),ColumnFamilyType.create(cfType),clockType,DatabaseDescriptor.getComparator(compare),subCompare.length() == 0 ? null : DatabaseDescriptor.getComparator(subCompare),reconciler,cfDef.comment == null ? D_CF_COMMENT : cfDef.comment.toString(),cfDef.row_cache_size == null ? D_CF_ROWCACHE : cfDef.row_cache_size,cfDef.preload_row_cache == null ? D_CF_PRELOAD_ROWCACHE : cfDef.preload_row_cache,cfDef.key_cache_size == null ? D_CF_KEYCACHE : cfDef.key_cache_size,CFMetaData.DEFAULT_READ_REPAIR_CHANCE);
      cfDefs.add(cfmeta);
    }
    KSMetaData ksmeta=new KSMetaData(ksDef.name.toString(),(Class<? extends AbstractReplicationStrategy>)Class.forName(ksDef.strategy_class.toString()),(int)ksDef.replication_factor,cfDefs.toArray(new CFMetaData[cfDefs.size()]));
    AddKeyspace add=new AddKeyspace(ksmeta);
    add.apply();
    add.announce();
  }
 catch (  ClassNotFoundException e) {
    InvalidRequestException ire=newInvalidRequestException(e.getMessage());
    ire.initCause(e);
    throw ire;
  }
catch (  ConfigurationException e) {
    InvalidRequestException ire=newInvalidRequestException(e.getMessage());
    ire.initCause(e);
    throw ire;
  }
catch (  IOException e) {
    InvalidRequestException ire=newInvalidRequestException(e.getMessage());
    ire.initCause(e);
    throw ire;
  }
  return null;
}
