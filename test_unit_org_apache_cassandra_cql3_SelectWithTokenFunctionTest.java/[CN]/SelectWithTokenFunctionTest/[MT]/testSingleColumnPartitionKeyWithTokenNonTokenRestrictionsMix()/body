{
  createTable("CREATE TABLE %s (a int primary key, b int)");
  execute("INSERT INTO %s (a, b) VALUES (0, 0);");
  execute("INSERT INTO %s (a, b) VALUES (1, 1);");
  execute("INSERT INTO %s (a, b) VALUES (2, 2);");
  execute("INSERT INTO %s (a, b) VALUES (3, 3);");
  execute("INSERT INTO %s (a, b) VALUES (4, 4);");
  assertRows(execute("SELECT * FROM %s WHERE a IN (?, ?);",1,3),row(1,1),row(3,3));
  assertRows(execute("SELECT * FROM %s WHERE token(a)> token(?) and token(a) <= token(?);",1,3),row(2,2),row(3,3));
  assertRows(execute("SELECT * FROM %s WHERE token(a)= token(2);"),row(2,2));
  assertRows(execute("SELECT * FROM %s WHERE token(a) > token(?) AND token(a) <= token(?) AND a IN (?, ?);",1,3,1,3),row(3,3));
  assertRows(execute("SELECT * FROM %s WHERE token(a) < token(?) AND token(a) >= token(?) AND a IN (?, ?);",1,3,1,3),row(3,3));
  assertInvalidMessage("Only EQ and IN relation are supported on the partition key (unless you use the token() function)","SELECT * FROM %s WHERE token(a) > token(?) AND token(a) <= token(?) AND a > ?;",1,3,1);
  assertRows(execute("SELECT * FROM %s WHERE token(a) > token(?) AND token(a) <= token(?) AND a IN ?;",1,3,Arrays.asList(1,3)),row(3,3));
  assertRows(execute("SELECT * FROM %s WHERE token(a) > token(?) AND a = ?;",1,3),row(3,3));
  assertRows(execute("SELECT * FROM %s WHERE a = ? AND token(a) > token(?);",3,1),row(3,3));
  assertEmpty(execute("SELECT * FROM %s WHERE token(a) > token(?) AND a = ?;",3,1));
  assertEmpty(execute("SELECT * FROM %s WHERE a = ? AND token(a) > token(?);",1,3));
  assertRows(execute("SELECT * FROM %s WHERE token(a) > token(?) AND a IN (?, ?);",2,1,3),row(3,3));
  assertRows(execute("SELECT * FROM %s WHERE token(a) > token(?) AND token(a) < token(?) AND a IN (?, ?) ;",2,5,1,3),row(3,3));
  assertRows(execute("SELECT * FROM %s WHERE a IN (?, ?) AND token(a) > token(?) AND token(a) < token(?);",1,3,2,5),row(3,3));
  assertRows(execute("SELECT * FROM %s WHERE token(a) > token(?) AND a IN (?, ?) AND token(a) < token(?);",2,1,3,5),row(3,3));
  assertEmpty(execute("SELECT * FROM %s WHERE a IN (?, ?) AND token(a) > token(?);",1,3,3));
  assertRows(execute("SELECT * FROM %s WHERE token(a) <= token(?) AND a = ?;",2,2),row(2,2));
  assertEmpty(execute("SELECT * FROM %s WHERE token(a) <= token(?) AND a = ?;",2,3));
  assertEmpty(execute("SELECT * FROM %s WHERE token(a) = token(?) AND a = ?;",2,3));
  assertRows(execute("SELECT * FROM %s WHERE token(a) >= token(?) AND token(a) <= token(?) AND a = ?;",2,2,2),row(2,2));
  assertEmpty(execute("SELECT * FROM %s WHERE token(a) >= token(?) AND token(a) < token(?) AND a = ?;",2,2,2));
  assertEmpty(execute("SELECT * FROM %s WHERE token(a) > token(?) AND token(a) <= token(?) AND a = ?;",2,2,2));
  assertEmpty(execute("SELECT * FROM %s WHERE token(a) > token(?) AND token(a) < token(?) AND a = ?;",2,2,2));
}
