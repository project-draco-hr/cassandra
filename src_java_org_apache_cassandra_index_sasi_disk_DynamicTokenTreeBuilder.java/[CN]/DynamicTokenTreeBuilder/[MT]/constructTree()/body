{
  tokenCount=tokens.size();
  treeMinToken=tokens.firstKey();
  treeMaxToken=tokens.lastKey();
  numBlocks=1;
  if (tokenCount <= TOKENS_PER_BLOCK) {
    leftmostLeaf=new DynamicLeaf(tokens);
    rightmostLeaf=leftmostLeaf;
    root=leftmostLeaf;
  }
 else {
    root=new InteriorNode();
    rightmostParent=(InteriorNode)root;
    int i=0;
    Leaf lastLeaf=null;
    Long firstToken=tokens.firstKey();
    Long finalToken=tokens.lastKey();
    Long lastToken;
    for (    Long token : tokens.keySet()) {
      if (i == 0 || (i % TOKENS_PER_BLOCK != 0 && i != (tokenCount - 1))) {
        i++;
        continue;
      }
      lastToken=token;
      Leaf leaf=(i != (tokenCount - 1) || token.equals(finalToken)) ? new DynamicLeaf(tokens.subMap(firstToken,lastToken)) : new DynamicLeaf(tokens.tailMap(firstToken));
      if (i == TOKENS_PER_BLOCK)       leftmostLeaf=leaf;
 else       lastLeaf.next=leaf;
      rightmostParent.add(leaf);
      lastLeaf=leaf;
      rightmostLeaf=leaf;
      firstToken=lastToken;
      i++;
      numBlocks++;
      if (token.equals(finalToken)) {
        Leaf finalLeaf=new DynamicLeaf(tokens.tailMap(token));
        lastLeaf.next=finalLeaf;
        rightmostParent.add(finalLeaf);
        rightmostLeaf=finalLeaf;
        numBlocks++;
      }
    }
  }
}
