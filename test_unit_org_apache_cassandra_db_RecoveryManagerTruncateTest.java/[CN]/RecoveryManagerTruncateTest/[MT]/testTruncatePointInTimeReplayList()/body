{
  Keyspace keyspace=Keyspace.open(KEYSPACE1);
  ColumnFamilyStore cfs1=keyspace.getColumnFamilyStore(CF_STANDARD1);
  ColumnFamilyStore cfs2=keyspace.getColumnFamilyStore(CF_STANDARD2);
  Mutation rm;
  ColumnFamily cf;
  cf=ArrayBackedSortedColumns.factory.create(KEYSPACE1,CF_STANDARD1);
  cf.addColumn(column("col3","val1",1L));
  rm=new Mutation(KEYSPACE1,ByteBufferUtil.bytes("keymulti"),cf);
  rm.apply();
  cf=ArrayBackedSortedColumns.factory.create(KEYSPACE1,CF_STANDARD2);
  cf.addColumn(column("col4","val1",1L));
  rm=new Mutation(KEYSPACE1,ByteBufferUtil.bytes("keymulti"),cf);
  rm.apply();
  long time=System.currentTimeMillis();
  assertNotNull(getFromTable(keyspace,CF_STANDARD1,"keymulti","col3"));
  assertNotNull(getFromTable(keyspace,CF_STANDARD2,"keymulti","col4"));
  cfs1.truncateBlocking();
  cfs2.truncateBlocking();
  assertNull(getFromTable(keyspace,CF_STANDARD1,"keymulti","col3"));
  assertNull(getFromTable(keyspace,CF_STANDARD2,"keymulti","col4"));
  try {
    CommitLog.instance.archiver.restorePointInTime=time;
    System.setProperty("cassandra.replayList",KEYSPACE1 + "." + CF_STANDARD1);
    CommitLog.instance.resetUnsafe(false);
  }
  finally {
    CommitLog.instance.archiver.restorePointInTime=Long.MAX_VALUE;
    System.clearProperty("cassandra.replayList");
  }
  assertNotNull(getFromTable(keyspace,CF_STANDARD1,"keymulti","col3"));
  assertNull(getFromTable(keyspace,CF_STANDARD2,"keymulti","col4"));
  assertFalse(SystemKeyspace.getTruncatedAt(cfs1.metadata.cfId) > time);
  assertTrue(SystemKeyspace.getTruncatedAt(cfs2.metadata.cfId) > time);
}
