{
  String outputReducerType="filesystem";
  String inputMapperType="native";
  String outputReducer=null;
  String inputMapper=null;
  if (args != null) {
    if (args[0].startsWith(OUTPUT_REDUCER_VAR))     outputReducer=args[0];
    if (args[0].startsWith(INPUT_MAPPER_VAR))     inputMapper=args[0];
    if (args.length == 2) {
      if (args[1].startsWith(OUTPUT_REDUCER_VAR))       outputReducer=args[1];
      if (args[1].startsWith(INPUT_MAPPER_VAR))       inputMapper=args[1];
    }
  }
  if (outputReducer != null) {
    String[] s=outputReducer.split("=");
    if (s != null && s.length == 2)     outputReducerType=s[1];
  }
  logger.info("output reducer type: " + outputReducerType);
  if (inputMapper != null) {
    String[] s=inputMapper.split("=");
    if (s != null && s.length == 2)     inputMapperType=s[1];
  }
  Job job=new Job(getConf(),"wordcount");
  job.setJarByClass(WordCount.class);
  if (outputReducerType.equalsIgnoreCase("filesystem")) {
    job.setCombinerClass(ReducerToFilesystem.class);
    job.setReducerClass(ReducerToFilesystem.class);
    job.setOutputKeyClass(Text.class);
    job.setOutputValueClass(IntWritable.class);
    FileOutputFormat.setOutputPath(job,new Path(OUTPUT_PATH_PREFIX));
  }
 else {
    job.setReducerClass(ReducerToCassandra.class);
    job.setMapOutputKeyClass(Text.class);
    job.setMapOutputValueClass(IntWritable.class);
    job.setOutputKeyClass(Map.class);
    job.setOutputValueClass(List.class);
    job.setOutputFormatClass(CqlOutputFormat.class);
    ConfigHelper.setOutputColumnFamily(job.getConfiguration(),KEYSPACE,OUTPUT_COLUMN_FAMILY);
    job.getConfiguration().set(PRIMARY_KEY,"word,sum");
    String query="UPDATE " + KEYSPACE + "."+ OUTPUT_COLUMN_FAMILY+ " SET count_num = ? ";
    CqlConfigHelper.setOutputCql(job.getConfiguration(),query);
    ConfigHelper.setOutputInitialAddress(job.getConfiguration(),"localhost");
    ConfigHelper.setOutputPartitioner(job.getConfiguration(),"Murmur3Partitioner");
  }
  if (inputMapperType.equalsIgnoreCase("native")) {
    job.setMapperClass(NativeTokenizerMapper.class);
    job.setInputFormatClass(CqlInputFormat.class);
    CqlConfigHelper.setInputCql(job.getConfiguration(),"select * from " + COLUMN_FAMILY + " where token(id) > ? and token(id) <= ? allow filtering");
  }
 else {
    job.setMapperClass(TokenizerMapper.class);
    job.setInputFormatClass(CqlInputFormat.class);
    ConfigHelper.setInputRpcPort(job.getConfiguration(),"9160");
  }
  ConfigHelper.setInputInitialAddress(job.getConfiguration(),"localhost");
  ConfigHelper.setInputColumnFamily(job.getConfiguration(),KEYSPACE,COLUMN_FAMILY);
  ConfigHelper.setInputPartitioner(job.getConfiguration(),"Murmur3Partitioner");
  CqlConfigHelper.setInputCQLPageRowSize(job.getConfiguration(),"3");
  job.waitForCompletion(true);
  return 0;
}
