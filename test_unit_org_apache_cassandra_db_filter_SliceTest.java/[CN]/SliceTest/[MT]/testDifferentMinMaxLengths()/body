{
  List<AbstractType<?>> types=new ArrayList<>();
  types.add(Int32Type.instance);
  types.add(Int32Type.instance);
  types.add(Int32Type.instance);
  ClusteringComparator cc=new ClusteringComparator(types);
  ClusteringPrefix.Kind sk=ClusteringPrefix.Kind.INCL_START_BOUND;
  ClusteringPrefix.Kind ek=ClusteringPrefix.Kind.INCL_END_BOUND;
  Slice slice=Slice.make(makeBound(sk),makeBound(ek));
  assertTrue(slice.intersects(cc,columnNames(),columnNames(1)));
  slice=Slice.make(makeBound(sk),makeBound(ek));
  assertTrue(slice.intersects(cc,columnNames(1),columnNames(1,2)));
  slice=Slice.make(makeBound(sk),makeBound(ek,1));
  assertTrue(slice.intersects(cc,columnNames(),columnNames(1)));
  slice=Slice.make(makeBound(sk,1),makeBound(ek));
  assertTrue(slice.intersects(cc,columnNames(),columnNames(1)));
  slice=Slice.make(makeBound(sk,1),makeBound(ek,1));
  assertTrue(slice.intersects(cc,columnNames(),columnNames(1)));
  slice=Slice.make(makeBound(sk,0),makeBound(ek,1,2,3));
  assertTrue(slice.intersects(cc,columnNames(),columnNames(1)));
  slice=Slice.make(makeBound(sk,1,2,3),makeBound(ek,2));
  assertTrue(slice.intersects(cc,columnNames(),columnNames(1)));
  slice=Slice.make(makeBound(sk,2),makeBound(ek,3,4,5));
  assertFalse(slice.intersects(cc,columnNames(),columnNames(1)));
  slice=Slice.make(makeBound(sk,0),makeBound(ek,0,1,2));
  assertFalse(slice.intersects(cc,columnNames(1),columnNames(1,2)));
}
