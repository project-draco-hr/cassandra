{
  List<AbstractType<?>> types=new ArrayList<>();
  types.add(Int32Type.instance);
  types.add(Int32Type.instance);
  types.add(Int32Type.instance);
  ClusteringComparator cc=new ClusteringComparator(types);
  ClusteringPrefix.Kind sk=ClusteringPrefix.Kind.INCL_START_BOUND;
  ClusteringPrefix.Kind ek=ClusteringPrefix.Kind.INCL_END_BOUND;
  Slice slice=Slice.make(makeBound(sk,0,0,0),makeBound(ek,1,0,0));
  assertFalse(slice.intersects(cc,columnNames(2,0,0),columnNames(3,0,0)));
  slice=Slice.make(makeBound(sk),makeBound(ek,1,0,0));
  assertFalse(slice.intersects(cc,columnNames(2,0,0),columnNames(3,0,0)));
  slice=Slice.make(makeBound(sk,0),makeBound(ek,1,0,0));
  assertFalse(slice.intersects(cc,columnNames(2,0,0),columnNames(3,0,0)));
  slice=Slice.make(makeBound(sk,0),makeBound(ek,1,0));
  assertFalse(slice.intersects(cc,columnNames(2,0,0),columnNames(3,0,0)));
  slice=Slice.make(makeBound(sk,0,0,0),makeBound(ek,1,0,0));
  assertFalse(slice.intersects(cc,columnNames(1,1,0),columnNames(3,0,0)));
  slice=Slice.make(makeBound(sk,0),makeBound(ek,1,0,0));
  assertFalse(slice.intersects(cc,columnNames(1,1,0),columnNames(3,0,0)));
  slice=Slice.make(makeBound(sk,0),makeBound(ek,1,0));
  assertFalse(slice.intersects(cc,columnNames(1,1,0),columnNames(3,0,0)));
  slice=Slice.make(makeBound(sk,0,0,0),makeBound(ek,1,1,0));
  assertFalse(slice.intersects(cc,columnNames(1,1,1),columnNames(3,1,1)));
  slice=Slice.make(makeBound(sk,0,0,0),makeBound(ek,1,1,1));
  assertTrue(slice.intersects(cc,columnNames(1,1,1),columnNames(3,1,1)));
  slice=Slice.make(makeBound(sk,4,0,0),makeBound(ek,4,0,0));
  assertFalse(slice.intersects(cc,columnNames(2,0,0),columnNames(3,0,0)));
  slice=Slice.make(makeBound(sk,4,0,0),makeBound(ek));
  assertFalse(slice.intersects(cc,columnNames(2,0,0),columnNames(3,0,0)));
  slice=Slice.make(makeBound(sk,4,0,0),makeBound(ek,1));
  assertFalse(slice.intersects(cc,columnNames(2,0,0),columnNames(3,0,0)));
  slice=Slice.make(makeBound(sk,4,0),makeBound(ek,1));
  assertFalse(slice.intersects(cc,columnNames(2,0,0),columnNames(3,0,0)));
  slice=Slice.make(makeBound(sk,1,1,1),makeBound(ek,2,0,0));
  assertFalse(slice.intersects(cc,columnNames(0,0,0),columnNames(1,0,0)));
  slice=Slice.make(makeBound(sk,1,1,1),makeBound(ek,2,0,0));
  assertFalse(slice.intersects(cc,columnNames(0,0,0),columnNames(1,1,0)));
  slice=Slice.make(makeBound(sk,1,1,1),makeBound(ek,2,0,0));
  assertTrue(slice.intersects(cc,columnNames(0,0,0),columnNames(1,1,1)));
  slice=Slice.make(makeBound(sk,0,0,0),makeBound(ek,2,0,0));
  assertTrue(slice.intersects(cc,columnNames(1,0,0),columnNames(1,1,1)));
  slice=Slice.make(makeBound(sk),makeBound(ek));
  assertTrue(slice.intersects(cc,columnNames(1,0,0),columnNames(1,1,1)));
  slice=Slice.make(makeBound(sk,0),makeBound(ek,2,0));
  assertTrue(slice.intersects(cc,columnNames(1,0,0),columnNames(1,1,1)));
  slice=Slice.make(makeBound(sk,1,0,0),makeBound(ek,2,0,0));
  assertTrue(slice.intersects(cc,columnNames(1,0,0),columnNames(1,1,1)));
  slice=Slice.make(makeBound(sk,0,0,0),makeBound(ek,1,1,1));
  assertTrue(slice.intersects(cc,columnNames(1,0,0),columnNames(1,1,1)));
  slice=Slice.make(makeBound(sk,1,0,0),makeBound(ek,1,1,1));
  assertTrue(slice.intersects(cc,columnNames(1,0,0),columnNames(1,1,1)));
  slice=Slice.make(makeBound(sk,1,0,0),makeBound(ek,1,1,0));
  assertTrue(slice.intersects(cc,columnNames(1,0,0),columnNames(1,1,1)));
  slice=Slice.make(makeBound(sk,1,0,0),makeBound(ek,1,1));
  assertTrue(slice.intersects(cc,columnNames(1,0,0),columnNames(1,1,1)));
  slice=Slice.make(makeBound(sk,1,1,0),makeBound(ek,1,1,1));
  assertTrue(slice.intersects(cc,columnNames(1,0,0),columnNames(1,1,1)));
  slice=Slice.make(makeBound(sk,1,1),makeBound(ek,1,1,1));
  assertTrue(slice.intersects(cc,columnNames(1,0,0),columnNames(1,1,1)));
  slice=Slice.make(makeBound(sk,1,1,0),makeBound(ek,1,1,1));
  assertTrue(slice.intersects(cc,columnNames(1,0,0),columnNames(2,2,2)));
  slice=Slice.make(makeBound(sk,1,1),makeBound(ek,1,1,1));
  assertTrue(slice.intersects(cc,columnNames(1,0,0),columnNames(2,2,2)));
  slice=Slice.make(makeBound(sk,1),makeBound(ek,1,2));
  assertTrue(slice.intersects(cc,columnNames(1,0,0),columnNames(2,2,2)));
  slice=Slice.make(makeBound(sk,1),makeBound(ek,1));
  assertTrue(slice.intersects(cc,columnNames(1,0,0),columnNames(2,2,2)));
  slice=Slice.make(makeBound(sk,1,1,1),makeBound(ek,1,1,1));
  assertTrue(slice.intersects(cc,columnNames(1,0,0),columnNames(2,2,2)));
  slice=Slice.make(makeBound(sk,1,1,1),makeBound(ek));
  assertTrue(slice.intersects(cc,columnNames(1,0,0),columnNames(2,0,0)));
  slice=Slice.make(makeBound(sk,1,1,1),makeBound(ek,3));
  assertTrue(slice.intersects(cc,columnNames(1,0,0),columnNames(2,0,0)));
  slice=Slice.make(makeBound(sk,1,0,0),makeBound(ek));
  assertTrue(slice.intersects(cc,columnNames(1,0,0),columnNames(2,0,0)));
  slice=Slice.make(makeBound(sk,1,0,0),makeBound(ek,3));
  assertTrue(slice.intersects(cc,columnNames(1,0,0),columnNames(2,0,0)));
  slice=Slice.make(makeBound(sk,2,0,0),makeBound(ek));
  assertTrue(slice.intersects(cc,columnNames(1,0,0),columnNames(2,0,0)));
  slice=Slice.make(makeBound(sk,2,0,0),makeBound(ek,3));
  assertTrue(slice.intersects(cc,columnNames(1,0,0),columnNames(2,0,0)));
  slice=Slice.make(makeBound(sk),makeBound(ek,1,1,1));
  assertTrue(slice.intersects(cc,columnNames(1,0,0),columnNames(2,0,0)));
  slice=Slice.make(makeBound(sk,0),makeBound(ek,1,1,1));
  assertTrue(slice.intersects(cc,columnNames(1,0,0),columnNames(2,0,0)));
  slice=Slice.make(makeBound(sk),makeBound(ek,1,0,0));
  assertTrue(slice.intersects(cc,columnNames(1,0,0),columnNames(2,0,0)));
  slice=Slice.make(makeBound(sk,0),makeBound(ek,1,0,0));
  assertTrue(slice.intersects(cc,columnNames(1,0,0),columnNames(2,0,0)));
  slice=Slice.make(makeBound(sk),makeBound(ek,2,0,0));
  assertTrue(slice.intersects(cc,columnNames(1,0,0),columnNames(2,0,0)));
  slice=Slice.make(makeBound(sk,0),makeBound(ek,2,0,0));
  assertTrue(slice.intersects(cc,columnNames(1,0,0),columnNames(2,0,0)));
  slice=Slice.make(makeBound(sk,1,2,0),makeBound(ek,1,3,0));
  assertFalse(slice.intersects(cc,columnNames(1,0,0),columnNames(2,1,0)));
  slice=Slice.make(makeBound(sk,1,2),makeBound(ek,1,3,0));
  assertFalse(slice.intersects(cc,columnNames(1,0,0),columnNames(2,1,0)));
  slice=Slice.make(makeBound(sk,1,2,0),makeBound(ek,1,3));
  assertFalse(slice.intersects(cc,columnNames(1,0,0),columnNames(2,1,0)));
  slice=Slice.make(makeBound(sk,1,2),makeBound(ek,1,3));
  assertFalse(slice.intersects(cc,columnNames(1,0,0),columnNames(2,1,0)));
  slice=Slice.make(makeBound(sk,1,2),makeBound(ek,1));
  assertFalse(slice.intersects(cc,columnNames(1,0,0),columnNames(2,1,0)));
  slice=Slice.make(makeBound(sk,1,2,0),makeBound(ek,1,2,0));
  assertFalse(slice.intersects(cc,columnNames(1,0,0),columnNames(2,1,0)));
  slice=Slice.make(makeBound(sk,1,2),makeBound(ek,1,2,0));
  assertFalse(slice.intersects(cc,columnNames(1,0,0),columnNames(2,1,0)));
  slice=Slice.make(makeBound(sk,1,2,0),makeBound(ek,1,2));
  assertFalse(slice.intersects(cc,columnNames(1,0,0),columnNames(2,1,0)));
  slice=Slice.make(makeBound(sk,1,2),makeBound(ek,1,2));
  assertFalse(slice.intersects(cc,columnNames(1,0,0),columnNames(2,1,0)));
  slice=Slice.make(makeBound(sk,1,1,2),makeBound(ek,1,1,3));
  assertFalse(slice.intersects(cc,columnNames(1,1,0),columnNames(2,2,1)));
  slice=Slice.make(makeBound(sk),makeBound(ek));
  assertTrue(slice.intersects(cc,columnNames(),columnNames()));
  slice=Slice.make(makeBound(sk,1),makeBound(ek));
  assertTrue(slice.intersects(cc,columnNames(),columnNames()));
  slice=Slice.make(makeBound(sk),makeBound(ek,1));
  assertTrue(slice.intersects(cc,columnNames(),columnNames()));
  slice=Slice.make(makeBound(sk,1),makeBound(ek,1));
  assertTrue(slice.intersects(cc,columnNames(),columnNames()));
  slice=Slice.make(makeBound(sk),makeBound(ek));
  assertTrue(slice.intersects(cc,columnNames(),columnNames(1)));
  slice=Slice.make(makeBound(sk),makeBound(ek,1));
  assertTrue(slice.intersects(cc,columnNames(),columnNames(1)));
  slice=Slice.make(makeBound(sk),makeBound(ek,1));
  assertTrue(slice.intersects(cc,columnNames(),columnNames(2)));
  slice=Slice.make(makeBound(sk),makeBound(ek,2));
  assertTrue(slice.intersects(cc,columnNames(),columnNames(1)));
  slice=Slice.make(makeBound(sk,2),makeBound(ek,3));
  assertFalse(slice.intersects(cc,columnNames(),columnNames(1)));
  slice=Slice.make(makeBound(sk,1,0,0),makeBound(ek,0,0,0));
  assertFalse(slice.intersects(cc,columnNames(2,0,0),columnNames(3,0,0)));
  slice=Slice.make(makeBound(sk,1,0,0),makeBound(ek,0,0,0));
  assertFalse(slice.intersects(cc,columnNames(1,1,0),columnNames(3,0,0)));
  slice=Slice.make(makeBound(sk,1,1,1),makeBound(ek,1,1,0));
  assertTrue(slice.intersects(cc,columnNames(1,0,0),columnNames(2,2,2)));
}
