{
  if (!getClass().equals(other.getClass())) {
    return getClass().getName().compareTo(other.getClass().getName());
  }
  int lastComparison=0;
  execute_prepared_cql3_query_args typedOther=(execute_prepared_cql3_query_args)other;
  lastComparison=Boolean.valueOf(isSetItemId()).compareTo(typedOther.isSetItemId());
  if (lastComparison != 0) {
    return lastComparison;
  }
  if (isSetItemId()) {
    lastComparison=org.apache.thrift.TBaseHelper.compareTo(this.itemId,typedOther.itemId);
    if (lastComparison != 0) {
      return lastComparison;
    }
  }
  lastComparison=Boolean.valueOf(isSetValues()).compareTo(typedOther.isSetValues());
  if (lastComparison != 0) {
    return lastComparison;
  }
  if (isSetValues()) {
    lastComparison=org.apache.thrift.TBaseHelper.compareTo(this.values,typedOther.values);
    if (lastComparison != 0) {
      return lastComparison;
    }
  }
  lastComparison=Boolean.valueOf(isSetConsistency()).compareTo(typedOther.isSetConsistency());
  if (lastComparison != 0) {
    return lastComparison;
  }
  if (isSetConsistency()) {
    lastComparison=org.apache.thrift.TBaseHelper.compareTo(this.consistency,typedOther.consistency);
    if (lastComparison != 0) {
      return lastComparison;
    }
  }
  return 0;
}
