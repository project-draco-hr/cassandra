{
  TField field;
  iprot.readStructBegin();
  while (true) {
    field=iprot.readFieldBegin();
    if (field.type == TType.STOP) {
      break;
    }
switch (field.id) {
case 1:
      if (field.type == TType.STRING) {
        this.keyspace=iprot.readString();
      }
 else {
        TProtocolUtil.skip(iprot,field.type);
      }
    break;
case 2:
  if (field.type == TType.LIST) {
{
      TList _list55=iprot.readListBegin();
      this.keys=new ArrayList<byte[]>(_list55.size);
      for (int _i56=0; _i56 < _list55.size; ++_i56) {
        byte[] _elem57;
        _elem57=iprot.readBinary();
        this.keys.add(_elem57);
      }
      iprot.readListEnd();
    }
  }
 else {
    TProtocolUtil.skip(iprot,field.type);
  }
break;
case 3:
if (field.type == TType.STRUCT) {
this.column_parent=new ColumnParent();
this.column_parent.read(iprot);
}
 else {
TProtocolUtil.skip(iprot,field.type);
}
break;
case 4:
if (field.type == TType.STRUCT) {
this.predicate=new SlicePredicate();
this.predicate.read(iprot);
}
 else {
TProtocolUtil.skip(iprot,field.type);
}
break;
case 5:
if (field.type == TType.I32) {
this.consistency_level=ConsistencyLevel.findByValue(iprot.readI32());
}
 else {
TProtocolUtil.skip(iprot,field.type);
}
break;
default :
TProtocolUtil.skip(iprot,field.type);
}
iprot.readFieldEnd();
}
iprot.readStructEnd();
validate();
}
