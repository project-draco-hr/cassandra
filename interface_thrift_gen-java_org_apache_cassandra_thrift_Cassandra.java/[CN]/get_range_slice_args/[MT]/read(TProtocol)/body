{
  TField field;
  iprot.readStructBegin();
  while (true) {
    field=iprot.readFieldBegin();
    if (field.type == TType.STOP) {
      break;
    }
    _Fields fieldId=_Fields.findByThriftId(field.id);
    if (fieldId == null) {
      TProtocolUtil.skip(iprot,field.type);
    }
 else {
switch (fieldId) {
case KEYSPACE:
        if (field.type == TType.STRING) {
          this.keyspace=iprot.readString();
        }
 else {
          TProtocolUtil.skip(iprot,field.type);
        }
      break;
case COLUMN_PARENT:
    if (field.type == TType.STRUCT) {
      this.column_parent=new ColumnParent();
      this.column_parent.read(iprot);
    }
 else {
      TProtocolUtil.skip(iprot,field.type);
    }
  break;
case PREDICATE:
if (field.type == TType.STRUCT) {
  this.predicate=new SlicePredicate();
  this.predicate.read(iprot);
}
 else {
  TProtocolUtil.skip(iprot,field.type);
}
break;
case START_KEY:
if (field.type == TType.STRING) {
this.start_key=iprot.readString();
}
 else {
TProtocolUtil.skip(iprot,field.type);
}
break;
case FINISH_KEY:
if (field.type == TType.STRING) {
this.finish_key=iprot.readString();
}
 else {
TProtocolUtil.skip(iprot,field.type);
}
break;
case ROW_COUNT:
if (field.type == TType.I32) {
this.row_count=iprot.readI32();
setRow_countIsSet(true);
}
 else {
TProtocolUtil.skip(iprot,field.type);
}
break;
case CONSISTENCY_LEVEL:
if (field.type == TType.I32) {
this.consistency_level=ConsistencyLevel.findByValue(iprot.readI32());
}
 else {
TProtocolUtil.skip(iprot,field.type);
}
break;
}
iprot.readFieldEnd();
}
}
iprot.readStructEnd();
if (!isSetRow_count()) {
throw new TProtocolException("Required field 'row_count' was not found in serialized data! Struct: " + toString());
}
validate();
}
