{
  org.apache.thrift.protocol.TField schemeField;
  iprot.readStructBegin();
  while (true) {
    schemeField=iprot.readFieldBegin();
    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
      break;
    }
switch (schemeField.id) {
case 0:
      if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
        struct.success=new CqlResult();
        struct.success.read(iprot);
        struct.setSuccessIsSet(true);
      }
 else {
        org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
      }
    break;
case 1:
  if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
    struct.ire=new InvalidRequestException();
    struct.ire.read(iprot);
    struct.setIreIsSet(true);
  }
 else {
    org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
  }
break;
case 2:
if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
struct.ue=new UnavailableException();
struct.ue.read(iprot);
struct.setUeIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 3:
if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
struct.te=new TimedOutException();
struct.te.read(iprot);
struct.setTeIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 4:
if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
struct.sde=new SchemaDisagreementException();
struct.sde.read(iprot);
struct.setSdeIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
default :
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
iprot.readFieldEnd();
}
iprot.readStructEnd();
struct.validate();
}
