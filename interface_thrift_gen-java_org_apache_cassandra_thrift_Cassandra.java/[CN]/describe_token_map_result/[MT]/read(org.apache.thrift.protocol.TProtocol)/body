{
  org.apache.thrift.protocol.TField field;
  iprot.readStructBegin();
  while (true) {
    field=iprot.readFieldBegin();
    if (field.type == org.apache.thrift.protocol.TType.STOP) {
      break;
    }
switch (field.id) {
case 0:
      if (field.type == org.apache.thrift.protocol.TType.MAP) {
{
          org.apache.thrift.protocol.TMap _map182=iprot.readMapBegin();
          this.success=new HashMap<String,String>(2 * _map182.size);
          for (int _i183=0; _i183 < _map182.size; ++_i183) {
            String _key184;
            String _val185;
            _key184=iprot.readString();
            _val185=iprot.readString();
            this.success.put(_key184,_val185);
          }
          iprot.readMapEnd();
        }
      }
 else {
        org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);
      }
    break;
case 1:
  if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
    this.ire=new InvalidRequestException();
    this.ire.read(iprot);
  }
 else {
    org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);
  }
break;
default :
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);
}
iprot.readFieldEnd();
}
iprot.readStructEnd();
validate();
}
