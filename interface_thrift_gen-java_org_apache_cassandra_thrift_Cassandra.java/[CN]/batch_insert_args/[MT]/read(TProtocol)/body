{
  TField field;
  iprot.readStructBegin();
  while (true) {
    field=iprot.readFieldBegin();
    if (field.type == TType.STOP) {
      break;
    }
switch (field.id) {
case 1:
      if (field.type == TType.STRING) {
        this.keyspace=iprot.readString();
      }
 else {
        TProtocolUtil.skip(iprot,field.type);
      }
    break;
case 2:
  if (field.type == TType.STRING) {
    this.key=iprot.readString();
  }
 else {
    TProtocolUtil.skip(iprot,field.type);
  }
break;
case 3:
if (field.type == TType.MAP) {
{
  TMap _map59=iprot.readMapBegin();
  this.cfmap=new HashMap<String,List<ColumnOrSuperColumn>>(2 * _map59.size);
  for (int _i60=0; _i60 < _map59.size; ++_i60) {
    String _key61;
    List<ColumnOrSuperColumn> _val62;
    _key61=iprot.readString();
{
      TList _list63=iprot.readListBegin();
      _val62=new ArrayList<ColumnOrSuperColumn>(_list63.size);
      for (int _i64=0; _i64 < _list63.size; ++_i64) {
        ColumnOrSuperColumn _elem65;
        _elem65=new ColumnOrSuperColumn();
        _elem65.read(iprot);
        _val62.add(_elem65);
      }
      iprot.readListEnd();
    }
    this.cfmap.put(_key61,_val62);
  }
  iprot.readMapEnd();
}
}
 else {
TProtocolUtil.skip(iprot,field.type);
}
break;
case 4:
if (field.type == TType.I32) {
this.consistency_level=ConsistencyLevel.findByValue(iprot.readI32());
}
 else {
TProtocolUtil.skip(iprot,field.type);
}
break;
default :
TProtocolUtil.skip(iprot,field.type);
}
iprot.readFieldEnd();
}
iprot.readStructEnd();
validate();
}
