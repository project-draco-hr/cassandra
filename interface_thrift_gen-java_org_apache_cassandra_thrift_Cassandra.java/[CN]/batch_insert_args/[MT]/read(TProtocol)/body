{
  TField field;
  iprot.readStructBegin();
  while (true) {
    field=iprot.readFieldBegin();
    if (field.type == TType.STOP) {
      break;
    }
switch (field.id) {
case 1:
      if (field.type == TType.STRING) {
        this.key=iprot.readBinary();
      }
 else {
        TProtocolUtil.skip(iprot,field.type);
      }
    break;
case 2:
  if (field.type == TType.MAP) {
{
      TMap _map72=iprot.readMapBegin();
      this.cfmap=new HashMap<String,List<ColumnOrSuperColumn>>(2 * _map72.size);
      for (int _i73=0; _i73 < _map72.size; ++_i73) {
        String _key74;
        List<ColumnOrSuperColumn> _val75;
        _key74=iprot.readString();
{
          TList _list76=iprot.readListBegin();
          _val75=new ArrayList<ColumnOrSuperColumn>(_list76.size);
          for (int _i77=0; _i77 < _list76.size; ++_i77) {
            ColumnOrSuperColumn _elem78;
            _elem78=new ColumnOrSuperColumn();
            _elem78.read(iprot);
            _val75.add(_elem78);
          }
          iprot.readListEnd();
        }
        this.cfmap.put(_key74,_val75);
      }
      iprot.readMapEnd();
    }
  }
 else {
    TProtocolUtil.skip(iprot,field.type);
  }
break;
case 3:
if (field.type == TType.I32) {
this.consistency_level=ConsistencyLevel.findByValue(iprot.readI32());
}
 else {
TProtocolUtil.skip(iprot,field.type);
}
break;
default :
TProtocolUtil.skip(iprot,field.type);
}
iprot.readFieldEnd();
}
iprot.readStructEnd();
validate();
}
