{
  org.apache.thrift.protocol.TField schemeField;
  iprot.readStructBegin();
  while (true) {
    schemeField=iprot.readFieldBegin();
    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
      break;
    }
switch (schemeField.id) {
case 1:
      if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
{
          org.apache.thrift.protocol.TMap _map336=iprot.readMapBegin();
          struct.mutation_map=new HashMap<ByteBuffer,Map<String,List<Mutation>>>(2 * _map336.size);
          for (int _i337=0; _i337 < _map336.size; ++_i337) {
            ByteBuffer _key338;
            Map<String,List<Mutation>> _val339;
            _key338=iprot.readBinary();
{
              org.apache.thrift.protocol.TMap _map340=iprot.readMapBegin();
              _val339=new HashMap<String,List<Mutation>>(2 * _map340.size);
              for (int _i341=0; _i341 < _map340.size; ++_i341) {
                String _key342;
                List<Mutation> _val343;
                _key342=iprot.readString();
{
                  org.apache.thrift.protocol.TList _list344=iprot.readListBegin();
                  _val343=new ArrayList<Mutation>(_list344.size);
                  for (int _i345=0; _i345 < _list344.size; ++_i345) {
                    Mutation _elem346;
                    _elem346=new Mutation();
                    _elem346.read(iprot);
                    _val343.add(_elem346);
                  }
                  iprot.readListEnd();
                }
                _val339.put(_key342,_val343);
              }
              iprot.readMapEnd();
            }
            struct.mutation_map.put(_key338,_val339);
          }
          iprot.readMapEnd();
        }
        struct.setMutation_mapIsSet(true);
      }
 else {
        org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
      }
    break;
case 2:
  if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
    struct.consistency_level=ConsistencyLevel.findByValue(iprot.readI32());
    struct.setConsistency_levelIsSet(true);
  }
 else {
    org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
  }
break;
default :
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
iprot.readFieldEnd();
}
iprot.readStructEnd();
struct.validate();
}
