{
  TTupleProtocol iprot=(TTupleProtocol)prot;
{
    org.apache.thrift.protocol.TMap _map353=new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING,org.apache.thrift.protocol.TType.MAP,iprot.readI32());
    struct.mutation_map=new HashMap<ByteBuffer,Map<String,List<Mutation>>>(2 * _map353.size);
    for (int _i354=0; _i354 < _map353.size; ++_i354) {
      ByteBuffer _key355;
      Map<String,List<Mutation>> _val356;
      _key355=iprot.readBinary();
{
        org.apache.thrift.protocol.TMap _map357=new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING,org.apache.thrift.protocol.TType.LIST,iprot.readI32());
        _val356=new HashMap<String,List<Mutation>>(2 * _map357.size);
        for (int _i358=0; _i358 < _map357.size; ++_i358) {
          String _key359;
          List<Mutation> _val360;
          _key359=iprot.readString();
{
            org.apache.thrift.protocol.TList _list361=new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT,iprot.readI32());
            _val360=new ArrayList<Mutation>(_list361.size);
            for (int _i362=0; _i362 < _list361.size; ++_i362) {
              Mutation _elem363;
              _elem363=new Mutation();
              _elem363.read(iprot);
              _val360.add(_elem363);
            }
          }
          _val356.put(_key359,_val360);
        }
      }
      struct.mutation_map.put(_key355,_val356);
    }
  }
  struct.setMutation_mapIsSet(true);
  struct.consistency_level=ConsistencyLevel.findByValue(iprot.readI32());
  struct.setConsistency_levelIsSet(true);
}
