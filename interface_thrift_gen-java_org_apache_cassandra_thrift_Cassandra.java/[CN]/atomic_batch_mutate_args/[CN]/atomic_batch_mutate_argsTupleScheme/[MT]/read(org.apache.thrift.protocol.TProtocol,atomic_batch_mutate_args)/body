{
  TTupleProtocol iprot=(TTupleProtocol)prot;
{
    org.apache.thrift.protocol.TMap _map347=new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING,org.apache.thrift.protocol.TType.MAP,iprot.readI32());
    struct.mutation_map=new HashMap<ByteBuffer,Map<String,List<Mutation>>>(2 * _map347.size);
    for (int _i348=0; _i348 < _map347.size; ++_i348) {
      ByteBuffer _key349;
      Map<String,List<Mutation>> _val350;
      _key349=iprot.readBinary();
{
        org.apache.thrift.protocol.TMap _map351=new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING,org.apache.thrift.protocol.TType.LIST,iprot.readI32());
        _val350=new HashMap<String,List<Mutation>>(2 * _map351.size);
        for (int _i352=0; _i352 < _map351.size; ++_i352) {
          String _key353;
          List<Mutation> _val354;
          _key353=iprot.readString();
{
            org.apache.thrift.protocol.TList _list355=new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT,iprot.readI32());
            _val354=new ArrayList<Mutation>(_list355.size);
            for (int _i356=0; _i356 < _list355.size; ++_i356) {
              Mutation _elem357;
              _elem357=new Mutation();
              _elem357.read(iprot);
              _val354.add(_elem357);
            }
          }
          _val350.put(_key353,_val354);
        }
      }
      struct.mutation_map.put(_key349,_val350);
    }
  }
  struct.setMutation_mapIsSet(true);
  struct.consistency_level=ConsistencyLevel.findByValue(iprot.readI32());
  struct.setConsistency_levelIsSet(true);
}
