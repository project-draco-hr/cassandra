{
  TTupleProtocol iprot=(TTupleProtocol)prot;
{
    org.apache.thrift.protocol.TMap _map361=new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING,org.apache.thrift.protocol.TType.MAP,iprot.readI32());
    struct.mutation_map=new HashMap<ByteBuffer,Map<String,List<Mutation>>>(2 * _map361.size);
    for (int _i362=0; _i362 < _map361.size; ++_i362) {
      ByteBuffer _key363;
      Map<String,List<Mutation>> _val364;
      _key363=iprot.readBinary();
{
        org.apache.thrift.protocol.TMap _map365=new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING,org.apache.thrift.protocol.TType.LIST,iprot.readI32());
        _val364=new HashMap<String,List<Mutation>>(2 * _map365.size);
        for (int _i366=0; _i366 < _map365.size; ++_i366) {
          String _key367;
          List<Mutation> _val368;
          _key367=iprot.readString();
{
            org.apache.thrift.protocol.TList _list369=new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT,iprot.readI32());
            _val368=new ArrayList<Mutation>(_list369.size);
            for (int _i370=0; _i370 < _list369.size; ++_i370) {
              Mutation _elem371;
              _elem371=new Mutation();
              _elem371.read(iprot);
              _val368.add(_elem371);
            }
          }
          _val364.put(_key367,_val368);
        }
      }
      struct.mutation_map.put(_key363,_val364);
    }
  }
  struct.setMutation_mapIsSet(true);
  struct.consistency_level=ConsistencyLevel.findByValue(iprot.readI32());
  struct.setConsistency_levelIsSet(true);
}
