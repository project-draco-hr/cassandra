{
  TTupleProtocol iprot=(TTupleProtocol)prot;
{
    org.apache.thrift.protocol.TMap _map355=new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING,org.apache.thrift.protocol.TType.MAP,iprot.readI32());
    struct.mutation_map=new HashMap<ByteBuffer,Map<String,List<Mutation>>>(2 * _map355.size);
    for (int _i356=0; _i356 < _map355.size; ++_i356) {
      ByteBuffer _key357;
      Map<String,List<Mutation>> _val358;
      _key357=iprot.readBinary();
{
        org.apache.thrift.protocol.TMap _map359=new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING,org.apache.thrift.protocol.TType.LIST,iprot.readI32());
        _val358=new HashMap<String,List<Mutation>>(2 * _map359.size);
        for (int _i360=0; _i360 < _map359.size; ++_i360) {
          String _key361;
          List<Mutation> _val362;
          _key361=iprot.readString();
{
            org.apache.thrift.protocol.TList _list363=new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT,iprot.readI32());
            _val362=new ArrayList<Mutation>(_list363.size);
            for (int _i364=0; _i364 < _list363.size; ++_i364) {
              Mutation _elem365;
              _elem365=new Mutation();
              _elem365.read(iprot);
              _val362.add(_elem365);
            }
          }
          _val358.put(_key361,_val362);
        }
      }
      struct.mutation_map.put(_key357,_val358);
    }
  }
  struct.setMutation_mapIsSet(true);
  struct.consistency_level=ConsistencyLevel.findByValue(iprot.readI32());
  struct.setConsistency_levelIsSet(true);
}
