{
  TField field;
  iprot.readStructBegin();
  while (true) {
    field=iprot.readFieldBegin();
    if (field.type == TType.STOP) {
      break;
    }
switch (field.id) {
case 0:
      if (field.type == TType.MAP) {
{
          TMap _map110=iprot.readMapBegin();
          this.success=new HashMap<String,Map<String,String>>(2 * _map110.size);
          for (int _i111=0; _i111 < _map110.size; ++_i111) {
            String _key112;
            Map<String,String> _val113;
            _key112=iprot.readString();
{
              TMap _map114=iprot.readMapBegin();
              _val113=new HashMap<String,String>(2 * _map114.size);
              for (int _i115=0; _i115 < _map114.size; ++_i115) {
                String _key116;
                String _val117;
                _key116=iprot.readString();
                _val117=iprot.readString();
                _val113.put(_key116,_val117);
              }
              iprot.readMapEnd();
            }
            this.success.put(_key112,_val113);
          }
          iprot.readMapEnd();
        }
      }
 else {
        TProtocolUtil.skip(iprot,field.type);
      }
    break;
case 1:
  if (field.type == TType.STRUCT) {
    this.nfe=new NotFoundException();
    this.nfe.read(iprot);
  }
 else {
    TProtocolUtil.skip(iprot,field.type);
  }
break;
default :
TProtocolUtil.skip(iprot,field.type);
}
iprot.readFieldEnd();
}
iprot.readStructEnd();
validate();
}
