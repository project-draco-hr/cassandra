{
  org.apache.thrift.protocol.TField field;
  iprot.readStructBegin();
  while (true) {
    field=iprot.readFieldBegin();
    if (field.type == org.apache.thrift.protocol.TType.STOP) {
      break;
    }
switch (field.id) {
case 0:
      if (field.type == org.apache.thrift.protocol.TType.MAP) {
{
          org.apache.thrift.protocol.TMap _map127=iprot.readMapBegin();
          this.success=new HashMap<String,List<String>>(2 * _map127.size);
          for (int _i128=0; _i128 < _map127.size; ++_i128) {
            String _key129;
            List<String> _val130;
            _key129=iprot.readString();
{
              org.apache.thrift.protocol.TList _list131=iprot.readListBegin();
              _val130=new ArrayList<String>(_list131.size);
              for (int _i132=0; _i132 < _list131.size; ++_i132) {
                String _elem133;
                _elem133=iprot.readString();
                _val130.add(_elem133);
              }
              iprot.readListEnd();
            }
            this.success.put(_key129,_val130);
          }
          iprot.readMapEnd();
        }
      }
 else {
        org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);
      }
    break;
case 1:
  if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
    this.ire=new InvalidRequestException();
    this.ire.read(iprot);
  }
 else {
    org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);
  }
break;
default :
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);
}
iprot.readFieldEnd();
}
iprot.readStructEnd();
validate();
}
