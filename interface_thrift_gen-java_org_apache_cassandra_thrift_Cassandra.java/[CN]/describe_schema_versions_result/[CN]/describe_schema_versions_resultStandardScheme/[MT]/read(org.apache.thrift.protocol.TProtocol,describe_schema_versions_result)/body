{
  org.apache.thrift.protocol.TField schemeField;
  iprot.readStructBegin();
  while (true) {
    schemeField=iprot.readFieldBegin();
    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
      break;
    }
switch (schemeField.id) {
case 0:
      if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
{
          org.apache.thrift.protocol.TMap _map346=iprot.readMapBegin();
          struct.success=new HashMap<String,List<String>>(2 * _map346.size);
          for (int _i347=0; _i347 < _map346.size; ++_i347) {
            String _key348;
            List<String> _val349;
            _key348=iprot.readString();
{
              org.apache.thrift.protocol.TList _list350=iprot.readListBegin();
              _val349=new ArrayList<String>(_list350.size);
              for (int _i351=0; _i351 < _list350.size; ++_i351) {
                String _elem352;
                _elem352=iprot.readString();
                _val349.add(_elem352);
              }
              iprot.readListEnd();
            }
            struct.success.put(_key348,_val349);
          }
          iprot.readMapEnd();
        }
        struct.setSuccessIsSet(true);
      }
 else {
        org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
      }
    break;
case 1:
  if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
    struct.ire=new InvalidRequestException();
    struct.ire.read(iprot);
    struct.setIreIsSet(true);
  }
 else {
    org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
  }
break;
default :
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
iprot.readFieldEnd();
}
iprot.readStructEnd();
struct.validate();
}
