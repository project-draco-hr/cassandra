{
  org.apache.thrift.protocol.TField schemeField;
  iprot.readStructBegin();
  while (true) {
    schemeField=iprot.readFieldBegin();
    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
      break;
    }
switch (schemeField.id) {
case 0:
      if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
{
          org.apache.thrift.protocol.TMap _map358=iprot.readMapBegin();
          struct.success=new HashMap<String,List<String>>(2 * _map358.size);
          for (int _i359=0; _i359 < _map358.size; ++_i359) {
            String _key360;
            List<String> _val361;
            _key360=iprot.readString();
{
              org.apache.thrift.protocol.TList _list362=iprot.readListBegin();
              _val361=new ArrayList<String>(_list362.size);
              for (int _i363=0; _i363 < _list362.size; ++_i363) {
                String _elem364;
                _elem364=iprot.readString();
                _val361.add(_elem364);
              }
              iprot.readListEnd();
            }
            struct.success.put(_key360,_val361);
          }
          iprot.readMapEnd();
        }
        struct.setSuccessIsSet(true);
      }
 else {
        org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
      }
    break;
case 1:
  if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
    struct.ire=new InvalidRequestException();
    struct.ire.read(iprot);
    struct.setIreIsSet(true);
  }
 else {
    org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
  }
break;
default :
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
iprot.readFieldEnd();
}
iprot.readStructEnd();
struct.validate();
}
