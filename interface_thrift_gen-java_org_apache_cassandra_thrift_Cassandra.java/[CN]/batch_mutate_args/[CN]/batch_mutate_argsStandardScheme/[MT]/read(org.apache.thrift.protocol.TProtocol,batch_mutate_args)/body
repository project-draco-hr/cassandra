{
  org.apache.thrift.protocol.TField schemeField;
  iprot.readStructBegin();
  while (true) {
    schemeField=iprot.readFieldBegin();
    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
      break;
    }
switch (schemeField.id) {
case 1:
      if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
{
          org.apache.thrift.protocol.TMap _map282=iprot.readMapBegin();
          struct.mutation_map=new HashMap<ByteBuffer,Map<String,List<Mutation>>>(2 * _map282.size);
          for (int _i283=0; _i283 < _map282.size; ++_i283) {
            ByteBuffer _key284;
            Map<String,List<Mutation>> _val285;
            _key284=iprot.readBinary();
{
              org.apache.thrift.protocol.TMap _map286=iprot.readMapBegin();
              _val285=new HashMap<String,List<Mutation>>(2 * _map286.size);
              for (int _i287=0; _i287 < _map286.size; ++_i287) {
                String _key288;
                List<Mutation> _val289;
                _key288=iprot.readString();
{
                  org.apache.thrift.protocol.TList _list290=iprot.readListBegin();
                  _val289=new ArrayList<Mutation>(_list290.size);
                  for (int _i291=0; _i291 < _list290.size; ++_i291) {
                    Mutation _elem292;
                    _elem292=new Mutation();
                    _elem292.read(iprot);
                    _val289.add(_elem292);
                  }
                  iprot.readListEnd();
                }
                _val285.put(_key288,_val289);
              }
              iprot.readMapEnd();
            }
            struct.mutation_map.put(_key284,_val285);
          }
          iprot.readMapEnd();
        }
        struct.setMutation_mapIsSet(true);
      }
 else {
        org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
      }
    break;
case 2:
  if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
    struct.consistency_level=ConsistencyLevel.findByValue(iprot.readI32());
    struct.setConsistency_levelIsSet(true);
  }
 else {
    org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
  }
break;
default :
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
iprot.readFieldEnd();
}
iprot.readStructEnd();
struct.validate();
}
