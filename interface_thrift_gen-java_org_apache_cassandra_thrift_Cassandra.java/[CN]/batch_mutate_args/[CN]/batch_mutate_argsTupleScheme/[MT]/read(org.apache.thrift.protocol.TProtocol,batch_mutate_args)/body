{
  TTupleProtocol iprot=(TTupleProtocol)prot;
{
    org.apache.thrift.protocol.TMap _map299=new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING,org.apache.thrift.protocol.TType.MAP,iprot.readI32());
    struct.mutation_map=new HashMap<ByteBuffer,Map<String,List<Mutation>>>(2 * _map299.size);
    for (int _i300=0; _i300 < _map299.size; ++_i300) {
      ByteBuffer _key301;
      Map<String,List<Mutation>> _val302;
      _key301=iprot.readBinary();
{
        org.apache.thrift.protocol.TMap _map303=new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING,org.apache.thrift.protocol.TType.LIST,iprot.readI32());
        _val302=new HashMap<String,List<Mutation>>(2 * _map303.size);
        for (int _i304=0; _i304 < _map303.size; ++_i304) {
          String _key305;
          List<Mutation> _val306;
          _key305=iprot.readString();
{
            org.apache.thrift.protocol.TList _list307=new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT,iprot.readI32());
            _val306=new ArrayList<Mutation>(_list307.size);
            for (int _i308=0; _i308 < _list307.size; ++_i308) {
              Mutation _elem309;
              _elem309=new Mutation();
              _elem309.read(iprot);
              _val306.add(_elem309);
            }
          }
          _val302.put(_key305,_val306);
        }
      }
      struct.mutation_map.put(_key301,_val302);
    }
  }
  struct.setMutation_mapIsSet(true);
  struct.consistency_level=ConsistencyLevel.findByValue(iprot.readI32());
  struct.setConsistency_levelIsSet(true);
}
