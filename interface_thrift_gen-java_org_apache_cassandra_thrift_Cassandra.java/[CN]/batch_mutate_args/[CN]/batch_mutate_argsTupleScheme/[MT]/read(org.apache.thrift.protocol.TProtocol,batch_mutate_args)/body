{
  TTupleProtocol iprot=(TTupleProtocol)prot;
{
    org.apache.thrift.protocol.TMap _map283=new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING,org.apache.thrift.protocol.TType.MAP,iprot.readI32());
    struct.mutation_map=new HashMap<ByteBuffer,Map<String,List<Mutation>>>(2 * _map283.size);
    for (int _i284=0; _i284 < _map283.size; ++_i284) {
      ByteBuffer _key285;
      Map<String,List<Mutation>> _val286;
      _key285=iprot.readBinary();
{
        org.apache.thrift.protocol.TMap _map287=new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING,org.apache.thrift.protocol.TType.LIST,iprot.readI32());
        _val286=new HashMap<String,List<Mutation>>(2 * _map287.size);
        for (int _i288=0; _i288 < _map287.size; ++_i288) {
          String _key289;
          List<Mutation> _val290;
          _key289=iprot.readString();
{
            org.apache.thrift.protocol.TList _list291=new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT,iprot.readI32());
            _val290=new ArrayList<Mutation>(_list291.size);
            for (int _i292=0; _i292 < _list291.size; ++_i292) {
              Mutation _elem293;
              _elem293=new Mutation();
              _elem293.read(iprot);
              _val290.add(_elem293);
            }
          }
          _val286.put(_key289,_val290);
        }
      }
      struct.mutation_map.put(_key285,_val286);
    }
  }
  struct.setMutation_mapIsSet(true);
  struct.consistency_level=ConsistencyLevel.findByValue(iprot.readI32());
  struct.setConsistency_levelIsSet(true);
}
