{
  TTupleProtocol iprot=(TTupleProtocol)prot;
{
    org.apache.thrift.protocol.TMap _map327=new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING,org.apache.thrift.protocol.TType.MAP,iprot.readI32());
    struct.mutation_map=new HashMap<ByteBuffer,Map<String,List<Mutation>>>(2 * _map327.size);
    for (int _i328=0; _i328 < _map327.size; ++_i328) {
      ByteBuffer _key329;
      Map<String,List<Mutation>> _val330;
      _key329=iprot.readBinary();
{
        org.apache.thrift.protocol.TMap _map331=new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING,org.apache.thrift.protocol.TType.LIST,iprot.readI32());
        _val330=new HashMap<String,List<Mutation>>(2 * _map331.size);
        for (int _i332=0; _i332 < _map331.size; ++_i332) {
          String _key333;
          List<Mutation> _val334;
          _key333=iprot.readString();
{
            org.apache.thrift.protocol.TList _list335=new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT,iprot.readI32());
            _val334=new ArrayList<Mutation>(_list335.size);
            for (int _i336=0; _i336 < _list335.size; ++_i336) {
              Mutation _elem337;
              _elem337=new Mutation();
              _elem337.read(iprot);
              _val334.add(_elem337);
            }
          }
          _val330.put(_key333,_val334);
        }
      }
      struct.mutation_map.put(_key329,_val330);
    }
  }
  struct.setMutation_mapIsSet(true);
  struct.consistency_level=ConsistencyLevel.findByValue(iprot.readI32());
  struct.setConsistency_levelIsSet(true);
}
