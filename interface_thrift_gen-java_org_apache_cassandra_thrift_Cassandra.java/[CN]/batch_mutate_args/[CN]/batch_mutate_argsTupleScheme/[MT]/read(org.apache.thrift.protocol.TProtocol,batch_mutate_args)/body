{
  TTupleProtocol iprot=(TTupleProtocol)prot;
{
    org.apache.thrift.protocol.TMap _map325=new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING,org.apache.thrift.protocol.TType.MAP,iprot.readI32());
    struct.mutation_map=new HashMap<ByteBuffer,Map<String,List<Mutation>>>(2 * _map325.size);
    for (int _i326=0; _i326 < _map325.size; ++_i326) {
      ByteBuffer _key327;
      Map<String,List<Mutation>> _val328;
      _key327=iprot.readBinary();
{
        org.apache.thrift.protocol.TMap _map329=new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING,org.apache.thrift.protocol.TType.LIST,iprot.readI32());
        _val328=new HashMap<String,List<Mutation>>(2 * _map329.size);
        for (int _i330=0; _i330 < _map329.size; ++_i330) {
          String _key331;
          List<Mutation> _val332;
          _key331=iprot.readString();
{
            org.apache.thrift.protocol.TList _list333=new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT,iprot.readI32());
            _val332=new ArrayList<Mutation>(_list333.size);
            for (int _i334=0; _i334 < _list333.size; ++_i334) {
              Mutation _elem335;
              _elem335=new Mutation();
              _elem335.read(iprot);
              _val332.add(_elem335);
            }
          }
          _val328.put(_key331,_val332);
        }
      }
      struct.mutation_map.put(_key327,_val328);
    }
  }
  struct.setMutation_mapIsSet(true);
  struct.consistency_level=ConsistencyLevel.findByValue(iprot.readI32());
  struct.setConsistency_levelIsSet(true);
}
