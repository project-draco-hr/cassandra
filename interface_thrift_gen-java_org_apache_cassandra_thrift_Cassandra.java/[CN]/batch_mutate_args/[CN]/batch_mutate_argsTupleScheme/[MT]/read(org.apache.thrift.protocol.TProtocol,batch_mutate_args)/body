{
  TTupleProtocol iprot=(TTupleProtocol)prot;
{
    org.apache.thrift.protocol.TMap _map319=new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING,org.apache.thrift.protocol.TType.MAP,iprot.readI32());
    struct.mutation_map=new HashMap<ByteBuffer,Map<String,List<Mutation>>>(2 * _map319.size);
    for (int _i320=0; _i320 < _map319.size; ++_i320) {
      ByteBuffer _key321;
      Map<String,List<Mutation>> _val322;
      _key321=iprot.readBinary();
{
        org.apache.thrift.protocol.TMap _map323=new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING,org.apache.thrift.protocol.TType.LIST,iprot.readI32());
        _val322=new HashMap<String,List<Mutation>>(2 * _map323.size);
        for (int _i324=0; _i324 < _map323.size; ++_i324) {
          String _key325;
          List<Mutation> _val326;
          _key325=iprot.readString();
{
            org.apache.thrift.protocol.TList _list327=new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT,iprot.readI32());
            _val326=new ArrayList<Mutation>(_list327.size);
            for (int _i328=0; _i328 < _list327.size; ++_i328) {
              Mutation _elem329;
              _elem329=new Mutation();
              _elem329.read(iprot);
              _val326.add(_elem329);
            }
          }
          _val322.put(_key325,_val326);
        }
      }
      struct.mutation_map.put(_key321,_val322);
    }
  }
  struct.setMutation_mapIsSet(true);
  struct.consistency_level=ConsistencyLevel.findByValue(iprot.readI32());
  struct.setConsistency_levelIsSet(true);
}
