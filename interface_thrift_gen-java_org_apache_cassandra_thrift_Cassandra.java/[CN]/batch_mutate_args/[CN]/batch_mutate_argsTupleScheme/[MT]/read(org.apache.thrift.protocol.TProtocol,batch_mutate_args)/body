{
  TTupleProtocol iprot=(TTupleProtocol)prot;
{
    org.apache.thrift.protocol.TMap _map307=new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING,org.apache.thrift.protocol.TType.MAP,iprot.readI32());
    struct.mutation_map=new HashMap<ByteBuffer,Map<String,List<Mutation>>>(2 * _map307.size);
    for (int _i308=0; _i308 < _map307.size; ++_i308) {
      ByteBuffer _key309;
      Map<String,List<Mutation>> _val310;
      _key309=iprot.readBinary();
{
        org.apache.thrift.protocol.TMap _map311=new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING,org.apache.thrift.protocol.TType.LIST,iprot.readI32());
        _val310=new HashMap<String,List<Mutation>>(2 * _map311.size);
        for (int _i312=0; _i312 < _map311.size; ++_i312) {
          String _key313;
          List<Mutation> _val314;
          _key313=iprot.readString();
{
            org.apache.thrift.protocol.TList _list315=new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT,iprot.readI32());
            _val314=new ArrayList<Mutation>(_list315.size);
            for (int _i316=0; _i316 < _list315.size; ++_i316) {
              Mutation _elem317;
              _elem317=new Mutation();
              _elem317.read(iprot);
              _val314.add(_elem317);
            }
          }
          _val310.put(_key313,_val314);
        }
      }
      struct.mutation_map.put(_key309,_val310);
    }
  }
  struct.setMutation_mapIsSet(true);
  struct.consistency_level=ConsistencyLevel.findByValue(iprot.readI32());
  struct.setConsistency_levelIsSet(true);
}
