{
  TTupleProtocol iprot=(TTupleProtocol)prot;
{
    org.apache.thrift.protocol.TMap _map333=new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING,org.apache.thrift.protocol.TType.MAP,iprot.readI32());
    struct.mutation_map=new HashMap<ByteBuffer,Map<String,List<Mutation>>>(2 * _map333.size);
    for (int _i334=0; _i334 < _map333.size; ++_i334) {
      ByteBuffer _key335;
      Map<String,List<Mutation>> _val336;
      _key335=iprot.readBinary();
{
        org.apache.thrift.protocol.TMap _map337=new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING,org.apache.thrift.protocol.TType.LIST,iprot.readI32());
        _val336=new HashMap<String,List<Mutation>>(2 * _map337.size);
        for (int _i338=0; _i338 < _map337.size; ++_i338) {
          String _key339;
          List<Mutation> _val340;
          _key339=iprot.readString();
{
            org.apache.thrift.protocol.TList _list341=new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT,iprot.readI32());
            _val340=new ArrayList<Mutation>(_list341.size);
            for (int _i342=0; _i342 < _list341.size; ++_i342) {
              Mutation _elem343;
              _elem343=new Mutation();
              _elem343.read(iprot);
              _val340.add(_elem343);
            }
          }
          _val336.put(_key339,_val340);
        }
      }
      struct.mutation_map.put(_key335,_val336);
    }
  }
  struct.setMutation_mapIsSet(true);
  struct.consistency_level=ConsistencyLevel.findByValue(iprot.readI32());
  struct.setConsistency_levelIsSet(true);
}
