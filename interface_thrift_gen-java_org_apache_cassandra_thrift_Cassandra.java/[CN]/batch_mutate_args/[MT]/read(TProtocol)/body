{
  TField field;
  iprot.readStructBegin();
  while (true) {
    field=iprot.readFieldBegin();
    if (field.type == TType.STOP) {
      break;
    }
    _Fields fieldId=_Fields.findByThriftId(field.id);
    if (fieldId == null) {
      TProtocolUtil.skip(iprot,field.type);
    }
 else {
switch (fieldId) {
case KEYSPACE:
        if (field.type == TType.STRING) {
          this.keyspace=iprot.readString();
        }
 else {
          TProtocolUtil.skip(iprot,field.type);
        }
      break;
case MUTATION_MAP:
    if (field.type == TType.MAP) {
{
        TMap _map56=iprot.readMapBegin();
        this.mutation_map=new HashMap<String,Map<String,List<Mutation>>>(2 * _map56.size);
        for (int _i57=0; _i57 < _map56.size; ++_i57) {
          String _key58;
          Map<String,List<Mutation>> _val59;
          _key58=iprot.readString();
{
            TMap _map60=iprot.readMapBegin();
            _val59=new HashMap<String,List<Mutation>>(2 * _map60.size);
            for (int _i61=0; _i61 < _map60.size; ++_i61) {
              String _key62;
              List<Mutation> _val63;
              _key62=iprot.readString();
{
                TList _list64=iprot.readListBegin();
                _val63=new ArrayList<Mutation>(_list64.size);
                for (int _i65=0; _i65 < _list64.size; ++_i65) {
                  Mutation _elem66;
                  _elem66=new Mutation();
                  _elem66.read(iprot);
                  _val63.add(_elem66);
                }
                iprot.readListEnd();
              }
              _val59.put(_key62,_val63);
            }
            iprot.readMapEnd();
          }
          this.mutation_map.put(_key58,_val59);
        }
        iprot.readMapEnd();
      }
    }
 else {
      TProtocolUtil.skip(iprot,field.type);
    }
  break;
case CONSISTENCY_LEVEL:
if (field.type == TType.I32) {
  this.consistency_level=ConsistencyLevel.findByValue(iprot.readI32());
}
 else {
  TProtocolUtil.skip(iprot,field.type);
}
break;
}
iprot.readFieldEnd();
}
}
iprot.readStructEnd();
validate();
}
