{
  TField field;
  iprot.readStructBegin();
  while (true) {
    field=iprot.readFieldBegin();
    if (field.type == TType.STOP) {
      break;
    }
switch (field.id) {
case 1:
      if (field.type == TType.MAP) {
{
          TMap _map80=iprot.readMapBegin();
          this.mutation_map=new HashMap<byte[],Map<String,List<Mutation>>>(2 * _map80.size);
          for (int _i81=0; _i81 < _map80.size; ++_i81) {
            byte[] _key82;
            Map<String,List<Mutation>> _val83;
            _key82=iprot.readBinary();
{
              TMap _map84=iprot.readMapBegin();
              _val83=new HashMap<String,List<Mutation>>(2 * _map84.size);
              for (int _i85=0; _i85 < _map84.size; ++_i85) {
                String _key86;
                List<Mutation> _val87;
                _key86=iprot.readString();
{
                  TList _list88=iprot.readListBegin();
                  _val87=new ArrayList<Mutation>(_list88.size);
                  for (int _i89=0; _i89 < _list88.size; ++_i89) {
                    Mutation _elem90;
                    _elem90=new Mutation();
                    _elem90.read(iprot);
                    _val87.add(_elem90);
                  }
                  iprot.readListEnd();
                }
                _val83.put(_key86,_val87);
              }
              iprot.readMapEnd();
            }
            this.mutation_map.put(_key82,_val83);
          }
          iprot.readMapEnd();
        }
      }
 else {
        TProtocolUtil.skip(iprot,field.type);
      }
    break;
case 2:
  if (field.type == TType.I32) {
    this.consistency_level=ConsistencyLevel.findByValue(iprot.readI32());
  }
 else {
    TProtocolUtil.skip(iprot,field.type);
  }
break;
default :
TProtocolUtil.skip(iprot,field.type);
}
iprot.readFieldEnd();
}
iprot.readStructEnd();
validate();
}
