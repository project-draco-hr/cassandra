{
  TField field;
  iprot.readStructBegin();
  while (true) {
    field=iprot.readFieldBegin();
    if (field.type == TType.STOP) {
      break;
    }
switch (field.id) {
case 1:
      if (field.type == TType.MAP) {
{
          TMap _map75=iprot.readMapBegin();
          this.mutation_map=new HashMap<byte[],Map<String,List<Mutation>>>(2 * _map75.size);
          for (int _i76=0; _i76 < _map75.size; ++_i76) {
            byte[] _key77;
            Map<String,List<Mutation>> _val78;
            _key77=iprot.readBinary();
{
              TMap _map79=iprot.readMapBegin();
              _val78=new HashMap<String,List<Mutation>>(2 * _map79.size);
              for (int _i80=0; _i80 < _map79.size; ++_i80) {
                String _key81;
                List<Mutation> _val82;
                _key81=iprot.readString();
{
                  TList _list83=iprot.readListBegin();
                  _val82=new ArrayList<Mutation>(_list83.size);
                  for (int _i84=0; _i84 < _list83.size; ++_i84) {
                    Mutation _elem85;
                    _elem85=new Mutation();
                    _elem85.read(iprot);
                    _val82.add(_elem85);
                  }
                  iprot.readListEnd();
                }
                _val78.put(_key81,_val82);
              }
              iprot.readMapEnd();
            }
            this.mutation_map.put(_key77,_val78);
          }
          iprot.readMapEnd();
        }
      }
 else {
        TProtocolUtil.skip(iprot,field.type);
      }
    break;
case 2:
  if (field.type == TType.I32) {
    this.consistency_level=ConsistencyLevel.findByValue(iprot.readI32());
  }
 else {
    TProtocolUtil.skip(iprot,field.type);
  }
break;
default :
TProtocolUtil.skip(iprot,field.type);
}
iprot.readFieldEnd();
}
iprot.readStructEnd();
validate();
}
