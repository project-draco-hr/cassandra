{
  TField field;
  iprot.readStructBegin();
  while (true) {
    field=iprot.readFieldBegin();
    if (field.type == TType.STOP) {
      break;
    }
switch (field.id) {
case 1:
      if (field.type == TType.MAP) {
{
          TMap _map63=iprot.readMapBegin();
          this.mutation_map=new HashMap<byte[],Map<String,List<Mutation>>>(2 * _map63.size);
          for (int _i64=0; _i64 < _map63.size; ++_i64) {
            byte[] _key65;
            Map<String,List<Mutation>> _val66;
            _key65=iprot.readBinary();
{
              TMap _map67=iprot.readMapBegin();
              _val66=new HashMap<String,List<Mutation>>(2 * _map67.size);
              for (int _i68=0; _i68 < _map67.size; ++_i68) {
                String _key69;
                List<Mutation> _val70;
                _key69=iprot.readString();
{
                  TList _list71=iprot.readListBegin();
                  _val70=new ArrayList<Mutation>(_list71.size);
                  for (int _i72=0; _i72 < _list71.size; ++_i72) {
                    Mutation _elem73;
                    _elem73=new Mutation();
                    _elem73.read(iprot);
                    _val70.add(_elem73);
                  }
                  iprot.readListEnd();
                }
                _val66.put(_key69,_val70);
              }
              iprot.readMapEnd();
            }
            this.mutation_map.put(_key65,_val66);
          }
          iprot.readMapEnd();
        }
      }
 else {
        TProtocolUtil.skip(iprot,field.type);
      }
    break;
case 2:
  if (field.type == TType.I32) {
    this.consistency_level=ConsistencyLevel.findByValue(iprot.readI32());
  }
 else {
    TProtocolUtil.skip(iprot,field.type);
  }
break;
default :
TProtocolUtil.skip(iprot,field.type);
}
iprot.readFieldEnd();
}
iprot.readStructEnd();
validate();
}
