{
  TField field;
  iprot.readStructBegin();
  while (true) {
    field=iprot.readFieldBegin();
    if (field.type == TType.STOP) {
      break;
    }
switch (field.id) {
case 1:
      if (field.type == TType.MAP) {
{
          TMap _map81=iprot.readMapBegin();
          this.mutation_map=new HashMap<byte[],Map<String,List<Mutation>>>(2 * _map81.size);
          for (int _i82=0; _i82 < _map81.size; ++_i82) {
            byte[] _key83;
            Map<String,List<Mutation>> _val84;
            _key83=iprot.readBinary();
{
              TMap _map85=iprot.readMapBegin();
              _val84=new HashMap<String,List<Mutation>>(2 * _map85.size);
              for (int _i86=0; _i86 < _map85.size; ++_i86) {
                String _key87;
                List<Mutation> _val88;
                _key87=iprot.readString();
{
                  TList _list89=iprot.readListBegin();
                  _val88=new ArrayList<Mutation>(_list89.size);
                  for (int _i90=0; _i90 < _list89.size; ++_i90) {
                    Mutation _elem91;
                    _elem91=new Mutation();
                    _elem91.read(iprot);
                    _val88.add(_elem91);
                  }
                  iprot.readListEnd();
                }
                _val84.put(_key87,_val88);
              }
              iprot.readMapEnd();
            }
            this.mutation_map.put(_key83,_val84);
          }
          iprot.readMapEnd();
        }
      }
 else {
        TProtocolUtil.skip(iprot,field.type);
      }
    break;
case 2:
  if (field.type == TType.I32) {
    this.consistency_level=ConsistencyLevel.findByValue(iprot.readI32());
  }
 else {
    TProtocolUtil.skip(iprot,field.type);
  }
break;
default :
TProtocolUtil.skip(iprot,field.type);
}
iprot.readFieldEnd();
}
iprot.readStructEnd();
validate();
}
