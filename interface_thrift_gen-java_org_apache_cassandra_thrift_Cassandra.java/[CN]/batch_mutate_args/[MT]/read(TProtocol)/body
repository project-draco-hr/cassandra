{
  TField field;
  iprot.readStructBegin();
  while (true) {
    field=iprot.readFieldBegin();
    if (field.type == TType.STOP) {
      break;
    }
switch (field.id) {
case 1:
      if (field.type == TType.STRING) {
        this.keyspace=iprot.readString();
      }
 else {
        TProtocolUtil.skip(iprot,field.type);
      }
    break;
case 2:
  if (field.type == TType.MAP) {
{
      TMap _map72=iprot.readMapBegin();
      this.mutation_map=new HashMap<String,Map<String,List<Mutation>>>(2 * _map72.size);
      for (int _i73=0; _i73 < _map72.size; ++_i73) {
        String _key74;
        Map<String,List<Mutation>> _val75;
        _key74=iprot.readString();
{
          TMap _map76=iprot.readMapBegin();
          _val75=new HashMap<String,List<Mutation>>(2 * _map76.size);
          for (int _i77=0; _i77 < _map76.size; ++_i77) {
            String _key78;
            List<Mutation> _val79;
            _key78=iprot.readString();
{
              TList _list80=iprot.readListBegin();
              _val79=new ArrayList<Mutation>(_list80.size);
              for (int _i81=0; _i81 < _list80.size; ++_i81) {
                Mutation _elem82;
                _elem82=new Mutation();
                _elem82.read(iprot);
                _val79.add(_elem82);
              }
              iprot.readListEnd();
            }
            _val75.put(_key78,_val79);
          }
          iprot.readMapEnd();
        }
        this.mutation_map.put(_key74,_val75);
      }
      iprot.readMapEnd();
    }
  }
 else {
    TProtocolUtil.skip(iprot,field.type);
  }
break;
case 3:
if (field.type == TType.I32) {
this.consistency_level=ConsistencyLevel.findByValue(iprot.readI32());
}
 else {
TProtocolUtil.skip(iprot,field.type);
}
break;
default :
TProtocolUtil.skip(iprot,field.type);
}
iprot.readFieldEnd();
}
iprot.readStructEnd();
validate();
}
