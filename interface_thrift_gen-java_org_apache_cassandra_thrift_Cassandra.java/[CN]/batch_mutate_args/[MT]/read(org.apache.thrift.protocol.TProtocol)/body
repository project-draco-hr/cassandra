{
  org.apache.thrift.protocol.TField field;
  iprot.readStructBegin();
  while (true) {
    field=iprot.readFieldBegin();
    if (field.type == org.apache.thrift.protocol.TType.STOP) {
      break;
    }
switch (field.id) {
case 1:
      if (field.type == org.apache.thrift.protocol.TType.MAP) {
{
          org.apache.thrift.protocol.TMap _map99=iprot.readMapBegin();
          this.mutation_map=new HashMap<ByteBuffer,Map<String,List<Mutation>>>(2 * _map99.size);
          for (int _i100=0; _i100 < _map99.size; ++_i100) {
            ByteBuffer _key101;
            Map<String,List<Mutation>> _val102;
            _key101=iprot.readBinary();
{
              org.apache.thrift.protocol.TMap _map103=iprot.readMapBegin();
              _val102=new HashMap<String,List<Mutation>>(2 * _map103.size);
              for (int _i104=0; _i104 < _map103.size; ++_i104) {
                String _key105;
                List<Mutation> _val106;
                _key105=iprot.readString();
{
                  org.apache.thrift.protocol.TList _list107=iprot.readListBegin();
                  _val106=new ArrayList<Mutation>(_list107.size);
                  for (int _i108=0; _i108 < _list107.size; ++_i108) {
                    Mutation _elem109;
                    _elem109=new Mutation();
                    _elem109.read(iprot);
                    _val106.add(_elem109);
                  }
                  iprot.readListEnd();
                }
                _val102.put(_key105,_val106);
              }
              iprot.readMapEnd();
            }
            this.mutation_map.put(_key101,_val102);
          }
          iprot.readMapEnd();
        }
      }
 else {
        org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);
      }
    break;
case 2:
  if (field.type == org.apache.thrift.protocol.TType.I32) {
    this.consistency_level=ConsistencyLevel.findByValue(iprot.readI32());
  }
 else {
    org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);
  }
break;
default :
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);
}
iprot.readFieldEnd();
}
iprot.readStructEnd();
validate();
}
