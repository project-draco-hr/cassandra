{
  org.apache.thrift.protocol.TField field;
  iprot.readStructBegin();
  while (true) {
    field=iprot.readFieldBegin();
    if (field.type == org.apache.thrift.protocol.TType.STOP) {
      break;
    }
switch (field.id) {
case 1:
      if (field.type == org.apache.thrift.protocol.TType.MAP) {
{
          org.apache.thrift.protocol.TMap _map121=iprot.readMapBegin();
          this.mutation_map=new HashMap<ByteBuffer,Map<String,List<Mutation>>>(2 * _map121.size);
          for (int _i122=0; _i122 < _map121.size; ++_i122) {
            ByteBuffer _key123;
            Map<String,List<Mutation>> _val124;
            _key123=iprot.readBinary();
{
              org.apache.thrift.protocol.TMap _map125=iprot.readMapBegin();
              _val124=new HashMap<String,List<Mutation>>(2 * _map125.size);
              for (int _i126=0; _i126 < _map125.size; ++_i126) {
                String _key127;
                List<Mutation> _val128;
                _key127=iprot.readString();
{
                  org.apache.thrift.protocol.TList _list129=iprot.readListBegin();
                  _val128=new ArrayList<Mutation>(_list129.size);
                  for (int _i130=0; _i130 < _list129.size; ++_i130) {
                    Mutation _elem131;
                    _elem131=new Mutation();
                    _elem131.read(iprot);
                    _val128.add(_elem131);
                  }
                  iprot.readListEnd();
                }
                _val124.put(_key127,_val128);
              }
              iprot.readMapEnd();
            }
            this.mutation_map.put(_key123,_val124);
          }
          iprot.readMapEnd();
        }
      }
 else {
        org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);
      }
    break;
case 2:
  if (field.type == org.apache.thrift.protocol.TType.I32) {
    this.consistency_level=ConsistencyLevel.findByValue(iprot.readI32());
  }
 else {
    org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);
  }
break;
default :
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);
}
iprot.readFieldEnd();
}
iprot.readStructEnd();
validate();
}
