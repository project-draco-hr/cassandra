{
  org.apache.thrift.protocol.TField field;
  iprot.readStructBegin();
  while (true) {
    field=iprot.readFieldBegin();
    if (field.type == org.apache.thrift.protocol.TType.STOP) {
      break;
    }
switch (field.id) {
case 1:
      if (field.type == org.apache.thrift.protocol.TType.MAP) {
{
          org.apache.thrift.protocol.TMap _map109=iprot.readMapBegin();
          this.mutation_map=new HashMap<ByteBuffer,Map<String,List<Mutation>>>(2 * _map109.size);
          for (int _i110=0; _i110 < _map109.size; ++_i110) {
            ByteBuffer _key111;
            Map<String,List<Mutation>> _val112;
            _key111=iprot.readBinary();
{
              org.apache.thrift.protocol.TMap _map113=iprot.readMapBegin();
              _val112=new HashMap<String,List<Mutation>>(2 * _map113.size);
              for (int _i114=0; _i114 < _map113.size; ++_i114) {
                String _key115;
                List<Mutation> _val116;
                _key115=iprot.readString();
{
                  org.apache.thrift.protocol.TList _list117=iprot.readListBegin();
                  _val116=new ArrayList<Mutation>(_list117.size);
                  for (int _i118=0; _i118 < _list117.size; ++_i118) {
                    Mutation _elem119;
                    _elem119=new Mutation();
                    _elem119.read(iprot);
                    _val116.add(_elem119);
                  }
                  iprot.readListEnd();
                }
                _val112.put(_key115,_val116);
              }
              iprot.readMapEnd();
            }
            this.mutation_map.put(_key111,_val112);
          }
          iprot.readMapEnd();
        }
      }
 else {
        org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);
      }
    break;
case 2:
  if (field.type == org.apache.thrift.protocol.TType.I32) {
    this.consistency_level=ConsistencyLevel.findByValue(iprot.readI32());
  }
 else {
    org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);
  }
break;
default :
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);
}
iprot.readFieldEnd();
}
iprot.readStructEnd();
validate();
}
