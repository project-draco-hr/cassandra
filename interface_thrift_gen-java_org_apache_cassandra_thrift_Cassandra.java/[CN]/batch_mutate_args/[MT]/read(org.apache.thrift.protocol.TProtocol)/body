{
  org.apache.thrift.protocol.TField field;
  iprot.readStructBegin();
  while (true) {
    field=iprot.readFieldBegin();
    if (field.type == org.apache.thrift.protocol.TType.STOP) {
      break;
    }
switch (field.id) {
case 1:
      if (field.type == org.apache.thrift.protocol.TType.MAP) {
{
          org.apache.thrift.protocol.TMap _map129=iprot.readMapBegin();
          this.mutation_map=new HashMap<ByteBuffer,Map<String,List<Mutation>>>(2 * _map129.size);
          for (int _i130=0; _i130 < _map129.size; ++_i130) {
            ByteBuffer _key131;
            Map<String,List<Mutation>> _val132;
            _key131=iprot.readBinary();
{
              org.apache.thrift.protocol.TMap _map133=iprot.readMapBegin();
              _val132=new HashMap<String,List<Mutation>>(2 * _map133.size);
              for (int _i134=0; _i134 < _map133.size; ++_i134) {
                String _key135;
                List<Mutation> _val136;
                _key135=iprot.readString();
{
                  org.apache.thrift.protocol.TList _list137=iprot.readListBegin();
                  _val136=new ArrayList<Mutation>(_list137.size);
                  for (int _i138=0; _i138 < _list137.size; ++_i138) {
                    Mutation _elem139;
                    _elem139=new Mutation();
                    _elem139.read(iprot);
                    _val136.add(_elem139);
                  }
                  iprot.readListEnd();
                }
                _val132.put(_key135,_val136);
              }
              iprot.readMapEnd();
            }
            this.mutation_map.put(_key131,_val132);
          }
          iprot.readMapEnd();
        }
      }
 else {
        org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);
      }
    break;
case 2:
  if (field.type == org.apache.thrift.protocol.TType.I32) {
    this.consistency_level=ConsistencyLevel.findByValue(iprot.readI32());
  }
 else {
    org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);
  }
break;
default :
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);
}
iprot.readFieldEnd();
}
iprot.readStructEnd();
validate();
}
