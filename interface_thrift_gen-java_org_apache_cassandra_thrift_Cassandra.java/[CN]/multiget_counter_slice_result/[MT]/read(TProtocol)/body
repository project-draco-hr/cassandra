{
  TField field;
  iprot.readStructBegin();
  while (true) {
    field=iprot.readFieldBegin();
    if (field.type == TType.STOP) {
      break;
    }
switch (field.id) {
case 0:
      if (field.type == TType.MAP) {
{
          TMap _map106=iprot.readMapBegin();
          this.success=new HashMap<ByteBuffer,List<Counter>>(2 * _map106.size);
          for (int _i107=0; _i107 < _map106.size; ++_i107) {
            ByteBuffer _key108;
            List<Counter> _val109;
            _key108=iprot.readBinary();
{
              TList _list110=iprot.readListBegin();
              _val109=new ArrayList<Counter>(_list110.size);
              for (int _i111=0; _i111 < _list110.size; ++_i111) {
                Counter _elem112;
                _elem112=new Counter();
                _elem112.read(iprot);
                _val109.add(_elem112);
              }
              iprot.readListEnd();
            }
            this.success.put(_key108,_val109);
          }
          iprot.readMapEnd();
        }
      }
 else {
        TProtocolUtil.skip(iprot,field.type);
      }
    break;
case 1:
  if (field.type == TType.STRUCT) {
    this.ire=new InvalidRequestException();
    this.ire.read(iprot);
  }
 else {
    TProtocolUtil.skip(iprot,field.type);
  }
break;
case 2:
if (field.type == TType.STRUCT) {
this.ue=new UnavailableException();
this.ue.read(iprot);
}
 else {
TProtocolUtil.skip(iprot,field.type);
}
break;
case 3:
if (field.type == TType.STRUCT) {
this.te=new TimedOutException();
this.te.read(iprot);
}
 else {
TProtocolUtil.skip(iprot,field.type);
}
break;
default :
TProtocolUtil.skip(iprot,field.type);
}
iprot.readFieldEnd();
}
iprot.readStructEnd();
validate();
}
