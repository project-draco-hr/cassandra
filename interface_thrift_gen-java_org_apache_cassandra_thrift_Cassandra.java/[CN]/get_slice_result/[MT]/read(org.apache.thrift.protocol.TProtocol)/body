{
  org.apache.thrift.protocol.TField field;
  iprot.readStructBegin();
  while (true) {
    field=iprot.readFieldBegin();
    if (field.type == org.apache.thrift.protocol.TType.STOP) {
      break;
    }
switch (field.id) {
case 0:
      if (field.type == org.apache.thrift.protocol.TType.LIST) {
{
          org.apache.thrift.protocol.TList _list95=iprot.readListBegin();
          this.success=new ArrayList<ColumnOrSuperColumn>(_list95.size);
          for (int _i96=0; _i96 < _list95.size; ++_i96) {
            ColumnOrSuperColumn _elem97;
            _elem97=new ColumnOrSuperColumn();
            _elem97.read(iprot);
            this.success.add(_elem97);
          }
          iprot.readListEnd();
        }
      }
 else {
        org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);
      }
    break;
case 1:
  if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
    this.ire=new InvalidRequestException();
    this.ire.read(iprot);
  }
 else {
    org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);
  }
break;
case 2:
if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
this.ue=new UnavailableException();
this.ue.read(iprot);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);
}
break;
case 3:
if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
this.te=new TimedOutException();
this.te.read(iprot);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);
}
break;
default :
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);
}
iprot.readFieldEnd();
}
iprot.readStructEnd();
validate();
}
