{
  TField field;
  iprot.readStructBegin();
  while (true) {
    field=iprot.readFieldBegin();
    if (field.type == TType.STOP) {
      break;
    }
switch (field.id) {
case 0:
      if (field.type == TType.MAP) {
{
          TMap _map42=iprot.readMapBegin();
          this.success=new HashMap<String,List<ColumnOrSuperColumn>>(2 * _map42.size);
          for (int _i43=0; _i43 < _map42.size; ++_i43) {
            String _key44;
            List<ColumnOrSuperColumn> _val45;
            _key44=iprot.readString();
{
              TList _list46=iprot.readListBegin();
              _val45=new ArrayList<ColumnOrSuperColumn>(_list46.size);
              for (int _i47=0; _i47 < _list46.size; ++_i47) {
                ColumnOrSuperColumn _elem48;
                _elem48=new ColumnOrSuperColumn();
                _elem48.read(iprot);
                _val45.add(_elem48);
              }
              iprot.readListEnd();
            }
            this.success.put(_key44,_val45);
          }
          iprot.readMapEnd();
        }
      }
 else {
        TProtocolUtil.skip(iprot,field.type);
      }
    break;
case 1:
  if (field.type == TType.STRUCT) {
    this.ire=new InvalidRequestException();
    this.ire.read(iprot);
  }
 else {
    TProtocolUtil.skip(iprot,field.type);
  }
break;
case 2:
if (field.type == TType.STRUCT) {
this.ue=new UnavailableException();
this.ue.read(iprot);
}
 else {
TProtocolUtil.skip(iprot,field.type);
}
break;
case 3:
if (field.type == TType.STRUCT) {
this.te=new TimedOutException();
this.te.read(iprot);
}
 else {
TProtocolUtil.skip(iprot,field.type);
}
break;
default :
TProtocolUtil.skip(iprot,field.type);
}
iprot.readFieldEnd();
}
iprot.readStructEnd();
validate();
}
