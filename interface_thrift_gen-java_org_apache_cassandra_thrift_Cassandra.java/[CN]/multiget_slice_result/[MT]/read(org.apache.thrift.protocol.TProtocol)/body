{
  org.apache.thrift.protocol.TField field;
  iprot.readStructBegin();
  while (true) {
    field=iprot.readFieldBegin();
    if (field.type == org.apache.thrift.protocol.TType.STOP) {
      break;
    }
switch (field.id) {
case 0:
      if (field.type == org.apache.thrift.protocol.TType.MAP) {
{
          org.apache.thrift.protocol.TMap _map95=iprot.readMapBegin();
          this.success=new HashMap<ByteBuffer,List<ColumnOrSuperColumn>>(2 * _map95.size);
          for (int _i96=0; _i96 < _map95.size; ++_i96) {
            ByteBuffer _key97;
            List<ColumnOrSuperColumn> _val98;
            _key97=iprot.readBinary();
{
              org.apache.thrift.protocol.TList _list99=iprot.readListBegin();
              _val98=new ArrayList<ColumnOrSuperColumn>(_list99.size);
              for (int _i100=0; _i100 < _list99.size; ++_i100) {
                ColumnOrSuperColumn _elem101;
                _elem101=new ColumnOrSuperColumn();
                _elem101.read(iprot);
                _val98.add(_elem101);
              }
              iprot.readListEnd();
            }
            this.success.put(_key97,_val98);
          }
          iprot.readMapEnd();
        }
      }
 else {
        org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);
      }
    break;
case 1:
  if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
    this.ire=new InvalidRequestException();
    this.ire.read(iprot);
  }
 else {
    org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);
  }
break;
case 2:
if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
this.ue=new UnavailableException();
this.ue.read(iprot);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);
}
break;
case 3:
if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
this.te=new TimedOutException();
this.te.read(iprot);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);
}
break;
default :
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);
}
iprot.readFieldEnd();
}
iprot.readStructEnd();
validate();
}
