{
  org.apache.thrift.protocol.TField field;
  iprot.readStructBegin();
  while (true) {
    field=iprot.readFieldBegin();
    if (field.type == org.apache.thrift.protocol.TType.STOP) {
      break;
    }
switch (field.id) {
case 0:
      if (field.type == org.apache.thrift.protocol.TType.MAP) {
{
          org.apache.thrift.protocol.TMap _map62=iprot.readMapBegin();
          this.success=new HashMap<ByteBuffer,List<ColumnOrSuperColumn>>(2 * _map62.size);
          for (int _i63=0; _i63 < _map62.size; ++_i63) {
            ByteBuffer _key64;
            List<ColumnOrSuperColumn> _val65;
            _key64=iprot.readBinary();
{
              org.apache.thrift.protocol.TList _list66=iprot.readListBegin();
              _val65=new ArrayList<ColumnOrSuperColumn>(_list66.size);
              for (int _i67=0; _i67 < _list66.size; ++_i67) {
                ColumnOrSuperColumn _elem68;
                _elem68=new ColumnOrSuperColumn();
                _elem68.read(iprot);
                _val65.add(_elem68);
              }
              iprot.readListEnd();
            }
            this.success.put(_key64,_val65);
          }
          iprot.readMapEnd();
        }
      }
 else {
        org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);
      }
    break;
case 1:
  if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
    this.ire=new InvalidRequestException();
    this.ire.read(iprot);
  }
 else {
    org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);
  }
break;
case 2:
if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
this.ue=new UnavailableException();
this.ue.read(iprot);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);
}
break;
case 3:
if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
this.te=new TimedOutException();
this.te.read(iprot);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);
}
break;
default :
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);
}
iprot.readFieldEnd();
}
iprot.readStructEnd();
validate();
}
