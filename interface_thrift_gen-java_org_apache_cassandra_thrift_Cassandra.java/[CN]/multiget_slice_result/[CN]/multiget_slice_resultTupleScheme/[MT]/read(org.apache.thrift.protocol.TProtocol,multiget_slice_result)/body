{
  TTupleProtocol iprot=(TTupleProtocol)prot;
  BitSet incoming=iprot.readBitSet(4);
  if (incoming.get(0)) {
{
      org.apache.thrift.protocol.TMap _map237=new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING,org.apache.thrift.protocol.TType.LIST,iprot.readI32());
      struct.success=new HashMap<ByteBuffer,List<ColumnOrSuperColumn>>(2 * _map237.size);
      for (int _i238=0; _i238 < _map237.size; ++_i238) {
        ByteBuffer _key239;
        List<ColumnOrSuperColumn> _val240;
        _key239=iprot.readBinary();
{
          org.apache.thrift.protocol.TList _list241=new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT,iprot.readI32());
          _val240=new ArrayList<ColumnOrSuperColumn>(_list241.size);
          for (int _i242=0; _i242 < _list241.size; ++_i242) {
            ColumnOrSuperColumn _elem243;
            _elem243=new ColumnOrSuperColumn();
            _elem243.read(iprot);
            _val240.add(_elem243);
          }
        }
        struct.success.put(_key239,_val240);
      }
    }
    struct.setSuccessIsSet(true);
  }
  if (incoming.get(1)) {
    struct.ire=new InvalidRequestException();
    struct.ire.read(iprot);
    struct.setIreIsSet(true);
  }
  if (incoming.get(2)) {
    struct.ue=new UnavailableException();
    struct.ue.read(iprot);
    struct.setUeIsSet(true);
  }
  if (incoming.get(3)) {
    struct.te=new TimedOutException();
    struct.te.read(iprot);
    struct.setTeIsSet(true);
  }
}
