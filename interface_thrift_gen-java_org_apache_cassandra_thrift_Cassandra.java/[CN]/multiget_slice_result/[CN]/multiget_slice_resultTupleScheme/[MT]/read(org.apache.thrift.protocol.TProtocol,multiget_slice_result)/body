{
  TTupleProtocol iprot=(TTupleProtocol)prot;
  BitSet incoming=iprot.readBitSet(4);
  if (incoming.get(0)) {
{
      org.apache.thrift.protocol.TMap _map225=new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING,org.apache.thrift.protocol.TType.LIST,iprot.readI32());
      struct.success=new HashMap<ByteBuffer,List<ColumnOrSuperColumn>>(2 * _map225.size);
      for (int _i226=0; _i226 < _map225.size; ++_i226) {
        ByteBuffer _key227;
        List<ColumnOrSuperColumn> _val228;
        _key227=iprot.readBinary();
{
          org.apache.thrift.protocol.TList _list229=new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT,iprot.readI32());
          _val228=new ArrayList<ColumnOrSuperColumn>(_list229.size);
          for (int _i230=0; _i230 < _list229.size; ++_i230) {
            ColumnOrSuperColumn _elem231;
            _elem231=new ColumnOrSuperColumn();
            _elem231.read(iprot);
            _val228.add(_elem231);
          }
        }
        struct.success.put(_key227,_val228);
      }
    }
    struct.setSuccessIsSet(true);
  }
  if (incoming.get(1)) {
    struct.ire=new InvalidRequestException();
    struct.ire.read(iprot);
    struct.setIreIsSet(true);
  }
  if (incoming.get(2)) {
    struct.ue=new UnavailableException();
    struct.ue.read(iprot);
    struct.setUeIsSet(true);
  }
  if (incoming.get(3)) {
    struct.te=new TimedOutException();
    struct.te.read(iprot);
    struct.setTeIsSet(true);
  }
}
