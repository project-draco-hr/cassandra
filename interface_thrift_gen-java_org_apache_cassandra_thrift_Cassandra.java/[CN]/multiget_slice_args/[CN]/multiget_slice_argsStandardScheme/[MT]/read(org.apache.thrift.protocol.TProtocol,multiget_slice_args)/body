{
  org.apache.thrift.protocol.TField schemeField;
  iprot.readStructBegin();
  while (true) {
    schemeField=iprot.readFieldBegin();
    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
      break;
    }
switch (schemeField.id) {
case 1:
      if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
{
          org.apache.thrift.protocol.TList _list218=iprot.readListBegin();
          struct.keys=new ArrayList<ByteBuffer>(_list218.size);
          for (int _i219=0; _i219 < _list218.size; ++_i219) {
            ByteBuffer _elem220;
            _elem220=iprot.readBinary();
            struct.keys.add(_elem220);
          }
          iprot.readListEnd();
        }
        struct.setKeysIsSet(true);
      }
 else {
        org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
      }
    break;
case 2:
  if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
    struct.column_parent=new ColumnParent();
    struct.column_parent.read(iprot);
    struct.setColumn_parentIsSet(true);
  }
 else {
    org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
  }
break;
case 3:
if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
struct.predicate=new SlicePredicate();
struct.predicate.read(iprot);
struct.setPredicateIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 4:
if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
struct.consistency_level=ConsistencyLevel.findByValue(iprot.readI32());
struct.setConsistency_levelIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
default :
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
iprot.readFieldEnd();
}
iprot.readStructEnd();
struct.validate();
}
