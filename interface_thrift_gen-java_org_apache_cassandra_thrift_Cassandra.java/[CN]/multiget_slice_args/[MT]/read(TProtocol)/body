{
  TField field;
  iprot.readStructBegin();
  while (true) {
    field=iprot.readFieldBegin();
    if (field.type == TType.STOP) {
      break;
    }
    _Fields fieldId=_Fields.findByThriftId(field.id);
    if (fieldId == null) {
      TProtocolUtil.skip(iprot,field.type);
    }
 else {
switch (fieldId) {
case KEYSPACE:
        if (field.type == TType.STRING) {
          this.keyspace=iprot.readString();
        }
 else {
          TProtocolUtil.skip(iprot,field.type);
        }
      break;
case KEYS:
    if (field.type == TType.LIST) {
{
        TList _list34=iprot.readListBegin();
        this.keys=new ArrayList<String>(_list34.size);
        for (int _i35=0; _i35 < _list34.size; ++_i35) {
          String _elem36;
          _elem36=iprot.readString();
          this.keys.add(_elem36);
        }
        iprot.readListEnd();
      }
    }
 else {
      TProtocolUtil.skip(iprot,field.type);
    }
  break;
case COLUMN_PARENT:
if (field.type == TType.STRUCT) {
  this.column_parent=new ColumnParent();
  this.column_parent.read(iprot);
}
 else {
  TProtocolUtil.skip(iprot,field.type);
}
break;
case PREDICATE:
if (field.type == TType.STRUCT) {
this.predicate=new SlicePredicate();
this.predicate.read(iprot);
}
 else {
TProtocolUtil.skip(iprot,field.type);
}
break;
case CONSISTENCY_LEVEL:
if (field.type == TType.I32) {
this.consistency_level=ConsistencyLevel.findByValue(iprot.readI32());
}
 else {
TProtocolUtil.skip(iprot,field.type);
}
break;
}
iprot.readFieldEnd();
}
}
iprot.readStructEnd();
validate();
}
