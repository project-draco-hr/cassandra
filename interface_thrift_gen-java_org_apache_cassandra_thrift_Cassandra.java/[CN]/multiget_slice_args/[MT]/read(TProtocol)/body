{
  TField field;
  iprot.readStructBegin();
  while (true) {
    field=iprot.readFieldBegin();
    if (field.type == TType.STOP) {
      break;
    }
switch (field.id) {
case 1:
      if (field.type == TType.LIST) {
{
          TList _list45=iprot.readListBegin();
          this.keys=new ArrayList<byte[]>(_list45.size);
          for (int _i46=0; _i46 < _list45.size; ++_i46) {
            byte[] _elem47;
            _elem47=iprot.readBinary();
            this.keys.add(_elem47);
          }
          iprot.readListEnd();
        }
      }
 else {
        TProtocolUtil.skip(iprot,field.type);
      }
    break;
case 2:
  if (field.type == TType.STRUCT) {
    this.column_parent=new ColumnParent();
    this.column_parent.read(iprot);
  }
 else {
    TProtocolUtil.skip(iprot,field.type);
  }
break;
case 3:
if (field.type == TType.STRUCT) {
this.predicate=new SlicePredicate();
this.predicate.read(iprot);
}
 else {
TProtocolUtil.skip(iprot,field.type);
}
break;
case 4:
if (field.type == TType.I32) {
this.consistency_level=ConsistencyLevel.findByValue(iprot.readI32());
}
 else {
TProtocolUtil.skip(iprot,field.type);
}
break;
default :
TProtocolUtil.skip(iprot,field.type);
}
iprot.readFieldEnd();
}
iprot.readStructEnd();
validate();
}
