def read(self, iprot):
    if ((iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated) and isinstance(iprot.trans, TTransport.CReadableTransport) and (self.thrift_spec is not None) and (fastbinary is not None)):
        fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
        return
    iprot.readStructBegin()
    while True:
        (fname, ftype, fid) = iprot.readFieldBegin()
        if (ftype == TType.STOP):
            break
        if (fid == 1):
            if (ftype == TType.STRING):
                self.keyspace = iprot.readString()
            else:
                iprot.skip(ftype)
        elif (fid == 2):
            if (ftype == TType.STRING):
                self.name = iprot.readString()
            else:
                iprot.skip(ftype)
        elif (fid == 3):
            if (ftype == TType.STRING):
                self.column_type = iprot.readString()
            else:
                iprot.skip(ftype)
        elif (fid == 5):
            if (ftype == TType.STRING):
                self.comparator_type = iprot.readString()
            else:
                iprot.skip(ftype)
        elif (fid == 6):
            if (ftype == TType.STRING):
                self.subcomparator_type = iprot.readString()
            else:
                iprot.skip(ftype)
        elif (fid == 8):
            if (ftype == TType.STRING):
                self.comment = iprot.readString()
            else:
                iprot.skip(ftype)
        elif (fid == 9):
            if (ftype == TType.DOUBLE):
                self.row_cache_size = iprot.readDouble()
            else:
                iprot.skip(ftype)
        elif (fid == 11):
            if (ftype == TType.DOUBLE):
                self.key_cache_size = iprot.readDouble()
            else:
                iprot.skip(ftype)
        elif (fid == 12):
            if (ftype == TType.DOUBLE):
                self.read_repair_chance = iprot.readDouble()
            else:
                iprot.skip(ftype)
        elif (fid == 13):
            if (ftype == TType.LIST):
                self.column_metadata = []
                (_etype63, _size60) = iprot.readListBegin()
                for _i64 in xrange(_size60):
                    _elem65 = ColumnDef()
                    _elem65.read(iprot)
                    self.column_metadata.append(_elem65)
                iprot.readListEnd()
            else:
                iprot.skip(ftype)
        elif (fid == 14):
            if (ftype == TType.I32):
                self.gc_grace_seconds = iprot.readI32()
            else:
                iprot.skip(ftype)
        elif (fid == 15):
            if (ftype == TType.STRING):
                self.default_validation_class = iprot.readString()
            else:
                iprot.skip(ftype)
        elif (fid == 16):
            if (ftype == TType.I32):
                self.id = iprot.readI32()
            else:
                iprot.skip(ftype)
        elif (fid == 17):
            if (ftype == TType.I32):
                self.min_compaction_threshold = iprot.readI32()
            else:
                iprot.skip(ftype)
        elif (fid == 18):
            if (ftype == TType.I32):
                self.max_compaction_threshold = iprot.readI32()
            else:
                iprot.skip(ftype)
        elif (fid == 19):
            if (ftype == TType.I32):
                self.row_cache_save_period_in_seconds = iprot.readI32()
            else:
                iprot.skip(ftype)
        elif (fid == 20):
            if (ftype == TType.I32):
                self.key_cache_save_period_in_seconds = iprot.readI32()
            else:
                iprot.skip(ftype)
        elif (fid == 22):
            if (ftype == TType.I32):
                self.memtable_throughput_in_mb = iprot.readI32()
            else:
                iprot.skip(ftype)
        elif (fid == 23):
            if (ftype == TType.DOUBLE):
                self.memtable_operations_in_millions = iprot.readDouble()
            else:
                iprot.skip(ftype)
        elif (fid == 24):
            if (ftype == TType.BOOL):
                self.replicate_on_write = iprot.readBool()
            else:
                iprot.skip(ftype)
        elif (fid == 25):
            if (ftype == TType.DOUBLE):
                self.merge_shards_chance = iprot.readDouble()
            else:
                iprot.skip(ftype)
        elif (fid == 26):
            if (ftype == TType.STRING):
                self.key_validation_class = iprot.readString()
            else:
                iprot.skip(ftype)
        elif (fid == 27):
            if (ftype == TType.STRING):
                self.row_cache_provider = iprot.readString()
            else:
                iprot.skip(ftype)
        elif (fid == 28):
            if (ftype == TType.STRING):
                self.key_alias = iprot.readString()
            else:
                iprot.skip(ftype)
        elif (fid == 29):
            if (ftype == TType.STRING):
                self.compaction_strategy = iprot.readString()
            else:
                iprot.skip(ftype)
        elif (fid == 30):
            if (ftype == TType.MAP):
                self.compaction_strategy_options = {}
                (_ktype67, _vtype68, _size66) = iprot.readMapBegin()
                for _i70 in xrange(_size66):
                    _key71 = iprot.readString()
                    _val72 = iprot.readString()
                    self.compaction_strategy_options[_key71] = _val72
                iprot.readMapEnd()
            else:
                iprot.skip(ftype)
        elif (fid == 31):
            if (ftype == TType.I32):
                self.row_cache_keys_to_save = iprot.readI32()
            else:
                iprot.skip(ftype)
        elif (fid == 32):
            if (ftype == TType.MAP):
                self.compression_options = {}
                (_ktype74, _vtype75, _size73) = iprot.readMapBegin()
                for _i77 in xrange(_size73):
                    _key78 = iprot.readString()
                    _val79 = iprot.readString()
                    self.compression_options[_key78] = _val79
                iprot.readMapEnd()
            else:
                iprot.skip(ftype)
        else:
            iprot.skip(ftype)
        iprot.readFieldEnd()
    iprot.readStructEnd()
