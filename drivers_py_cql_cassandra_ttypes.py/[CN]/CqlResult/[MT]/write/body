def write(self, oprot):
    if ((oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated) and (self.thrift_spec is not None) and (fastbinary is not None)):
        oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
        return
    oprot.writeStructBegin('CqlResult')
    if (self.type != None):
        oprot.writeFieldBegin('type', TType.I32, 1)
        oprot.writeI32(self.type)
        oprot.writeFieldEnd()
    if (self.rows != None):
        oprot.writeFieldBegin('rows', TType.LIST, 2)
        oprot.writeListBegin(TType.STRUCT, len(self.rows))
        for iter132 in self.rows:
            iter132.write(oprot)
        oprot.writeListEnd()
        oprot.writeFieldEnd()
    if (self.num != None):
        oprot.writeFieldBegin('num', TType.I32, 3)
        oprot.writeI32(self.num)
        oprot.writeFieldEnd()
    if (self.schema != None):
        oprot.writeFieldBegin('schema', TType.STRUCT, 4)
        self.schema.write(oprot)
        oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

    def validate(self):
        if (self.type is None):
            raise TProtocol.TProtocolException(message='Required field type is unset!')
        return
