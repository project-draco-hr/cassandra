def read(self, iprot):
    if ((iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated) and isinstance(iprot.trans, TTransport.CReadableTransport) and (self.thrift_spec is not None) and (fastbinary is not None)):
        fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
        return
    iprot.readStructBegin()
    while True:
        (fname, ftype, fid) = iprot.readFieldBegin()
        if (ftype == TType.STOP):
            break
        if (fid == 1):
            if (ftype == TType.MAP):
                self.name_types = {}
                (_ktype109, _vtype110, _size108) = iprot.readMapBegin()
                for _i112 in xrange(_size108):
                    _key113 = iprot.readString()
                    _val114 = iprot.readString()
                    self.name_types[_key113] = _val114
                iprot.readMapEnd()
            else:
                iprot.skip(ftype)
        elif (fid == 2):
            if (ftype == TType.MAP):
                self.value_types = {}
                (_ktype116, _vtype117, _size115) = iprot.readMapBegin()
                for _i119 in xrange(_size115):
                    _key120 = iprot.readString()
                    _val121 = iprot.readString()
                    self.value_types[_key120] = _val121
                iprot.readMapEnd()
            else:
                iprot.skip(ftype)
        elif (fid == 3):
            if (ftype == TType.STRING):
                self.default_name_type = iprot.readString()
            else:
                iprot.skip(ftype)
        elif (fid == 4):
            if (ftype == TType.STRING):
                self.default_value_type = iprot.readString()
            else:
                iprot.skip(ftype)
        else:
            iprot.skip(ftype)
        iprot.readFieldEnd()
    iprot.readStructEnd()
