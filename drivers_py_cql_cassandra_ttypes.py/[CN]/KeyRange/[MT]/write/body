def write(self, oprot):
    if ((oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated) and (self.thrift_spec is not None) and (fastbinary is not None)):
        oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
        return
    oprot.writeStructBegin('KeyRange')
    if (self.start_key != None):
        oprot.writeFieldBegin('start_key', TType.STRING, 1)
        oprot.writeString(self.start_key)
        oprot.writeFieldEnd()
    if (self.end_key != None):
        oprot.writeFieldBegin('end_key', TType.STRING, 2)
        oprot.writeString(self.end_key)
        oprot.writeFieldEnd()
    if (self.start_token != None):
        oprot.writeFieldBegin('start_token', TType.STRING, 3)
        oprot.writeString(self.start_token)
        oprot.writeFieldEnd()
    if (self.end_token != None):
        oprot.writeFieldBegin('end_token', TType.STRING, 4)
        oprot.writeString(self.end_token)
        oprot.writeFieldEnd()
    if (self.count != None):
        oprot.writeFieldBegin('count', TType.I32, 5)
        oprot.writeI32(self.count)
        oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

    def validate(self):
        if (self.count is None):
            raise TProtocol.TProtocolException(message='Required field count is unset!')
        return
