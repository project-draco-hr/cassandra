{
  createTable("CREATE TABLE %s (a int PRIMARY KEY, b frozen<tuple<int, int>>)");
  createIndex("CREATE INDEX ON %s (b)");
  execute("INSERT INTO %s (a, b) VALUES (?, ?)",0,tuple());
  execute("INSERT INTO %s (a, b) VALUES (?, ?)",1,tuple(1,2));
  execute("INSERT INTO %s (a, b) VALUES (?, ?)",2,tuple(4,5));
  execute("INSERT INTO %s (a, b) VALUES (?, ?)",3,tuple(7,8));
  assertInvalidMessage("The function arguments should not be frozen","CREATE OR REPLACE FUNCTION " + KEYSPACE + ".withFrozenArg(values frozen<tuple<int, int>>) "+ "CALLED ON NULL INPUT "+ "RETURNS text "+ "LANGUAGE java\n"+ "AS 'return values.toString();';");
  assertInvalidMessage("The function return type should not be frozen","CREATE OR REPLACE FUNCTION " + KEYSPACE + ".frozenReturnType(values tuple<int, int>) "+ "CALLED ON NULL INPUT "+ "RETURNS frozen<tuple<int, int>> "+ "LANGUAGE java\n"+ "AS 'return values;';");
  String functionName=createFunction(KEYSPACE,"tuple<int, int>","CREATE FUNCTION %s (values tuple<int, int>) " + "CALLED ON NULL INPUT " + "RETURNS text "+ "LANGUAGE java\n"+ "AS 'return values.toString();';");
  assertRows(execute("SELECT a, " + functionName + "(b) FROM %s"),row(0,"(null, null)"),row(1,"(1, 2)"),row(2,"(4, 5)"),row(3,"(7, 8)"));
  functionName=createFunction(KEYSPACE,"tuple<int, int>","CREATE FUNCTION %s (values tuple<int, int>) " + "CALLED ON NULL INPUT " + "RETURNS tuple<int, int> "+ "LANGUAGE java\n"+ "AS 'return values;';");
  assertRows(execute("SELECT a FROM %s WHERE b = " + functionName + "(?)",tuple(1,2)),row(1));
  assertInvalidMessage("The function arguments should not be frozen","DROP FUNCTION " + functionName + "(frozen<tuple<int, int>>);");
}
