{
  String tupleTypeDef="frozen<tuple<double, list<double>, set<text>, map<int, boolean>>>";
  createTable("CREATE TABLE %s (key int primary key, tup " + tupleTypeDef + ")");
  String fTup1=createFunction(KEYSPACE_PER_TEST,tupleTypeDef,"CREATE FUNCTION %s( tup " + tupleTypeDef + " ) "+ "RETURNS frozen<tuple<double, list<double>, set<text>, map<int, boolean>>> "+ "LANGUAGE javascript\n"+ "AS $$"+ "       tup;$$;");
  String fTup2=createFunction(KEYSPACE_PER_TEST,tupleTypeDef,"CREATE FUNCTION %s( tup " + tupleTypeDef + " ) "+ "RETURNS double LANGUAGE "+ "javascript\n"+ "AS $$"+ "       tup.getDouble(0);$$;");
  String fTup3=createFunction(KEYSPACE_PER_TEST,tupleTypeDef,"CREATE FUNCTION %s( tup " + tupleTypeDef + " ) "+ "RETURNS list<double> "+ "LANGUAGE javascript\n"+ "AS $$"+ "       tup.getList(1, java.lang.Class.forName(\"java.lang.Double\"));$$;");
  String fTup4=createFunction(KEYSPACE_PER_TEST,tupleTypeDef,"CREATE FUNCTION %s( tup " + tupleTypeDef + " ) "+ "RETURNS set<text> "+ "LANGUAGE javascript\n"+ "AS $$"+ "       tup.getSet(2, java.lang.Class.forName(\"java.lang.String\"));$$;");
  String fTup5=createFunction(KEYSPACE_PER_TEST,tupleTypeDef,"CREATE FUNCTION %s( tup " + tupleTypeDef + " ) "+ "RETURNS map<int, boolean> "+ "LANGUAGE javascript\n"+ "AS $$"+ "       tup.getMap(3, java.lang.Class.forName(\"java.lang.Integer\"), java.lang.Class.forName(\"java.lang.Boolean\"));$$;");
  List<Double> list=Arrays.asList(1d,2d,3d);
  Set<String> set=new TreeSet<>(Arrays.asList("one","three","two"));
  Map<Integer,Boolean> map=new TreeMap<>();
  map.put(1,true);
  map.put(2,false);
  map.put(3,true);
  Object t=tuple(1d,list,set,map);
  execute("INSERT INTO %s (key, tup) VALUES (1, ?)",t);
  assertRows(execute("SELECT " + fTup1 + "(tup) FROM %s WHERE key = 1"),row(t));
  assertRows(execute("SELECT " + fTup2 + "(tup) FROM %s WHERE key = 1"),row(1d));
  assertRows(execute("SELECT " + fTup3 + "(tup) FROM %s WHERE key = 1"),row(list));
  assertRows(execute("SELECT " + fTup4 + "(tup) FROM %s WHERE key = 1"),row(set));
  assertRows(execute("SELECT " + fTup5 + "(tup) FROM %s WHERE key = 1"),row(map));
  TupleType tType=TupleType.of(DataType.cdouble(),DataType.list(DataType.cdouble()),DataType.set(DataType.text()),DataType.map(DataType.cint(),DataType.cboolean()));
  TupleValue tup=tType.newValue(1d,list,set,map);
  for (int version=Server.VERSION_2; version <= maxProtocolVersion; version++) {
    assertRowsNet(version,executeNet(version,"SELECT " + fTup1 + "(tup) FROM %s WHERE key = 1"),row(tup));
    assertRowsNet(version,executeNet(version,"SELECT " + fTup2 + "(tup) FROM %s WHERE key = 1"),row(1d));
    assertRowsNet(version,executeNet(version,"SELECT " + fTup3 + "(tup) FROM %s WHERE key = 1"),row(list));
    assertRowsNet(version,executeNet(version,"SELECT " + fTup4 + "(tup) FROM %s WHERE key = 1"),row(set));
    assertRowsNet(version,executeNet(version,"SELECT " + fTup5 + "(tup) FROM %s WHERE key = 1"),row(map));
  }
}
