{
  createTable("CREATE TABLE %s (key int PRIMARY KEY, d double)");
  String fSin=createFunction(KEYSPACE_PER_TEST,"double","CREATE FUNCTION %s ( input double ) " + "RETURNS double " + "LANGUAGE java "+ "AS 'return Double.valueOf(Math.sin(input.doubleValue()));'");
  FunctionName fSinName=parseFunctionName(fSin);
  Assert.assertEquals(1,Functions.find(parseFunctionName(fSin)).size());
  ResultMessage.Prepared preparedSelect1=QueryProcessor.prepare(String.format("SELECT key, %s(d) FROM %s.%s",fSin,KEYSPACE,currentTable()),ClientState.forInternalCalls(),false);
  ResultMessage.Prepared preparedSelect2=QueryProcessor.prepare(String.format("SELECT key FROM %s.%s",KEYSPACE,currentTable()),ClientState.forInternalCalls(),false);
  ResultMessage.Prepared preparedInsert1=QueryProcessor.prepare(String.format("INSERT INTO %s.%s (key, d) VALUES (?, %s(?))",KEYSPACE,currentTable(),fSin),ClientState.forInternalCalls(),false);
  ResultMessage.Prepared preparedInsert2=QueryProcessor.prepare(String.format("INSERT INTO %s.%s (key, d) VALUES (?, ?)",KEYSPACE,currentTable()),ClientState.forInternalCalls(),false);
  Assert.assertNotNull(QueryProcessor.instance.getPrepared(preparedSelect1.statementId));
  Assert.assertNotNull(QueryProcessor.instance.getPrepared(preparedSelect2.statementId));
  Assert.assertNotNull(QueryProcessor.instance.getPrepared(preparedInsert1.statementId));
  Assert.assertNotNull(QueryProcessor.instance.getPrepared(preparedInsert2.statementId));
  execute("DROP FUNCTION " + fSin + "(double);");
  Assert.assertNull(QueryProcessor.instance.getPrepared(preparedSelect1.statementId));
  Assert.assertNotNull(QueryProcessor.instance.getPrepared(preparedSelect2.statementId));
  Assert.assertNull(QueryProcessor.instance.getPrepared(preparedInsert1.statementId));
  Assert.assertNotNull(QueryProcessor.instance.getPrepared(preparedInsert2.statementId));
  execute("CREATE FUNCTION " + fSin + " ( input double ) "+ "RETURNS double "+ "LANGUAGE java "+ "AS 'return Double.valueOf(Math.sin(input.doubleValue()));'");
  Assert.assertEquals(1,Functions.find(fSinName).size());
  preparedSelect1=QueryProcessor.prepare(String.format("SELECT key, %s(d) FROM %s.%s",fSin,KEYSPACE,currentTable()),ClientState.forInternalCalls(),false);
  preparedInsert1=QueryProcessor.prepare(String.format("INSERT INTO %s.%s (key, d) VALUES (?, %s(?))",KEYSPACE,currentTable(),fSin),ClientState.forInternalCalls(),false);
  Assert.assertNotNull(QueryProcessor.instance.getPrepared(preparedSelect1.statementId));
  Assert.assertNotNull(QueryProcessor.instance.getPrepared(preparedInsert1.statementId));
  dropPerTestKeyspace();
  Assert.assertNull(QueryProcessor.instance.getPrepared(preparedSelect1.statementId));
  Assert.assertNotNull(QueryProcessor.instance.getPrepared(preparedSelect2.statementId));
  Assert.assertNull(QueryProcessor.instance.getPrepared(preparedInsert1.statementId));
  Assert.assertNotNull(QueryProcessor.instance.getPrepared(preparedInsert2.statementId));
}
