{
  String type=createType("CREATE TYPE %s (txt text, i int)");
  createTable("CREATE TABLE %s (key int PRIMARY KEY, i int, b bigint, f float, d double, x boolean, t text, u frozen<" + type + ">, tup frozen<tuple<int, text>>)");
  execute("INSERT INTO %s (key, i, b, f, d, x, t, u, tup) VALUES (1, null, null, null, null, null, null, null, null)");
  String fI=createFunction(KEYSPACE,"int","CREATE OR REPLACE FUNCTION %s(val int) " + "RETURNS NULL ON NULL INPUT " + "RETURNS text "+ "LANGUAGE java\n"+ "AS 'return \"foo bar\";';");
  String fB=createFunction(KEYSPACE,"bigint","CREATE OR REPLACE FUNCTION %s(val bigint) " + "RETURNS NULL ON NULL INPUT " + "RETURNS text "+ "LANGUAGE java\n"+ "AS 'return \"foo bar\";';");
  String fF=createFunction(KEYSPACE,"float","CREATE OR REPLACE FUNCTION %s(val float) " + "RETURNS NULL ON NULL INPUT " + "RETURNS text "+ "LANGUAGE java\n"+ "AS 'return \"foo bar\";';");
  String fD=createFunction(KEYSPACE,"double","CREATE OR REPLACE FUNCTION %s(val double) " + "RETURNS NULL ON NULL INPUT " + "RETURNS text "+ "LANGUAGE java\n"+ "AS 'return \"foo bar\";';");
  String fX=createFunction(KEYSPACE,"boolean","CREATE OR REPLACE FUNCTION %s(val boolean) " + "RETURNS NULL ON NULL INPUT " + "RETURNS text "+ "LANGUAGE java\n"+ "AS 'return \"foo bar\";';");
  String fT=createFunction(KEYSPACE,"text","CREATE OR REPLACE FUNCTION %s(val text) " + "RETURNS NULL ON NULL INPUT " + "RETURNS text "+ "LANGUAGE java\n"+ "AS 'return \"foo bar\";';");
  String fU=createFunction(KEYSPACE,"frozen<" + type + '>',"CREATE OR REPLACE FUNCTION %s(val frozen<" + type + ">) "+ "RETURNS NULL ON NULL INPUT "+ "RETURNS text "+ "LANGUAGE java\n"+ "AS 'return \"foo bar\";';");
  String fTup=createFunction(KEYSPACE,"frozen<tuple<int, text>>","CREATE OR REPLACE FUNCTION %s(val frozen<tuple<int, text>>) " + "RETURNS NULL ON NULL INPUT " + "RETURNS text "+ "LANGUAGE java\n"+ "AS 'return \"foo bar\";';");
  assertRows(execute("SELECT " + fI + "(i) FROM %s WHERE key=1"),row(new Object[]{null}));
  assertRows(execute("SELECT " + fB + "(b) FROM %s WHERE key=1"),row(new Object[]{null}));
  assertRows(execute("SELECT " + fF + "(f) FROM %s WHERE key=1"),row(new Object[]{null}));
  assertRows(execute("SELECT " + fD + "(d) FROM %s WHERE key=1"),row(new Object[]{null}));
  assertRows(execute("SELECT " + fX + "(x) FROM %s WHERE key=1"),row(new Object[]{null}));
  assertRows(execute("SELECT " + fT + "(t) FROM %s WHERE key=1"),row(new Object[]{null}));
  assertRows(execute("SELECT " + fU + "(u) FROM %s WHERE key=1"),row(new Object[]{null}));
  assertRows(execute("SELECT " + fTup + "(tup) FROM %s WHERE key=1"),row(new Object[]{null}));
}
