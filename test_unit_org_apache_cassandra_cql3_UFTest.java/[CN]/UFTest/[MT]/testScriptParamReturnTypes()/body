{
  createTable("CREATE TABLE %s (key int primary key, ival int, lval bigint, fval float, dval double, vval varint, ddval decimal)");
  execute("INSERT INTO %s (key, ival, lval, fval, dval, vval, ddval) VALUES (?, ?, ?, ?, ?, ?, ?)",1,1,1L,1f,1d,BigInteger.valueOf(1L),BigDecimal.valueOf(1d));
  Object[][] variations={new Object[]{"int","ival",1,2},new Object[]{"bigint","lval",1L,2L},new Object[]{"float","fval",1f,2f},new Object[]{"double","dval",1d,2d},new Object[]{"varint","vval",BigInteger.valueOf(1L),BigInteger.valueOf(2L)},new Object[]{"decimal","ddval",BigDecimal.valueOf(1d),BigDecimal.valueOf(2d)}};
  for (  Object[] variation : variations) {
    Object type=variation[0];
    Object col=variation[1];
    Object expected1=variation[2];
    Object expected2=variation[3];
    String fName=createFunction(KEYSPACE,type.toString(),"CREATE OR REPLACE FUNCTION %s(val " + type + ") "+ "RETURNS "+ type+ ' '+ "LANGUAGE javascript "+ "AS 'val+1;';");
    assertRows(execute("SELECT key, " + col + ", "+ fName+ '('+ col+ ") FROM %s"),row(1,expected1,expected2));
  }
}
