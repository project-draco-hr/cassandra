{
  String f=createFunction(KEYSPACE,"double, double","CREATE OR REPLACE FUNCTION %s(state double, val double) " + "RETURNS double " + "LANGUAGE javascript "+ "AS '\"string\";';");
  assertLastSchemaChange(Event.SchemaChange.Change.CREATED,Event.SchemaChange.Target.FUNCTION,KEYSPACE,parseFunctionName(f).name,"double","double");
  createFunctionOverload(f,"double, double","CREATE OR REPLACE FUNCTION %s(state int, val int) " + "RETURNS int " + "LANGUAGE javascript "+ "AS '\"string\";';");
  assertLastSchemaChange(Event.SchemaChange.Change.CREATED,Event.SchemaChange.Target.FUNCTION,KEYSPACE,parseFunctionName(f).name,"int","int");
  schemaChange("CREATE OR REPLACE FUNCTION " + f + "(state int, val int) "+ "RETURNS int "+ "LANGUAGE javascript "+ "AS '\"string\";';");
  assertLastSchemaChange(Event.SchemaChange.Change.UPDATED,Event.SchemaChange.Target.FUNCTION,KEYSPACE,parseFunctionName(f).name,"int","int");
  schemaChange("DROP FUNCTION " + f + "(double, double)");
  assertLastSchemaChange(Event.SchemaChange.Change.DROPPED,Event.SchemaChange.Target.FUNCTION,KEYSPACE,parseFunctionName(f).name,"double","double");
}
