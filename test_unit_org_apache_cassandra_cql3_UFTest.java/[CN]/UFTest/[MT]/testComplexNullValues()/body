{
  String type=KEYSPACE + '.' + createType("CREATE TYPE %s (txt text, i int)");
  createTable("CREATE TABLE %s (key int primary key, lst list<double>, st set<text>, mp map<int, boolean>," + "tup frozen<tuple<double, text, int, boolean>>, udt frozen<" + type + ">)");
  String fList=createFunction(KEYSPACE,"list<double>","CREATE FUNCTION %s( coll list<double> ) " + "RETURNS list<double> " + "LANGUAGE java\n"+ "AS $$return coll;$$;");
  String fSet=createFunction(KEYSPACE,"set<text>","CREATE FUNCTION %s( coll set<text> ) " + "RETURNS set<text> " + "LANGUAGE java\n"+ "AS $$return coll;$$;");
  String fMap=createFunction(KEYSPACE,"map<int, boolean>","CREATE FUNCTION %s( coll map<int, boolean> ) " + "RETURNS map<int, boolean> " + "LANGUAGE java\n"+ "AS $$return coll;$$;");
  String fTup=createFunction(KEYSPACE,"frozen<tuple<double, text, int, boolean>>","CREATE FUNCTION %s( val frozen<tuple<double, text, int, boolean>> ) " + "RETURNS frozen<tuple<double, text, int, boolean>> " + "LANGUAGE java\n"+ "AS $$return val;$$;");
  String fUdt=createFunction(KEYSPACE,"frozen<" + type + '>',"CREATE FUNCTION %s( val frozen<" + type + "> ) "+ "RETURNS frozen<"+ type+ "> "+ "LANGUAGE java\n"+ "AS $$return val;$$;");
  List<Double> list=Arrays.asList(1d,2d,3d);
  Set<String> set=new TreeSet<>(Arrays.asList("one","three","two"));
  Map<Integer,Boolean> map=new TreeMap<>();
  map.put(1,true);
  map.put(2,false);
  map.put(3,true);
  Object t=tuple(1d,"one",42,false);
  execute("INSERT INTO %s (key, lst, st, mp, tup, udt) VALUES (1, ?, ?, ?, ?, {txt: 'one', i:1})",list,set,map,t);
  execute("INSERT INTO %s (key, lst, st, mp, tup, udt) VALUES (2, ?, ?, ?, ?, null)",null,null,null,null);
  execute("SELECT " + fList + "(lst), "+ fSet+ "(st), "+ fMap+ "(mp), "+ fTup+ "(tup), "+ fUdt+ "(udt) FROM %s WHERE key = 1");
  UntypedResultSet.Row row=execute("SELECT " + fList + "(lst) as l, "+ fSet+ "(st) as s, "+ fMap+ "(mp) as m, "+ fTup+ "(tup) as t, "+ fUdt+ "(udt) as u "+ "FROM %s WHERE key = 1").one();
  Assert.assertNotNull(row.getBytes("l"));
  Assert.assertNotNull(row.getBytes("s"));
  Assert.assertNotNull(row.getBytes("m"));
  Assert.assertNotNull(row.getBytes("t"));
  Assert.assertNotNull(row.getBytes("u"));
  row=execute("SELECT " + fList + "(lst) as l, "+ fSet+ "(st) as s, "+ fMap+ "(mp) as m, "+ fTup+ "(tup) as t, "+ fUdt+ "(udt) as u "+ "FROM %s WHERE key = 2").one();
  Assert.assertNull(row.getBytes("l"));
  Assert.assertNull(row.getBytes("s"));
  Assert.assertNull(row.getBytes("m"));
  Assert.assertNull(row.getBytes("t"));
  Assert.assertNull(row.getBytes("u"));
  for (int version=Server.VERSION_2; version <= maxProtocolVersion; version++) {
    Row r=executeNet(version,"SELECT " + fList + "(lst) as l, "+ fSet+ "(st) as s, "+ fMap+ "(mp) as m, "+ fTup+ "(tup) as t, "+ fUdt+ "(udt) as u "+ "FROM %s WHERE key = 1").one();
    Assert.assertNotNull(r.getBytesUnsafe("l"));
    Assert.assertNotNull(r.getBytesUnsafe("s"));
    Assert.assertNotNull(r.getBytesUnsafe("m"));
    Assert.assertNotNull(r.getBytesUnsafe("t"));
    Assert.assertNotNull(r.getBytesUnsafe("u"));
    r=executeNet(version,"SELECT " + fList + "(lst) as l, "+ fSet+ "(st) as s, "+ fMap+ "(mp) as m, "+ fTup+ "(tup) as t, "+ fUdt+ "(udt) as u "+ "FROM %s WHERE key = 2").one();
    Assert.assertNull(r.getBytesUnsafe("l"));
    Assert.assertNull(r.getBytesUnsafe("s"));
    Assert.assertNull(r.getBytesUnsafe("m"));
    Assert.assertNull(r.getBytesUnsafe("t"));
    Assert.assertNull(r.getBytesUnsafe("u"));
  }
}
