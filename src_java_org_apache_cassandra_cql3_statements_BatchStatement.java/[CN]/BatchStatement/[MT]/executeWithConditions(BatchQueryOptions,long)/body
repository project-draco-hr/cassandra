{
  ByteBuffer key=null;
  String ksName=null;
  String cfName=null;
  ColumnFamily updates=null;
  CQL3CasConditions conditions=null;
  Set<ColumnDefinition> columnsWithConditions=new LinkedHashSet<>();
  for (int i=0; i < statements.size(); i++) {
    ModificationStatement statement=statements.get(i);
    QueryOptions statementOptions=options.forStatement(i);
    long timestamp=attrs.getTimestamp(now,statementOptions);
    List<ByteBuffer> pks=statement.buildPartitionKeyNames(statementOptions);
    if (pks.size() > 1)     throw new IllegalArgumentException("Batch with conditions cannot span multiple partitions (you cannot use IN on the partition key)");
    if (key == null) {
      key=pks.get(0);
      ksName=statement.cfm.ksName;
      cfName=statement.cfm.cfName;
      conditions=new CQL3CasConditions(statement.cfm,now);
      updates=ArrayBackedSortedColumns.factory.create(statement.cfm);
    }
 else     if (!key.equals(pks.get(0))) {
      throw new InvalidRequestException("Batch with conditions cannot span multiple partitions");
    }
    Composite clusteringPrefix=statement.createClusteringPrefix(statementOptions);
    if (statement.hasConditions()) {
      statement.addUpdatesAndConditions(key,clusteringPrefix,updates,conditions,statementOptions,timestamp);
      if (statement.hasIfNotExistCondition() || statement.hasIfExistCondition())       columnsWithConditions=null;
 else       if (columnsWithConditions != null)       Iterables.addAll(columnsWithConditions,statement.getColumnsWithConditions());
    }
 else {
      UpdateParameters params=statement.makeUpdateParameters(Collections.singleton(key),clusteringPrefix,statementOptions,false,now);
      statement.addUpdateForKey(updates,key,clusteringPrefix,params);
    }
  }
  verifyBatchSize(Collections.singleton(updates));
  ColumnFamily result=StorageProxy.cas(ksName,cfName,key,conditions,updates,options.getSerialConsistency(),options.getConsistency());
  return new ResultMessage.Rows(ModificationStatement.buildCasResultSet(ksName,key,cfName,result,columnsWithConditions,true,options.forStatement(0)));
}
