{
  long now=state.getTimestamp();
  DecoratedKey key=null;
  CQL3CasRequest casRequest=null;
  Set<ColumnDefinition> columnsWithConditions=new LinkedHashSet<>();
  for (int i=0; i < statements.size(); i++) {
    ModificationStatement statement=statements.get(i);
    QueryOptions statementOptions=options.forStatement(i);
    long timestamp=attrs.getTimestamp(now,statementOptions);
    List<ByteBuffer> pks=statement.buildPartitionKeyNames(statementOptions);
    if (pks.size() > 1)     throw new IllegalArgumentException("Batch with conditions cannot span multiple partitions (you cannot use IN on the partition key)");
    if (key == null) {
      key=statement.cfm.decorateKey(pks.get(0));
      casRequest=new CQL3CasRequest(statement.cfm,key,true,conditionColumns,updatesRegularRows,updatesStaticRow);
    }
 else     if (!key.getKey().equals(pks.get(0))) {
      throw new InvalidRequestException("Batch with conditions cannot span multiple partitions");
    }
    SortedSet<Clustering> clusterings=statement.createClustering(statementOptions);
    checkFalse(clusterings.size() > 1,"IN on the clustering key columns is not supported with conditional updates");
    Clustering clustering=Iterables.getOnlyElement(clusterings);
    if (statement.hasConditions()) {
      statement.addConditions(clustering,casRequest,statementOptions);
      if (statement.hasIfNotExistCondition() || statement.hasIfExistCondition())       columnsWithConditions=null;
 else       if (columnsWithConditions != null)       Iterables.addAll(columnsWithConditions,statement.getColumnsWithConditions());
    }
    casRequest.addRowUpdate(clustering,statement,statementOptions,timestamp);
  }
  return Pair.create(casRequest,columnsWithConditions);
}
