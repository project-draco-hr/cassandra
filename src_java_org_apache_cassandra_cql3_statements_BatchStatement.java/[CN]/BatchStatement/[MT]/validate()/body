{
  if (attrs.isTimeToLiveSet())   throw new InvalidRequestException("Global TTL on the BATCH statement is not supported.");
  boolean timestampSet=attrs.isTimestampSet();
  if (timestampSet) {
    if (hasConditions)     throw new InvalidRequestException("Cannot provide custom timestamp for conditional BATCH");
    if (type == Type.COUNTER)     throw new InvalidRequestException("Cannot provide custom timestamp for counter BATCH");
  }
  boolean hasCounters=false;
  boolean hasNonCounters=false;
  for (  ModificationStatement statement : statements) {
    if (timestampSet && statement.isCounter())     throw new InvalidRequestException("Cannot provide custom timestamp for a BATCH containing counters");
    if (timestampSet && statement.isTimestampSet())     throw new InvalidRequestException("Timestamp must be set either on BATCH or individual statements");
    if (type == Type.COUNTER && !statement.isCounter())     throw new InvalidRequestException("Cannot include non-counter statement in a counter batch");
    if (type == Type.LOGGED && statement.isCounter())     throw new InvalidRequestException("Cannot include a counter statement in a logged batch");
    if (statement.isCounter())     hasCounters=true;
 else     hasNonCounters=true;
  }
  if (hasCounters && hasNonCounters)   throw new InvalidRequestException("Counter and non-counter mutations cannot exist in the same batch");
  if (hasConditions) {
    String ksName=null;
    String cfName=null;
    for (    ModificationStatement stmt : statements) {
      if (ksName != null && (!stmt.keyspace().equals(ksName) || !stmt.columnFamily().equals(cfName)))       throw new InvalidRequestException("Batch with conditions cannot span multiple tables");
      ksName=stmt.keyspace();
      cfName=stmt.columnFamily();
      if (stmt.requiresRead())       throw new InvalidRequestException("Operations on lists requiring a read (setting by index and deletions by index or value) are not allowed with IF conditions");
    }
  }
}
