{
  AntiEntropyService.RepairFuture sess=AntiEntropyService.instance.submitArtificialRepairSession(request,tablename,cfname);
  Validator validator=new Validator(request);
  validator.prepare(store);
  validator.completeTree();
  MerkleTree ltree=validator.tree;
  validator=new Validator(request);
  validator.prepare(store);
  validator.completeTree();
  MerkleTree rtree=validator.tree;
  Token ltoken=StorageService.getPartitioner().midpoint(local_range.left,local_range.right);
  ltree.invalidate(ltoken);
  MerkleTree.TreeRange changed=ltree.get(ltoken);
  changed.hash("non-empty hash!".getBytes());
  Set<Range> interesting=new HashSet<Range>();
  interesting.add(changed);
  AntiEntropyService.RepairSession.Differencer diff=sess.session.new Differencer(cfname,request.endpoint,ltree,rtree);
  diff.run();
  assertEquals("Wrong differing ranges",interesting,new HashSet<Range>(diff.differences));
}
