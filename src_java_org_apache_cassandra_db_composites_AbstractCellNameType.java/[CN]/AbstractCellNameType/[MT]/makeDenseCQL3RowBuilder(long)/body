{
  return new CQL3Row.Builder(){
    public Iterator<CQL3Row> group(    final Iterator<Cell> cells){
      return new AbstractIterator<CQL3Row>(){
        protected CQL3Row computeNext(){
          while (cells.hasNext()) {
            final Cell cell=cells.next();
            if (cell.isMarkedForDelete(now))             continue;
            return new CQL3Row(){
              public ByteBuffer getClusteringColumn(              int i){
                return cell.name().get(i);
              }
              public Cell getColumn(              ColumnIdentifier name){
                return cell;
              }
              public List<Cell> getCollection(              ColumnIdentifier name){
                return null;
              }
            }
;
          }
          return endOfData();
        }
      }
;
    }
  }
;
}
