{
  KSMetaData ksm=Schema.instance.getKSMetaData(name.getKeyspace());
  if (ksm == null)   throw new InvalidRequestException(String.format("Cannot drop type in unknown keyspace %s",name.getKeyspace()));
  UserType old=ksm.userTypes.getType(name.getUserTypeName());
  if (old == null) {
    if (ifExists)     return;
 else     throw new InvalidRequestException(String.format("No user type named %s exists.",name));
  }
  for (  Function function : Functions.all()) {
    if (isUsedBy(function.returnType()))     throw new InvalidRequestException(String.format("Cannot drop user type %s as it is still used by function %s",name,function));
    for (    AbstractType<?> argType : function.argTypes())     if (isUsedBy(argType))     throw new InvalidRequestException(String.format("Cannot drop user type %s as it is still used by function %s",name,function));
  }
  for (  KSMetaData ksm2 : Schema.instance.getKeyspaceDefinitions()) {
    for (    UserType ut : ksm2.userTypes.getAllTypes().values()) {
      if (ut.keyspace.equals(name.getKeyspace()) && ut.name.equals(name.getUserTypeName()))       continue;
      if (isUsedBy(ut))       throw new InvalidRequestException(String.format("Cannot drop user type %s as it is still used by user type %s",name,ut.asCQL3Type()));
    }
    for (    CFMetaData cfm : ksm2.cfMetaData().values())     for (    ColumnDefinition def : cfm.allColumns())     if (isUsedBy(def.type))     throw new InvalidRequestException(String.format("Cannot drop user type %s as it is still used by table %s.%s",name,cfm.ksName,cfm.cfName));
  }
}
