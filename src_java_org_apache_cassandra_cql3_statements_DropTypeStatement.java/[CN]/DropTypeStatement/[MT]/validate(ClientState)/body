{
  KSMetaData ksm=Schema.instance.getKSMetaData(name.getKeyspace());
  if (ksm == null)   throw new InvalidRequestException(String.format("Cannot drop type in unknown keyspace %s",name.getKeyspace()));
  if (!ksm.types.get(name.getUserTypeName()).isPresent()) {
    if (ifExists)     return;
 else     throw new InvalidRequestException(String.format("No user type named %s exists.",name));
  }
  for (  Function function : ksm.functions) {
    if (isUsedBy(function.returnType()))     throw new InvalidRequestException(String.format("Cannot drop user type %s as it is still used by function %s",name,function));
    for (    AbstractType<?> argType : function.argTypes())     if (isUsedBy(argType))     throw new InvalidRequestException(String.format("Cannot drop user type %s as it is still used by function %s",name,function));
  }
  for (  UserType ut : ksm.types)   if (!ut.name.equals(name.getUserTypeName()) && isUsedBy(ut))   throw new InvalidRequestException(String.format("Cannot drop user type %s as it is still used by user type %s",name,ut.asCQL3Type()));
  for (  CFMetaData cfm : ksm.tables)   for (  ColumnDefinition def : cfm.allColumns())   if (isUsedBy(def.type))   throw new InvalidRequestException(String.format("Cannot drop user type %s as it is still used by table %s.%s",name,cfm.ksName,cfm.cfName));
}
