{
  WhereClause clause=null;
  Relation first=null;
  Relation next=null;
  Term key_alias=null;
  Term f1=null;
  Term fN=null;
  WhereClause inClause=new WhereClause();
  try {
    int alt12=2;
switch (input.LA(1)) {
case K_KEY:
{
        int LA12_1=input.LA(2);
        if ((LA12_1 == K_IN)) {
          alt12=2;
        }
 else         if ((LA12_1 == 85 || (LA12_1 >= 101 && LA12_1 <= 104))) {
          alt12=1;
        }
 else {
          NoViableAltException nvae=new NoViableAltException("",12,1,input);
          throw nvae;
        }
      }
    break;
case STRING_LITERAL:
{
    int LA12_2=input.LA(2);
    if ((LA12_2 == K_IN)) {
      alt12=2;
    }
 else     if ((LA12_2 == 85 || (LA12_2 >= 101 && LA12_2 <= 104))) {
      alt12=1;
    }
 else {
      NoViableAltException nvae=new NoViableAltException("",12,2,input);
      throw nvae;
    }
  }
break;
case INTEGER:
{
int LA12_3=input.LA(2);
if ((LA12_3 == K_IN)) {
  alt12=2;
}
 else if ((LA12_3 == 85 || (LA12_3 >= 101 && LA12_3 <= 104))) {
  alt12=1;
}
 else {
  NoViableAltException nvae=new NoViableAltException("",12,3,input);
  throw nvae;
}
}
break;
case UUID:
{
int LA12_4=input.LA(2);
if ((LA12_4 == K_IN)) {
alt12=2;
}
 else if ((LA12_4 == 85 || (LA12_4 >= 101 && LA12_4 <= 104))) {
alt12=1;
}
 else {
NoViableAltException nvae=new NoViableAltException("",12,4,input);
throw nvae;
}
}
break;
case IDENT:
{
int LA12_5=input.LA(2);
if ((LA12_5 == K_IN)) {
alt12=2;
}
 else if ((LA12_5 == 85 || (LA12_5 >= 101 && LA12_5 <= 104))) {
alt12=1;
}
 else {
NoViableAltException nvae=new NoViableAltException("",12,5,input);
throw nvae;
}
}
break;
case FLOAT:
{
int LA12_6=input.LA(2);
if ((LA12_6 == 85 || (LA12_6 >= 101 && LA12_6 <= 104))) {
alt12=1;
}
 else if ((LA12_6 == K_IN)) {
alt12=2;
}
 else {
NoViableAltException nvae=new NoViableAltException("",12,6,input);
throw nvae;
}
}
break;
default :
NoViableAltException nvae=new NoViableAltException("",12,0,input);
throw nvae;
}
switch (alt12) {
case 1:
{
pushFollow(FOLLOW_relation_in_whereClause625);
first=relation();
state._fsp--;
clause=new WhereClause(first);
loop10: do {
int alt10=2;
int LA10_0=input.LA(1);
if ((LA10_0 == K_AND)) {
alt10=1;
}
switch (alt10) {
case 1:
{
match(input,K_AND,FOLLOW_K_AND_in_whereClause641);
pushFollow(FOLLOW_relation_in_whereClause645);
next=relation();
state._fsp--;
clause.and(next);
}
break;
default :
break loop10;
}
}
 while (true);
}
break;
case 2:
{
pushFollow(FOLLOW_term_in_whereClause661);
key_alias=term();
state._fsp--;
inClause.setKeyAlias(key_alias.getText());
match(input,K_IN,FOLLOW_K_IN_in_whereClause676);
match(input,80,FOLLOW_80_in_whereClause678);
pushFollow(FOLLOW_term_in_whereClause682);
f1=term();
state._fsp--;
inClause.andKeyEquals(f1);
loop11: do {
int alt11=2;
int LA11_0=input.LA(1);
if ((LA11_0 == 82)) {
alt11=1;
}
switch (alt11) {
case 1:
{
match(input,82,FOLLOW_82_in_whereClause705);
pushFollow(FOLLOW_term_in_whereClause709);
fN=term();
state._fsp--;
inClause.andKeyEquals(fN);
}
break;
default :
break loop11;
}
}
 while (true);
match(input,81,FOLLOW_81_in_whereClause716);
inClause.setMultiKey(true);
clause=inClause;
}
break;
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return clause;
}
