{
  BatchStatement expr=null;
  AbstractModification s1=null;
  AbstractModification sN=null;
  try {
{
      Attributes attrs=new Attributes();
      attrs.setConsistencyLevel(ConsistencyLevel.ONE);
      List<AbstractModification> statements=new ArrayList<AbstractModification>();
      match(input,K_BEGIN,FOLLOW_K_BEGIN_in_batchStatement1043);
      match(input,K_BATCH,FOLLOW_K_BATCH_in_batchStatement1045);
      int alt22=2;
      int LA22_0=input.LA(1);
      if ((LA22_0 == K_USING)) {
        alt22=1;
      }
switch (alt22) {
case 1:
{
          pushFollow(FOLLOW_usingClause_in_batchStatement1049);
          usingClause(attrs);
          state._fsp--;
        }
      break;
  }
  pushFollow(FOLLOW_batchStatementObjective_in_batchStatement1067);
  s1=batchStatementObjective();
  state._fsp--;
  int alt23=2;
  int LA23_0=input.LA(1);
  if ((LA23_0 == 84)) {
    alt23=1;
  }
switch (alt23) {
case 1:
{
      match(input,84,FOLLOW_84_in_batchStatement1069);
    }
  break;
}
statements.add(s1);
loop25: do {
int alt25=2;
int LA25_0=input.LA(1);
if ((LA25_0 == K_INSERT || LA25_0 == K_UPDATE || LA25_0 == K_DELETE)) {
  alt25=1;
}
switch (alt25) {
case 1:
{
    pushFollow(FOLLOW_batchStatementObjective_in_batchStatement1078);
    sN=batchStatementObjective();
    state._fsp--;
    int alt24=2;
    int LA24_0=input.LA(1);
    if ((LA24_0 == 84)) {
      alt24=1;
    }
switch (alt24) {
case 1:
{
        match(input,84,FOLLOW_84_in_batchStatement1080);
      }
    break;
}
statements.add(sN);
}
break;
default :
break loop25;
}
}
 while (true);
match(input,K_APPLY,FOLLOW_K_APPLY_in_batchStatement1094);
match(input,K_BATCH,FOLLOW_K_BATCH_in_batchStatement1096);
pushFollow(FOLLOW_endStmnt_in_batchStatement1098);
endStmnt();
state._fsp--;
return new BatchStatement(statements,attrs);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return expr;
}
