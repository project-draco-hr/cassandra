{
  UpdateStatement expr=null;
  Token columnFamily=null;
  Term key_alias=null;
  Term key=null;
  List<Term> keys=null;
  try {
{
      Attributes attrs=new Attributes();
      Map<Term,Operation> columns=new HashMap<Term,Operation>();
      List<Term> keyList=null;
      match(input,K_UPDATE,FOLLOW_K_UPDATE_in_updateStatement1189);
      columnFamily=(Token)input.LT(1);
      if (input.LA(1) == IDENT || (input.LA(1) >= STRING_LITERAL && input.LA(1) <= INTEGER)) {
        input.consume();
        state.errorRecovery=false;
      }
 else {
        MismatchedSetException mse=new MismatchedSetException(null,input);
        throw mse;
      }
      int alt27=2;
      int LA27_0=input.LA(1);
      if ((LA27_0 == K_USING)) {
        alt27=1;
      }
switch (alt27) {
case 1:
{
          pushFollow(FOLLOW_usingClause_in_updateStatement1219);
          usingClause(attrs);
          state._fsp--;
        }
      break;
  }
  match(input,K_SET,FOLLOW_K_SET_in_updateStatement1235);
  pushFollow(FOLLOW_termPairWithOperation_in_updateStatement1237);
  termPairWithOperation(columns);
  state._fsp--;
  loop28:   do {
    int alt28=2;
    int LA28_0=input.LA(1);
    if ((LA28_0 == 82)) {
      alt28=1;
    }
switch (alt28) {
case 1:
{
        match(input,82,FOLLOW_82_in_updateStatement1241);
        pushFollow(FOLLOW_termPairWithOperation_in_updateStatement1243);
        termPairWithOperation(columns);
        state._fsp--;
      }
    break;
default :
  break loop28;
}
}
 while (true);
match(input,K_WHERE,FOLLOW_K_WHERE_in_updateStatement1258);
{
pushFollow(FOLLOW_term_in_updateStatement1264);
key_alias=term();
state._fsp--;
int alt29=2;
int LA29_0=input.LA(1);
if ((LA29_0 == 85)) {
alt29=1;
}
 else if ((LA29_0 == K_IN)) {
alt29=2;
}
 else {
NoViableAltException nvae=new NoViableAltException("",29,0,input);
throw nvae;
}
switch (alt29) {
case 1:
{
  match(input,85,FOLLOW_85_in_updateStatement1267);
  pushFollow(FOLLOW_term_in_updateStatement1271);
  key=term();
  state._fsp--;
  keyList=Collections.singletonList(key);
}
break;
case 2:
{
match(input,K_IN,FOLLOW_K_IN_in_updateStatement1349);
match(input,80,FOLLOW_80_in_updateStatement1351);
pushFollow(FOLLOW_termList_in_updateStatement1355);
keys=termList();
state._fsp--;
keyList=keys;
match(input,81,FOLLOW_81_in_updateStatement1359);
}
break;
}
}
return new UpdateStatement((columnFamily != null ? columnFamily.getText() : null),key_alias.getText(),columns,keyList,attrs);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return expr;
}
