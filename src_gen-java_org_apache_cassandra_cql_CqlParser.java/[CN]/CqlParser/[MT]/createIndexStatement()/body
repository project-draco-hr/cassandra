{
  CreateIndexStatement expr=null;
  Token idxName=null;
  Token cf=null;
  Term columnName=null;
  try {
{
      match(input,K_CREATE,FOLLOW_K_CREATE_in_createIndexStatement2044);
      match(input,K_INDEX,FOLLOW_K_INDEX_in_createIndexStatement2046);
      int alt42=2;
      int LA42_0=input.LA(1);
      if ((LA42_0 == IDENT)) {
        alt42=1;
      }
switch (alt42) {
case 1:
{
          idxName=(Token)match(input,IDENT,FOLLOW_IDENT_in_createIndexStatement2051);
        }
      break;
  }
  match(input,K_ON,FOLLOW_K_ON_in_createIndexStatement2055);
  cf=(Token)input.LT(1);
  if (input.LA(1) == IDENT || (input.LA(1) >= STRING_LITERAL && input.LA(1) <= INTEGER)) {
    input.consume();
    state.errorRecovery=false;
  }
 else {
    MismatchedSetException mse=new MismatchedSetException(null,input);
    throw mse;
  }
  match(input,80,FOLLOW_80_in_createIndexStatement2073);
  pushFollow(FOLLOW_term_in_createIndexStatement2077);
  columnName=term();
  state._fsp--;
  match(input,81,FOLLOW_81_in_createIndexStatement2079);
  pushFollow(FOLLOW_endStmnt_in_createIndexStatement2081);
  endStmnt();
  state._fsp--;
  expr=new CreateIndexStatement((idxName != null ? idxName.getText() : null),(cf != null ? cf.getText() : null),columnName);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return expr;
}
