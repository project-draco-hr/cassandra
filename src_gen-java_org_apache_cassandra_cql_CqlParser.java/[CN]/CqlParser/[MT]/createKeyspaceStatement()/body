{
  CreateKeyspaceStatement expr=null;
  Token keyspace=null;
  Token a1=null;
  Token v1=null;
  Token aN=null;
  Token vN=null;
  try {
{
      Map<String,String> attrs=new HashMap<String,String>();
      match(input,K_CREATE,FOLLOW_K_CREATE_in_createKeyspaceStatement1616);
      match(input,K_KEYSPACE,FOLLOW_K_KEYSPACE_in_createKeyspaceStatement1618);
      keyspace=(Token)input.LT(1);
      if (input.LA(1) == IDENT || (input.LA(1) >= STRING_LITERAL && input.LA(1) <= INTEGER)) {
        input.consume();
        state.errorRecovery=false;
      }
 else {
        MismatchedSetException mse=new MismatchedSetException(null,input);
        throw mse;
      }
      match(input,K_WITH,FOLLOW_K_WITH_in_createKeyspaceStatement1646);
      a1=(Token)input.LT(1);
      if (input.LA(1) == IDENT || input.LA(1) == COMPIDENT) {
        input.consume();
        state.errorRecovery=false;
      }
 else {
        MismatchedSetException mse=new MismatchedSetException(null,input);
        throw mse;
      }
      match(input,85,FOLLOW_85_in_createKeyspaceStatement1661);
      v1=(Token)input.LT(1);
      if (input.LA(1) == IDENT || (input.LA(1) >= STRING_LITERAL && input.LA(1) <= INTEGER)) {
        input.consume();
        state.errorRecovery=false;
      }
 else {
        MismatchedSetException mse=new MismatchedSetException(null,input);
        throw mse;
      }
      attrs.put((a1 != null ? a1.getText() : null),(v1 != null ? v1.getText() : null));
      loop34:       do {
        int alt34=2;
        int LA34_0=input.LA(1);
        if ((LA34_0 == K_AND)) {
          alt34=1;
        }
switch (alt34) {
case 1:
{
            match(input,K_AND,FOLLOW_K_AND_in_createKeyspaceStatement1693);
            aN=(Token)input.LT(1);
            if (input.LA(1) == IDENT || input.LA(1) == COMPIDENT) {
              input.consume();
              state.errorRecovery=false;
            }
 else {
              MismatchedSetException mse=new MismatchedSetException(null,input);
              throw mse;
            }
            match(input,85,FOLLOW_85_in_createKeyspaceStatement1707);
            vN=(Token)input.LT(1);
            if (input.LA(1) == IDENT || (input.LA(1) >= STRING_LITERAL && input.LA(1) <= INTEGER)) {
              input.consume();
              state.errorRecovery=false;
            }
 else {
              MismatchedSetException mse=new MismatchedSetException(null,input);
              throw mse;
            }
            attrs.put((aN != null ? aN.getText() : null),(vN != null ? vN.getText() : null));
          }
        break;
default :
      break loop34;
  }
}
 while (true);
pushFollow(FOLLOW_endStmnt_in_createKeyspaceStatement1740);
endStmnt();
state._fsp--;
return new CreateKeyspaceStatement((keyspace != null ? keyspace.getText() : null),attrs);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return expr;
}
