{
  DeleteStatement expr=null;
  Token columnFamily=null;
  List<Term> cols=null;
  Term key_alias=null;
  Term key=null;
  List<Term> keys=null;
  try {
{
      Attributes attrs=new Attributes();
      List<Term> keyList=null;
      List<Term> columnsList=Collections.emptyList();
      match(input,K_DELETE,FOLLOW_K_DELETE_in_deleteStatement1401);
      int alt30=2;
      int LA30_0=input.LA(1);
      if ((LA30_0 == IDENT || (LA30_0 >= STRING_LITERAL && LA30_0 <= INTEGER) || (LA30_0 >= K_KEY && LA30_0 <= FLOAT) || LA30_0 == UUID)) {
        alt30=1;
      }
switch (alt30) {
case 1:
{
          pushFollow(FOLLOW_termList_in_deleteStatement1417);
          cols=termList();
          state._fsp--;
          columnsList=cols;
        }
      break;
  }
  match(input,K_FROM,FOLLOW_K_FROM_in_deleteStatement1433);
  columnFamily=(Token)input.LT(1);
  if (input.LA(1) == IDENT || (input.LA(1) >= STRING_LITERAL && input.LA(1) <= INTEGER)) {
    input.consume();
    state.errorRecovery=false;
  }
 else {
    MismatchedSetException mse=new MismatchedSetException(null,input);
    throw mse;
  }
  int alt31=2;
  int LA31_0=input.LA(1);
  if ((LA31_0 == K_USING)) {
    alt31=1;
  }
switch (alt31) {
case 1:
{
      pushFollow(FOLLOW_usingClauseDelete_in_deleteStatement1463);
      usingClauseDelete(attrs);
      state._fsp--;
    }
  break;
}
match(input,K_WHERE,FOLLOW_K_WHERE_in_deleteStatement1479);
int alt33=2;
int LA33_0=input.LA(1);
if ((LA33_0 == IDENT || (LA33_0 >= STRING_LITERAL && LA33_0 <= INTEGER) || (LA33_0 >= K_KEY && LA33_0 <= FLOAT) || LA33_0 == UUID)) {
alt33=1;
}
switch (alt33) {
case 1:
{
  pushFollow(FOLLOW_term_in_deleteStatement1485);
  key_alias=term();
  state._fsp--;
  int alt32=2;
  int LA32_0=input.LA(1);
  if ((LA32_0 == 85)) {
    alt32=1;
  }
 else   if ((LA32_0 == K_IN)) {
    alt32=2;
  }
 else {
    NoViableAltException nvae=new NoViableAltException("",32,0,input);
    throw nvae;
  }
switch (alt32) {
case 1:
{
      match(input,85,FOLLOW_85_in_deleteStatement1488);
      pushFollow(FOLLOW_term_in_deleteStatement1492);
      key=term();
      state._fsp--;
      keyList=Collections.singletonList(key);
    }
  break;
case 2:
{
  match(input,K_IN,FOLLOW_K_IN_in_deleteStatement1543);
  match(input,80,FOLLOW_80_in_deleteStatement1545);
  pushFollow(FOLLOW_termList_in_deleteStatement1549);
  keys=termList();
  state._fsp--;
  keyList=keys;
  match(input,81,FOLLOW_81_in_deleteStatement1553);
}
break;
}
}
break;
}
return new DeleteStatement(columnsList,(columnFamily != null ? columnFamily.getText() : null),key_alias.getText(),keyList,attrs);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return expr;
}
