{
  SelectExpression expr=null;
  Token cols=null;
  Term first=null;
  Term next=null;
  Term start=null;
  Term finish=null;
  try {
{
      int count=10000;
      boolean reversed=false;
      int alt6=2;
      int LA6_0=input.LA(1);
      if ((LA6_0 == K_FIRST)) {
        alt6=1;
      }
switch (alt6) {
case 1:
{
          match(input,K_FIRST,FOLLOW_K_FIRST_in_selectExpression491);
          cols=(Token)match(input,INTEGER,FOLLOW_INTEGER_in_selectExpression495);
          count=Integer.parseInt((cols != null ? cols.getText() : null));
        }
      break;
  }
  int alt7=2;
  int LA7_0=input.LA(1);
  if ((LA7_0 == K_REVERSED)) {
    alt7=1;
  }
switch (alt7) {
case 1:
{
      match(input,K_REVERSED,FOLLOW_K_REVERSED_in_selectExpression510);
      reversed=true;
    }
  break;
}
int alt9=3;
alt9=dfa9.predict(input);
switch (alt9) {
case 1:
{
  pushFollow(FOLLOW_term_in_selectExpression527);
  first=term();
  state._fsp--;
  expr=new SelectExpression(first,count,reversed);
  loop8:   do {
    int alt8=2;
    int LA8_0=input.LA(1);
    if ((LA8_0 == 82)) {
      alt8=1;
    }
switch (alt8) {
case 1:
{
        match(input,82,FOLLOW_82_in_selectExpression544);
        pushFollow(FOLLOW_term_in_selectExpression548);
        next=term();
        state._fsp--;
        expr.and(next);
      }
    break;
default :
  break loop8;
}
}
 while (true);
}
break;
case 2:
{
pushFollow(FOLLOW_term_in_selectExpression564);
start=term();
state._fsp--;
match(input,RANGEOP,FOLLOW_RANGEOP_in_selectExpression566);
pushFollow(FOLLOW_term_in_selectExpression570);
finish=term();
state._fsp--;
expr=new SelectExpression(start,finish,count,reversed,false);
}
break;
case 3:
{
match(input,83,FOLLOW_83_in_selectExpression582);
expr=new SelectExpression(new Term(),new Term(),count,reversed,true);
}
break;
}
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return expr;
}
