{
  AlterTableStatement expr=null;
  Token name=null;
  Token col=null;
  CqlParser.comparatorType_return alterValidator=null;
  CqlParser.comparatorType_return addValidator=null;
  try {
{
      OperationType type=null;
      String columnFamily=null, columnName=null, validator=null;
      match(input,K_ALTER,FOLLOW_K_ALTER_in_alterTableStatement2222);
      match(input,K_COLUMNFAMILY,FOLLOW_K_COLUMNFAMILY_in_alterTableStatement2224);
      name=(Token)input.LT(1);
      if (input.LA(1) == IDENT || (input.LA(1) >= STRING_LITERAL && input.LA(1) <= INTEGER)) {
        input.consume();
        state.errorRecovery=false;
      }
 else {
        MismatchedSetException mse=new MismatchedSetException(null,input);
        throw mse;
      }
      columnFamily=(name != null ? name.getText() : null);
      int alt43=3;
switch (input.LA(1)) {
case K_ALTER:
{
          alt43=1;
        }
      break;
case K_ADD:
{
      alt43=2;
    }
  break;
case K_DROP:
{
  alt43=3;
}
break;
default :
NoViableAltException nvae=new NoViableAltException("",43,0,input);
throw nvae;
}
switch (alt43) {
case 1:
{
match(input,K_ALTER,FOLLOW_K_ALTER_in_alterTableStatement2256);
type=OperationType.ALTER;
{
col=(Token)input.LT(1);
if (input.LA(1) == IDENT || (input.LA(1) >= STRING_LITERAL && input.LA(1) <= INTEGER)) {
input.consume();
state.errorRecovery=false;
}
 else {
MismatchedSetException mse=new MismatchedSetException(null,input);
throw mse;
}
columnName=(col != null ? col.getText() : null);
}
match(input,K_TYPE,FOLLOW_K_TYPE_in_alterTableStatement2310);
pushFollow(FOLLOW_comparatorType_in_alterTableStatement2314);
alterValidator=comparatorType();
state._fsp--;
validator=(alterValidator != null ? input.toString(alterValidator.start,alterValidator.stop) : null);
}
break;
case 2:
{
match(input,K_ADD,FOLLOW_K_ADD_in_alterTableStatement2330);
type=OperationType.ADD;
{
col=(Token)input.LT(1);
if (input.LA(1) == IDENT || (input.LA(1) >= STRING_LITERAL && input.LA(1) <= INTEGER)) {
input.consume();
state.errorRecovery=false;
}
 else {
MismatchedSetException mse=new MismatchedSetException(null,input);
throw mse;
}
columnName=(col != null ? col.getText() : null);
}
pushFollow(FOLLOW_comparatorType_in_alterTableStatement2386);
addValidator=comparatorType();
state._fsp--;
validator=(addValidator != null ? input.toString(addValidator.start,addValidator.stop) : null);
}
break;
case 3:
{
match(input,K_DROP,FOLLOW_K_DROP_in_alterTableStatement2402);
type=OperationType.DROP;
{
col=(Token)input.LT(1);
if (input.LA(1) == IDENT || (input.LA(1) >= STRING_LITERAL && input.LA(1) <= INTEGER)) {
input.consume();
state.errorRecovery=false;
}
 else {
MismatchedSetException mse=new MismatchedSetException(null,input);
throw mse;
}
columnName=(col != null ? col.getText() : null);
}
}
break;
}
pushFollow(FOLLOW_endStmnt_in_alterTableStatement2446);
endStmnt();
state._fsp--;
expr=new AlterTableStatement(columnFamily,type,columnName,validator);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return expr;
}
