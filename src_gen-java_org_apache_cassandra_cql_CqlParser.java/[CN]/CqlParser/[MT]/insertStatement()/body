{
  UpdateStatement expr=null;
  Token columnFamily=null;
  Term key_alias=null;
  Term column_name=null;
  Term key=null;
  Term column_value=null;
  try {
{
      Attributes attrs=new Attributes();
      Map<Term,Term> columns=new HashMap<Term,Term>();
      List<Term> columnNames=new ArrayList<Term>();
      List<Term> columnValues=new ArrayList<Term>();
      match(input,K_INSERT,FOLLOW_K_INSERT_in_insertStatement757);
      match(input,K_INTO,FOLLOW_K_INTO_in_insertStatement759);
      columnFamily=(Token)input.LT(1);
      if (input.LA(1) == IDENT || (input.LA(1) >= STRING_LITERAL && input.LA(1) <= INTEGER)) {
        input.consume();
        state.errorRecovery=false;
      }
 else {
        MismatchedSetException mse=new MismatchedSetException(null,input);
        throw mse;
      }
      match(input,80,FOLLOW_80_in_insertStatement787);
      pushFollow(FOLLOW_term_in_insertStatement791);
      key_alias=term();
      state._fsp--;
      int cnt13=0;
      loop13:       do {
        int alt13=2;
        int LA13_0=input.LA(1);
        if ((LA13_0 == 82)) {
          alt13=1;
        }
switch (alt13) {
case 1:
{
            match(input,82,FOLLOW_82_in_insertStatement795);
            pushFollow(FOLLOW_term_in_insertStatement799);
            column_name=term();
            state._fsp--;
            columnNames.add(column_name);
          }
        break;
default :
      if (cnt13 >= 1)       break loop13;
    EarlyExitException eee=new EarlyExitException(13,input);
  throw eee;
}
cnt13++;
}
 while (true);
match(input,81,FOLLOW_81_in_insertStatement807);
match(input,K_VALUES,FOLLOW_K_VALUES_in_insertStatement817);
match(input,80,FOLLOW_80_in_insertStatement829);
pushFollow(FOLLOW_term_in_insertStatement833);
key=term();
state._fsp--;
int cnt14=0;
loop14: do {
int alt14=2;
int LA14_0=input.LA(1);
if ((LA14_0 == 82)) {
alt14=1;
}
switch (alt14) {
case 1:
{
  match(input,82,FOLLOW_82_in_insertStatement837);
  pushFollow(FOLLOW_term_in_insertStatement841);
  column_value=term();
  state._fsp--;
  columnValues.add(column_value);
}
break;
default :
if (cnt14 >= 1) break loop14;
EarlyExitException eee=new EarlyExitException(14,input);
throw eee;
}
cnt14++;
}
 while (true);
match(input,81,FOLLOW_81_in_insertStatement847);
int alt15=2;
int LA15_0=input.LA(1);
if ((LA15_0 == K_USING)) {
alt15=1;
}
switch (alt15) {
case 1:
{
pushFollow(FOLLOW_usingClause_in_insertStatement859);
usingClause(attrs);
state._fsp--;
}
break;
}
return new UpdateStatement((columnFamily != null ? columnFamily.getText() : null),key_alias.getText(),columnNames,columnValues,Collections.singletonList(key),attrs);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return expr;
}
