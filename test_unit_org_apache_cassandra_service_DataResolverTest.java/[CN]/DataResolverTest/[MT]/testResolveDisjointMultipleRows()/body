{
  DataResolver resolver=new DataResolver(ks,command,ConsistencyLevel.ALL,2,System.nanoTime());
  InetAddress peer1=peer();
  resolver.preprocess(readResponseMessage(peer1,iter(new RowUpdateBuilder(cfm,nowInSec,0L,dk).clustering("1").add("c1","v1").buildUpdate())));
  InetAddress peer2=peer();
  resolver.preprocess(readResponseMessage(peer2,iter(new RowUpdateBuilder(cfm,nowInSec,1L,dk).clustering("2").add("c2","v2").buildUpdate())));
  try (PartitionIterator data=resolver.resolve()){
    try (RowIterator rows=data.next()){
      Row row=rows.next();
      assertClustering(cfm,row,"1");
      assertColumns(row,"c1");
      assertColumn(cfm,row,"c1","v1",0);
      row=rows.next();
      assertClustering(cfm,row,"2");
      assertColumns(row,"c2");
      assertColumn(cfm,row,"c2","v2",1);
      assertFalse(rows.hasNext());
      assertFalse(data.hasNext());
    }
   }
   assertEquals(2,messageRecorder.sent.size());
  MessageOut msg=getSentMessage(peer1);
  assertRepairMetadata(msg);
  assertRepairContainsNoDeletions(msg);
  assertRepairContainsColumn(msg,"2","c2","v2",1);
  msg=getSentMessage(peer2);
  assertRepairMetadata(msg);
  assertRepairContainsNoDeletions(msg);
  assertRepairContainsColumn(msg,"1","c1","v1",0);
}
