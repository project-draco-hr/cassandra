{
  final int splitPosition=TOKENS_PER_BLOCK - 2;
  InteriorNode sibling=new InteriorNode();
  sibling.parent=parent;
  next=sibling;
  Long middleValue=tokens.get(splitPosition);
  for (int i=splitPosition; i < TOKENS_PER_BLOCK; i++) {
    if (i != TOKENS_PER_BLOCK && i != splitPosition) {
      long token=tokens.get(i);
      sibling.updateTokenRange(token);
      sibling.tokens.add(token);
    }
    Node child=children.get(i + 1);
    child.parent=sibling;
    sibling.children.add(child);
    sibling.position++;
  }
  for (int i=TOKENS_PER_BLOCK; i >= splitPosition; i--) {
    if (i != TOKENS_PER_BLOCK)     tokens.remove(i);
    if (i != splitPosition)     children.remove(i);
  }
  nodeMinToken=smallestToken();
  nodeMaxToken=tokens.get(tokens.size() - 1);
  numBlocks++;
  return Pair.create(middleValue,sibling);
}
