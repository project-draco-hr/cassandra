{
  CompactionManager.instance.disableAutoCompaction();
  Keyspace keyspace=Keyspace.open(KEYSPACE_CACHED);
  String cf="CachedIntCF";
  ColumnFamilyStore cachedStore=keyspace.getColumnFamilyStore(cf);
  long startRowCacheHits=cachedStore.metric.rowCacheHit.getCount();
  long startRowCacheOutOfRange=cachedStore.metric.rowCacheHitOutOfRange.getCount();
  CacheService.instance.invalidateRowCache();
  CacheService.instance.setRowCacheCapacityInMB(1);
  ByteBuffer key=ByteBufferUtil.bytes("rowcachekey");
  DecoratedKey dk=cachedStore.decorateKey(key);
  RowCacheKey rck=new RowCacheKey(cachedStore.metadata.ksAndCFName,dk);
  RowUpdateBuilder rub=new RowUpdateBuilder(cachedStore.metadata,System.currentTimeMillis(),key);
  rub.clustering(String.valueOf(0));
  rub.add("val",ByteBufferUtil.bytes("val" + 0));
  rub.build().applyUnsafe();
  Util.getAll(Util.cmd(cachedStore,dk).withLimit(1).build());
  assertEquals(startRowCacheHits,cachedStore.metric.rowCacheHit.getCount());
  Util.getAll(Util.cmd(cachedStore,dk).withLimit(1).build());
  assertEquals(++startRowCacheHits,cachedStore.metric.rowCacheHit.getCount());
  assertEquals(startRowCacheOutOfRange,cachedStore.metric.rowCacheHitOutOfRange.getCount());
  CachedPartition cachedCf=(CachedPartition)CacheService.instance.rowCache.get(rck);
  assertEquals(1,cachedCf.rowCount());
  for (  Unfiltered unfiltered : Util.once(cachedCf.unfilteredIterator(ColumnFilter.selection(cachedCf.columns()),Slices.ALL,false))) {
    Row r=(Row)unfiltered;
    for (    ColumnData c : r) {
      assertEquals(((Cell)c).value(),ByteBufferUtil.bytes("val" + 0));
    }
  }
  cachedStore.truncateBlocking();
}
