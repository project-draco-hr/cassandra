{
  ByteBuffer value1=ByteBufferUtil.bytes(1);
  ByteBuffer value2=ByteBufferUtil.bytes(2);
  ByteBuffer value3=ByteBufferUtil.bytes(3);
  ByteBuffer value4=ByteBufferUtil.bytes(4);
  ByteBuffer value5=ByteBufferUtil.bytes(5);
  MultiColumnRestriction.EQ multiEq=new MultiColumnRestriction.EQ(toMultiItemTerminal(value1,value2),false);
  MultiColumnRestriction.Slice multiSlice=new MultiColumnRestriction.Slice(false);
  multiSlice.setBound(Relation.Type.GT,toMultiItemTerminal(value3,value4));
  Restriction[] restrictions=new Restriction[]{multiEq,multiEq,multiSlice,multiSlice};
  CFDefinition cfDef=createCFDefinition(restrictions.length);
  List<ByteBuffer> bounds=executeBuildBound(cfDef,restrictions,Bound.START);
  assertEquals(1,bounds.size());
  assertForRelationComposite(cfDef,bounds.get(0),Relation.Type.GT,value1,value2,value3,value4);
  bounds=executeBuildBound(cfDef,restrictions,Bound.END);
  assertEquals(1,bounds.size());
  assertEndOfRangeComposite(cfDef,bounds.get(0),value1,value2);
  multiEq=new MultiColumnRestriction.EQ(toMultiItemTerminal(value1,value2),false);
  MultiColumnRestriction.IN multiIn=new MultiColumnRestriction.InWithValues(asList(toMultiItemTerminal(value3,value4),toMultiItemTerminal(value4,value5)));
  restrictions=new Restriction[]{multiEq,multiEq,multiIn,multiIn};
  cfDef=createCFDefinition(restrictions.length);
  bounds=executeBuildBound(cfDef,restrictions,Bound.START);
  assertEquals(2,bounds.size());
  assertComposite(cfDef,bounds.get(0),value1,value2,value3,value4);
  assertComposite(cfDef,bounds.get(1),value1,value2,value4,value5);
  bounds=executeBuildBound(cfDef,restrictions,Bound.END);
  assertEquals(2,bounds.size());
  assertComposite(cfDef,bounds.get(0),value1,value2,value3,value4);
  assertComposite(cfDef,bounds.get(1),value1,value2,value4,value5);
  multiEq=new MultiColumnRestriction.EQ(toMultiItemTerminal(value1,value2),false);
  MultiColumnRestriction.EQ multiEq2=new MultiColumnRestriction.EQ(toMultiItemTerminal(value3,value4),false);
  restrictions=new Restriction[]{multiEq,multiEq,multiEq2,multiEq2};
  cfDef=createCFDefinition(restrictions.length);
  bounds=executeBuildBound(cfDef,restrictions,Bound.START);
  assertEquals(1,bounds.size());
  assertComposite(cfDef,bounds.get(0),value1,value2,value3,value4);
  bounds=executeBuildBound(cfDef,restrictions,Bound.END);
  assertEquals(1,bounds.size());
  assertComposite(cfDef,bounds.get(0),value1,value2,value3,value4);
}
