{
  Set<SSTableReader>[] sstablesPerLevel=manifest.getSStablesPerLevelSnapshot();
  Multimap<Integer,SSTableReader> byLevel=ArrayListMultimap.create();
  for (  SSTableReader sstable : sstables) {
    int level=sstable.getSSTableLevel();
    if (level >= sstablesPerLevel.length || !sstablesPerLevel[level].contains(sstable)) {
      logger.warn("Live sstable {} from level {} is not on corresponding level in the leveled manifest." + " This is not a problem per se, but may indicate an orphaned sstable due to a failed" + " compaction not cleaned up properly.",sstable.getFilename(),level);
      level=-1;
    }
    byLevel.get(level).add(sstable);
  }
  List<ISSTableScanner> scanners=new ArrayList<ISSTableScanner>(sstables.size());
  try {
    for (    Integer level : byLevel.keySet()) {
      if (level <= 0) {
        for (        SSTableReader sstable : byLevel.get(level))         scanners.add(sstable.getScanner(range,CompactionManager.instance.getRateLimiter()));
      }
 else {
        List<SSTableReader> intersecting=LeveledScanner.intersecting(byLevel.get(level),range);
        if (!intersecting.isEmpty())         scanners.add(new LeveledScanner(intersecting,range));
      }
    }
  }
 catch (  Throwable t) {
    try {
      new ScannerList(scanners).close();
    }
 catch (    Throwable t2) {
      t.addSuppressed(t2);
    }
    throw t;
  }
  return new ScannerList(scanners);
}
