{
  org.apache.thrift.protocol.TField field;
  iprot.readStructBegin();
  while (true) {
    field=iprot.readFieldBegin();
    if (field.type == org.apache.thrift.protocol.TType.STOP) {
      break;
    }
switch (field.id) {
case 1:
      if (field.type == org.apache.thrift.protocol.TType.MAP) {
{
          org.apache.thrift.protocol.TMap _map77=iprot.readMapBegin();
          this.name_types=new HashMap<ByteBuffer,String>(2 * _map77.size);
          for (int _i78=0; _i78 < _map77.size; ++_i78) {
            ByteBuffer _key79;
            String _val80;
            _key79=iprot.readBinary();
            _val80=iprot.readString();
            this.name_types.put(_key79,_val80);
          }
          iprot.readMapEnd();
        }
      }
 else {
        org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);
      }
    break;
case 2:
  if (field.type == org.apache.thrift.protocol.TType.MAP) {
{
      org.apache.thrift.protocol.TMap _map81=iprot.readMapBegin();
      this.value_types=new HashMap<ByteBuffer,String>(2 * _map81.size);
      for (int _i82=0; _i82 < _map81.size; ++_i82) {
        ByteBuffer _key83;
        String _val84;
        _key83=iprot.readBinary();
        _val84=iprot.readString();
        this.value_types.put(_key83,_val84);
      }
      iprot.readMapEnd();
    }
  }
 else {
    org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);
  }
break;
case 3:
if (field.type == org.apache.thrift.protocol.TType.STRING) {
this.default_name_type=iprot.readString();
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);
}
break;
case 4:
if (field.type == org.apache.thrift.protocol.TType.STRING) {
this.default_value_type=iprot.readString();
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);
}
break;
default :
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);
}
iprot.readFieldEnd();
}
iprot.readStructEnd();
validate();
}
