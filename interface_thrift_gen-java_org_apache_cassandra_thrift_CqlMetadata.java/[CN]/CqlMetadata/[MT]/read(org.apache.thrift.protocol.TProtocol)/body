{
  org.apache.thrift.protocol.TField field;
  iprot.readStructBegin();
  while (true) {
    field=iprot.readFieldBegin();
    if (field.type == org.apache.thrift.protocol.TType.STOP) {
      break;
    }
switch (field.id) {
case 1:
      if (field.type == org.apache.thrift.protocol.TType.MAP) {
{
          org.apache.thrift.protocol.TMap _map61=iprot.readMapBegin();
          this.name_types=new HashMap<ByteBuffer,String>(2 * _map61.size);
          for (int _i62=0; _i62 < _map61.size; ++_i62) {
            ByteBuffer _key63;
            String _val64;
            _key63=iprot.readBinary();
            _val64=iprot.readString();
            this.name_types.put(_key63,_val64);
          }
          iprot.readMapEnd();
        }
      }
 else {
        org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);
      }
    break;
case 2:
  if (field.type == org.apache.thrift.protocol.TType.MAP) {
{
      org.apache.thrift.protocol.TMap _map65=iprot.readMapBegin();
      this.value_types=new HashMap<ByteBuffer,String>(2 * _map65.size);
      for (int _i66=0; _i66 < _map65.size; ++_i66) {
        ByteBuffer _key67;
        String _val68;
        _key67=iprot.readBinary();
        _val68=iprot.readString();
        this.value_types.put(_key67,_val68);
      }
      iprot.readMapEnd();
    }
  }
 else {
    org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);
  }
break;
case 3:
if (field.type == org.apache.thrift.protocol.TType.STRING) {
this.default_name_type=iprot.readString();
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);
}
break;
case 4:
if (field.type == org.apache.thrift.protocol.TType.STRING) {
this.default_value_type=iprot.readString();
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);
}
break;
default :
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);
}
iprot.readFieldEnd();
}
iprot.readStructEnd();
validate();
}
