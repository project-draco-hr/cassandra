{
  outer:   while (run || !queue.isEmpty()) {
    Pair<ByteBuffer,Mutation> mutation;
    try {
      mutation=queue.take();
    }
 catch (    InterruptedException e) {
      continue;
    }
    Map<ByteBuffer,Map<String,List<Mutation>>> batch=new HashMap<ByteBuffer,Map<String,List<Mutation>>>();
    while (mutation != null) {
      Map<String,List<Mutation>> subBatch=batch.get(mutation.left);
      if (subBatch == null) {
        subBatch=Collections.singletonMap(columnFamily,(List<Mutation>)new ArrayList<Mutation>());
        batch.put(mutation.left,subBatch);
      }
      subBatch.get(columnFamily).add(mutation.right);
      if (batch.size() >= batchThreshold)       break;
      mutation=queue.poll();
    }
    Iterator<InetAddress> iter=endpoints.iterator();
    while (true) {
      try {
        client.batch_mutate(batch,consistencyLevel);
        break;
      }
 catch (      Exception e) {
        JVMStabilityInspector.inspectThrowable(e);
        closeInternal();
        if (!iter.hasNext()) {
          lastException=new IOException(e);
          break outer;
        }
      }
      try {
        InetAddress address=iter.next();
        String host=address.getHostName();
        int port=ConfigHelper.getOutputRpcPort(conf);
        client=ColumnFamilyOutputFormat.createAuthenticatedClient(host,port,conf);
      }
 catch (      Exception e) {
        closeInternal();
        if ((!(e instanceof TException)) || !iter.hasNext()) {
          lastException=new IOException(e);
          break outer;
        }
      }
    }
  }
}
