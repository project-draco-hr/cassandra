{
  Mutation mutation=new Mutation();
  org.apache.cassandra.avro.ColumnOrSuperColumn acosc=amut.column_or_supercolumn;
  if (acosc != null) {
    ColumnOrSuperColumn cosc=new ColumnOrSuperColumn();
    mutation.setColumn_or_supercolumn(cosc);
    if (acosc.column != null)     cosc.setColumn(avroToThrift(acosc.column));
 else {
      byte[] scolname=copy(acosc.super_column.name);
      List<Column> scolcols=new ArrayList<Column>((int)acosc.super_column.columns.size());
      for (      org.apache.cassandra.avro.Column acol : acosc.super_column.columns)       scolcols.add(avroToThrift(acol));
      cosc.setSuper_column(new SuperColumn(scolname,scolcols));
    }
  }
 else {
    Deletion deletion=new Deletion(avroToThrift(amut.deletion.clock));
    mutation.setDeletion(deletion);
    org.apache.cassandra.avro.SlicePredicate apred=amut.deletion.predicate;
    if (amut.deletion.super_column != null)     deletion.setSuper_column(copy(amut.deletion.super_column));
 else     if (apred.column_names != null) {
      List<byte[]> colnames=new ArrayList<byte[]>((int)apred.column_names.size());
      for (      ByteBuffer acolname : apred.column_names)       colnames.add(copy(acolname));
      deletion.setPredicate(new SlicePredicate().setColumn_names(colnames));
    }
 else {
      deletion.setPredicate(new SlicePredicate().setSlice_range(avroToThrift(apred.slice_range)));
    }
  }
  return mutation;
}
