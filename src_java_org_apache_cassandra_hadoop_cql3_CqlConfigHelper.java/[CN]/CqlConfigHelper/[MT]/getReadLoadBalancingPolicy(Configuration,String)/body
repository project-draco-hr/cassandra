{
  return new LoadBalancingPolicy(){
    private Host origHost;
    private Set<Host> liveRemoteHosts=Sets.newHashSet();
    @Override public void onAdd(    Host host){
      if (host.getAddress().getHostName().equals(stickHost))       origHost=host;
    }
    @Override public void onDown(    Host host){
      if (host.getAddress().getHostName().equals(stickHost))       origHost=null;
      liveRemoteHosts.remove(host);
    }
    @Override public void onRemove(    Host host){
      if (host.getAddress().getHostName().equals(stickHost))       origHost=null;
      liveRemoteHosts.remove(host);
    }
    @Override public void onUp(    Host host){
      if (host.getAddress().getHostName().equals(stickHost))       origHost=host;
      liveRemoteHosts.add(host);
    }
    public void onSuspected(    Host host){
    }
    @Override public HostDistance distance(    Host host){
      if (host.getAddress().getHostName().equals(stickHost))       return HostDistance.LOCAL;
 else       return HostDistance.REMOTE;
    }
    @Override public void init(    Cluster cluster,    Collection<Host> hosts){
      for (      Host host : hosts) {
        if (host.getAddress().getHostName().equals(stickHost)) {
          origHost=host;
          break;
        }
      }
    }
    @Override public Iterator<Host> newQueryPlan(    String loggedKeyspace,    Statement statement){
      if (origHost != null) {
        return Iterators.concat(Collections.singletonList(origHost).iterator(),liveRemoteHosts.iterator());
      }
 else {
        return liveRemoteHosts.iterator();
      }
    }
  }
;
}
