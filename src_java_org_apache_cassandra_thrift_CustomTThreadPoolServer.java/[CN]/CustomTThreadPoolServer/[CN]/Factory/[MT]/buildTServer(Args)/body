{
  final InetSocketAddress addr=args.addr;
  TServerTransport serverTransport;
  try {
    serverTransport=new TCustomServerSocket(addr,args.keepAlive,args.sendBufferSize,args.recvBufferSize);
  }
 catch (  TTransportException e) {
    throw new RuntimeException(String.format("Unable to create thrift socket to %s:%s",addr.getAddress(),addr.getPort()),e);
  }
  TThreadPoolServer.Args serverArgs=new TThreadPoolServer.Args(serverTransport).minWorkerThreads(DatabaseDescriptor.getRpcMinThreads()).maxWorkerThreads(DatabaseDescriptor.getRpcMaxThreads()).inputTransportFactory(args.inTransportFactory).outputTransportFactory(args.outTransportFactory).inputProtocolFactory(args.tProtocolFactory).outputProtocolFactory(args.tProtocolFactory).processor(args.processor);
  ExecutorService executorService=new AbstractCassandraDaemon.CleaningThreadPool(args.cassandraServer.clientState,serverArgs.minWorkerThreads,serverArgs.maxWorkerThreads);
  return new CustomTThreadPoolServer(serverArgs,executorService);
}
