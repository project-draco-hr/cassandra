{
  final InetSocketAddress addr=args.addr;
  TServerTransport serverTransport;
  try {
    final ClientEncryptionOptions clientEnc=DatabaseDescriptor.getClientEncryptionOptions();
    if (clientEnc.enabled) {
      logger.info("enabling encrypted thrift connections between client and server");
      TSSLTransportParameters params=new TSSLTransportParameters(clientEnc.protocol,clientEnc.cipher_suites);
      params.setKeyStore(clientEnc.keystore,clientEnc.keystore_password);
      params.requireClientAuth(clientEnc.require_client_auth);
      TServerSocket sslServer=TSSLTransportFactory.getServerSocket(addr.getPort(),0,addr.getAddress(),params);
      serverTransport=new TCustomServerSocket(sslServer.getServerSocket(),args.keepAlive,args.sendBufferSize,args.recvBufferSize);
    }
 else {
      serverTransport=new TCustomServerSocket(addr,args.keepAlive,args.sendBufferSize,args.recvBufferSize);
    }
  }
 catch (  TTransportException e) {
    throw new RuntimeException(String.format("Unable to create thrift socket to %s:%s",addr.getAddress(),addr.getPort()),e);
  }
  TThreadPoolServer.Args serverArgs=new TThreadPoolServer.Args(serverTransport).minWorkerThreads(DatabaseDescriptor.getRpcMinThreads()).maxWorkerThreads(DatabaseDescriptor.getRpcMaxThreads()).inputTransportFactory(args.inTransportFactory).outputTransportFactory(args.outTransportFactory).inputProtocolFactory(args.tProtocolFactory).outputProtocolFactory(args.tProtocolFactory).processor(args.processor);
  ExecutorService executorService=new ThreadPoolExecutor(serverArgs.minWorkerThreads,serverArgs.maxWorkerThreads,60,TimeUnit.SECONDS,new SynchronousQueue<Runnable>(),new NamedThreadFactory("Thrift"));
  return new CustomTThreadPoolServer(serverArgs,executorService);
}
