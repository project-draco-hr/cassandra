{
  TProcessor processor=null;
  TTransport inputTransport=null;
  TTransport outputTransport=null;
  TProtocol inputProtocol=null;
  TProtocol outputProtocol=null;
  SocketAddress socket=null;
  try {
    socket=((TCustomSocket)client_).getSocket().getRemoteSocketAddress();
    ThriftSessionManager.instance.setCurrentSocket(socket);
    processor=processorFactory_.getProcessor(client_);
    inputTransport=inputTransportFactory_.getTransport(client_);
    outputTransport=outputTransportFactory_.getTransport(client_);
    inputProtocol=inputProtocolFactory_.getProtocol(inputTransport);
    outputProtocol=outputProtocolFactory_.getProtocol(outputTransport);
    while (!stopped && processor.process(inputProtocol,outputProtocol)) {
      inputProtocol=inputProtocolFactory_.getProtocol(inputTransport);
      outputProtocol=outputProtocolFactory_.getProtocol(outputTransport);
    }
  }
 catch (  TTransportException ttx) {
    logger.debug("Thrift transport error occurred during processing of message.",ttx);
  }
catch (  TException tx) {
    logger.error("Thrift error occurred during processing of message.",tx);
  }
catch (  Exception x) {
    logger.error("Error occurred during processing of message.",x);
  }
 finally {
    activeClients.decrementAndGet();
    if (socket != null)     ThriftSessionManager.instance.connectionComplete(socket);
  }
  if (inputTransport != null) {
    inputTransport.close();
  }
  if (outputTransport != null) {
    outputTransport.close();
  }
}
