{
  struct.validate();
  oprot.writeStructBegin(STRUCT_DESC);
  if (struct.key != null) {
    if (struct.isSetKey()) {
      oprot.writeFieldBegin(KEY_FIELD_DESC);
      oprot.writeBinary(struct.key);
      oprot.writeFieldEnd();
    }
  }
  if (struct.column_parent != null) {
    if (struct.isSetColumn_parent()) {
      oprot.writeFieldBegin(COLUMN_PARENT_FIELD_DESC);
      struct.column_parent.write(oprot);
      oprot.writeFieldEnd();
    }
  }
  if (struct.column_slices != null) {
    if (struct.isSetColumn_slices()) {
      oprot.writeFieldBegin(COLUMN_SLICES_FIELD_DESC);
{
        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT,struct.column_slices.size()));
        for (        ColumnSlice _iter219 : struct.column_slices) {
          _iter219.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
  }
  if (struct.isSetReversed()) {
    oprot.writeFieldBegin(REVERSED_FIELD_DESC);
    oprot.writeBool(struct.reversed);
    oprot.writeFieldEnd();
  }
  if (struct.isSetCount()) {
    oprot.writeFieldBegin(COUNT_FIELD_DESC);
    oprot.writeI32(struct.count);
    oprot.writeFieldEnd();
  }
  if (struct.consistency_level != null) {
    if (struct.isSetConsistency_level()) {
      oprot.writeFieldBegin(CONSISTENCY_LEVEL_FIELD_DESC);
      oprot.writeI32(struct.consistency_level.getValue());
      oprot.writeFieldEnd();
    }
  }
  oprot.writeFieldStop();
  oprot.writeStructEnd();
}
