{
  if (!bf.isPresent(partitioner.convertToDiskFormat(decoratedKey)))   return -1;
  if (keyCache != null) {
    Long cachedPosition=keyCache.get(decoratedKey);
    if (cachedPosition != null) {
      return cachedPosition;
    }
  }
  long start=getIndexScanPosition(decoratedKey,partitioner);
  if (start < 0) {
    return -1;
  }
  BufferedRandomAccessFile input=new BufferedRandomAccessFile(indexFilename(path),"r");
  input.seek(start);
  int i=0;
  try {
    do {
      DecoratedKey indexDecoratedKey;
      try {
        indexDecoratedKey=partitioner.convertFromDiskFormat(input.readUTF());
      }
 catch (      EOFException e) {
        return -1;
      }
      long position=input.readLong();
      int v=indexDecoratedKey.compareTo(decoratedKey);
      if (v == 0) {
        if (keyCache != null)         keyCache.put(decoratedKey,position);
        return position;
      }
      if (v > 0)       return -1;
    }
 while (++i < INDEX_INTERVAL);
  }
  finally {
    input.close();
  }
  return -1;
}
