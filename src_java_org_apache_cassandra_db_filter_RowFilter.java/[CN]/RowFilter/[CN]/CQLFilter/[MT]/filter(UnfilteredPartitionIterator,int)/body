{
  if (expressions.isEmpty())   return iter;
  return new WrappingUnfilteredPartitionIterator(iter){
    @Override public UnfilteredRowIterator computeNext(    final UnfilteredRowIterator iter){
      return new FilteringRowIterator(iter){
        private final TombstoneFilteringRow filter=new TombstoneFilteringRow(nowInSec);
        protected boolean includeRow(        Row row){
          return CQLFilter.this.isSatisfiedBy(iter.partitionKey(),filter.setTo(row));
        }
      }
;
    }
  }
;
}
