{
  IPartitioner<?> p=StorageService.getPartitioner();
  if (onToken) {
    Token startToken=getTokenBound(Bound.START,options,p);
    Token endToken=getTokenBound(Bound.END,options,p);
    boolean includeStart=includeKeyBound(Bound.START);
    boolean includeEnd=includeKeyBound(Bound.END);
    int cmp=startToken.compareTo(endToken);
    if (!startToken.isMinimum() && !endToken.isMinimum() && (cmp > 0 || (cmp == 0 && (!includeStart || !includeEnd))))     return null;
    RowPosition start=includeStart ? startToken.minKeyBound() : startToken.maxKeyBound();
    RowPosition end=includeEnd ? endToken.maxKeyBound() : endToken.minKeyBound();
    return new Range<RowPosition>(start,end);
  }
 else {
    ByteBuffer startKeyBytes=getKeyBound(Bound.START,options);
    ByteBuffer finishKeyBytes=getKeyBound(Bound.END,options);
    RowPosition startKey=RowPosition.ForKey.get(startKeyBytes,p);
    RowPosition finishKey=RowPosition.ForKey.get(finishKeyBytes,p);
    if (startKey.compareTo(finishKey) > 0 && !finishKey.isMinimum(p))     return null;
    if (includeKeyBound(Bound.START)) {
      return includeKeyBound(Bound.END) ? new Bounds<RowPosition>(startKey,finishKey) : new IncludingExcludingBounds<RowPosition>(startKey,finishKey);
    }
 else {
      return includeKeyBound(Bound.END) ? new Range<RowPosition>(startKey,finishKey) : new ExcludingBounds<RowPosition>(startKey,finishKey);
    }
  }
}
