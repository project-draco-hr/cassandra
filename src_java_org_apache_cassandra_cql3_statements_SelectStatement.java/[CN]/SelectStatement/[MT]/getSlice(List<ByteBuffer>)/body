{
  QueryPath queryPath=new QueryPath(columnFamily());
  Collection<ByteBuffer> keys=getKeys(variables);
  List<ReadCommand> commands=new ArrayList<ReadCommand>(keys.size());
  if (isColumnRange()) {
    ByteBuffer start=getRequestedBound(isReversed ? Bound.END : Bound.START,variables);
    ByteBuffer finish=getRequestedBound(isReversed ? Bound.START : Bound.END,variables);
    SliceQueryFilter filter=new SliceQueryFilter(start,finish,isReversed,getLimit());
    QueryProcessor.validateSliceFilter(cfDef.cfm,filter);
    for (    ByteBuffer key : keys) {
      QueryProcessor.validateKey(key);
      commands.add(new SliceFromReadCommand(keyspace(),key,queryPath,filter));
    }
  }
 else {
    Collection<ByteBuffer> columnNames=getRequestedColumns(variables);
    QueryProcessor.validateColumnNames(columnNames);
    for (    ByteBuffer key : keys) {
      QueryProcessor.validateKey(key);
      commands.add(new SliceByNamesReadCommand(keyspace(),key,queryPath,columnNames));
    }
  }
  try {
    return StorageProxy.read(commands,parameters.consistencyLevel);
  }
 catch (  TimeoutException e) {
    throw new TimedOutException();
  }
catch (  IOException e) {
    throw new RuntimeException(e);
  }
}
