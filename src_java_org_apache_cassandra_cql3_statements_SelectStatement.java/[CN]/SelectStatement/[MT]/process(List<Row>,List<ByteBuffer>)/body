{
  Selection.ResultSetBuilder result=selection.resultSetBuilder();
  for (  org.apache.cassandra.db.Row row : rows) {
    if (row.cf == null)     continue;
    ByteBuffer[] keyComponents=null;
    if (cfDef.hasCompositeKey) {
      keyComponents=((CompositeType)cfDef.cfm.getKeyValidator()).split(row.key.key);
    }
 else {
      keyComponents=new ByteBuffer[]{row.key.key};
    }
    if (cfDef.isCompact) {
      for (      Column c : columnsInOrder(row.cf,variables)) {
        if (c.isMarkedForDelete())         continue;
        ByteBuffer[] components=null;
        if (cfDef.isComposite) {
          components=((CompositeType)cfDef.cfm.comparator).split(c.name());
        }
 else         if (sliceRestriction != null) {
          if (!sliceRestriction.isInclusive(Bound.START) && c.name().equals(sliceRestriction.bound(Bound.START).bindAndGet(variables)))           continue;
          if (!sliceRestriction.isInclusive(Bound.END) && c.name().equals(sliceRestriction.bound(Bound.END).bindAndGet(variables)))           continue;
        }
        result.newRow();
        for (        CFDefinition.Name name : selection.getColumnsList()) {
switch (name.kind) {
case KEY_ALIAS:
            result.add(keyComponents[name.position]);
          break;
case COLUMN_ALIAS:
        ByteBuffer val=cfDef.isComposite ? (name.position < components.length ? components[name.position] : null) : c.name();
      result.add(val);
    break;
case VALUE_ALIAS:
  result.add(c);
break;
case COLUMN_METADATA:
throw new AssertionError();
default :
throw new AssertionError();
}
}
}
}
 else if (cfDef.isComposite) {
CompositeType composite=(CompositeType)cfDef.cfm.comparator;
ColumnGroupMap.Builder builder=new ColumnGroupMap.Builder(composite,cfDef.hasCollections);
for (Column c : row.cf) {
if (c.isMarkedForDelete()) continue;
builder.add(c);
}
for (ColumnGroupMap group : builder.groups()) handleGroup(selection,result,row.key.key,keyComponents,group);
}
 else {
if (row.cf.hasOnlyTombstones()) continue;
result.newRow();
for (CFDefinition.Name name : selection.getColumnsList()) {
if (name.kind == CFDefinition.Name.Kind.KEY_ALIAS) result.add(keyComponents[name.position]);
 else result.add(row.cf.getColumn(name.name.key));
}
}
}
ResultSet cqlRows=result.build();
orderResults(cqlRows);
if (isReversed) cqlRows.reverse();
cqlRows.trim(parameters.limit);
return cqlRows;
}
