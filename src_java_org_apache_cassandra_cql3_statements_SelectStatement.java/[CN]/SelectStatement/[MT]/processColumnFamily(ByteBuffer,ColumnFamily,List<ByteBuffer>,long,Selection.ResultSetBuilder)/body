{
  ByteBuffer[] keyComponents=cfDef.hasCompositeKey ? ((CompositeType)cfDef.cfm.getKeyValidator()).split(key) : new ByteBuffer[]{key};
  if (parameters.isDistinct) {
    if (!cf.hasOnlyTombstones(now)) {
      result.newRow();
      for (      CFDefinition.Name name : selection.getColumnsList())       result.add(keyComponents[name.position]);
    }
  }
 else   if (cfDef.isCompact) {
    for (    Column c : cf) {
      if (c.isMarkedForDelete(now))       continue;
      ByteBuffer[] components=null;
      if (cfDef.isComposite) {
        components=((CompositeType)cfDef.cfm.comparator).split(c.name());
      }
 else       if (sliceRestriction != null) {
        if (!sliceRestriction.isInclusive(Bound.START) && c.name().equals(sliceRestriction.bound(Bound.START,variables)))         continue;
        if (!sliceRestriction.isInclusive(Bound.END) && c.name().equals(sliceRestriction.bound(Bound.END,variables)))         continue;
      }
      result.newRow();
      for (      CFDefinition.Name name : selection.getColumnsList()) {
switch (name.kind) {
case KEY_ALIAS:
          result.add(keyComponents[name.position]);
        break;
case COLUMN_ALIAS:
      ByteBuffer val=cfDef.isComposite ? (name.position < components.length ? components[name.position] : null) : c.name();
    result.add(val);
  break;
case VALUE_ALIAS:
result.add(c);
break;
case COLUMN_METADATA:
case STATIC:
throw new AssertionError();
default :
throw new AssertionError();
}
}
}
}
 else if (cfDef.isComposite) {
CompositeType composite=(CompositeType)cfDef.cfm.comparator;
ColumnGroupMap.Builder builder=new ColumnGroupMap.Builder(composite,cfDef.hasCollections,now);
for (Column c : cf) {
if (c.isMarkedForDelete(now)) continue;
builder.add(c);
}
Map<CFDefinition.Name,ByteBuffer> staticValues=Collections.emptyMap();
if (!builder.isEmpty() && builder.firstGroup().isStatic) {
staticValues=new HashMap<>();
ColumnGroupMap group=builder.firstGroup();
for (CFDefinition.Name name : Iterables.filter(selection.getColumnsList(),isStaticFilter)) staticValues.put(name,name.type.isCollection() ? getCollectionValue(name,group) : getSimpleValue(name,group));
builder.discardFirst();
if (!staticValues.isEmpty() && builder.isEmpty() && !usesSecondaryIndexing&& hasNoClusteringColumnsRestriction()) {
result.newRow();
for (CFDefinition.Name name : selection.getColumnsList()) {
if (name.kind == CFDefinition.Name.Kind.KEY_ALIAS) result.add(keyComponents[name.position]);
 else result.add(name.kind == CFDefinition.Name.Kind.STATIC ? staticValues.get(name) : null);
}
return;
}
}
for (ColumnGroupMap group : builder.groups()) handleGroup(selection,result,keyComponents,group,staticValues);
}
 else {
if (cf.hasOnlyTombstones(now)) return;
result.newRow();
for (CFDefinition.Name name : selection.getColumnsList()) {
if (name.kind == CFDefinition.Name.Kind.KEY_ALIAS) result.add(keyComponents[name.position]);
 else result.add(cf.getColumn(name.name.key));
}
}
}
