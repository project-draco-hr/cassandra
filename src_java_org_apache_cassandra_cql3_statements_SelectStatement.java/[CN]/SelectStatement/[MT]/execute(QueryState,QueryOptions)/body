{
  ConsistencyLevel cl=options.getConsistency();
  List<ByteBuffer> variables=options.getValues();
  if (cl == null)   throw new InvalidRequestException("Invalid empty consistency level");
  cl.validateForRead(keyspace());
  int limit=getLimit(variables);
  int limitForQuery=updateLimitForQuery(limit);
  long now=System.currentTimeMillis();
  Pageable command;
  if (isKeyRange || usesSecondaryIndexing) {
    command=getRangeCommand(variables,limitForQuery,now);
  }
 else {
    List<ReadCommand> commands=getSliceCommands(variables,limitForQuery,now);
    command=commands == null ? null : new Pageable.ReadCommands(commands);
  }
  int pageSize=options.getPageSize();
  if (parameters.isCount && pageSize <= 0 && MessagingService.instance().allNodesAtLeast20)   pageSize=DEFAULT_COUNT_PAGE_SIZE;
  if (pageSize <= 0 || command == null || !QueryPagers.mayNeedPaging(command,pageSize)) {
    return execute(command,cl,variables,limit,now);
  }
 else {
    QueryPager pager=QueryPagers.pager(command,cl,options.getPagingState());
    if (parameters.isCount)     return pageCountQuery(pager,variables,pageSize,now,limit);
    if (needsPostQueryOrdering())     throw new InvalidRequestException("Cannot page queries with both ORDER BY and a IN restriction on the partition key; you must either remove the " + "ORDER BY or the IN and sort client side, or disable paging for this query");
    List<Row> page=pager.fetchPage(pageSize);
    ResultMessage.Rows msg=processResults(page,variables,limit,now);
    if (!pager.isExhausted())     msg.result.metadata.setHasMorePages(pager.state());
    return msg;
  }
}
