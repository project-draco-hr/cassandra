{
  List<Row> rows;
  if (isKeyRange()) {
    rows=multiRangeSlice(variables);
  }
 else {
    rows=getSlice(variables);
  }
  CqlResult result=new CqlResult();
  result.type=CqlResultType.ROWS;
  if (parameters.isCount) {
    result.schema=new CqlMetadata(Collections.<ByteBuffer,String>emptyMap(),Collections.<ByteBuffer,String>emptyMap(),"AsciiType","LongType");
    List<Column> columns=Collections.singletonList(new Column(countColumn).setValue(ByteBufferUtil.bytes((long)rows.size())));
    result.rows=Collections.singletonList(new CqlRow(countColumn,columns));
    return result;
  }
 else {
    result.schema=new CqlMetadata(new HashMap<ByteBuffer,String>(),new HashMap<ByteBuffer,String>(),TypeParser.getShortName(cfDef.cfm.comparator),TypeParser.getShortName(cfDef.cfm.getDefaultValidator()));
    result.rows=process(rows,result.schema);
    return result;
  }
}
