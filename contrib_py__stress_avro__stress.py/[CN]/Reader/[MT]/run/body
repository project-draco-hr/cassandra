def run(self):
    p = {'slice_range': {'start': '', 'finish': '', 'reversed': False, 'count': columns_per_key, }, }
    if ('super' == options.cftype):
        for i in xrange(keys_per_thread):
            key = key_generator()
            for j in xrange(supers_per_key):
                parent = {'column_family': 'Super1', 'super_column': ('S' + str(j)), }
                start = time.time()
                try:
                    r = self.cclient.request('get_slice', {'key': key, 'column_parent': parent, 'predicate': p, 'consistency_level': consistency, })
                    if (not r):
                        raise RuntimeError(('Key %s not found' % key))
                except KeyboardInterrupt:
                    raise
                except Exception as e:
                    if options.ignore:
                        print e
                    else:
                        raise
                self.latencies[self.idx] += (time.time() - start)
                self.opcounts[self.idx] += 1
                self.keycounts[self.idx] += 1
    else:
        parent = {'column_family': 'Standard1', }
        for i in xrange(keys_per_thread):
            key = key_generator()
            start = time.time()
            try:
                r = self.cclient.request('get_slice', {'key': key, 'column_parent': parent, 'predicate': p, 'consistency_level': consistency, })
                if (not r):
                    raise RuntimeError(('Key %s not found' % key))
            except KeyboardInterrupt:
                raise
            except Exception as e:
                if options.ignore:
                    print e
                else:
                    raise
            self.latencies[self.idx] += (time.time() - start)
            self.opcounts[self.idx] += 1
            self.keycounts[self.idx] += 1
