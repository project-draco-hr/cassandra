{
  int columnCount=0;
  int nextComplexWithDeletion=findNextComplexWithDeletion(0);
  ColumnDefinition previousColumn=null;
  for (  Cell cell : cells) {
    if (previousColumn != null && previousColumn.compareTo(cell.column()) == 0)     continue;
    ++columnCount;
    previousColumn=cell.column();
    if (!previousColumn.isComplex())     continue;
    while (nextComplexWithDeletion >= 0) {
      int cmp=previousColumn.compareTo(columns.getComplex(nextComplexWithDeletion));
      if (cmp < 0) {
        break;
      }
 else       if (cmp > 0) {
        ++columnCount;
        nextComplexWithDeletion=findNextComplexWithDeletion(nextComplexWithDeletion + 1);
      }
 else {
        nextComplexWithDeletion=findNextComplexWithDeletion(nextComplexWithDeletion + 1);
        break;
      }
    }
  }
  while (nextComplexWithDeletion >= 0) {
    ++columnCount;
    nextComplexWithDeletion=findNextComplexWithDeletion(nextComplexWithDeletion + 1);
  }
  return columnCount;
}
