{
  long blockStart=startPos;
  while (true) {
    file.position(blockStart);
    byte info=file.get();
    boolean isLeaf=(info & 1) == 1;
    if (isLeaf) {
      file.position(blockStart);
      break;
    }
    short tokenCount=file.getShort();
    long minToken=file.getLong();
    long maxToken=file.getLong();
    long seekBase=blockStart + BLOCK_HEADER_BYTES;
    if (minToken > token) {
      file.position(seekBase + tokenCount * TOKEN_BYTES);
    }
 else     if (maxToken < token) {
      file.position(seekBase + (2 * tokenCount) * TOKEN_BYTES);
    }
 else {
      file.position(seekBase);
      short offsetIndex=searchBlock(token,tokenCount,file);
      if (offsetIndex == tokenCount)       file.position(file.position() + (offsetIndex * TOKEN_BYTES));
 else       file.position(file.position() + ((tokenCount - offsetIndex - 1) + offsetIndex) * TOKEN_BYTES);
    }
    blockStart=(startPos + (int)file.getLong());
  }
}
