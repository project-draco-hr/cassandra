{
  final String myVersion=DatabaseDescriptor.getDefsVersion().toString();
  final Map<InetAddress,UUID> versions=new ConcurrentHashMap<InetAddress,UUID>();
  final Set<InetAddress> liveHosts=Gossiper.instance.getLiveMembers();
  final Message msg=new Message(FBUtilities.getLocalAddress(),StorageService.Verb.SCHEMA_CHECK,ArrayUtils.EMPTY_BYTE_ARRAY);
  final CountDownLatch latch=new CountDownLatch(liveHosts.size());
  MessagingService.instance().sendRR(msg,liveHosts,new IAsyncCallback(){
    public void response(    Message msg){
      logger.debug("Received schema check response from " + msg.getFrom().getHostAddress());
      UUID theirVersion=UUID.fromString(new String(msg.getMessageBody()));
      versions.put(msg.getFrom(),theirVersion);
      latch.countDown();
    }
  }
);
  try {
    latch.await(DatabaseDescriptor.getRpcTimeout(),TimeUnit.MILLISECONDS);
  }
 catch (  InterruptedException ex) {
    throw new AssertionError("This latch shouldn't have been interrupted.");
  }
  logger.debug("My version is " + myVersion);
  Map<String,List<String>> results=new HashMap<String,List<String>>();
  Iterable<InetAddress> allHosts=Iterables.concat(Gossiper.instance.getLiveMembers(),Gossiper.instance.getUnreachableMembers());
  for (  InetAddress host : allHosts) {
    UUID version=versions.get(host);
    String stringVersion=version == null ? UNREACHABLE : version.toString();
    List<String> hosts=results.get(stringVersion);
    if (hosts == null) {
      hosts=new ArrayList<String>();
      results.put(stringVersion,hosts);
    }
    hosts.add(host.getHostAddress());
  }
  if (results.get(UNREACHABLE) != null)   logger.debug("Hosts not in agreement. Didn't get a response from everybody: " + StringUtils.join(results.get(UNREACHABLE),","));
  for (  Map.Entry<String,List<String>> entry : results.entrySet()) {
    if (entry.getKey().equals(UNREACHABLE) || entry.getKey().equals(myVersion))     continue;
    for (    String host : entry.getValue())     logger.debug("%s disagrees (%s)",host,entry.getKey());
  }
  if (results.size() == 1)   logger.debug("Schemas are in agreement.");
  return results;
}
