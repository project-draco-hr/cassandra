{
  Map<String,Multimap<Message,InetAddress>> dcMessages=new HashMap<String,Multimap<Message,InetAddress>>(hintedEndpoints.size());
  MessageProducer producer=new CachingMessageProducer(rm);
  for (  Map.Entry<InetAddress,Collection<InetAddress>> entry : hintedEndpoints.asMap().entrySet()) {
    InetAddress destination=entry.getKey();
    Collection<InetAddress> targets=entry.getValue();
    String dc=DatabaseDescriptor.getEndpointSnitch().getDatacenter(destination);
    if (targets.size() == 1 && targets.iterator().next().equals(destination)) {
      if (destination.equals(FBUtilities.getLocalAddress())) {
        insertLocal(rm,responseHandler);
      }
 else {
        if (logger.isDebugEnabled())         logger.debug("insert writing key " + ByteBufferUtil.bytesToHex(rm.key()) + " to "+ destination);
        Multimap<Message,InetAddress> messages=dcMessages.get(dc);
        if (messages == null) {
          messages=HashMultimap.create();
          dcMessages.put(dc,messages);
        }
        messages.put(producer.getMessage(Gossiper.instance.getVersion(destination)),destination);
      }
    }
 else {
      Message hintedMessage=rm.getMessage(Gossiper.instance.getVersion(destination));
      for (      InetAddress target : targets) {
        if (!target.equals(destination)) {
          hintedMessage=addHintHeader(hintedMessage,target);
          if (logger.isDebugEnabled())           logger.debug("insert writing key " + ByteBufferUtil.bytesToHex(rm.key()) + " to "+ destination+ " for "+ target);
        }
      }
      if (targets.contains(destination) || consistency_level == ConsistencyLevel.ANY)       MessagingService.instance().sendRR(hintedMessage,destination,responseHandler);
 else       MessagingService.instance().sendOneWay(hintedMessage,destination);
    }
  }
  sendMessages(localDataCenter,dcMessages,responseHandler);
}
