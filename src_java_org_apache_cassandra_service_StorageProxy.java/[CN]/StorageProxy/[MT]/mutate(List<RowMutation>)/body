{
  long startTime=System.nanoTime();
  try {
    StorageService ss=StorageService.instance;
    for (    final RowMutation rm : mutations) {
      try {
        String table=rm.getTable();
        AbstractReplicationStrategy rs=ss.getReplicationStrategy(table);
        List<InetAddress> naturalEndpoints=ss.getNaturalEndpoints(table,rm.key());
        Multimap<InetAddress,InetAddress> hintedEndpoints=rs.getHintedEndpoints(naturalEndpoints);
        Message unhintedMessage=null;
        for (        Map.Entry<InetAddress,Collection<InetAddress>> entry : hintedEndpoints.asMap().entrySet()) {
          InetAddress destination=entry.getKey();
          Collection<InetAddress> targets=entry.getValue();
          if (targets.size() == 1 && targets.iterator().next().equals(destination)) {
            if (destination.equals(FBUtilities.getLocalAddress())) {
              if (logger.isDebugEnabled())               logger.debug("insert writing local " + rm.toString(true));
              Runnable runnable=new WrappedRunnable(){
                public void runMayThrow() throws IOException {
                  rm.apply();
                }
              }
;
              StageManager.getStage(StageManager.MUTATION_STAGE).execute(runnable);
            }
 else {
              if (unhintedMessage == null)               unhintedMessage=rm.makeRowMutationMessage();
              if (logger.isDebugEnabled())               logger.debug("insert writing key " + FBUtilities.bytesToHex(rm.key()) + " to "+ unhintedMessage.getMessageId()+ "@"+ destination);
              MessagingService.instance.sendOneWay(unhintedMessage,destination);
            }
          }
 else {
            Message hintedMessage=rm.makeRowMutationMessage();
            for (            InetAddress target : targets) {
              if (!target.equals(destination)) {
                addHintHeader(hintedMessage,target);
                if (logger.isDebugEnabled())                 logger.debug("insert writing key " + FBUtilities.bytesToHex(rm.key()) + " to "+ hintedMessage.getMessageId()+ "@"+ destination+ " for "+ target);
              }
            }
            MessagingService.instance.sendOneWay(hintedMessage,destination);
          }
        }
      }
 catch (      IOException e) {
        throw new RuntimeException("error inserting key " + FBUtilities.bytesToHex(rm.key()),e);
      }
    }
  }
  finally {
    writeStats.addNano(System.nanoTime() - startTime);
  }
}
