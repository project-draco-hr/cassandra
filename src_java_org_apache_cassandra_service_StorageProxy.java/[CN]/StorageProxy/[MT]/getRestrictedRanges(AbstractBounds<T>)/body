{
  if (queryRange instanceof Bounds && queryRange.left.equals(queryRange.right) && !queryRange.left.isMinimum(StorageService.getPartitioner())) {
    if (logger.isDebugEnabled())     logger.debug("restricted single token match for query {}",queryRange);
    return Collections.singletonList(queryRange);
  }
  TokenMetadata tokenMetadata=StorageService.instance.getTokenMetadata();
  List<AbstractBounds<T>> ranges=new ArrayList<AbstractBounds<T>>();
  Iterator<Token> ringIter=TokenMetadata.ringIterator(tokenMetadata.sortedTokens(),queryRange.left.getToken(),true);
  AbstractBounds<T> remainder=queryRange;
  while (ringIter.hasNext()) {
    Token token=ringIter.next();
    T splitValue=(T)token.asSplitValue(queryRange.left.getClass());
    if (remainder == null || !(remainder.left.equals(splitValue) || remainder.contains(splitValue)))     break;
    Pair<AbstractBounds<T>,AbstractBounds<T>> splits=remainder.split(splitValue);
    if (splits.left != null)     ranges.add(splits.left);
    remainder=splits.right;
  }
  if (remainder != null)   ranges.add(remainder);
  if (logger.isDebugEnabled())   logger.debug("restricted ranges for query {} are {}",queryRange,ranges);
  return ranges;
}
