{
  Tracing.trace("Determining replicas for mutation");
  final String localDataCenter=DatabaseDescriptor.getEndpointSnitch().getDatacenter(FBUtilities.getBroadcastAddress());
  long startTime=System.nanoTime();
  List<AbstractWriteResponseHandler<IMutation>> responseHandlers=new ArrayList<>(mutations.size());
  try {
    for (    IMutation mutation : mutations) {
      if (mutation instanceof CounterMutation) {
        responseHandlers.add(mutateCounter((CounterMutation)mutation,localDataCenter,queryStartNanoTime));
      }
 else {
        WriteType wt=mutations.size() <= 1 ? WriteType.SIMPLE : WriteType.UNLOGGED_BATCH;
        responseHandlers.add(performWrite(mutation,consistency_level,localDataCenter,standardWritePerformer,null,wt,queryStartNanoTime));
      }
    }
    for (    AbstractWriteResponseHandler<IMutation> responseHandler : responseHandlers) {
      responseHandler.get();
    }
  }
 catch (  WriteTimeoutException|WriteFailureException ex) {
    if (consistency_level == ConsistencyLevel.ANY) {
      hintMutations(mutations);
    }
 else {
      if (ex instanceof WriteFailureException) {
        writeMetrics.failures.mark();
        writeMetricsMap.get(consistency_level).failures.mark();
        WriteFailureException fe=(WriteFailureException)ex;
        Tracing.trace("Write failure; received {} of {} required replies, failed {} requests",fe.received,fe.blockFor,fe.failureReasonByEndpoint.size());
      }
 else {
        writeMetrics.timeouts.mark();
        writeMetricsMap.get(consistency_level).timeouts.mark();
        WriteTimeoutException te=(WriteTimeoutException)ex;
        Tracing.trace("Write timeout; received {} of {} required replies",te.received,te.blockFor);
      }
      throw ex;
    }
  }
catch (  UnavailableException e) {
    writeMetrics.unavailables.mark();
    writeMetricsMap.get(consistency_level).unavailables.mark();
    Tracing.trace("Unavailable");
    throw e;
  }
catch (  OverloadedException e) {
    writeMetrics.unavailables.mark();
    writeMetricsMap.get(consistency_level).unavailables.mark();
    Tracing.trace("Overloaded");
    throw e;
  }
 finally {
    long latency=System.nanoTime() - startTime;
    writeMetrics.addNano(latency);
    writeMetricsMap.get(consistency_level).addNano(latency);
  }
}
