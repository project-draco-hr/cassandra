{
  Set<Map.Entry<InetAddress,Collection<InetAddress>>> endpointSet=endpoints.asMap().entrySet();
  Multimap<String,Pair<Message,InetAddress>> dcMap=HashMultimap.create(endpointSet.size(),10);
  Message unhintedMessage=null;
  for (  Map.Entry<InetAddress,Collection<InetAddress>> entry : endpointSet) {
    InetAddress destination=entry.getKey();
    Collection<InetAddress> targets=entry.getValue();
    String dataCenter=getDataCenter(destination);
    if (targets.size() == 1 && targets.iterator().next().equals(destination)) {
      if (destination.equals(FBUtilities.getLocalAddress())) {
        insertLocalMessage(rm,responseHandler);
      }
 else {
        if (unhintedMessage == null) {
          unhintedMessage=rm.makeRowMutationMessage();
          MessagingService.instance.addCallback(responseHandler,unhintedMessage.getMessageId());
        }
        if (logger.isDebugEnabled())         logger.debug("insert writing key " + FBUtilities.bytesToHex(rm.key()) + " to "+ unhintedMessage.getMessageId()+ "@"+ destination);
        dcMap.put(dataCenter,new Pair<Message,InetAddress>(unhintedMessage,destination));
      }
    }
 else {
      Message hintedMessage=rm.makeRowMutationMessage();
      for (      InetAddress target : targets) {
        if (!target.equals(destination)) {
          addHintHeader(hintedMessage,target);
          if (logger.isDebugEnabled())           logger.debug("insert writing key " + FBUtilities.bytesToHex(rm.key()) + " to "+ hintedMessage.getMessageId()+ "@"+ destination+ " for "+ target);
        }
      }
      responseHandler.addHintCallback(hintedMessage,destination);
      dcMap.put(dataCenter,new Pair<Message,InetAddress>(hintedMessage,destination));
    }
  }
  return dcMap;
}
