{
  for (  Map.Entry<String,Multimap<MessageOut,InetAddress>> entry : dcMessages.entrySet()) {
    String dataCenter=entry.getKey();
    for (    Map.Entry<MessageOut,Collection<InetAddress>> messages : entry.getValue().asMap().entrySet()) {
      MessageOut message=messages.getKey();
      message=message.withHeaderRemoved(RowMutation.FORWARD_TO);
      Iterator<InetAddress> iter=messages.getValue().iterator();
      InetAddress target=iter.next();
      if (dataCenter.equals(localDataCenter) || MessagingService.instance().getVersion(target) < MessagingService.VERSION_11) {
        MessagingService.instance().sendRR(message,target,handler);
        while (iter.hasNext()) {
          target=iter.next();
          MessagingService.instance().sendRR(message,target,handler);
        }
        continue;
      }
      FastByteArrayOutputStream bos=new FastByteArrayOutputStream();
      DataOutputStream dos=new DataOutputStream(bos);
      dos.writeInt(messages.getValue().size() - 1);
      while (iter.hasNext()) {
        InetAddress destination=iter.next();
        CompactEndpointSerializationHelper.serialize(destination,dos);
        String id=MessagingService.instance().addCallback(handler,message,destination);
        dos.writeUTF(id);
        if (logger.isDebugEnabled())         logger.debug("Adding FWD message to: " + destination + " with ID "+ id);
      }
      message=message.withParameter(RowMutation.FORWARD_TO,bos.toByteArray());
      String id=MessagingService.instance().sendRR(message,target,handler);
      if (logger.isDebugEnabled())       logger.debug("Sending message to: " + target + " with ID "+ id);
    }
  }
}
