{
  long startTime=System.currentTimeMillis();
  TokenMetadata tokenMetadata=StorageService.instance().getTokenMetadata();
  Set<String> uniqueKeys=new HashSet<String>(command.maxResults);
  InetAddress endPoint=StorageService.instance().findSuitableEndPoint(command.startWith);
  InetAddress startEndpoint=endPoint;
  do {
    Message message=command.getMessage();
    if (logger.isDebugEnabled())     logger.debug("reading " + command + " from "+ message.getMessageId()+ "@"+ endPoint);
    IAsyncResult iar=MessagingService.instance().sendRR(message,endPoint);
    byte[] responseBody;
    try {
      responseBody=iar.get(DatabaseDescriptor.getRpcTimeout(),TimeUnit.MILLISECONDS);
    }
 catch (    TimeoutException e) {
      throw new TimedOutException();
    }
    RangeReply rangeReply=RangeReply.read(responseBody);
    uniqueKeys.addAll(rangeReply.keys);
    if (uniqueKeys.size() >= command.maxResults || rangeReply.rangeCompletedLocally) {
      break;
    }
    do {
      endPoint=tokenMetadata.getSuccessor(endPoint);
    }
 while (!FailureDetector.instance().isAlive(endPoint));
  }
 while (!endPoint.equals(startEndpoint));
  rangeStats.add(System.currentTimeMillis() - startTime);
  List<String> allKeys=new ArrayList<String>(uniqueKeys);
  Collections.sort(allKeys,keyComparator);
  return (allKeys.size() > command.maxResults) ? allKeys.subList(0,command.maxResults) : allKeys;
}
