{
  Tracing.trace("Determining replicas for atomic batch");
  long startTime=System.nanoTime();
  List<WriteResponseHandlerWrapper> wrappers=new ArrayList<WriteResponseHandlerWrapper>(mutations.size());
  String localDataCenter=DatabaseDescriptor.getEndpointSnitch().getDatacenter(FBUtilities.getBroadcastAddress());
  try {
    for (    Mutation mutation : mutations) {
      WriteResponseHandlerWrapper wrapper=wrapResponseHandler(mutation,consistency_level,WriteType.BATCH);
      wrapper.handler.assureSufficientLiveNodes();
      wrappers.add(wrapper);
    }
    Collection<InetAddress> batchlogEndpoints=getBatchlogEndpoints(localDataCenter,consistency_level);
    UUID batchUUID=UUIDGen.getTimeUUID();
    syncWriteToBatchlog(mutations,batchlogEndpoints,batchUUID);
    syncWriteBatchedMutations(wrappers,localDataCenter);
    asyncRemoveFromBatchlog(batchlogEndpoints,batchUUID);
  }
 catch (  UnavailableException e) {
    writeMetrics.unavailables.mark();
    Tracing.trace("Unavailable");
    throw e;
  }
catch (  WriteTimeoutException e) {
    writeMetrics.timeouts.mark();
    Tracing.trace("Write timeout; received {} of {} required replies",e.received,e.blockFor);
    throw e;
  }
catch (  WriteFailureException e) {
    writeMetrics.failures.mark();
    Tracing.trace("Write failure; received {} of {} required replies",e.received,e.blockFor);
    throw e;
  }
 finally {
    writeMetrics.addNano(System.nanoTime() - startTime);
  }
}
