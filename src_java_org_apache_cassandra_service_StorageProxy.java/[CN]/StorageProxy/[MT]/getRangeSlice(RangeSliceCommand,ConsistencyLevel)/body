{
  if (logger.isDebugEnabled())   logger.debug(command.toString());
  long startTime=System.nanoTime();
  List<Row> rows;
  try {
    rows=new ArrayList<Row>(command.max_keys);
    List<AbstractBounds> ranges=getRestrictedRanges(command.range);
    for (    AbstractBounds range : ranges) {
      List<InetAddress> liveEndpoints=StorageService.instance.getLiveNaturalEndpoints(command.keyspace,range.right);
      if (consistency_level == ConsistencyLevel.ONE && liveEndpoints.contains(FBUtilities.getLocalAddress())) {
        if (logger.isDebugEnabled())         logger.debug("local range slice");
        ColumnFamilyStore cfs=Table.open(command.keyspace).getColumnFamilyStore(command.column_family);
        try {
          rows.addAll(cfs.getRangeSlice(command.super_column,range,command.max_keys,QueryFilter.getFilter(command.predicate,cfs.getComparator())));
        }
 catch (        ExecutionException e) {
          throw new RuntimeException(e.getCause());
        }
catch (        InterruptedException e) {
          throw new AssertionError(e);
        }
      }
 else {
        DatabaseDescriptor.getEndpointSnitch().sortByProximity(FBUtilities.getLocalAddress(),liveEndpoints);
        RangeSliceCommand c2=new RangeSliceCommand(command.keyspace,command.column_family,command.super_column,command.predicate,range,command.max_keys);
        RangeSliceResponseResolver resolver=new RangeSliceResponseResolver(command.keyspace,liveEndpoints);
        ReadCallback<List<Row>> handler=getReadCallback(resolver,command,consistency_level,liveEndpoints);
        handler.assureSufficientLiveNodes();
        for (        InetAddress endpoint : liveEndpoints) {
          MessagingService.instance().sendRR(c2,endpoint,handler);
          if (logger.isDebugEnabled())           logger.debug("reading " + c2 + " from "+ endpoint);
        }
        try {
          if (logger.isDebugEnabled()) {
            for (            Row row : handler.get()) {
              logger.debug("range slices read " + row.key);
            }
          }
          rows.addAll(handler.get());
        }
 catch (        DigestMismatchException e) {
          throw new AssertionError(e);
        }
      }
      if (rows.size() >= command.max_keys)       break;
    }
  }
  finally {
    rangeStats.addNano(System.nanoTime() - startTime);
  }
  return rows.size() > command.max_keys ? rows.subList(0,command.max_keys) : rows;
}
