{
  Tracing.trace("Determining replicas to query");
  logger.trace("Command/ConsistencyLevel is {}/{}",command.toString(),consistency_level);
  long startTime=System.nanoTime();
  List<Row> rows;
  try {
    final SlicePredicate emptyPredicate=getEmptySlicePredicate();
    SlicePredicate commandPredicate=command.predicate;
    int columnsCount=0;
    rows=new ArrayList<Row>();
    List<AbstractBounds<RowPosition>> ranges=getRestrictedRanges(command.range);
    for (    AbstractBounds<RowPosition> range : ranges) {
      RangeSliceCommand nodeCmd=new RangeSliceCommand(command.keyspace,command.column_family,command.super_column,commandPredicate,range,command.row_filter,command.maxResults,command.maxIsColumns,command.isPaging);
      List<InetAddress> liveEndpoints=StorageService.instance.getLiveNaturalEndpoints(nodeCmd.keyspace,range.right);
      DatabaseDescriptor.getEndpointSnitch().sortByProximity(FBUtilities.getBroadcastAddress(),liveEndpoints);
      RangeSliceResponseResolver resolver=new RangeSliceResponseResolver(nodeCmd.keyspace);
      ReadCallback<RangeSliceReply,Iterable<Row>> handler=getReadCallback(resolver,nodeCmd,consistency_level,liveEndpoints);
      handler.assureSufficientLiveNodes();
      resolver.setSources(handler.endpoints);
      if (handler.endpoints.size() == 1 && handler.endpoints.get(0).equals(FBUtilities.getBroadcastAddress()) && OPTIMIZE_LOCAL_REQUESTS) {
        logger.trace("reading data locally");
        StageManager.getStage(Stage.READ).execute(new LocalRangeSliceRunnable(nodeCmd,handler));
      }
 else {
        MessageOut<RangeSliceCommand> message=nodeCmd.createMessage();
        for (        InetAddress endpoint : handler.endpoints) {
          MessagingService.instance().sendRR(message,endpoint,handler);
          logger.trace("reading {} from {}",nodeCmd,endpoint);
        }
      }
      try {
        for (        Row row : handler.get()) {
          rows.add(row);
          columnsCount+=row.getLiveColumnCount();
          logger.trace("range slices read {}",row.key);
        }
        FBUtilities.waitOnFutures(resolver.repairResults,DatabaseDescriptor.getWriteRpcTimeout());
      }
 catch (      TimeoutException ex) {
        logger.debug("Range slice timeout: {}",ex.toString());
        int blockFor=consistency_level.blockFor(command.keyspace);
        throw new ReadTimeoutException(consistency_level,blockFor,blockFor,true);
      }
catch (      DigestMismatchException e) {
        throw new AssertionError(e);
      }
      int count=nodeCmd.maxIsColumns ? columnsCount : rows.size();
      if (count >= nodeCmd.maxResults)       break;
      if (!rows.isEmpty() && command.isPaging)       commandPredicate=emptyPredicate;
    }
  }
  finally {
    rangeMetrics.addNano(System.nanoTime() - startTime);
  }
  return trim(command,rows);
}
