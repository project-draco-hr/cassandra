{
  if (logger.isDebugEnabled())   logger.debug("Command/ConsistencyLevel is {}/{}",command.toString(),consistency_level);
  long startTime=System.nanoTime();
  List<Row> rows;
  try {
    rows=new ArrayList<Row>(command.max_keys);
    List<AbstractBounds<RowPosition>> ranges=getRestrictedRanges(command.range);
    for (    AbstractBounds<RowPosition> range : ranges) {
      List<InetAddress> liveEndpoints=StorageService.instance.getLiveNaturalEndpoints(command.keyspace,range.right);
      DatabaseDescriptor.getEndpointSnitch().sortByProximity(FBUtilities.getBroadcastAddress(),liveEndpoints);
      if (consistency_level == ConsistencyLevel.ONE && !liveEndpoints.isEmpty() && liveEndpoints.get(0).equals(FBUtilities.getBroadcastAddress())) {
        if (logger.isDebugEnabled())         logger.debug("local range slice");
        ColumnFamilyStore cfs=Table.open(command.keyspace).getColumnFamilyStore(command.column_family);
        rows.addAll(cfs.getRangeSlice(command.super_column,range,command.max_keys,QueryFilter.getFilter(command.predicate,cfs.getComparator())));
      }
 else {
        RangeSliceCommand c2=new RangeSliceCommand(command.keyspace,command.column_family,command.super_column,command.predicate,range,command.max_keys);
        RangeSliceResponseResolver resolver=new RangeSliceResponseResolver(command.keyspace,liveEndpoints);
        ReadCallback<Iterable<Row>> handler=getReadCallback(resolver,command,consistency_level,liveEndpoints);
        handler.assureSufficientLiveNodes();
        for (        InetAddress endpoint : handler.endpoints) {
          MessagingService.instance().sendRR(c2,endpoint,handler);
          if (logger.isDebugEnabled())           logger.debug("reading " + c2 + " from "+ endpoint);
        }
        try {
          for (          Row row : handler.get()) {
            rows.add(row);
            logger.debug("range slices read {}",row.key);
          }
          FBUtilities.waitOnFutures(resolver.repairResults,DatabaseDescriptor.getRpcTimeout());
        }
 catch (        TimeoutException ex) {
          if (logger.isDebugEnabled())           logger.debug("Range slice timeout: {}",ex.toString());
          throw ex;
        }
catch (        DigestMismatchException e) {
          throw new AssertionError(e);
        }
      }
      if (rows.size() >= command.max_keys)       break;
    }
  }
  finally {
    rangeStats.addNano(System.nanoTime() - startTime);
  }
  return rows.size() > command.max_keys ? rows.subList(0,command.max_keys) : rows;
}
