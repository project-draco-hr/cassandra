{
  Tracing.trace("Determining replicas to query");
  long startTime=System.nanoTime();
  Keyspace keyspace=Keyspace.open(command.keyspace);
  List<Row> rows;
  try {
    int liveRowCount=0;
    boolean countLiveRows=command.countCQL3Rows() || command.ignoredTombstonedPartitions();
    rows=new ArrayList<>();
    List<? extends AbstractBounds<RowPosition>> ranges;
    if (keyspace.getReplicationStrategy() instanceof LocalStrategy)     ranges=command.keyRange.unwrap();
 else     ranges=getRestrictedRanges(command.keyRange);
    int i=0;
    AbstractBounds<RowPosition> nextRange=null;
    List<InetAddress> nextEndpoints=null;
    List<InetAddress> nextFilteredEndpoints=null;
    while (i < ranges.size()) {
      AbstractBounds<RowPosition> range=nextRange == null ? ranges.get(i) : nextRange;
      List<InetAddress> liveEndpoints=nextEndpoints == null ? getLiveSortedEndpoints(keyspace,range.right) : nextEndpoints;
      List<InetAddress> filteredEndpoints=nextFilteredEndpoints == null ? consistency_level.filterForQuery(keyspace,liveEndpoints) : nextFilteredEndpoints;
      ++i;
      while (i < ranges.size()) {
        nextRange=ranges.get(i);
        nextEndpoints=getLiveSortedEndpoints(keyspace,nextRange.right);
        nextFilteredEndpoints=consistency_level.filterForQuery(keyspace,nextEndpoints);
        if (range.right.isMinimum())         break;
        List<InetAddress> merged=intersection(liveEndpoints,nextEndpoints);
        if (!consistency_level.isSufficientLiveNodes(keyspace,merged))         break;
        List<InetAddress> filteredMerged=consistency_level.filterForQuery(keyspace,merged);
        if (!DatabaseDescriptor.getEndpointSnitch().isWorthMergingForRangeQuery(filteredMerged,filteredEndpoints,nextFilteredEndpoints))         break;
        range=range.withNewRight(nextRange.right);
        liveEndpoints=merged;
        filteredEndpoints=filteredMerged;
        ++i;
      }
      AbstractRangeCommand nodeCmd=command.forSubRange(range);
      RangeSliceResponseResolver resolver=new RangeSliceResponseResolver(nodeCmd.keyspace,command.timestamp);
      List<InetAddress> minimalEndpoints=filteredEndpoints.subList(0,Math.min(filteredEndpoints.size(),consistency_level.blockFor(keyspace)));
      ReadCallback<RangeSliceReply,Iterable<Row>> handler=new ReadCallback<>(resolver,consistency_level,nodeCmd,minimalEndpoints);
      handler.assureSufficientLiveNodes();
      resolver.setSources(filteredEndpoints);
      if (filteredEndpoints.size() == 1 && filteredEndpoints.get(0).equals(FBUtilities.getBroadcastAddress()) && OPTIMIZE_LOCAL_REQUESTS) {
        StageManager.getStage(Stage.READ).execute(new LocalRangeSliceRunnable(nodeCmd,handler));
      }
 else {
        MessageOut<? extends AbstractRangeCommand> message=nodeCmd.createMessage();
        for (        InetAddress endpoint : filteredEndpoints) {
          Tracing.trace("Enqueuing request to {}",endpoint);
          MessagingService.instance().sendRR(message,endpoint,handler);
        }
      }
      try {
        for (        Row row : handler.get()) {
          rows.add(row);
          if (countLiveRows)           liveRowCount+=row.getLiveCount(command.predicate,command.timestamp);
        }
        FBUtilities.waitOnFutures(resolver.repairResults,DatabaseDescriptor.getWriteRpcTimeout());
      }
 catch (      ReadTimeoutException ex) {
        int blockFor=consistency_level.blockFor(keyspace);
        int responseCount=resolver.responses.size();
        String gotData=responseCount > 0 ? resolver.isDataPresent() ? " (including data)" : " (only digests)" : "";
        if (Tracing.isTracing()) {
          Tracing.trace("Timed out; received {} of {} responses{} for range {} of {}",new Object[]{responseCount,blockFor,gotData,i,ranges.size()});
        }
 else         if (logger.isDebugEnabled()) {
          logger.debug("Range slice timeout; received {} of {} responses{} for range {} of {}",responseCount,blockFor,gotData,i,ranges.size());
        }
        throw ex;
      }
catch (      TimeoutException ex) {
        int blockFor=consistency_level.blockFor(keyspace);
        if (Tracing.isTracing())         Tracing.trace("Timed out while read-repairing after receiving all {} data and digest responses",blockFor);
 else         logger.debug("Range slice timeout while read-repairing after receiving all {} data and digest responses",blockFor);
        throw new ReadTimeoutException(consistency_level,blockFor - 1,blockFor,true);
      }
catch (      DigestMismatchException e) {
        throw new AssertionError(e);
      }
      int count=countLiveRows ? liveRowCount : rows.size();
      if (count >= nodeCmd.limit())       break;
    }
  }
  finally {
    long latency=System.nanoTime() - startTime;
    rangeMetrics.addNano(latency);
    Keyspace.open(command.keyspace).getColumnFamilyStore(command.columnFamily).metric.coordinatorScanLatency.update(latency,TimeUnit.NANOSECONDS);
  }
  return trim(command,rows);
}
