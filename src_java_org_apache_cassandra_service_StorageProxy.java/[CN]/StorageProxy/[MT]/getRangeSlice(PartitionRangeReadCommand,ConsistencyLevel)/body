{
  Tracing.trace("Computing ranges to query");
  long startTime=System.nanoTime();
  List<FilteredPartition> partitions=new ArrayList<>();
  Keyspace keyspace=Keyspace.open(command.metadata().ksName);
  RangeIterator ranges=new RangeIterator(command,keyspace,consistencyLevel);
  float resultsPerRange=estimateResultsPerRange(command,keyspace);
  resultsPerRange-=resultsPerRange * CONCURRENT_SUBREQUESTS_MARGIN;
  int concurrencyFactor=resultsPerRange == 0.0 ? 1 : Math.max(1,Math.min(ranges.rangeCount(),(int)Math.ceil(command.limits().count() / resultsPerRange)));
  logger.debug("Estimated result rows per range: {}; requested rows: {}, ranges.size(): {}; concurrent range requests: {}",resultsPerRange,command.limits().count(),ranges.rangeCount(),concurrencyFactor);
  Tracing.trace("Submitting range requests on {} ranges with a concurrency of {} ({} rows per range expected)",ranges.rangeCount(),concurrencyFactor,resultsPerRange);
  return command.postReconciliationProcessing(command.limits().filter(new RangeCommandIterator(ranges,command,concurrencyFactor,keyspace,consistencyLevel),command.nowInSec()));
}
