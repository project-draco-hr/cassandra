{
  Token tk=StorageService.getPartitioner().getToken(key);
  List<InetAddress> naturalEndpoints=StorageService.instance.getNaturalEndpoints(keyspaceName,tk);
  Collection<InetAddress> pendingEndpoints=StorageService.instance.getTokenMetadata().pendingEndpointsFor(tk,keyspaceName);
  if (consistencyForPaxos == ConsistencyLevel.LOCAL_SERIAL) {
    String localDc=DatabaseDescriptor.getEndpointSnitch().getDatacenter(FBUtilities.getBroadcastAddress());
    Predicate<InetAddress> isLocalDc=sameDCPredicateFor(localDc);
    naturalEndpoints=ImmutableList.copyOf(Iterables.filter(naturalEndpoints,isLocalDc));
    pendingEndpoints=ImmutableList.copyOf(Iterables.filter(pendingEndpoints,isLocalDc));
  }
  int requiredParticipants=pendingEndpoints.size() + 1 + naturalEndpoints.size() / 2;
  List<InetAddress> liveEndpoints=ImmutableList.copyOf(Iterables.filter(Iterables.concat(naturalEndpoints,pendingEndpoints),IAsyncCallback.isAlive));
  if (liveEndpoints.size() < requiredParticipants)   throw new UnavailableException(consistencyForPaxos,requiredParticipants,liveEndpoints.size());
  return Pair.create(liveEndpoints,requiredParticipants);
}
