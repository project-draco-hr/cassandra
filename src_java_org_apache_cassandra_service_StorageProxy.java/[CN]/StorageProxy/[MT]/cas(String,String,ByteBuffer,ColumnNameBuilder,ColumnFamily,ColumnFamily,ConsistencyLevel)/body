{
  consistencyLevel.validateForCas(keyspaceName);
  CFMetaData metadata=Schema.instance.getCFMetaData(keyspaceName,cfName);
  long start=System.nanoTime();
  long timeout=TimeUnit.MILLISECONDS.toNanos(DatabaseDescriptor.getCasContentionTimeout());
  while (System.nanoTime() - start < timeout) {
    Pair<List<InetAddress>,Integer> p=getPaxosParticipants(keyspaceName,key);
    List<InetAddress> liveEndpoints=p.left;
    int requiredParticipants=p.right;
    UUID ballot=beginAndRepairPaxos(key,metadata,liveEndpoints,requiredParticipants);
    if (ballot == null)     continue;
    Tracing.trace("Reading existing values for CAS precondition");
    long timestamp=System.currentTimeMillis();
    ReadCommand readCommand;
    if (expected == null) {
      SliceQueryFilter filter=prefix == null ? new SliceQueryFilter(ByteBufferUtil.EMPTY_BYTE_BUFFER,ByteBufferUtil.EMPTY_BYTE_BUFFER,false,1) : new SliceQueryFilter(prefix.build(),prefix.buildAsEndOfRange(),false,1,prefix.componentCount());
      readCommand=new SliceFromReadCommand(keyspaceName,key,cfName,timestamp,filter);
    }
 else {
      readCommand=new SliceByNamesReadCommand(keyspaceName,key,cfName,timestamp,new NamesQueryFilter(ImmutableSortedSet.copyOf(expected.getColumnNames())));
    }
    List<Row> rows=read(Arrays.asList(readCommand),ConsistencyLevel.QUORUM);
    ColumnFamily current=rows.get(0).cf;
    if (!casApplies(expected,current)) {
      Tracing.trace("CAS precondition {} does not match current values {}",expected,current);
      return current;
    }
    Commit proposal=Commit.newProposal(key,ballot,updates);
    Tracing.trace("CAS precondition is met; proposing client-requested updates for {}",ballot);
    if (proposePaxos(proposal,liveEndpoints,requiredParticipants)) {
      if (consistencyLevel == ConsistencyLevel.SERIAL)       sendCommit(proposal,liveEndpoints);
 else       commitPaxos(proposal,consistencyLevel);
      Tracing.trace("CAS successful");
      return null;
    }
    Tracing.trace("Paxos proposal not accepted (pre-empted by a higher ballot)");
    Uninterruptibles.sleepUninterruptibly(FBUtilities.threadLocalRandom().nextInt(100),TimeUnit.MILLISECONDS);
  }
  throw new WriteTimeoutException(WriteType.CAS,ConsistencyLevel.SERIAL,-1,-1);
}
