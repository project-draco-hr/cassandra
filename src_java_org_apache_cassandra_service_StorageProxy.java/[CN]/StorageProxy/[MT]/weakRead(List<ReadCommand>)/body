{
  List<Row> rows=new ArrayList<Row>();
  List<Future<Object>> localFutures=null;
  List<Pair<IAsyncResult,ReadCommand>> remoteResults=null;
  for (  ReadCommand command : commands) {
    InetAddress endPoint=StorageService.instance.findSuitableEndpoint(command.table,command.key);
    if (endPoint.equals(FBUtilities.getLocalAddress())) {
      if (logger.isDebugEnabled())       logger.debug("weakread reading " + command + " locally");
      if (localFutures == null)       localFutures=new ArrayList<Future<Object>>();
      Callable<Object> callable=new weakReadLocalCallable(command);
      localFutures.add(StageManager.getStage(StageManager.READ_STAGE).submit(callable));
    }
 else {
      if (remoteResults == null)       remoteResults=new ArrayList<Pair<IAsyncResult,ReadCommand>>();
      Message message=command.makeReadMessage();
      if (logger.isDebugEnabled())       logger.debug("weakread reading " + command + " from "+ message.getMessageId()+ "@"+ endPoint);
      if (randomlyReadRepair(command))       message.setHeader(ReadCommand.DO_REPAIR,ReadCommand.DO_REPAIR.getBytes());
      remoteResults.add(new Pair<IAsyncResult,ReadCommand>(MessagingService.instance.sendRR(message,endPoint),command));
    }
  }
  if (localFutures != null) {
    for (    Future<Object> future : localFutures) {
      Row row;
      try {
        row=(Row)future.get();
      }
 catch (      Exception e) {
        throw new RuntimeException(e);
      }
      rows.add(row);
    }
  }
  if (remoteResults != null) {
    for (    Pair<IAsyncResult,ReadCommand> iar : remoteResults) {
      byte[] body;
      body=iar.left.get(DatabaseDescriptor.getRpcTimeout(),TimeUnit.MILLISECONDS);
      ByteArrayInputStream bufIn=new ByteArrayInputStream(body);
      ReadResponse response=ReadResponse.serializer().deserialize(new DataInputStream(bufIn));
      Row row=response.row();
      if (sessionWrites.get() != null)       row=iar.right.mergeRowWithMemtables(Table.open(iar.right.table),row,sessionWrites.get());
      if (row != null)       rows.add(row);
    }
  }
  return rows;
}
