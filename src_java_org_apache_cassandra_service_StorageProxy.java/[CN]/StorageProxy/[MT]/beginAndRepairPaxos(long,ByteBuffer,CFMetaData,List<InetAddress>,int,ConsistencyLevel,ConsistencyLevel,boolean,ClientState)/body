{
  long timeout=TimeUnit.MILLISECONDS.toNanos(DatabaseDescriptor.getCasContentionTimeout());
  PrepareCallback summary=null;
  int contentions=0;
  while (System.nanoTime() - start < timeout) {
    long currentTime=(state.getTimestamp() / 1000) + 1;
    long ballotMillis=summary == null ? currentTime : Math.max(currentTime,1 + UUIDGen.unixTimestamp(summary.mostRecentInProgressCommit.ballot));
    UUID ballot=UUIDGen.getTimeUUID(ballotMillis);
    Tracing.trace("Preparing {}",ballot);
    Commit toPrepare=Commit.newPrepare(key,metadata,ballot);
    summary=preparePaxos(toPrepare,liveEndpoints,requiredParticipants,consistencyForPaxos);
    if (!summary.promised) {
      Tracing.trace("Some replicas have already promised a higher ballot than ours; aborting");
      contentions++;
      Uninterruptibles.sleepUninterruptibly(ThreadLocalRandom.current().nextInt(100),TimeUnit.MILLISECONDS);
      continue;
    }
    Commit inProgress=summary.mostRecentInProgressCommitWithUpdate;
    Commit mostRecent=summary.mostRecentCommit;
    if (!inProgress.update.isEmpty() && inProgress.isAfter(mostRecent)) {
      Tracing.trace("Finishing incomplete paxos round {}",inProgress);
      if (isWrite)       casWriteMetrics.unfinishedCommit.inc();
 else       casReadMetrics.unfinishedCommit.inc();
      Commit refreshedInProgress=Commit.newProposal(inProgress.key,ballot,inProgress.update);
      if (proposePaxos(refreshedInProgress,liveEndpoints,requiredParticipants,false,consistencyForPaxos)) {
        commitPaxos(refreshedInProgress,consistencyForCommit);
      }
 else {
        Tracing.trace("Some replicas have already promised a higher ballot than ours; aborting");
        contentions++;
        Uninterruptibles.sleepUninterruptibly(ThreadLocalRandom.current().nextInt(100),TimeUnit.MILLISECONDS);
      }
      continue;
    }
    Iterable<InetAddress> missingMRC=summary.replicasMissingMostRecentCommit();
    if (Iterables.size(missingMRC) > 0) {
      Tracing.trace("Repairing replicas that missed the most recent commit");
      sendCommit(mostRecent,missingMRC);
      continue;
    }
    state.updateLastTimestamp(ballotMillis * 1000);
    return Pair.create(ballot,contentions);
  }
  throw new WriteTimeoutException(WriteType.CAS,consistencyForPaxos,0,consistencyForPaxos.blockFor(Keyspace.open(metadata.ksName)));
}
