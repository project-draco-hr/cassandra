{
  long startTime=System.currentTimeMillis();
  Message message=null;
  try {
    message=rm.makeRowMutationMessage();
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
  try {
    Map<EndPoint,EndPoint> endpointMap=StorageService.instance().getHintedStorageEndpointMap(rm.key());
    int blockFor=determineBlockFor(consistency_level);
    List<EndPoint> primaryNodes=getUnhintedNodes(endpointMap);
    if (primaryNodes.size() < blockFor) {
      throw new UnavailableException();
    }
    QuorumResponseHandler<Boolean> quorumResponseHandler=new QuorumResponseHandler<Boolean>(blockFor,new WriteResponseResolver());
    if (logger.isDebugEnabled())     logger.debug("insertBlocking writing key " + rm.key() + " to "+ message.getMessageId()+ "@["+ StringUtils.join(endpointMap.keySet(),", ")+ "]");
    MessagingService.getMessagingInstance().sendRR(message,primaryNodes.toArray(new EndPoint[primaryNodes.size()]),quorumResponseHandler);
    if (!quorumResponseHandler.get())     throw new UnavailableException();
    if (primaryNodes.size() < endpointMap.size()) {
      for (      Map.Entry<EndPoint,EndPoint> e : endpointMap.entrySet()) {
        if (e.getKey() != e.getValue()) {
          MessagingService.getMessagingInstance().sendOneWay(message,e.getKey());
        }
      }
    }
  }
 catch (  Exception e) {
    logger.error("error writing key " + rm.key(),e);
    throw new UnavailableException();
  }
 finally {
    writeStats.add(System.currentTimeMillis() - startTime);
  }
}
