{
  boolean shouldBlock=consistencyLevel != ConsistencyLevel.ANY;
  Keyspace keyspace=Keyspace.open(proposal.update.metadata().ksName);
  Token tk=proposal.update.partitionKey().getToken();
  List<InetAddress> naturalEndpoints=StorageService.instance.getNaturalEndpoints(keyspace.getName(),tk);
  Collection<InetAddress> pendingEndpoints=StorageService.instance.getTokenMetadata().pendingEndpointsFor(tk,keyspace.getName());
  AbstractWriteResponseHandler<Commit> responseHandler=null;
  if (shouldBlock) {
    AbstractReplicationStrategy rs=keyspace.getReplicationStrategy();
    responseHandler=rs.getWriteResponseHandler(naturalEndpoints,pendingEndpoints,consistencyLevel,null,WriteType.SIMPLE,queryStartNanoTime);
  }
  MessageOut<Commit> message=new MessageOut<Commit>(MessagingService.Verb.PAXOS_COMMIT,proposal,Commit.serializer);
  for (  InetAddress destination : Iterables.concat(naturalEndpoints,pendingEndpoints)) {
    checkHintOverload(destination);
    if (FailureDetector.instance.isAlive(destination)) {
      if (shouldBlock) {
        if (canDoLocalRequest(destination))         commitPaxosLocal(message,responseHandler);
 else         MessagingService.instance().sendRR(message,destination,responseHandler,shouldHint);
      }
 else {
        MessagingService.instance().sendOneWay(message,destination);
      }
    }
 else     if (shouldHint) {
      submitHint(proposal.makeMutation(),destination,null);
    }
  }
  if (shouldBlock)   responseHandler.get();
}
