{
  ColumnSpecification receiver=columnDef;
  checkFalse(!columnDef.isPrimaryKeyColumn() && isDense,"Predicates on the non-primary-key column (%s) of a COMPACT table are not yet supported",columnDef.name);
  if (isIN()) {
    checkFalse(!columnDef.isPrimaryKeyColumn() && !canHaveOnlyOneValue(),"IN predicates on non-primary-key columns (%s) is not yet supported",columnDef.name);
  }
 else   if (isSlice()) {
    checkFalse(columnDef.isPartitionKey(),"Only EQ and IN relation are supported on the partition key (unless you use the token() function)");
  }
  checkFalse(isContainsKey() && !(receiver.type instanceof MapType),"Cannot use CONTAINS KEY on non-map column %s",receiver.name);
  checkFalse(isContains() && !(receiver.type.isCollection()),"Cannot use CONTAINS on non-collection column %s",receiver.name);
  if (mapKey != null) {
    checkFalse(receiver.type instanceof ListType,"Indexes on list entries (%s[index] = value) are not currently supported.",receiver.name);
    checkTrue(receiver.type instanceof MapType,"Column %s cannot be used as a map",receiver.name);
    checkTrue(receiver.type.isMultiCell(),"Map-entry equality predicates on frozen map column %s are not supported",receiver.name);
    checkTrue(isEQ(),"Only EQ relations are supported on map entries");
  }
  if (receiver.type.isCollection()) {
    checkFalse(receiver.type.isMultiCell() && !isLegalRelationForNonFrozenCollection(),"Collection column '%s' (%s) cannot be restricted by a '%s' relation",receiver.name,receiver.type.asCQL3Type(),operator());
    if (isContainsKey() || isContains()) {
      receiver=makeCollectionReceiver(receiver,isContainsKey());
    }
 else     if (receiver.type.isMultiCell() && mapKey != null && isEQ()) {
      List<ColumnSpecification> receivers=new ArrayList<>(2);
      receivers.add(makeCollectionReceiver(receiver,true));
      receivers.add(makeCollectionReceiver(receiver,false));
      return receivers;
    }
  }
  return Collections.singletonList(receiver);
}
