{
  createTable("CREATE TABLE IF NOT EXISTS %s (a int PRIMARY KEY, b text)");
  execute("INSERT INTO %s (a, b) VALUES (0, 'a')");
  assertRows(execute("SELECT * FROM %s WHERE token(a) >= token(?)",0),row(0,"a"));
  assertRows(execute("SELECT * FROM %s WHERE token(a) >= token(?) and token(a) < token(?)",0,1),row(0,"a"));
  assertInvalid("SELECT * FROM %s WHERE token(a) > token(?)","a");
  assertInvalidMessage("The token() function must contains only partition key components","SELECT * FROM %s WHERE token(a, b) >= token(?, ?)","b",0);
  assertInvalidMessage("More than one restriction was found for the start bound on a","SELECT * FROM %s WHERE token(a) >= token(?) and token(a) >= token(?)",0,1);
  assertInvalidMessage("Columns \"a\" cannot be restricted by both an equality and an inequality relation","SELECT * FROM %s WHERE token(a) >= token(?) and token(a) = token(?)",0,1);
  assertInvalidSyntax("SELECT * FROM %s WHERE token(a) = token(?) and token(a) IN (token(?))",0,1);
  assertInvalidMessage("More than one restriction was found for the start bound on a","SELECT * FROM %s WHERE token(a) > token(?) AND token(a) > token(?)",1,2);
  assertInvalidMessage("More than one restriction was found for the end bound on a","SELECT * FROM %s WHERE token(a) <= token(?) AND token(a) < token(?)",1,2);
  assertInvalidMessage("Columns \"a\" cannot be restricted by both an equality and an inequality relation","SELECT * FROM %s WHERE token(a) > token(?) AND token(a) = token(?)",1,2);
  assertInvalidMessage("a cannot be restricted by more than one relation if it includes an Equal","SELECT * FROM %s WHERE  token(a) = token(?) AND token(a) > token(?)",1,2);
}
