{
  LegacyRangeTombstoneList deletions=new LegacyRangeTombstoneList(new LegacyBoundComparator(metadata.comparator),10);
  if (!row.deletion().isLive()) {
    Clustering clustering=row.clustering();
    Slice.Bound startBound=Slice.Bound.inclusiveStartOf(clustering);
    Slice.Bound endBound=Slice.Bound.inclusiveEndOf(clustering);
    LegacyBound start=new LegacyLayout.LegacyBound(startBound,false,null);
    LegacyBound end=new LegacyLayout.LegacyBound(endBound,false,null);
    deletions.add(start,end,row.deletion().time().markedForDeleteAt(),row.deletion().time().localDeletionTime());
  }
  for (  ColumnData cd : row) {
    ColumnDefinition col=cd.column();
    if (col.isSimple())     continue;
    DeletionTime delTime=((ComplexColumnData)cd).complexDeletion();
    if (!delTime.isLive()) {
      Clustering clustering=row.clustering();
      Slice.Bound startBound=Slice.Bound.inclusiveStartOf(clustering);
      Slice.Bound endBound=Slice.Bound.inclusiveEndOf(clustering);
      LegacyLayout.LegacyBound start=new LegacyLayout.LegacyBound(startBound,col.isStatic(),col);
      LegacyLayout.LegacyBound end=new LegacyLayout.LegacyBound(endBound,col.isStatic(),col);
      deletions.add(start,end,delTime.markedForDeleteAt(),delTime.localDeletionTime());
    }
  }
  Iterator<LegacyCell> cells=new AbstractIterator<LegacyCell>(){
    private final Iterator<Cell> cells=row.cellsInLegacyOrder(metadata,false).iterator();
    private boolean hasReturnedRowMarker=metadata.isCompactTable();
    protected LegacyCell computeNext(){
      if (!hasReturnedRowMarker) {
        hasReturnedRowMarker=true;
        if (!row.primaryKeyLivenessInfo().isEmpty()) {
          LegacyCellName cellName=new LegacyCellName(row.clustering(),null,null);
          LivenessInfo info=row.primaryKeyLivenessInfo();
          return new LegacyCell(info.isExpiring() ? LegacyCell.Kind.EXPIRING : LegacyCell.Kind.REGULAR,cellName,ByteBufferUtil.EMPTY_BYTE_BUFFER,info.timestamp(),info.localExpirationTime(),info.ttl());
        }
      }
      if (!cells.hasNext())       return endOfData();
      return makeLegacyCell(row.clustering(),cells.next());
    }
  }
;
  return Pair.create(deletions,cells);
}
