{
  return new AbstractIterator<LegacyCell>(){
    private final Iterator<Cell> cells=row.cells().iterator();
    private boolean hasReturnedRowMarker=metadata.isCompactTable();
    protected LegacyCell computeNext(){
      if (!hasReturnedRowMarker) {
        hasReturnedRowMarker=true;
        LegacyCellName cellName=new LegacyCellName(row.clustering(),null,null);
        LivenessInfo info=row.primaryKeyLivenessInfo();
        return new LegacyCell(LegacyCell.Kind.REGULAR,cellName,ByteBufferUtil.EMPTY_BYTE_BUFFER,info.timestamp(),info.localExpirationTime(),info.ttl());
      }
      if (!cells.hasNext())       return endOfData();
      Cell cell=cells.next();
      return makeLegacyCell(row.clustering(),cell);
    }
  }
;
}
