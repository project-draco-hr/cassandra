{
  if (!(StorageService.getPartitioner() instanceof OrderPreservingPartitioner)) {
    throw new CassandraException("range queries may only be performed against an order-preserving partitioner");
  }
  logger_.debug("get_range");
  Message message;
  DataOutputBuffer dob=new DataOutputBuffer();
  try {
    dob.writeUTF(startkey);
  }
 catch (  IOException e) {
    logger_.error("unable to write startkey",e);
    throw new RuntimeException(e);
  }
  byte[] messageBody=Arrays.copyOf(dob.getData(),dob.getLength());
  message=new Message(StorageService.getLocalStorageEndPoint(),StorageService.readStage_,StorageService.rangeVerbHandler_,messageBody);
  EndPoint endPoint;
  try {
    endPoint=StorageService.instance().findSuitableEndPoint(startkey);
  }
 catch (  Exception e) {
    throw new CassandraException("Unable to find endpoint for " + startkey);
  }
  IAsyncResult iar=MessagingService.getMessagingInstance().sendRR(message,endPoint);
  byte[] responseBody;
  try {
    responseBody=(byte[])iar.get(2 * DatabaseDescriptor.getRpcTimeout(),TimeUnit.MILLISECONDS)[0];
  }
 catch (  TimeoutException e) {
    throw new RuntimeException(e);
  }
  DataInputBuffer bufIn=new DataInputBuffer();
  bufIn.reset(responseBody,responseBody.length);
  List<String> keys=new ArrayList<String>();
  while (bufIn.getPosition() < responseBody.length) {
    try {
      keys.add(bufIn.readUTF());
    }
 catch (    IOException e) {
      logger_.error("bad utf",e);
      throw new RuntimeException(e);
    }
  }
  return keys;
}
