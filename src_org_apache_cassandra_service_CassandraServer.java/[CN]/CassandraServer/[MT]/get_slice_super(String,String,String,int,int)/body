{
  ArrayList<superColumn_t> retlist=new ArrayList<superColumn_t>();
  try {
    validateTable(tablename);
    String[] values=RowMutation.getColumnAndColumnFamily(columnFamily_superColumnName);
    if (values.length < 1) {
      throw new CassandraException("Column Family " + columnFamily_superColumnName + " is invalid.");
    }
    Row row=StorageProxy.readProtocol(tablename,key,columnFamily_superColumnName,start,count,StorageService.ConsistencyLevel.WEAK);
    if (row == null) {
      logger_.info("ERROR No row for this key .....: " + key);
      throw new CassandraException("ERROR No row for this key .....: " + key);
    }
    Map<String,ColumnFamily> cfMap=row.getColumnFamilyMap();
    if (cfMap == null || cfMap.size() == 0) {
      logger_.info("ERROR ColumnFamily map is missing.....: " + "   key:" + key);
      throw new CassandraException("Either the key " + key + " is not present or the columns requested are not present.");
    }
    ColumnFamily cfamily=cfMap.get(values[0]);
    if (cfamily == null) {
      logger_.info("ERROR ColumnFamily  is missing.....: " + "   key:" + key + "  ColumnFamily:"+ values[0]);
      throw new CassandraException("Either the key " + key + " is not present or the columns requested"+ columnFamily_superColumnName+ "are not present.");
    }
    Collection<IColumn> columns=cfamily.getAllColumns();
    if (columns == null || columns.size() == 0) {
      logger_.info("ERROR Columns are missing.....: " + "   key:" + key + "  ColumnFamily:"+ values[0]);
      throw new CassandraException("ERROR Columns are missing.....: " + "   key:" + key + "  ColumnFamily:"+ values[0]);
    }
    for (    IColumn column : columns) {
      superColumn_t thrift_superColumn=new superColumn_t();
      thrift_superColumn.name=column.name();
      Collection<IColumn> subColumns=column.getSubColumns();
      if (subColumns.size() != 0) {
        thrift_superColumn.columns=new ArrayList<column_t>();
        for (        IColumn subColumn : subColumns) {
          column_t thrift_column=new column_t();
          thrift_column.columnName=subColumn.name();
          thrift_column.value=new String(subColumn.value());
          thrift_column.timestamp=subColumn.timestamp();
          thrift_superColumn.columns.add(thrift_column);
        }
      }
      retlist.add(thrift_superColumn);
    }
  }
 catch (  Exception ex) {
    String exception=LogUtil.throwableToString(ex);
    logger_.info(exception);
    throw new CassandraException(exception);
  }
  return retlist;
}
