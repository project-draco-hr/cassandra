{
  Collections.sort(addresses,new Comparator<InetAddress>(){
    public int compare(    InetAddress a1,    InetAddress a2){
      try {
        if (address.equals(a1) && !address.equals(a2))         return -1;
        if (address.equals(a2) && !address.equals(a1))         return 1;
        String addressRack=getRack(address);
        String a1Rack=getRack(a1);
        String a2Rack=getRack(a2);
        if (addressRack.equals(a1Rack) && !addressRack.equals(a2Rack))         return -1;
        if (addressRack.equals(a2Rack) && !addressRack.equals(a1Rack))         return 1;
        String addressDatacenter=getDatacenter(address);
        String a1Datacenter=getDatacenter(a1);
        String a2Datacenter=getDatacenter(a2);
        if (addressDatacenter.equals(a1Datacenter) && !addressDatacenter.equals(a2Datacenter))         return -1;
        if (addressDatacenter.equals(a2Datacenter) && !addressDatacenter.equals(a1Datacenter))         return 1;
        return 0;
      }
 catch (      UnknownHostException e) {
        throw new RuntimeException(e);
      }
    }
  }
);
  return addresses;
}
