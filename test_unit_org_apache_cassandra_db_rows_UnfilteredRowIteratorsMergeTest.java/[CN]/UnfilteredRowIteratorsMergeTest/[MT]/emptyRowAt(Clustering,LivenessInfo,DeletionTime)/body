{
  final ColumnDefinition columnDef=metadata.getColumnDefinition(new ColumnIdentifier("data",true));
  final Cell cell=new TestCell(columnDef,clustering.get(0),live);
  return new AbstractRow(){
    @Override public Columns columns(){
      return Columns.of(columnDef);
    }
    @Override public LivenessInfo primaryKeyLivenessInfo(){
      return live;
    }
    @Override public DeletionTime deletion(){
      return deletion;
    }
    @Override public boolean isEmpty(){
      return true;
    }
    @Override public boolean hasComplexDeletion(){
      return false;
    }
    @Override public Clustering clustering(){
      return clustering;
    }
    @Override public Cell getCell(    ColumnDefinition c){
      return c == columnDef ? cell : null;
    }
    @Override public Cell getCell(    ColumnDefinition c,    CellPath path){
      return null;
    }
    @Override public Iterator<Cell> getCells(    ColumnDefinition c){
      return Iterators.singletonIterator(cell);
    }
    @Override public DeletionTime getDeletion(    ColumnDefinition c){
      return DeletionTime.LIVE;
    }
    @Override public Iterator<Cell> iterator(){
      return Iterators.<Cell>emptyIterator();
    }
    @Override public SearchIterator<ColumnDefinition,ColumnData> searchIterator(){
      return new SearchIterator<ColumnDefinition,ColumnData>(){
        @Override public boolean hasNext(){
          return false;
        }
        @Override public ColumnData next(        ColumnDefinition column){
          return null;
        }
      }
;
    }
    @Override public Kind kind(){
      return Unfiltered.Kind.ROW;
    }
    @Override public Row takeAlias(){
      return this;
    }
    @Override public String toString(){
      return Int32Type.instance.getString(clustering.get(0));
    }
  }
;
}
