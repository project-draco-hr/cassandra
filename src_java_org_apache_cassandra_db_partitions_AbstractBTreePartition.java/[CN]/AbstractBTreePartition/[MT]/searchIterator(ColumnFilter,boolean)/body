{
  final Holder current=holder();
  return new SearchIterator<Clustering,Row>(){
    private final SearchIterator<Clustering,Row> rawIter=new BTreeSearchIterator<>(current.tree,metadata.comparator,desc(reversed));
    private final DeletionTime partitionDeletion=current.deletionInfo.getPartitionDeletion();
    public boolean hasNext(){
      return rawIter.hasNext();
    }
    public Row next(    Clustering clustering){
      if (clustering == Clustering.STATIC_CLUSTERING)       return staticRow(current,columns,true);
      Row row=rawIter.next(clustering);
      RangeTombstone rt=current.deletionInfo.rangeCovering(clustering);
      DeletionTime activeDeletion=partitionDeletion;
      if (rt != null && rt.deletionTime().supersedes(activeDeletion))       activeDeletion=rt.deletionTime();
      if (row == null)       return activeDeletion.isLive() ? null : BTreeRow.emptyDeletedRow(clustering,activeDeletion);
      return row.filter(columns,activeDeletion,true,metadata);
    }
  }
;
}
