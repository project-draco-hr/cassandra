{
  ColumnFamilyStore cfs=getColumnFamilyStore();
  cfs.disableAutoCompaction();
  int rowCount=20000;
  int targetSSTableCount=50;
  populate(rowCount);
  LifecycleTransaction txn=cfs.getTracker().tryModify(cfs.getSSTables(),OperationType.COMPACTION);
  long beforeSize=txn.originals().iterator().next().onDiskLength();
  int sstableSize=(int)beforeSize / targetSSTableCount;
  CompactionAwareWriter writer=new MajorLeveledCompactionWriter(cfs,txn,txn.originals(),sstableSize,false);
  int rows=compact(cfs,txn,writer);
  assertEquals(targetSSTableCount,cfs.getSSTables().size());
  int[] levelCounts=new int[5];
  assertEquals(rowCount,rows);
  for (  SSTableReader sstable : cfs.getSSTables()) {
    levelCounts[sstable.getSSTableLevel()]++;
  }
  assertEquals(0,levelCounts[0]);
  assertEquals(10,levelCounts[1]);
  assertEquals(targetSSTableCount - 10,levelCounts[2]);
  for (int i=3; i < levelCounts.length; i++)   assertEquals(0,levelCounts[i]);
  validateData(cfs,rowCount);
  cfs.truncateBlocking();
}
