{
  ColumnFamilyStore cfs=getColumnFamilyStore();
  cfs.disableAutoCompaction();
  int rowCount=10000;
  populate(rowCount);
  LifecycleTransaction txn=cfs.getTracker().tryModify(cfs.getSSTables(),OperationType.COMPACTION);
  long beforeSize=txn.originals().iterator().next().onDiskLength();
  CompactionAwareWriter writer=new SplittingSizeTieredCompactionWriter(cfs,txn,txn.originals(),0);
  int rows=compact(cfs,txn,writer);
  long expectedSize=beforeSize / 2;
  List<SSTableReader> sortedSSTables=new ArrayList<>(cfs.getSSTables());
  Collections.sort(sortedSSTables,new Comparator<SSTableReader>(){
    @Override public int compare(    SSTableReader o1,    SSTableReader o2){
      return Longs.compare(o2.onDiskLength(),o1.onDiskLength());
    }
  }
);
  for (  SSTableReader sstable : sortedSSTables) {
    if (expectedSize > SplittingSizeTieredCompactionWriter.DEFAULT_SMALLEST_SSTABLE_BYTES)     assertEquals(expectedSize,sstable.onDiskLength(),expectedSize / 100);
    expectedSize/=2;
  }
  assertEquals(rowCount,rows);
  validateData(cfs,rowCount);
  cfs.truncateBlocking();
}
