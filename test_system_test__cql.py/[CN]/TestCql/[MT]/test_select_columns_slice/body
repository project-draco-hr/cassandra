def test_select_columns_slice(self):
    'column slice tests'
    cursor = init()
    cursor.execute("SELECT * FROM StandardString1 WHERE KEY = 'ka';")
    r = cursor.fetchone()
    assert (len(r) == 3)
    cursor.execute("SELECT ''..'' FROM StandardString1 WHERE KEY = 'ka';")
    r = cursor.fetchone()
    assert (len(r) == 3)
    cursor.execute("SELECT 1..3 FROM StandardLongA WHERE KEY = 'aa';")
    assert (cursor.rowcount == 1)
    r = cursor.fetchone()
    assert (r[0] == 'aa')
    assert (r[1] == '1')
    assert (r[2] == '2')
    assert (r[3] == '3')
    cursor.execute("SELECT 10..30 FROM StandardIntegerA WHERE KEY='k1'")
    assert (cursor.rowcount == 1)
    r = cursor.fetchone()
    assert (r[0] == 'k1')
    assert (r[1] == 'a')
    assert (r[2] == 'b')
    assert (r[3] == 'c')
    cursor.execute("\n            SELECT FIRST 1 1..3 FROM StandardLongA WHERE KEY = 'aa';\n        ")
    assert (cursor.rowcount == 1)
    r = cursor.fetchone()
    assert (len(r) == 2)
    assert (r[0] == 'aa')
    assert (r[1] == '1')
    cursor.execute("\n            SELECT FIRST 2 REVERSED 3..1 FROM StandardLongA WHERE KEY = 'aa';\n        ")
    assert (cursor.rowcount == 1), ('%d != 1' % cursor.rowcount)
    r = cursor.fetchone()
    assert (len(r) == 3)
    assert (r[0] == 'aa')
    assert (r[1] == '3')
    assert (r[2] == '2')
