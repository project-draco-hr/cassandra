def test_time_uuid(self):
    'store and retrieve time-based (type 1) uuids'
    cursor = init()
    timeuuid = uuid.uuid1()
    cursor.execute(("\n            UPDATE StandardTimeUUID SET '%s' = 10 WHERE KEY = 'uuidtest'\n        " % str(timeuuid)))
    cursor.execute(("\n            SELECT '%s' FROM StandardTimeUUID WHERE KEY = 'uuidtest'\n        " % str(timeuuid)))
    d = cursor.description
    assert (d[1][0] == timeuuid), ('%s, %s' % (str(d[1][0]), str(timeuuid)))
    ms = uuid1bytes_to_millis(uuid.uuid1().bytes)
    cursor.execute(("\n            UPDATE StandardTimeUUIDValues SET 'id' = %d WHERE KEY = 'uuidtest'\n        " % ms))
    cursor.execute("\n            SELECT 'id' FROM StandardTimeUUIDValues WHERE KEY = 'uuidtest'\n        ")
    r = cursor.fetchone()
    assert (uuid1bytes_to_millis(r[1].bytes) == ms)
    cursor.execute("\n            UPDATE StandardTimeUUIDValues SET 'id2' = '2011-01-31 17:00:00-0000'\n            WHERE KEY = 'uuidtest'\n        ")
    cursor.execute("\n            SELECT 'id2' FROM StandardTimeUUIDValues WHERE KEY = 'uuidtest'\n        ")
    r = cursor.fetchone()
    ms = uuid1bytes_to_millis(r[1].bytes)
    assert (ms == 1296493200000), ('%d != 1296493200000 (2011-01-31 17:00:00-0000)' % ms)
    cursor.execute("\n            UPDATE StandardTimeUUIDValues SET 'id3' = 'now'\n                    WHERE KEY = 'uuidtest'\n        ")
    cursor.execute("\n            SELECT 'id3' FROM StandardTimeUUIDValues WHERE KEY = 'uuidtest'\n        ")
    r = cursor.fetchone()
    ms = uuid1bytes_to_millis(r[1].bytes)
    assert (((time.time() * 1000.0) - ms) < 100), 'new timeuuid not within 100ms of now (UPDATE vs. SELECT)'
    uuid_range = []
    update = 'UPDATE StandardTimeUUID SET :name = :val WHERE KEY = slicetest'
    for i in range(5):
        uuid_range.append(uuid.uuid1())
        cursor.execute(update, dict(name=uuid_range[i], val=i))
    cursor.execute('\n            SELECT :start..:finish FROM StandardTimeUUID WHERE KEY = slicetest\n            ', dict(start=uuid_range[0], finish=uuid_range[(len(uuid_range) - 1)]))
    d = cursor.description
    for (i, col_d) in enumerate(d[1:]):
        assert (uuid_range[i] == col_d[0])
