def test_counter_column_support(self):
    'update statement should be able to work with counter columns'
    cursor = init()
    cursor.execute("UPDATE CounterCF SET count_me = count_me + 2 WHERE key = 'counter1'")
    cursor.execute("SELECT * FROM CounterCF WHERE KEY = 'counter1'")
    assert (cursor.rowcount == 1), ('expected 1 results, got %d' % cursor.rowcount)
    colnames = [col_d[0] for col_d in cursor.description]
    assert (colnames[1] == 'count_me'), ("unrecognized name '%s'" % colnames[1])
    r = cursor.fetchone()
    assert (r[1] == 2), ("unrecognized value '%s'" % r[1])
    cursor.execute("UPDATE CounterCF SET count_me = count_me + 2 WHERE key = 'counter1'")
    cursor.execute("SELECT * FROM CounterCF WHERE KEY = 'counter1'")
    assert (cursor.rowcount == 1), ('expected 1 results, got %d' % cursor.rowcount)
    colnames = [col_d[0] for col_d in cursor.description]
    assert (colnames[1] == 'count_me'), ("unrecognized name '%s'" % colnames[1])
    r = cursor.fetchone()
    assert (r[1] == 4), ("unrecognized value '%s'" % r[1])
    cursor.execute("UPDATE CounterCF SET count_me = count_me - 4 WHERE key = 'counter1'")
    cursor.execute("SELECT * FROM CounterCF WHERE KEY = 'counter1'")
    assert (cursor.rowcount == 1), ('expected 1 results, got %d' % cursor.rowcount)
    colnames = [col_d[0] for col_d in cursor.description]
    assert (colnames[1] == 'count_me'), ("unrecognized name '%s'" % colnames[1])
    r = cursor.fetchone()
    assert (r[1] == 0), ("unrecognized value '%s'" % r[1])
    cursor.execute('SELECT * FROM CounterCF')
    assert (cursor.rowcount == 1), ('expected 1 results, got %d' % cursor.rowcount)
    colnames = [col_d[0] for col_d in cursor.description]
    assert (colnames[1] == 'count_me'), ("unrecognized name '%s'" % colnames[1])
    r = cursor.fetchone()
    assert (r[1] == 0), ("unrecognized value '%s'" % r[1])
    cursor.execute("DELETE count_me FROM CounterCF WHERE KEY = 'counter1'")
    cursor.execute('SELECT * FROM CounterCF')
    assert (cursor.rowcount == 1), ('expected 1 results, got %d' % cursor.rowcount)
    colnames = [col_d[0] for col_d in cursor.description]
    assert (len(colnames) == 1)
    r = cursor.fetchone()
    assert (len(r) == 1)
    assert_raises(cql.ProgrammingError, cursor.execute, "UPDATE CounterCF SET count_me = count_me + 2, x = 'a' WHERE key = 'counter1'")
    assert_raises(cql.ProgrammingError, cursor.execute, "UPDATE CounterCF SET count_me = count_not_me + 2 WHERE key = 'counter1'")
    assert_raises(cql.ProgrammingError, cursor.execute, "UPDATE CounterCF USING CONSISTENCY ANY SET count_me = count_me + 2 WHERE key = 'counter1'")
