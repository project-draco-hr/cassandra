def test_create_column_family(self):
    'create a new column family'
    cursor = init()
    cursor.execute("\n               CREATE SCHEMA CreateCFKeyspace WITH strategy_options:replication_factor = '1'\n                   AND strategy_class = 'SimpleStrategy';\n        ")
    cursor.execute('USE CreateCFKeyspace;')
    cursor.execute("\n            CREATE COLUMNFAMILY NewCf1 (\n                KEY varint PRIMARY KEY,\n                'username' text,\n                'age' varint,\n                'birthdate' bigint,\n                'id' uuid\n            ) WITH comment = 'shiny, new, cf' AND default_validation = ascii;\n        ")
    ksdef = thrift_client.describe_keyspace('CreateCFKeyspace')
    assert (len(ksdef.cf_defs) == 1), ('expected 1 column family total, found %d' % len(ksdef.cf_defs))
    cfam = ksdef.cf_defs[0]
    assert (len(cfam.column_metadata) == 4), ('expected 4 columns, found %d' % len(cfam.column_metadata))
    assert (cfam.comment == 'shiny, new, cf')
    assert (cfam.default_validation_class == 'org.apache.cassandra.db.marshal.AsciiType')
    assert (cfam.comparator_type == 'org.apache.cassandra.db.marshal.UTF8Type')
    assert (cfam.key_validation_class == 'org.apache.cassandra.db.marshal.IntegerType')
    assert_raises(cql.ProgrammingError, cursor.execute, 'CREATE COLUMNFAMILY NewCf2')
    assert_raises(cql.ProgrammingError, cursor.execute, "CREATE COLUMNFAMILY NewCf2 (id 'utf8' primary key, id int)")
    assert_raises(cql.ProgrammingError, cursor.execute, 'CREATE COLUMNFAMILY NewCf2\n                             (KEY varint PRIMARY KEY, KEY text PRIMARY KEY)')
    cursor.execute('CREATE COLUMNFAMILY NewCf3\n                            (KEY varint PRIMARY KEY) WITH comparator = bigint')
    ksdef = thrift_client.describe_keyspace('CreateCFKeyspace')
    assert (len(ksdef.cf_defs) == 2), ('expected 3 column families total, found %d' % len(ksdef.cf_defs))
    cfam = [i for i in ksdef.cf_defs if (i.name == 'NewCf3')][0]
    assert (cfam.comparator_type == 'org.apache.cassandra.db.marshal.LongType')
    cursor.execute("CREATE COLUMNFAMILY NewCf4\n                            (KEY varint PRIMARY KEY, 'a' varint, 'b' varint)\n                            WITH comparator = text;")
    ksdef = thrift_client.describe_keyspace('CreateCFKeyspace')
    assert (len(ksdef.cf_defs) == 3), ('expected 4 column families total, found %d' % len(ksdef.cf_defs))
    cfam = [i for i in ksdef.cf_defs if (i.name == 'NewCf4')][0]
    assert (len(cfam.column_metadata) == 2), ('expected 2 columns, found %d' % len(cfam.column_metadata))
    for coldef in cfam.column_metadata:
        assert (coldef.name in ('a', 'b')), ('Unknown column name ' + coldef.name)
        assert coldef.validation_class.endswith('marshal.IntegerType')
