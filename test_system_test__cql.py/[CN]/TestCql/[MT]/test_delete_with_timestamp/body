def test_delete_with_timestamp(self):
    'delete statement should support setting timestamp'
    cursor = init()
    cursor.compression = 'NONE'
    cursor.execute("UPDATE StandardString1 USING TIMESTAMP 10 SET name = 'name here' WHERE KEY = 'TimestampedUser3'")
    cursor.execute("SELECT * FROM StandardString1 WHERE KEY = 'TimestampedUser3'")
    assert (cursor.rowcount == 1), ('expected 1 results, got %d' % cursor.rowcount)
    colnames = [col_d[0] for col_d in cursor.description]
    assert (colnames[1] == 'name'), ("unrecognized name '%s'" % colnames[1])
    r = cursor.fetchone()
    assert (r[1] == 'name here'), ("unrecognized value '%s'" % r[1])
    cursor.execute("DELETE 'name here' FROM StandardString1 USING TIMESTAMP 3 WHERE KEY = 'TimestampedUser3'")
    cursor.execute("SELECT * FROM StandardString1 WHERE KEY = 'TimestampedUser3'")
    assert (cursor.rowcount == 1), ('expected 1 results, got %d' % cursor.rowcount)
    colnames = [col_d[0] for col_d in cursor.description]
    assert (len(colnames) == 2), ('expected 2 columns, got %d' % len(colnames))
    assert (colnames[1] == 'name'), ("unrecognized name '%s'" % colnames[1])
    r = cursor.fetchone()
    assert (r[1] == 'name here'), ("unrecognized value '%s'" % r[1])
    cursor.execute("DELETE FROM StandardString1 USING TIMESTAMP 3 WHERE KEY = 'TimestampedUser3'")
    cursor.execute("SELECT * FROM StandardString1 WHERE KEY = 'TimestampedUser3'")
    assert (cursor.rowcount == 1), ('expected 1 results, got %d' % cursor.rowcount)
    colnames = [col_d[0] for col_d in cursor.description]
    assert (len(colnames) == 2), ('expected 2 columns, got %d' % len(colnames))
    assert (colnames[1] == 'name'), ("unrecognized name '%s'" % colnames[1])
    r = cursor.fetchone()
    assert (r[1] == 'name here'), ("unrecognized value '%s'" % r[1])
    cursor.execute("DELETE FROM StandardString1 USING TIMESTAMP 15 WHERE KEY = 'TimestampedUser3'")
    cursor.execute("SELECT * FROM StandardString1 WHERE KEY = 'TimestampedUser3'")
    assert (cursor.rowcount == 1), ('expected 1 results, got %d' % cursor.rowcount)
    colnames = [col_d[0] for col_d in cursor.description]
    assert (len(colnames) == 1), ('expected only the KEY column, got %d' % len(colnames))
    assert (colnames[0] == 'KEY'), ("unrecognized name '%s'" % colnames[0])
