def test_insert_with_timestamp_and_ttl(self):
    'insert statement should support setting timestamp'
    cursor = init()
    cursor.compression = 'NONE'
    cursor.execute("INSERT INTO StandardString1 (KEY, name) VALUES ('TimestampedUser', 'name here') USING TIMESTAMP 1303743619771318")
    cursor.execute("SELECT * FROM StandardString1 WHERE KEY = 'TimestampedUser'")
    assert (cursor.rowcount == 1), ('expected 1 results, got %d' % cursor.rowcount)
    colnames = [col_d[0] for col_d in cursor.description]
    assert (colnames[1] == 'name'), ("unrecognized name '%s'" % colnames[1])
    r = cursor.fetchone()
    assert (r[1] == 'name here'), ("unrecognized value '%s'" % r[1])
    cursor.execute("INSERT INTO StandardString1 (KEY, name) VALUES ('TimestampedUser1', 'name here') USING TIMESTAMP 1303743619771318 AND CONSISTENCY ONE")
    cursor.execute("SELECT * FROM StandardString1 WHERE KEY = 'TimestampedUser1'")
    assert (cursor.rowcount == 1), ('expected 1 results, got %d' % cursor.rowcount)
    colnames = [col_d[0] for col_d in cursor.description]
    assert (colnames[1] == 'name'), ("unrecognized name '%s'" % colnames[1])
    r = cursor.fetchone()
    assert (r[1] == 'name here'), ("unrecognized value '%s'" % r[1])
    cursor.execute("INSERT INTO StandardString1 (KEY, name) VALUES ('TimestampedUser2', 'name here') USING TTL 5678")
    cursor.execute("SELECT * FROM StandardString1 WHERE KEY = 'TimestampedUser2'")
    assert (cursor.rowcount == 1), ('expected 1 results, got %d' % cursor.rowcount)
    colnames = [col_d[0] for col_d in cursor.description]
    assert (colnames[1] == 'name'), ("unrecognized name '%s'" % colnames[1])
    r = cursor.fetchone()
    assert (r[1] == 'name here'), ("unrecognized value '%s'" % r[1])
    cursor.execute("INSERT INTO StandardString1 (KEY, name) VALUES ('TimestampedUser3', 'name here') USING TTL 4587 AND TIMESTAMP 1303743619771318 AND CONSISTENCY ONE")
    cursor.execute("SELECT * FROM StandardString1 WHERE KEY = 'TimestampedUser3'")
    assert (cursor.rowcount == 1), ('expected 1 results, got %d' % cursor.rowcount)
    colnames = [col_d[0] for col_d in cursor.description]
    assert (colnames[1] == 'name'), ("unrecognized name '%s'" % colnames[1])
    r = cursor.fetchone()
    assert (r[1] == 'name here'), ("unrecognized value '%s'" % r[1])
    cursor.execute("INSERT INTO StandardString1 (KEY, name) VALUES ('TimestampedUser14', 'name here') USING TTL 1 AND CONSISTENCY ONE")
    time.sleep(5)
    cursor.execute("SELECT * FROM StandardString1 WHERE KEY = 'TimestampedUser14'")
    assert (cursor.rowcount == 1), ('expected 1 results, got %d' % cursor.rowcount)
    r = cursor.fetchone()
    assert (len(r) == 1), ('expected 0 results, got %d' % len(r))
