def read(self, iprot):
    if ((iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated) and isinstance(iprot.trans, TTransport.CReadableTransport) and (self.thrift_spec is not None) and (fastbinary is not None)):
        fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
        return
    iprot.readStructBegin()
    while True:
        (fname, ftype, fid) = iprot.readFieldBegin()
        if (ftype == TType.STOP):
            break
        if (fid == 1):
            if (ftype == TType.STRING):
                self.keyspace = iprot.readString()
            else:
                iprot.skip(ftype)
        elif (fid == 2):
            if (ftype == TType.MAP):
                self.mutation_map = {}
                (_ktype107, _vtype108, _size106) = iprot.readMapBegin()
                for _i110 in xrange(_size106):
                    _key111 = iprot.readString()
                    _val112 = {}
                    (_ktype114, _vtype115, _size113) = iprot.readMapBegin()
                    for _i117 in xrange(_size113):
                        _key118 = iprot.readString()
                        _val119 = []
                        (_etype123, _size120) = iprot.readListBegin()
                        for _i124 in xrange(_size120):
                            _elem125 = Mutation()
                            _elem125.read(iprot)
                            _val119.append(_elem125)
                        iprot.readListEnd()
                        _val112[_key118] = _val119
                    iprot.readMapEnd()
                    self.mutation_map[_key111] = _val112
                iprot.readMapEnd()
            else:
                iprot.skip(ftype)
        elif (fid == 3):
            if (ftype == TType.I32):
                self.consistency_level = iprot.readI32()
            else:
                iprot.skip(ftype)
        else:
            iprot.skip(ftype)
        iprot.readFieldEnd()
    iprot.readStructEnd()
