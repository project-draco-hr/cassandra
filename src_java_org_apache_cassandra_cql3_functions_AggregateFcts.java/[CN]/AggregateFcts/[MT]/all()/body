{
  Collection<AggregateFunction> functions=new ArrayList<>();
  functions.add(countRowsFunction);
  functions.add(sumFunctionForByte);
  functions.add(sumFunctionForShort);
  functions.add(sumFunctionForInt32);
  functions.add(sumFunctionForLong);
  functions.add(sumFunctionForFloat);
  functions.add(sumFunctionForDouble);
  functions.add(sumFunctionForDecimal);
  functions.add(sumFunctionForVarint);
  functions.add(sumFunctionForCounter);
  functions.add(avgFunctionForByte);
  functions.add(avgFunctionForShort);
  functions.add(avgFunctionForInt32);
  functions.add(avgFunctionForLong);
  functions.add(avgFunctionForFloat);
  functions.add(avgFunctionForDouble);
  functions.add(avgFunctionForDecimal);
  functions.add(avgFunctionForVarint);
  functions.add(avgFunctionForCounter);
  for (  CQL3Type type : CQL3Type.Native.values()) {
    if (type != CQL3Type.Native.VARCHAR) {
      functions.add(AggregateFcts.makeCountFunction(type.getType()));
      if (type != CQL3Type.Native.COUNTER) {
        functions.add(AggregateFcts.makeMaxFunction(type.getType()));
        functions.add(AggregateFcts.makeMinFunction(type.getType()));
      }
 else {
        functions.add(AggregateFcts.maxFunctionForCounter);
        functions.add(AggregateFcts.minFunctionForCounter);
      }
    }
  }
  return functions;
}
