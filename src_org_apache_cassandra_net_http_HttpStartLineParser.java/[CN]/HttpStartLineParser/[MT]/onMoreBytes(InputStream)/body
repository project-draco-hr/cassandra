{
  int got;
  if (parseState_ == StartLineParseState.TO_RESET) {
    resetParserState();
  }
  while (in.available() > 0) {
    in.mark(1);
    got=in.read();
switch (parseState_) {
case EATING_WHITESPACE:
switch (got) {
case ' ':
        break;
default :
      in.reset();
    parseState_=nextState_;
  break;
}
break;
case READING_METHOD:
switch (got) {
case ' ':
parseState_=StartLineParseState.EATING_WHITESPACE;
nextState_=StartLineParseState.READING_PATH;
break;
default :
httpMethod_.append((char)got);
break;
}
break;
case READING_PATH:
switch (got) {
case '\r':
parseState_=StartLineParseState.CHECKING_EOL;
break;
case '%':
encodeTo_=httpPath_;
nextState_=parseState_;
parseState_=StartLineParseState.DECODING_FIRST_CHAR;
break;
case ' ':
parseState_=StartLineParseState.EATING_WHITESPACE;
nextState_=StartLineParseState.READING_VERSION;
break;
case '?':
parseState_=StartLineParseState.READING_QUERY;
break;
default :
httpPath_.append((char)got);
break;
}
break;
case READING_QUERY:
switch (got) {
case '\r':
parseState_=StartLineParseState.CHECKING_EOL;
break;
case '%':
encodeTo_=httpQuery_;
nextState_=parseState_;
parseState_=StartLineParseState.DECODING_FIRST_CHAR;
break;
case ' ':
parseState_=StartLineParseState.EATING_WHITESPACE;
nextState_=StartLineParseState.READING_VERSION;
break;
case '+':
httpQuery_.append(' ');
break;
default :
httpQuery_.append((char)got);
break;
}
break;
case DECODING_FIRST_CHAR:
encodedValue_=decodeHex(got) * 16;
parseState_=StartLineParseState.DECODING_SECOND_CHAR;
break;
case DECODING_SECOND_CHAR:
encodeTo_.append((char)(decodeHex(got) + encodedValue_));
parseState_=nextState_;
break;
case READING_VERSION:
switch (got) {
case '\r':
parseState_=StartLineParseState.CHECKING_EOL;
break;
default :
httpVersion_.append((char)got);
break;
}
break;
case CHECKING_EOL:
switch (got) {
case '\n':
finishLine_();
parseState_=StartLineParseState.TO_RESET;
return true;
default :
throw new HttpParsingException();
}
default :
throw new HttpParsingException();
}
}
return false;
}
