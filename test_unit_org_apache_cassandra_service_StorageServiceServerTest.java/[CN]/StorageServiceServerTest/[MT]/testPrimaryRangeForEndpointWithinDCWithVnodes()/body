{
  TokenMetadata metadata=StorageService.instance.getTokenMetadata();
  metadata.clearUnsafe();
  Multimap<InetAddress,Token> dc1=HashMultimap.create();
  dc1.put(InetAddress.getByName("127.0.0.1"),new StringToken("A"));
  dc1.put(InetAddress.getByName("127.0.0.1"),new StringToken("E"));
  dc1.put(InetAddress.getByName("127.0.0.1"),new StringToken("H"));
  dc1.put(InetAddress.getByName("127.0.0.2"),new StringToken("C"));
  dc1.put(InetAddress.getByName("127.0.0.2"),new StringToken("I"));
  dc1.put(InetAddress.getByName("127.0.0.2"),new StringToken("J"));
  metadata.updateNormalTokens(dc1);
  Multimap<InetAddress,Token> dc2=HashMultimap.create();
  dc2.put(InetAddress.getByName("127.0.0.4"),new StringToken("B"));
  dc2.put(InetAddress.getByName("127.0.0.4"),new StringToken("G"));
  dc2.put(InetAddress.getByName("127.0.0.4"),new StringToken("L"));
  dc2.put(InetAddress.getByName("127.0.0.5"),new StringToken("D"));
  dc2.put(InetAddress.getByName("127.0.0.5"),new StringToken("F"));
  dc2.put(InetAddress.getByName("127.0.0.5"),new StringToken("K"));
  metadata.updateNormalTokens(dc2);
  Map<String,String> configOptions=new HashMap<>();
  configOptions.put("DC1","1");
  configOptions.put("DC2","2");
  Keyspace.clear("Keyspace1");
  KSMetaData meta=KSMetaData.newKeyspace("Keyspace1","NetworkTopologyStrategy",configOptions,false);
  Schema.instance.setKeyspaceDefinition(meta);
  Collection<Range<Token>> primaryRanges=StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name,InetAddress.getByName("127.0.0.1"));
  assertEquals(8,primaryRanges.size());
  assertTrue(primaryRanges.contains(new Range<Token>(new StringToken("J"),new StringToken("K"))));
  assertTrue(primaryRanges.contains(new Range<Token>(new StringToken("K"),new StringToken("L"))));
  assertTrue(primaryRanges.contains(new Range<Token>(new StringToken("L"),new StringToken("A"))));
  assertTrue(primaryRanges.contains(new Range<Token>(new StringToken("C"),new StringToken("D"))));
  assertTrue(primaryRanges.contains(new Range<Token>(new StringToken("D"),new StringToken("E"))));
  assertTrue(primaryRanges.contains(new Range<Token>(new StringToken("E"),new StringToken("F"))));
  assertTrue(primaryRanges.contains(new Range<Token>(new StringToken("F"),new StringToken("G"))));
  assertTrue(primaryRanges.contains(new Range<Token>(new StringToken("G"),new StringToken("H"))));
  primaryRanges=StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name,InetAddress.getByName("127.0.0.2"));
  assertEquals(4,primaryRanges.size());
  assertTrue(primaryRanges.contains(new Range<Token>(new StringToken("B"),new StringToken("C"))));
  assertTrue(primaryRanges.contains(new Range<Token>(new StringToken("A"),new StringToken("B"))));
  assertTrue(primaryRanges.contains(new Range<Token>(new StringToken("H"),new StringToken("I"))));
  assertTrue(primaryRanges.contains(new Range<Token>(new StringToken("I"),new StringToken("J"))));
  primaryRanges=StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name,InetAddress.getByName("127.0.0.4"));
  assertEquals(4,primaryRanges.size());
  assertTrue(primaryRanges.contains(new Range<Token>(new StringToken("A"),new StringToken("B"))));
  assertTrue(primaryRanges.contains(new Range<Token>(new StringToken("F"),new StringToken("G"))));
  assertTrue(primaryRanges.contains(new Range<Token>(new StringToken("K"),new StringToken("L"))));
  assertTrue(primaryRanges.contains(new Range<Token>(new StringToken("L"),new StringToken("A"))));
  primaryRanges=StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name,InetAddress.getByName("127.0.0.5"));
  assertTrue(primaryRanges.size() == 8);
  assertTrue(primaryRanges.contains(new Range<Token>(new StringToken("C"),new StringToken("D"))));
  assertTrue(primaryRanges.contains(new Range<Token>(new StringToken("E"),new StringToken("F"))));
  assertTrue(primaryRanges.contains(new Range<Token>(new StringToken("J"),new StringToken("K"))));
  assertTrue(primaryRanges.contains(new Range<Token>(new StringToken("D"),new StringToken("E"))));
  assertTrue(primaryRanges.contains(new Range<Token>(new StringToken("G"),new StringToken("H"))));
  assertTrue(primaryRanges.contains(new Range<Token>(new StringToken("B"),new StringToken("C"))));
  assertTrue(primaryRanges.contains(new Range<Token>(new StringToken("H"),new StringToken("I"))));
  assertTrue(primaryRanges.contains(new Range<Token>(new StringToken("I"),new StringToken("J"))));
}
