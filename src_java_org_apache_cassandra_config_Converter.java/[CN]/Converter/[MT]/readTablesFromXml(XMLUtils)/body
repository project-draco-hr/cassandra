{
  List<RawKeyspace> keyspaces=new ArrayList<RawKeyspace>();
  try {
    NodeList tablesxml=xmlUtils.getRequestedNodeList("/Storage/Keyspaces/Keyspace");
    String gcGrace=xmlUtils.getNodeValue("/Storage/GCGraceSeconds");
    int gc_grace_seconds=864000;
    if (gcGrace != null)     gc_grace_seconds=Integer.parseInt(gcGrace);
    int size=tablesxml.getLength();
    for (int i=0; i < size; ++i) {
      String value;
      RawKeyspace ks=new RawKeyspace();
      Node table=tablesxml.item(i);
      ks.name=XMLUtils.getAttributeValue(table,"Name");
      ks.replica_placement_strategy=xmlUtils.getNodeValue("/Storage/Keyspaces/Keyspace[@Name='" + ks.name + "']/ReplicaPlacementStrategy");
      value=xmlUtils.getNodeValue("/Storage/Keyspaces/Keyspace[@Name='" + ks.name + "']/ReplicationFactor");
      if (value != null) {
        ks.replication_factor=Integer.parseInt(value);
      }
      String xqlTable="/Storage/Keyspaces/Keyspace[@Name='" + ks.name + "']/";
      NodeList columnFamilies=xmlUtils.getRequestedNodeList(xqlTable + "ColumnFamily");
      int size2=columnFamilies.getLength();
      ks.column_families=new RawColumnFamily[size2];
      for (int j=0; j < size2; ++j) {
        Node columnFamily=columnFamilies.item(j);
        ks.column_families[j]=new RawColumnFamily();
        ks.column_families[j].name=XMLUtils.getAttributeValue(columnFamily,"Name");
        String xqlCF=xqlTable + "ColumnFamily[@Name='" + ks.column_families[j].name+ "']/";
        ks.column_families[j].column_type=ColumnFamilyType.create(XMLUtils.getAttributeValue(columnFamily,"ColumnType"));
        ks.column_families[j].compare_with=XMLUtils.getAttributeValue(columnFamily,"CompareWith");
        if (ks.column_families[j].column_type != null && ks.column_families[j].column_type == ColumnFamilyType.Super)         ks.column_families[j].compare_subcolumns_with=XMLUtils.getAttributeValue(columnFamily,"CompareSubcolumnsWith");
        if ((value=XMLUtils.getAttributeValue(columnFamily,"KeysCached")) != null) {
          ks.column_families[j].keys_cached=FBUtilities.parseDoubleOrPercent(value);
        }
        if ((value=XMLUtils.getAttributeValue(columnFamily,"RowsCached")) != null) {
          ks.column_families[j].rows_cached=FBUtilities.parseDoubleOrPercent(value);
        }
        if ((value=XMLUtils.getAttributeValue(columnFamily,"ReadRepairChance")) != null) {
          ks.column_families[j].read_repair_chance=FBUtilities.parseDoubleOrPercent(value);
        }
        ks.column_families[j].gc_grace_seconds=gc_grace_seconds;
        ks.column_families[j].comment=xmlUtils.getNodeValue(xqlCF + "Comment");
      }
      keyspaces.add(ks);
    }
    return keyspaces.toArray(new RawKeyspace[0]);
  }
 catch (  XPathExpressionException e) {
    throw new ConfigurationException("XPath expression error.");
  }
catch (  TransformerException e) {
    throw new ConfigurationException("Error occurred during the transformation process.");
  }
}
