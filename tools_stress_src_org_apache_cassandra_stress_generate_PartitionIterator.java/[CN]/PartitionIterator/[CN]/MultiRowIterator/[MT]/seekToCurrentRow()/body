{
  int[] position=this.currentRow;
  for (int i=0; i < position.length; i++) {
    if (i != 0)     fill(i);
    for (int c=position[i]; c > 0; c--)     clusteringComponents[i].poll();
    if (clusteringComponents[i].isEmpty()) {
      int j=i;
      while (true) {
        if (--j < 0)         return setHasNext(false);
        clusteringComponents[j].poll();
        if (!clusteringComponents[j].isEmpty())         break;
      }
      position[j]++;
      Arrays.fill(position,j + 1,position.length,0);
      while (j < i)       fill(++j);
    }
    row.row[i]=clusteringComponents[i].peek();
  }
  if (compareToLastRow(currentRow.length - 1) > 0)   return setHasNext(false);
  position[position.length - 1]--;
  clusteringComponents[position.length - 1].addFirst(this);
  return setHasNext(advance(position.length - 1,true));
}
