{
  return new AbstractIterator<Name>(){
    private final Iterator<Name> keyIter=partitionKeys.values().iterator();
    private final Iterator<Name> clusteringIter=clusteringColumns.values().iterator();
    private boolean valueDone;
    private final Iterator<Name> staticIter=staticColumns.values().iterator();
    private final Iterator<Name> regularIter=regularColumns.values().iterator();
    protected Name computeNext(){
      if (keyIter.hasNext())       return keyIter.next();
      if (clusteringIter.hasNext())       return clusteringIter.next();
      if (compactValue != null && !valueDone) {
        valueDone=true;
        return compactValue;
      }
      if (staticIter.hasNext())       return staticIter.next();
      if (regularIter.hasNext())       return regularIter.next();
      return endOfData();
    }
  }
;
}
