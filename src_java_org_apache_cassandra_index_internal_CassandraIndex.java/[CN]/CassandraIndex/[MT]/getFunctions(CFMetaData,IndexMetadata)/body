{
  if (indexDef.isKeys())   return CassandraIndexFunctions.KEYS_INDEX_FUNCTIONS;
  ColumnDefinition indexedColumn=indexDef.indexedColumn(baseCfMetadata);
  if (indexedColumn.type.isCollection() && indexedColumn.type.isMultiCell()) {
switch (((CollectionType)indexedColumn.type).kind) {
case LIST:
      return CassandraIndexFunctions.COLLECTION_VALUE_INDEX_FUNCTIONS;
case SET:
    return CassandraIndexFunctions.COLLECTION_KEY_INDEX_FUNCTIONS;
case MAP:
  if (indexDef.options.containsKey(IndexTarget.INDEX_KEYS_OPTION_NAME))   return CassandraIndexFunctions.COLLECTION_KEY_INDEX_FUNCTIONS;
 else   if (indexDef.options.containsKey(IndexTarget.INDEX_ENTRIES_OPTION_NAME))   return CassandraIndexFunctions.COLLECTION_ENTRY_INDEX_FUNCTIONS;
 else   return CassandraIndexFunctions.COLLECTION_VALUE_INDEX_FUNCTIONS;
}
}
switch (indexedColumn.kind) {
case CLUSTERING:
return CassandraIndexFunctions.CLUSTERING_COLUMN_INDEX_FUNCTIONS;
case REGULAR:
return CassandraIndexFunctions.REGULAR_COLUMN_INDEX_FUNCTIONS;
case PARTITION_KEY:
return CassandraIndexFunctions.PARTITION_KEY_INDEX_FUNCTIONS;
}
throw new AssertionError();
}
