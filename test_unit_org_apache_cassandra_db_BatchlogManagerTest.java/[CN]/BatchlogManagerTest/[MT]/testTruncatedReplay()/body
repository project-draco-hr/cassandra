{
  CFMetaData cf2=Schema.instance.getCFMetaData(KEYSPACE1,CF_STANDARD2);
  CFMetaData cf3=Schema.instance.getCFMetaData(KEYSPACE1,CF_STANDARD3);
  for (int i=0; i < 1000; i++) {
    Mutation mutation1=new RowUpdateBuilder(cf2,FBUtilities.timestampMicros(),bytes(i)).clustering("name" + i).add("val","val" + i).build();
    Mutation mutation2=new RowUpdateBuilder(cf3,FBUtilities.timestampMicros(),bytes(i)).clustering("name" + i).add("val","val" + i).build();
    List<Mutation> mutations=Lists.newArrayList(mutation1,mutation2);
    long timestamp=System.currentTimeMillis() - BatchlogManager.instance.getBatchlogTimeout();
    if (i == 500)     SystemKeyspace.saveTruncationRecord(Keyspace.open(KEYSPACE1).getColumnFamilyStore("Standard2"),timestamp,ReplayPosition.NONE);
    if (i >= 500)     timestamp++;
 else     timestamp--;
    BatchlogManager.getBatchlogMutationFor(mutations,UUIDGen.getTimeUUID(timestamp,i),MessagingService.current_version).applyUnsafe();
  }
  Keyspace.open(SystemKeyspace.NAME).getColumnFamilyStore(SystemKeyspace.BATCHES).forceBlockingFlush();
  BatchlogManager.instance.startBatchlogReplay().get();
  for (int i=0; i < 1000; i++) {
    UntypedResultSet result=QueryProcessor.executeInternal(String.format("SELECT * FROM \"%s\".\"%s\" WHERE key = intAsBlob(%d)",KEYSPACE1,CF_STANDARD2,i));
    if (i >= 500) {
      assertEquals(bytes(i),result.one().getBytes("key"));
      assertEquals("name" + i,result.one().getString("name"));
      assertEquals("val" + i,result.one().getString("val"));
    }
 else {
      assertTrue(result.isEmpty());
    }
  }
  for (int i=0; i < 1000; i++) {
    UntypedResultSet result=QueryProcessor.executeInternal(String.format("SELECT * FROM \"%s\".\"%s\" WHERE key = intAsBlob(%d)",KEYSPACE1,CF_STANDARD3,i));
    assertEquals(bytes(i),result.one().getBytes("key"));
    assertEquals("name" + i,result.one().getString("name"));
    assertEquals("val" + i,result.one().getString("val"));
  }
}
