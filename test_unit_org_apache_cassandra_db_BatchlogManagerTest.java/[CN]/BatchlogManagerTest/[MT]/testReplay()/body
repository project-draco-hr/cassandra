{
  long initialAllBatches=BatchlogManager.instance.countAllBatches();
  long initialReplayedBatches=BatchlogManager.instance.getTotalBatchesReplayed();
  for (int i=0; i < 1000; i++) {
    RowMutation mutation=new RowMutation("Keyspace1",bytes(i));
    mutation.add(new QueryPath("Standard1",null,bytes(i)),bytes(i),0);
    long timestamp=System.currentTimeMillis();
    if (i < 500)     timestamp-=DatabaseDescriptor.getWriteRpcTimeout() * 2;
    BatchlogManager.getBatchlogMutationFor(Collections.singleton(mutation),UUIDGen.getTimeUUID(),timestamp * 1000).apply();
  }
  Table.open(Table.SYSTEM_KS).getColumnFamilyStore(SystemTable.BATCHLOG_CF).forceFlush();
  assertEquals(1000,BatchlogManager.instance.countAllBatches() - initialAllBatches);
  assertEquals(0,BatchlogManager.instance.getTotalBatchesReplayed() - initialReplayedBatches);
  BatchlogManager.instance.replayAllFailedBatches();
  assertEquals(500,BatchlogManager.instance.countAllBatches() - initialAllBatches);
  assertEquals(500,BatchlogManager.instance.getTotalBatchesReplayed() - initialReplayedBatches);
  for (int i=0; i < 1000; i++) {
    UntypedResultSet result=QueryProcessor.processInternal(String.format("SELECT * FROM \"Keyspace1\".\"Standard1\" WHERE key = intAsBlob(%d)",i));
    if (i < 500) {
      assertEquals(bytes(i),result.one().getBytes("key"));
      assertEquals(bytes(i),result.one().getBytes("column1"));
      assertEquals(bytes(i),result.one().getBytes("value"));
    }
 else {
      assertTrue(result.isEmpty());
    }
  }
  UntypedResultSet result=QueryProcessor.processInternal(String.format("SELECT count(*) FROM \"Keyspace1\".\"Standard1\""));
  assertEquals(500,result.one().getLong("count"));
}
