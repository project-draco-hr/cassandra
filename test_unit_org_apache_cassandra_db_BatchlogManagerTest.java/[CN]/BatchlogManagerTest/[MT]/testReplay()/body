{
  long initialAllBatches=BatchlogManager.instance.countAllBatches();
  long initialReplayedBatches=BatchlogManager.instance.getTotalBatchesReplayed();
  CellNameType comparator=Keyspace.open(KEYSPACE1).getColumnFamilyStore("Standard1").metadata.comparator;
  for (int i=0; i < 1000; i++) {
    Mutation mutation=new Mutation(KEYSPACE1,bytes(i));
    mutation.add("Standard1",comparator.makeCellName(bytes(i)),bytes(i),System.currentTimeMillis());
    long timestamp=i < 500 ? (System.currentTimeMillis() - DatabaseDescriptor.getWriteRpcTimeout() * 2) * 1000 : Long.MAX_VALUE;
    BatchlogManager.getBatchlogMutationFor(Collections.singleton(mutation),UUIDGen.getTimeUUID(),MessagingService.current_version,timestamp).applyUnsafe();
  }
  Keyspace.open(Keyspace.SYSTEM_KS).getColumnFamilyStore(SystemKeyspace.BATCHLOG_CF).forceBlockingFlush();
  assertEquals(1000,BatchlogManager.instance.countAllBatches() - initialAllBatches);
  assertEquals(0,BatchlogManager.instance.getTotalBatchesReplayed() - initialReplayedBatches);
  BatchlogManager.instance.replayAllFailedBatches();
  assertEquals(500,BatchlogManager.instance.countAllBatches() - initialAllBatches);
  assertEquals(500,BatchlogManager.instance.getTotalBatchesReplayed() - initialReplayedBatches);
  for (int i=0; i < 1000; i++) {
    UntypedResultSet result=QueryProcessor.executeInternal(String.format("SELECT * FROM \"%s\".\"%s\" WHERE key = intAsBlob(%d)",KEYSPACE1,CF_STANDARD1,i));
    if (i < 500) {
      assertEquals(bytes(i),result.one().getBytes("key"));
      assertEquals(bytes(i),result.one().getBytes("column1"));
      assertEquals(bytes(i),result.one().getBytes("value"));
    }
 else {
      assertTrue(result.isEmpty());
    }
  }
  UntypedResultSet result=QueryProcessor.executeInternal(String.format("SELECT count(*) FROM \"%s\".\"%s\"",KEYSPACE1,CF_STANDARD1));
  assertEquals(500,result.one().getLong("count"));
}
