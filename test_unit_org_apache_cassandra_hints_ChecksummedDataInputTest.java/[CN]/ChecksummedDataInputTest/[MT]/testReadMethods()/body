{
  byte[] b=new byte[RandomAccessReader.DEFAULT_BUFFER_SIZE * 2];
  for (int i=0; i < b.length; i++)   b[i]=(byte)i;
  ByteBuffer buffer;
  try (DataOutputBuffer out=new DataOutputBuffer()){
    out.write(127);
    out.write(b);
    out.writeBoolean(false);
    out.writeByte(10);
    out.writeChar('t');
    out.writeDouble(3.3);
    out.writeFloat(2.2f);
    out.writeInt(42);
    out.writeLong(Long.MAX_VALUE);
    out.writeShort(Short.MIN_VALUE);
    out.writeUTF("utf");
    out.writeVInt(67L);
    out.writeUnsignedVInt(88L);
    out.writeBytes("abcdefghi");
    buffer=out.buffer();
  }
   CRC32 crc=new CRC32();
  FBUtilities.updateChecksum(crc,buffer);
  File file=File.createTempFile("testReadMethods","1");
  file.deleteOnExit();
  try (SequentialWriter writer=SequentialWriter.open(file)){
    writer.write(buffer);
    writer.writeInt((int)crc.getValue());
    writer.finish();
  }
   assertTrue(file.exists());
  assertEquals(buffer.remaining() + 4,file.length());
  try (ChecksummedDataInput reader=ChecksummedDataInput.open(file)){
    reader.limit(buffer.remaining() + 4);
    assertEquals(127,reader.read());
    byte[] bytes=new byte[b.length];
    reader.readFully(bytes);
    assertTrue(Arrays.equals(bytes,b));
    assertEquals(false,reader.readBoolean());
    assertEquals(10,reader.readByte());
    assertEquals('t',reader.readChar());
    assertEquals(3.3,reader.readDouble());
    assertEquals(2.2f,reader.readFloat());
    assertEquals(42,reader.readInt());
    assertEquals(Long.MAX_VALUE,reader.readLong());
    assertEquals(Short.MIN_VALUE,reader.readShort());
    assertEquals("utf",reader.readUTF());
    assertEquals(67L,reader.readVInt());
    assertEquals(88L,reader.readUnsignedVInt());
    assertEquals("abcdefghi",new String(ByteBufferUtil.read(reader,9).array(),StandardCharsets.UTF_8));
    assertTrue(reader.checkCrc());
    assertTrue(reader.isEOF());
    reader.checkLimit(0);
  }
 }
