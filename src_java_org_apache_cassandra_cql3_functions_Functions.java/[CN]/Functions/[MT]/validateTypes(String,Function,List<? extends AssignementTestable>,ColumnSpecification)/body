{
  if (!receiver.type.isValueCompatibleWith(fun.returnType()))   throw new InvalidRequestException(String.format("Type error: cannot assign result of function %s (type %s) to %s (type %s)",fun.name(),fun.returnType().asCQL3Type(),receiver,receiver.type.asCQL3Type()));
  if (providedArgs.size() != fun.argsType().size())   throw new InvalidRequestException(String.format("Invalid number of arguments in call to function %s: %d required but %d provided",fun.name(),fun.argsType().size(),providedArgs.size()));
  for (int i=0; i < providedArgs.size(); i++) {
    AssignementTestable provided=providedArgs.get(i);
    if (provided == null)     continue;
    ColumnSpecification expected=makeArgSpec(receiver,fun,i);
    if (!provided.isAssignableTo(keyspace,expected))     throw new InvalidRequestException(String.format("Type error: %s cannot be passed as argument %d of function %s of type %s",provided,i,fun.name(),expected.type.asCQL3Type()));
  }
}
