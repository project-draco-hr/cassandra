{
  QueryProcessor.validateKey(key);
  RowMutation rm=new RowMutation(cfDef.cfm.ksName,key);
  ColumnFamily cf=rm.addOrGet(columnFamily());
  if (columns.isEmpty() && builder.componentCount() == 0) {
    cf.delete(new DeletionInfo(params.timestamp,params.localDeletionTime));
  }
 else {
    if (isRange) {
      ByteBuffer start=builder.copy().build();
      ByteBuffer end=builder.buildAsEndOfRange();
      QueryProcessor.validateColumnName(start);
      cf.addAtom(params.makeRangeTombstone(start,end));
    }
 else {
      if (cfDef.isCompact) {
        ByteBuffer columnName=builder.build();
        QueryProcessor.validateColumnName(columnName);
        cf.addColumn(params.makeTombstone(columnName));
      }
 else {
        Iterator<Pair<CFDefinition.Name,Term>> iter=toRemove.iterator();
        while (iter.hasNext()) {
          Pair<CFDefinition.Name,Term> p=iter.next();
          CFDefinition.Name column=p.left;
          if (column.type.isCollection()) {
            CollectionType validator=(CollectionType)column.type;
            Term keySelected=p.right;
            if (keySelected == null) {
              ByteBuffer start=builder.copy().add(column.name.key).build();
              QueryProcessor.validateColumnName(start);
              ColumnNameBuilder b=iter.hasNext() ? builder.copy() : builder;
              ByteBuffer end=b.add(column.name.key).buildAsEndOfRange();
              cf.addAtom(params.makeRangeTombstone(start,end));
            }
 else {
              builder.add(column.name.key);
              List<Term> args=Collections.singletonList(keySelected);
              Operation op;
switch (validator.kind) {
case LIST:
                op=ListOperation.DiscardKey(args);
              break;
case SET:
            op=SetOperation.Discard(args);
          break;
case MAP:
        op=MapOperation.DiscardKey(keySelected);
      break;
default :
    throw new InvalidRequestException("Unknown collection type: " + validator.kind);
}
op.execute(cf,builder,validator,params,group == null ? null : group.getCollection(column.name.key));
}
}
 else {
ColumnNameBuilder b=iter.hasNext() ? builder.copy() : builder;
ByteBuffer columnName=b.add(column.name.key).build();
QueryProcessor.validateColumnName(columnName);
cf.addColumn(params.makeTombstone(columnName));
}
}
}
}
}
return rm;
}
