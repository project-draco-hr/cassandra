{
  List<Operation> regularDeletions=getRegularOperations();
  List<Operation> staticDeletions=getStaticOperations();
  if (regularDeletions.isEmpty() && staticDeletions.isEmpty()) {
    if (cbuilder.count() == 0) {
      update.addPartitionDeletion(params.deletionTime());
    }
 else     if (cbuilder.remainingCount() == 0) {
      params.newRow(cbuilder.build());
      params.addRowDeletion();
      update.add(params.buildRow());
    }
 else {
      update.add(params.makeRangeTombstone(cbuilder));
    }
  }
 else {
    if (!regularDeletions.isEmpty()) {
      if (cbuilder.remainingCount() > 0)       throw new InvalidRequestException(String.format("Primary key column '%s' must be specified in order to delete column '%s'",getFirstEmptyKey().name,regularDeletions.get(0).column.name));
      params.newRow(cbuilder.build());
      for (      Operation op : regularDeletions)       op.execute(update.partitionKey(),params);
      update.add(params.buildRow());
    }
    if (!staticDeletions.isEmpty()) {
      params.newRow(Clustering.STATIC_CLUSTERING);
      for (      Operation op : staticDeletions)       op.execute(update.partitionKey(),params);
      update.add(params.buildRow());
    }
  }
  params.validateIndexedColumns(update);
}
