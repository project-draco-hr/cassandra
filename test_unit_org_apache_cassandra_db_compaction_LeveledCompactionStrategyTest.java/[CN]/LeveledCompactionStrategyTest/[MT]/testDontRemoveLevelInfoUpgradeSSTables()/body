{
  byte[] b=new byte[100 * 1024];
  new Random().nextBytes(b);
  ByteBuffer value=ByteBuffer.wrap(b);
  int rows=20;
  int columns=10;
  for (int r=0; r < rows; r++) {
    DecoratedKey key=Util.dk(String.valueOf(r));
    Mutation rm=new Mutation(ksname,key.getKey());
    for (int c=0; c < columns; c++) {
      rm.add(cfname,Util.cellname("column" + c),value,0);
    }
    rm.apply();
    cfs.forceBlockingFlush();
  }
  waitForLeveling(cfs);
  cfs.forceBlockingFlush();
  LeveledCompactionStrategy strategy=(LeveledCompactionStrategy)((WrappingCompactionStrategy)cfs.getCompactionStrategy()).getWrappedStrategies().get(1);
  assertTrue(strategy.getAllLevelSize()[1] > 0);
  cfs.disableAutoCompaction();
  cfs.sstablesRewrite(false);
  assertTrue(strategy.getAllLevelSize()[1] > 0);
}
