{
  String ksname="Keyspace1";
  String cfname="StandardLeveled";
  Table table=Table.open(ksname);
  ColumnFamilyStore store=table.getColumnFamilyStore(cfname);
  ByteBuffer value=ByteBuffer.wrap(new byte[100 * 1024]);
  int rows=20;
  int columns=10;
  for (int r=0; r < rows; r++) {
    DecoratedKey key=Util.dk(String.valueOf(r));
    RowMutation rm=new RowMutation(ksname,key.key);
    for (int c=0; c < columns; c++) {
      rm.add(cfname,ByteBufferUtil.bytes("column" + c),value,0);
    }
    rm.apply();
    store.forceBlockingFlush();
  }
  store.disableAutoCompaction();
  LeveledCompactionStrategy strat=(LeveledCompactionStrategy)store.getCompactionStrategy();
  while (strat.getLevelSize(0) > 1) {
    store.forceMajorCompaction();
    Thread.sleep(200);
  }
  Set<SSTableReader> changedSSTables=new HashSet<SSTableReader>();
  Collection<SSTableReader> sstables=store.getDataTracker().getUncompactingSSTables();
  store.getDataTracker().markCompacting(sstables);
  for (  SSTableReader s : sstables) {
    assertTrue(s.getSSTableLevel() != 6);
    strat.manifest.remove(s);
    LeveledManifest.mutateLevel(s.getSSTableMetadata(),s.descriptor,s.descriptor.filenameFor(Component.STATS),6);
    s.reloadSSTableMetadata();
    changedSSTables.add(s);
    strat.manifest.add(s);
  }
  for (  SSTableReader s : table.getColumnFamilyStore(cfname).getSSTables()) {
    if (changedSSTables.contains(s))     assertTrue(s.getSSTableLevel() == 6);
  }
  int[] levels=strat.manifest.getAllLevelSize();
  assertEquals(changedSSTables.size(),levels[6]);
}
