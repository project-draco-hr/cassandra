{
  byte[] b=new byte[100 * 1024];
  new Random().nextBytes(b);
  ByteBuffer value=ByteBuffer.wrap(b);
  int rows=40;
  int columns=20;
  for (int r=0; r < rows; r++) {
    DecoratedKey key=Util.dk(String.valueOf(r));
    Mutation rm=new Mutation(KEYSPACE1,key.getKey());
    for (int c=0; c < columns; c++) {
      rm.add(CF_STANDARDDLEVELED,Util.cellname("column" + c),value,0);
    }
    rm.applyUnsafe();
    cfs.forceBlockingFlush();
  }
  waitForLeveling(cfs);
  cfs.disableAutoCompaction();
  while (CompactionManager.instance.isCompacting(Arrays.asList(cfs)))   Thread.sleep(100);
  WrappingCompactionStrategy strategy=(WrappingCompactionStrategy)cfs.getCompactionStrategy();
  List<AbstractCompactionStrategy> strategies=strategy.getWrappedStrategies();
  LeveledCompactionStrategy repaired=(LeveledCompactionStrategy)strategies.get(0);
  LeveledCompactionStrategy unrepaired=(LeveledCompactionStrategy)strategies.get(1);
  assertEquals(0,repaired.manifest.getLevelCount());
  assertEquals(2,unrepaired.manifest.getLevelCount());
  assertTrue(strategy.getSSTableCountPerLevel()[1] > 0);
  assertTrue(strategy.getSSTableCountPerLevel()[2] > 0);
  for (  SSTableReader sstable : cfs.getSSTables())   assertFalse(sstable.isRepaired());
  int sstableCount=0;
  for (  List<SSTableReader> level : unrepaired.manifest.generations)   sstableCount+=level.size();
  assertEquals(sstableCount,cfs.getSSTables().size());
  SSTableReader sstable1=unrepaired.manifest.generations[2].get(0);
  SSTableReader sstable2=unrepaired.manifest.generations[1].get(0);
  sstable1.descriptor.getMetadataSerializer().mutateRepairedAt(sstable1.descriptor,System.currentTimeMillis());
  sstable1.reloadSSTableMetadata();
  assertTrue(sstable1.isRepaired());
  strategy.handleNotification(new SSTableRepairStatusChanged(Arrays.asList(sstable1)),this);
  int repairedSSTableCount=0;
  for (  List<SSTableReader> level : repaired.manifest.generations)   repairedSSTableCount+=level.size();
  assertEquals(1,repairedSSTableCount);
  assertTrue(repaired.manifest.generations[2].contains(sstable1));
  assertFalse(unrepaired.manifest.generations[2].contains(sstable1));
  unrepaired.removeSSTable(sstable2);
  strategy.handleNotification(new SSTableAddedNotification(sstable2),this);
  assertTrue(unrepaired.manifest.getLevel(1).contains(sstable2));
  assertFalse(repaired.manifest.getLevel(1).contains(sstable2));
}
