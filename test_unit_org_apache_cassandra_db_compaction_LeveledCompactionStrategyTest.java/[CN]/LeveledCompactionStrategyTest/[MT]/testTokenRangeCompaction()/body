{
  cfs.truncateBlocking();
  CompactionManager.instance.disableAutoCompaction();
  ByteBuffer value=ByteBuffer.wrap(new byte[100 * 1024]);
  DecoratedKey key1=Util.dk(String.valueOf(1));
  DecoratedKey key2=Util.dk(String.valueOf(2));
  List<DecoratedKey> keys=new ArrayList<>(Arrays.asList(key1,key2));
  int numIterations=10;
  int columns=2;
  for (int i=0; i < numIterations; i++) {
    for (    DecoratedKey key : keys) {
      UpdateBuilder update=UpdateBuilder.create(cfs.metadata,key);
      for (int c=0; c < columns; c++)       update.newRow("column" + c).add("val",value);
      update.applyUnsafe();
    }
    cfs.forceBlockingFlush();
  }
  for (int i=0; i < numIterations; i++) {
    for (    DecoratedKey key : keys) {
      UpdateBuilder update=UpdateBuilder.create(cfs.metadata,key);
      for (int c=0; c < columns; c++)       update.newRow("column" + c).add("val",value);
      update.applyUnsafe();
      cfs.forceBlockingFlush();
    }
  }
  assertEquals(30,cfs.getLiveSSTables().size());
  Range<Token> tokenRange=new Range<>(key2.getToken(),key2.getToken());
  Collection<Range<Token>> tokenRanges=new ArrayList<>(Arrays.asList(tokenRange));
  cfs.forceCompactionForTokenRange(tokenRanges);
  while (CompactionManager.instance.isCompacting(Arrays.asList(cfs))) {
    Thread.sleep(100);
  }
  assertEquals(11,cfs.getLiveSSTables().size());
  Range<Token> tokenRange2=new Range<>(key1.getToken(),key1.getToken());
  Collection<Range<Token>> tokenRanges2=new ArrayList<>(Arrays.asList(tokenRange2));
  cfs.forceCompactionForTokenRange(tokenRanges2);
  while (CompactionManager.instance.isCompacting(Arrays.asList(cfs))) {
    Thread.sleep(100);
  }
  assertEquals(1,cfs.getLiveSSTables().size());
}
