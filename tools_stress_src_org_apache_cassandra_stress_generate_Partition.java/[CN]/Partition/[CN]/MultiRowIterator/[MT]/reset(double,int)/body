{
  generator.clusteringComponents.get(0).setSeed(idseed);
  int firstComponentCount=(int)generator.clusteringComponents.get(0).clusteringDistribution.next();
  this.expectedRowCount=firstComponentCount * generator.clusteringChildAverages[0];
  if (Double.isNaN(useChance))   useChance=Math.max(0d,Math.min(1d,targetCount / expectedRowCount));
  for (  Queue<?> q : clusteringComponents)   q.clear();
  this.useChance=useChance;
  clusteringSeeds[0]=idseed;
  clusteringComponents[0].add(this);
  fill(clusteringComponents[0],firstComponentCount,generator.clusteringComponents.get(0));
  advance(0,1f);
}
