{
  indexComparator=new Comparator<IndexInfo>(){
    public int compare(    IndexInfo o1,    IndexInfo o2){
      return AbstractType.this.compare(o1.lastName,o2.lastName);
    }
  }
;
  indexReverseComparator=new Comparator<IndexInfo>(){
    public int compare(    IndexInfo o1,    IndexInfo o2){
      return AbstractType.this.compare(o1.firstName,o2.firstName);
    }
  }
;
  columnComparator=new Comparator<IColumn>(){
    public int compare(    IColumn c1,    IColumn c2){
      return AbstractType.this.compare(c1.name(),c2.name());
    }
  }
;
  columnReverseComparator=new Comparator<IColumn>(){
    public int compare(    IColumn c1,    IColumn c2){
      return AbstractType.this.compare(c2.name(),c1.name());
    }
  }
;
  onDiskAtomComparator=new Comparator<OnDiskAtom>(){
    public int compare(    OnDiskAtom c1,    OnDiskAtom c2){
      int comp=AbstractType.this.compare(c1.name(),c2.name());
      if (comp != 0)       return comp;
      if (c1 instanceof RangeTombstone) {
        if (c2 instanceof RangeTombstone) {
          RangeTombstone t1=(RangeTombstone)c1;
          RangeTombstone t2=(RangeTombstone)c2;
          int comp2=AbstractType.this.compare(t1.max,t1.max);
          if (comp2 == 0)           return t1.data.compareTo(t2.data);
 else           return comp2;
        }
 else {
          return -1;
        }
      }
 else       if (c2 instanceof RangeTombstone) {
        return 1;
      }
 else {
        return 0;
      }
    }
  }
;
  reverseComparator=new Comparator<ByteBuffer>(){
    public int compare(    ByteBuffer o1,    ByteBuffer o2){
      if (o1.remaining() == 0) {
        return o2.remaining() == 0 ? 0 : -1;
      }
      if (o2.remaining() == 0) {
        return 1;
      }
      return AbstractType.this.compare(o2,o1);
    }
  }
;
}
