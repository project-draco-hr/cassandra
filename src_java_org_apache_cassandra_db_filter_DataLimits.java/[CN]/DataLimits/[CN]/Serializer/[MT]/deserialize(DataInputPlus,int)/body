{
  Kind kind=Kind.values()[in.readUnsignedByte()];
switch (kind) {
case CQL_LIMIT:
case CQL_PAGING_LIMIT:
    int rowLimit=(int)in.readVInt();
  int perPartitionLimit=(int)in.readVInt();
boolean isDistinct=in.readBoolean();
if (kind == Kind.CQL_LIMIT) return new CQLLimits(rowLimit,perPartitionLimit,isDistinct);
ByteBuffer lastKey=ByteBufferUtil.readWithVIntLength(in);
int lastRemaining=(int)in.readVInt();
return new CQLPagingLimits(rowLimit,perPartitionLimit,isDistinct,lastKey,lastRemaining);
case THRIFT_LIMIT:
case SUPER_COLUMN_COUNTING_LIMIT:
int partitionLimit=(int)in.readVInt();
int cellPerPartitionLimit=(int)in.readVInt();
return kind == Kind.THRIFT_LIMIT ? new ThriftLimits(partitionLimit,cellPerPartitionLimit) : new SuperColumnCountingLimits(partitionLimit,cellPerPartitionLimit);
}
throw new AssertionError();
}
