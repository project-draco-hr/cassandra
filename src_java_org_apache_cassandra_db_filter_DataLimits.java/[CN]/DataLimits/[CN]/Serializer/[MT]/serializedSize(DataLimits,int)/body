{
  long size=TypeSizes.sizeof((byte)limits.kind().ordinal());
switch (limits.kind()) {
case CQL_LIMIT:
case CQL_PAGING_LIMIT:
    CQLLimits cqlLimits=(CQLLimits)limits;
  size+=TypeSizes.sizeofVInt(cqlLimits.rowLimit);
size+=TypeSizes.sizeofVInt(cqlLimits.perPartitionLimit);
size+=TypeSizes.sizeof(cqlLimits.isDistinct);
if (limits.kind() == Kind.CQL_PAGING_LIMIT) {
CQLPagingLimits pagingLimits=(CQLPagingLimits)cqlLimits;
size+=ByteBufferUtil.serializedSizeWithVIntLength(pagingLimits.lastReturnedKey);
size+=TypeSizes.sizeofVInt(pagingLimits.lastReturnedKeyRemaining);
}
break;
case THRIFT_LIMIT:
case SUPER_COLUMN_COUNTING_LIMIT:
ThriftLimits thriftLimits=(ThriftLimits)limits;
size+=TypeSizes.sizeofVInt(thriftLimits.partitionLimit);
size+=TypeSizes.sizeofVInt(thriftLimits.cellPerPartitionLimit);
break;
default :
throw new AssertionError();
}
return size;
}
