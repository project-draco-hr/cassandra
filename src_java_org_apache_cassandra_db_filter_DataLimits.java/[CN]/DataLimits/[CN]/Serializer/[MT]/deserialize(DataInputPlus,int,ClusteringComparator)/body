{
  Kind kind=Kind.values()[in.readUnsignedByte()];
switch (kind) {
case CQL_LIMIT:
case CQL_PAGING_LIMIT:
{
      int rowLimit=(int)in.readUnsignedVInt();
      int perPartitionLimit=(int)in.readUnsignedVInt();
      boolean isDistinct=in.readBoolean();
      if (kind == Kind.CQL_LIMIT)       return cqlLimits(rowLimit,perPartitionLimit,isDistinct);
      ByteBuffer lastKey=ByteBufferUtil.readWithVIntLength(in);
      int lastRemaining=(int)in.readUnsignedVInt();
      return new CQLPagingLimits(rowLimit,perPartitionLimit,isDistinct,lastKey,lastRemaining);
    }
case CQL_GROUP_BY_LIMIT:
case CQL_GROUP_BY_PAGING_LIMIT:
{
    int groupLimit=(int)in.readUnsignedVInt();
    int groupPerPartitionLimit=(int)in.readUnsignedVInt();
    int rowLimit=(int)in.readUnsignedVInt();
    AggregationSpecification groupBySpec=AggregationSpecification.serializer.deserialize(in,version,comparator);
    GroupingState state=GroupingState.serializer.deserialize(in,version,comparator);
    if (kind == Kind.CQL_GROUP_BY_LIMIT)     return new CQLGroupByLimits(groupLimit,groupPerPartitionLimit,rowLimit,groupBySpec,state);
    ByteBuffer lastKey=ByteBufferUtil.readWithVIntLength(in);
    int lastRemaining=(int)in.readUnsignedVInt();
    return new CQLGroupByPagingLimits(groupLimit,groupPerPartitionLimit,rowLimit,groupBySpec,state,lastKey,lastRemaining);
  }
case THRIFT_LIMIT:
case SUPER_COLUMN_COUNTING_LIMIT:
int partitionLimit=(int)in.readUnsignedVInt();
int cellPerPartitionLimit=(int)in.readUnsignedVInt();
return kind == Kind.THRIFT_LIMIT ? new ThriftLimits(partitionLimit,cellPerPartitionLimit) : new SuperColumnCountingLimits(partitionLimit,cellPerPartitionLimit);
}
throw new AssertionError();
}
