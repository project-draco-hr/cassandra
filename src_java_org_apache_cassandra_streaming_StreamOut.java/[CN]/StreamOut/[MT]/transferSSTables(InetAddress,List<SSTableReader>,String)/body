{
  PendingFile[] pendingFiles=new PendingFile[SSTable.FILES_ON_DISK * sstables.size()];
  int i=0;
  for (  SSTableReader sstable : sstables) {
    for (    String component : sstable.getAllComponents()) {
      SSTable.Descriptor desc=sstable.getDescriptor();
      long filelen=new File(desc.filenameFor(component)).length();
      pendingFiles[i++]=new PendingFile(desc,component,filelen);
    }
  }
  if (logger.isDebugEnabled())   logger.debug("Stream context metadata " + StringUtils.join(pendingFiles,", " + " " + sstables.size() + " sstables."));
  StreamOutManager.get(target).addFilesToStream(pendingFiles);
  StreamInitiateMessage biMessage=new StreamInitiateMessage(pendingFiles);
  Message message=StreamInitiateMessage.makeStreamInitiateMessage(biMessage);
  message.addHeader(StreamOut.TABLE_NAME,table.getBytes());
  if (logger.isDebugEnabled())   logger.debug("Sending a stream initiate message to " + target + " ...");
  MessagingService.instance.sendOneWay(message,target);
  if (pendingFiles.length > 0) {
    logger.info("Waiting for transfer to " + target + " to complete");
    StreamOutManager.get(target).waitForStreamCompletion();
    logger.info("Done with transfer to " + target);
  }
}
