{
  Keyspace keyspace=Keyspace.open(KEYSPACE);
  ColumnFamilyStore cfs=keyspace.getColumnFamilyStore(CF);
  truncate(cfs);
  File dir=cfs.getDirectories().getDirectoryForNewSSTables();
  LifecycleTransaction txn=LifecycleTransaction.offline(OperationType.STREAM);
  SSTableWriter writer1=getWriter(cfs,dir,txn);
  SSTableWriter writer2=getWriter(cfs,dir,txn);
  try {
    for (int i=0; i < 10000; i++) {
      UpdateBuilder builder=UpdateBuilder.create(cfs.metadata,random(i,10)).withTimestamp(1);
      for (int j=0; j < 100; j++)       builder.newRow("" + j).add("val",ByteBuffer.allocate(1000));
      writer1.append(builder.build().unfilteredIterator());
    }
    assertFileCounts(dir.list());
    for (int i=10000; i < 20000; i++) {
      UpdateBuilder builder=UpdateBuilder.create(cfs.metadata,random(i,10)).withTimestamp(1);
      for (int j=0; j < 100; j++)       builder.newRow("" + j).add("val",ByteBuffer.allocate(1000));
      writer2.append(builder.build().unfilteredIterator());
    }
    SSTableReader sstable=writer1.finish(true);
    txn.update(sstable,false);
    assertFileCounts(dir.list());
    int datafiles=assertFileCounts(dir.list());
    assertEquals(datafiles,2);
    if (!FBUtilities.isWindows) {
      LifecycleTransaction.waitForDeletions();
      assertFileCounts(dir.list());
    }
    txn.abort();
    LifecycleTransaction.waitForDeletions();
    datafiles=assertFileCounts(dir.list());
    assertEquals(datafiles,0);
    validateCFS(cfs);
  }
  finally {
    writer1.close();
    writer2.close();
  }
}
