{
  RowMutation rm;
  rm=new RowMutation("Keyspace1",ByteBufferUtil.bytes("k1"));
  rm.add(new QueryPath("Indexed1",null,ByteBufferUtil.bytes("birthdate")),FBUtilities.toByteBuffer(1L),0);
  rm.apply();
  ColumnFamily cf=ColumnFamily.create("Keyspace1","Indexed1");
  cf.addColumn(new Column(ByteBufferUtil.bytes("birthdate"),FBUtilities.toByteBuffer(1L),0));
  cf.addColumn(new Column(ByteBufferUtil.bytes("anydate"),FBUtilities.toByteBuffer(1L),0));
  Map<ByteBuffer,ByteBuffer> entries=new HashMap<ByteBuffer,ByteBuffer>();
  DataOutputBuffer buffer=new DataOutputBuffer();
  ColumnFamily.serializer().serializeWithIndexes(cf,buffer);
  entries.put(ByteBufferUtil.bytes("k2"),ByteBuffer.wrap(Arrays.copyOf(buffer.getData(),buffer.getLength())));
  cf.clear();
  cf.addColumn(new Column(ByteBufferUtil.bytes("anydate"),FBUtilities.toByteBuffer(1L),0));
  buffer=new DataOutputBuffer();
  ColumnFamily.serializer().serializeWithIndexes(cf,buffer);
  entries.put(ByteBufferUtil.bytes("k3"),ByteBuffer.wrap(Arrays.copyOf(buffer.getData(),buffer.getLength())));
  SSTableReader orig=SSTableUtils.writeRawSSTable("Keyspace1","Indexed1",entries);
  FileUtils.deleteWithConfirm(orig.descriptor.filenameFor(Component.PRIMARY_INDEX));
  FileUtils.deleteWithConfirm(orig.descriptor.filenameFor(Component.FILTER));
  SSTableReader sstr=CompactionManager.instance.submitSSTableBuild(orig.descriptor).get();
  ColumnFamilyStore cfs=Table.open("Keyspace1").getColumnFamilyStore("Indexed1");
  cfs.addSSTable(sstr);
  cfs.buildSecondaryIndexes(cfs.getSSTables(),cfs.getIndexedColumns());
  IndexExpression expr=new IndexExpression(ByteBufferUtil.bytes("birthdate"),IndexOperator.EQ,FBUtilities.toByteBuffer(1L));
  IndexClause clause=new IndexClause(Arrays.asList(expr),FBUtilities.EMPTY_BYTE_BUFFER,100);
  IFilter filter=new IdentityQueryFilter();
  IPartitioner p=StorageService.getPartitioner();
  Range range=new Range(p.getMinimumToken(),p.getMinimumToken());
  List<Row> rows=cfs.scan(clause,range,filter);
  assertEquals("IndexExpression should return two rows on recoverAndOpen",2,rows.size());
  assertTrue("First result should be 'k1'",ByteBufferUtil.bytes("k1").equals(rows.get(0).key.key));
}
