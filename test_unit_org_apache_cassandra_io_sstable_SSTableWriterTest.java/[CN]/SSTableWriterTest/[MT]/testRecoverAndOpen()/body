{
  RowMutation rm;
  rm=new RowMutation("Keyspace1","k1".getBytes());
  rm.add(new QueryPath("Indexed1",null,"birthdate".getBytes("UTF8")),FBUtilities.toByteArray(1L),new TimestampClock(0));
  rm.apply();
  ColumnFamily cf=ColumnFamily.create("Keyspace1","Indexed1");
  cf.addColumn(new Column("birthdate".getBytes(),FBUtilities.toByteArray(1L),new TimestampClock(0)));
  cf.addColumn(new Column("anydate".getBytes(),FBUtilities.toByteArray(1L),new TimestampClock(0)));
  Map<byte[],byte[]> entries=new HashMap<byte[],byte[]>();
  DataOutputBuffer buffer=new DataOutputBuffer();
  ColumnFamily.serializer().serializeWithIndexes(cf,buffer);
  entries.put("k2".getBytes(),Arrays.copyOf(buffer.getData(),buffer.getLength()));
  cf.clear();
  cf.addColumn(new Column("anydate".getBytes(),FBUtilities.toByteArray(1L),new TimestampClock(0)));
  buffer=new DataOutputBuffer();
  ColumnFamily.serializer().serializeWithIndexes(cf,buffer);
  entries.put("k3".getBytes(),Arrays.copyOf(buffer.getData(),buffer.getLength()));
  SSTableReader orig=SSTableUtils.writeRawSSTable("Keyspace1","Indexed1",entries);
  new File(orig.indexFilename()).delete();
  new File(orig.filterFilename()).delete();
  SSTableReader sstr=SSTableWriter.recoverAndOpen(orig.desc);
  ColumnFamilyStore cfs=Table.open("Keyspace1").getColumnFamilyStore("Indexed1");
  cfs.addSSTable(sstr);
  IndexExpression expr=new IndexExpression("birthdate".getBytes("UTF8"),IndexOperator.EQ,FBUtilities.toByteArray(1L));
  IndexClause clause=new IndexClause(Arrays.asList(expr),"".getBytes(),100);
  IFilter filter=new IdentityQueryFilter();
  IPartitioner p=StorageService.getPartitioner();
  Range range=new Range(p.getMinimumToken(),p.getMinimumToken());
  List<Row> rows=cfs.scan(clause,range,filter);
  assertEquals("IndexExpression should return two rows on recoverAndOpen",2,rows.size());
  assertTrue("First result should be 'k1'",Arrays.equals("k1".getBytes(),rows.get(0).key.key));
}
