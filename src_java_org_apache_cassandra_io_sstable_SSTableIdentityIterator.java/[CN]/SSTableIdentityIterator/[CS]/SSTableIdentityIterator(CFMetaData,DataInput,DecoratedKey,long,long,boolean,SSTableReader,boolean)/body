{
  this.input=input;
  this.inputWithTracker=new BytesReadTracker(input);
  this.key=key;
  this.dataStart=dataStart;
  this.dataSize=dataSize;
  this.expireBefore=(int)(System.currentTimeMillis() / 1000);
  this.fromRemote=fromRemote;
  this.validateColumns=checkData;
  finishedAt=dataStart + dataSize;
  try {
    if (input instanceof BufferedRandomAccessFile) {
      BufferedRandomAccessFile file=(BufferedRandomAccessFile)input;
      file.seek(this.dataStart);
      if (checkData) {
        try {
          IndexHelper.defreezeBloomFilter(file,dataSize,sstable.descriptor.usesOldBloomFilter);
        }
 catch (        Exception e) {
          if (e instanceof EOFException)           throw (EOFException)e;
          logger.debug("Invalid bloom filter in {}; will rebuild it",sstable);
        }
        try {
          IndexHelper.deserializeIndex(file);
        }
 catch (        Exception e) {
          logger.debug("Invalid row summary in {}; will rebuild it",sstable);
        }
        file.seek(this.dataStart);
      }
    }
    IndexHelper.skipBloomFilter(inputWithTracker);
    IndexHelper.skipIndex(inputWithTracker);
    columnFamily=ColumnFamily.create(metadata);
    ColumnFamily.serializer().deserializeFromSSTableNoColumns(columnFamily,inputWithTracker);
    columnCount=inputWithTracker.readInt();
    if (input instanceof BufferedRandomAccessFile) {
      BufferedRandomAccessFile file=(BufferedRandomAccessFile)input;
      columnPosition=file.getFilePointer();
    }
  }
 catch (  IOException e) {
    throw new IOError(e);
  }
}
