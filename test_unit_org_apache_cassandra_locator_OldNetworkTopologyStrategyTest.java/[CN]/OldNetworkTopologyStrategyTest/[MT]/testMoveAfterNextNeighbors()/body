{
  int movingNodeIdx=1;
  int movingNodeIdxAfterMove=2;
  BigIntegerToken newToken=new BigIntegerToken("52535295865117307932921825928971026432");
  BigIntegerToken[] tokens=initTokens();
  BigIntegerToken[] tokensAfterMove=initTokensAfterMove(tokens,movingNodeIdx,newToken);
  Pair<Set<Range<Token>>,Set<Range<Token>>> ranges=calculateStreamAndFetchRanges(tokens,tokensAfterMove,movingNodeIdx);
  Range[] toStream=ranges.left.toArray(new Range[0]);
  Range[] toFetch=ranges.right.toArray(new Range[0]);
  Arrays.sort(toStream);
  Arrays.sort(toFetch);
  Range[] toStreamExpected=new Range[1];
  toStreamExpected[0]=new Range(getToken(movingNodeIdx - 2,tokens),getToken(movingNodeIdx - 1,tokens));
  Arrays.sort(toStreamExpected);
  Range[] toFetchExpected=new Range[2];
  toFetchExpected[0]=new Range(getToken(movingNodeIdxAfterMove - 1,tokens),getToken(movingNodeIdxAfterMove,tokens));
  toFetchExpected[1]=new Range(getToken(movingNodeIdxAfterMove,tokensAfterMove),getToken(movingNodeIdx,tokensAfterMove));
  Arrays.sort(toFetchExpected);
  assertEquals(Arrays.equals(toStream,toStreamExpected),true);
  assertEquals(Arrays.equals(toFetch,toFetchExpected),true);
}
