{
  int movingNodeIdx=1;
  int movingNodeIdxAfterMove=7;
  BigIntegerToken newToken=new BigIntegerToken("158873535527910577765226390751398592512");
  BigIntegerToken[] tokens=initTokens();
  BigIntegerToken[] tokensAfterMove=initTokensAfterMove(tokens,movingNodeIdx,newToken);
  Pair<Set<Range<Token>>,Set<Range<Token>>> ranges=calculateStreamAndFetchRanges(tokens,tokensAfterMove,movingNodeIdx);
  Range[] toStream=ranges.left.toArray(new Range[0]);
  Range[] toFetch=ranges.right.toArray(new Range[0]);
  Arrays.sort(toStream);
  Arrays.sort(toFetch);
  Range[] toStreamExpected=new Range[2];
  toStreamExpected[0]=new Range(getToken(movingNodeIdx,tokensAfterMove),getToken(movingNodeIdx - 1,tokensAfterMove));
  toStreamExpected[1]=new Range(getToken(movingNodeIdx - 1,tokens),getToken(movingNodeIdx,tokens));
  Arrays.sort(toStreamExpected);
  Range[] toFetchExpected=new Range[1];
  toFetchExpected[0]=new Range(getToken(movingNodeIdxAfterMove - 1,tokens),getToken(movingNodeIdxAfterMove,tokens));
  Arrays.sort(toFetchExpected);
  System.out.println("toStream : " + Arrays.toString(toStream));
  System.out.println("toFetch : " + Arrays.toString(toFetch));
  System.out.println("toStreamExpected : " + Arrays.toString(toStreamExpected));
  System.out.println("toFetchExpected : " + Arrays.toString(toFetchExpected));
  assertEquals(Arrays.equals(toStream,toStreamExpected),true);
  assertEquals(Arrays.equals(toFetch,toFetchExpected),true);
}
