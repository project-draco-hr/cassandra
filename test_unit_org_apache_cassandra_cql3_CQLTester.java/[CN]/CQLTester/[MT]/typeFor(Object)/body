{
  if (value instanceof ByteBuffer || value instanceof TupleValue || value == null)   return BytesType.instance;
  if (value instanceof Integer)   return Int32Type.instance;
  if (value instanceof Long)   return LongType.instance;
  if (value instanceof Float)   return FloatType.instance;
  if (value instanceof Double)   return DoubleType.instance;
  if (value instanceof BigInteger)   return IntegerType.instance;
  if (value instanceof BigDecimal)   return DecimalType.instance;
  if (value instanceof String)   return UTF8Type.instance;
  if (value instanceof Boolean)   return BooleanType.instance;
  if (value instanceof List) {
    List l=(List)value;
    AbstractType elt=l.isEmpty() ? BytesType.instance : typeFor(l.get(0));
    return ListType.getInstance(elt,true);
  }
  if (value instanceof Set) {
    Set s=(Set)value;
    AbstractType elt=s.isEmpty() ? BytesType.instance : typeFor(s.iterator().next());
    return SetType.getInstance(elt,true);
  }
  if (value instanceof Map) {
    Map m=(Map)value;
    AbstractType keys, values;
    if (m.isEmpty()) {
      keys=BytesType.instance;
      values=BytesType.instance;
    }
 else {
      Map.Entry entry=(Map.Entry)m.entrySet().iterator().next();
      keys=typeFor(entry.getKey());
      values=typeFor(entry.getValue());
    }
    return MapType.getInstance(keys,values,true);
  }
  throw new IllegalArgumentException("Unsupported value type (value is " + value + ")");
}
