{
  if (result == null) {
    if (rows.length > 0)     Assert.fail(String.format("No rows returned by query but %d expected",rows.length));
    return;
  }
  ColumnDefinitions meta=result.getColumnDefinitions();
  Iterator<Row> iter=result.iterator();
  int i=0;
  while (iter.hasNext() && i < rows.length) {
    Object[] expected=rows[i];
    Row actual=iter.next();
    Assert.assertEquals(String.format("Invalid number of (expected) values provided for row %d (using protocol version %d)",i,protocolVersion),meta.size(),expected.length);
    for (int j=0; j < meta.size(); j++) {
      DataType type=meta.getType(j);
      ByteBuffer expectedByteValue=type.serialize(expected[j],ProtocolVersion.fromInt(protocolVersion));
      int expectedBytes=expectedByteValue.remaining();
      ByteBuffer actualValue=actual.getBytesUnsafe(meta.getName(j));
      int actualBytes=actualValue.remaining();
      if (!Objects.equal(expectedByteValue,actualValue))       Assert.fail(String.format("Invalid value for row %d column %d (%s of type %s), " + "expected <%s> (%d bytes) but got <%s> (%d bytes) " + "(using protocol version %d)",i,j,meta.getName(j),type,type.format(expected[j]),expectedBytes,type.format(type.deserialize(actualValue,ProtocolVersion.fromInt(protocolVersion))),actualBytes,protocolVersion));
    }
    i++;
  }
  if (iter.hasNext()) {
    while (iter.hasNext()) {
      iter.next();
      i++;
    }
    Assert.fail(String.format("Got less rows than expected. Expected %d but got %d (using protocol version %d).",rows.length,i,protocolVersion));
  }
  Assert.assertTrue(String.format("Got %s rows than expected. Expected %d but got %d (using protocol version %d)",rows.length > i ? "less" : "more",rows.length,i,protocolVersion),i == rows.length);
}
