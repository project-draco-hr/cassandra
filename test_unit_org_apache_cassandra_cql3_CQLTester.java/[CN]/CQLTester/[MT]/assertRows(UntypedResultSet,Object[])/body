{
  if (result == null) {
    if (rows.length > 0)     Assert.fail(String.format("No rows returned by query but %d expected",rows.length));
    return;
  }
  List<ColumnSpecification> meta=result.metadata();
  Iterator<UntypedResultSet.Row> iter=result.iterator();
  int i=0;
  while (iter.hasNext() && i < rows.length) {
    Object[] expected=rows[i];
    UntypedResultSet.Row actual=iter.next();
    Assert.assertEquals(String.format("Invalid number of (expected) values provided for row %d",i),expected == null ? 1 : expected.length,meta.size());
    for (int j=0; j < meta.size(); j++) {
      ColumnSpecification column=meta.get(j);
      ByteBuffer expectedByteValue=makeByteBuffer(expected == null ? null : expected[j],column.type);
      ByteBuffer actualValue=actual.getBytes(column.name.toString());
      if (!Objects.equal(expectedByteValue,actualValue)) {
        Object actualValueDecoded=actualValue == null ? null : column.type.getSerializer().deserialize(actualValue);
        if (!Objects.equal(expected[j],actualValueDecoded))         Assert.fail(String.format("Invalid value for row %d column %d (%s of type %s), expected <%s> but got <%s>",i,j,column.name,column.type.asCQL3Type(),formatValue(expectedByteValue,column.type),formatValue(actualValue,column.type)));
      }
    }
    i++;
  }
  if (iter.hasNext()) {
    while (iter.hasNext()) {
      UntypedResultSet.Row actual=iter.next();
      i++;
      StringBuilder str=new StringBuilder();
      for (int j=0; j < meta.size(); j++) {
        ColumnSpecification column=meta.get(j);
        ByteBuffer actualValue=actual.getBytes(column.name.toString());
        str.append(String.format("%s=%s ",column.name,formatValue(actualValue,column.type)));
      }
      logger.info("Extra row num {}: {}",i,str.toString());
    }
    Assert.fail(String.format("Got more rows than expected. Expected %d but got %d.",rows.length,i));
  }
  Assert.assertTrue(String.format("Got %s rows than expected. Expected %d but got %d",rows.length > i ? "less" : "more",rows.length,i),i == rows.length);
}
