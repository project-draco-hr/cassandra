{
  Token midpoint=ltree.partitioner().midpoint(active.left(),active.right());
  TreeRange left=new TreeRange(null,active.left(),midpoint,inc(active.depth),null);
  TreeRange right=new TreeRange(null,midpoint,active.right(),inc(active.depth),null);
  byte[] lhash;
  byte[] rhash;
  lhash=ltree.hash(left);
  rhash=rtree.hash(left);
  int ldiff=CONSISTENT;
  boolean lreso=lhash != null && rhash != null;
  if (lreso && !Arrays.equals(lhash,rhash))   ldiff=differenceHelper(ltree,rtree,diff,left);
 else   if (!lreso)   ldiff=FULLY_INCONSISTENT;
  lhash=ltree.hash(right);
  rhash=rtree.hash(right);
  int rdiff=CONSISTENT;
  boolean rreso=lhash != null && rhash != null;
  if (rreso && !Arrays.equals(lhash,rhash))   rdiff=differenceHelper(ltree,rtree,diff,right);
 else   if (!rreso)   rdiff=FULLY_INCONSISTENT;
  if (ldiff == FULLY_INCONSISTENT && rdiff == FULLY_INCONSISTENT) {
    return FULLY_INCONSISTENT;
  }
 else   if (ldiff == FULLY_INCONSISTENT) {
    diff.add(left);
    return PARTIALLY_INCONSISTENT;
  }
 else   if (rdiff == FULLY_INCONSISTENT) {
    diff.add(right);
    return PARTIALLY_INCONSISTENT;
  }
  return PARTIALLY_INCONSISTENT;
}
