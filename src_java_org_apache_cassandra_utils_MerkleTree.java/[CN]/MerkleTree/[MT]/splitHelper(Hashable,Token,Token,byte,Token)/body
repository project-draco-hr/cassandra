{
  if (depth >= hashdepth)   throw new StopRecursion.TooDeep();
  if (hashable instanceof Leaf) {
    Token midpoint=partitioner.midpoint(pleft,pright);
    if (midpoint.equals(pleft) || midpoint.equals(pright))     throw new StopRecursion.TooDeep();
    size++;
    return new Inner(midpoint,new Leaf(),new Leaf());
  }
  Inner node=(Inner)hashable;
  if (Range.contains(pleft,node.token,t))   node.lchild(splitHelper(node.lchild,pleft,node.token,inc(depth),t));
 else   node.rchild(splitHelper(node.rchild,node.token,pright,inc(depth),t));
  return node;
}
