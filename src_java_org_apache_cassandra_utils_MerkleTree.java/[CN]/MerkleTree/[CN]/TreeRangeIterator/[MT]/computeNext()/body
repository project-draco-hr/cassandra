{
  while (!tovisit.isEmpty()) {
    TreeRange active=tovisit.pop();
    if (active.hashable instanceof Leaf) {
      if (active.isWrapAround() && !tovisit.isEmpty())       tovisit.addLast(active);
      return active;
    }
    Inner node=(Inner)active.hashable;
    TreeRange left=new TreeRange(tree,active.left,node.token,inc(active.depth),node.lchild);
    TreeRange right=new TreeRange(tree,node.token,active.right,inc(active.depth),node.rchild);
    if (right.isWrapAround()) {
      tovisit.addLast(left);
      tovisit.addFirst(right);
    }
 else {
      tovisit.addFirst(right);
      tovisit.addFirst(left);
    }
  }
  return endOfData();
}
