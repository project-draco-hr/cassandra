{
  byte hashdepth=in.readByte();
  long maxsize=in.readLong();
  long size=in.readLong();
  IPartitioner partitioner;
  try {
    partitioner=FBUtilities.newPartitioner(in.readUTF());
  }
 catch (  ConfigurationException e) {
    throw new IOException(e);
  }
  Token left=Token.serializer.deserialize(in);
  Token right=Token.serializer.deserialize(in);
  Range<Token> fullRange=new Range<>(left,right);
  MerkleTree mt=new MerkleTree(partitioner,fullRange,hashdepth,maxsize);
  mt.size=size;
  mt.root=Hashable.serializer.deserialize(in,version);
  return mt;
}
