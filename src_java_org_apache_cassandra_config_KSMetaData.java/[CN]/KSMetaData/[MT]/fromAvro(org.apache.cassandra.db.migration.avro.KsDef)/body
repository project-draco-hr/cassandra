{
  Class<? extends AbstractReplicationStrategy> repStratClass;
  try {
    String strategyClassName=convertOldStrategyName(ks.strategy_class.toString());
    repStratClass=(Class<AbstractReplicationStrategy>)Class.forName(strategyClassName);
  }
 catch (  Exception ex) {
    throw new RuntimeException("Could not create ReplicationStrategy of type " + ks.strategy_class,ex);
  }
  Map<String,String> strategyOptions=new HashMap<String,String>();
  if (ks.strategy_options != null) {
    for (    Map.Entry<CharSequence,CharSequence> e : ks.strategy_options.entrySet()) {
      String name=e.getKey().toString();
      if (repStratClass == NetworkTopologyStrategy.class && name.trim().toLowerCase().equals("replication_factor"))       continue;
      strategyOptions.put(name,e.getValue().toString());
    }
  }
  maybeAddReplicationFactor(strategyOptions,ks.strategy_class.toString(),ks.replication_factor);
  int cfsz=ks.cf_defs.size();
  CFMetaData[] cfMetaData=new CFMetaData[cfsz];
  Iterator<org.apache.cassandra.db.migration.avro.CfDef> cfiter=ks.cf_defs.iterator();
  for (int i=0; i < cfsz; i++)   cfMetaData[i]=CFMetaData.fromAvro(cfiter.next());
  return new KSMetaData(ks.name.toString(),repStratClass,strategyOptions,ks.durable_writes,cfMetaData);
}
