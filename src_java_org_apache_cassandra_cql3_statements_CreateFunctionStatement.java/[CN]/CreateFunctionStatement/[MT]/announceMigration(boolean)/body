{
  Function old=Functions.find(functionName,argTypes);
  if (old != null) {
    if (ifNotExists)     return false;
    if (!orReplace)     throw new InvalidRequestException(String.format("Function %s already exists",old));
    if (!(old instanceof ScalarFunction))     throw new InvalidRequestException(String.format("Function %s can only replace a function",old));
    if (calledOnNullInput != ((ScalarFunction)old).isCalledOnNullInput())     throw new InvalidRequestException(String.format("Function %s can only be replaced with %s",old,calledOnNullInput ? "CALLED ON NULL INPUT" : "RETURNS NULL ON NULL INPUT"));
    if (!Functions.typeEquals(old.returnType(),returnType))     throw new InvalidRequestException(String.format("Cannot replace function %s, the new return type %s is not compatible with the return type %s of existing function",functionName,returnType.asCQL3Type(),old.returnType().asCQL3Type()));
  }
  this.udFunction=UDFunction.create(functionName,argNames,argTypes,returnType,calledOnNullInput,language,body);
  this.replaced=old != null;
  MigrationManager.announceNewFunction(udFunction,isLocalOnly);
  return true;
}
