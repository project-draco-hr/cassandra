{
  Function old=Schema.instance.findFunction(functionName,argTypes).orElse(null);
  boolean replaced=old != null;
  if (replaced) {
    if (ifNotExists)     return null;
    if (!orReplace)     throw new InvalidRequestException(String.format("Function %s already exists",old));
    if (!(old instanceof ScalarFunction))     throw new InvalidRequestException(String.format("Function %s can only replace a function",old));
    if (calledOnNullInput != ((ScalarFunction)old).isCalledOnNullInput())     throw new InvalidRequestException(String.format("Function %s can only be replaced with %s",old,calledOnNullInput ? "CALLED ON NULL INPUT" : "RETURNS NULL ON NULL INPUT"));
    if (!Functions.typesMatch(old.returnType(),returnType))     throw new InvalidRequestException(String.format("Cannot replace function %s, the new return type %s is not compatible with the return type %s of existing function",functionName,returnType.asCQL3Type(),old.returnType().asCQL3Type()));
  }
  UDFunction udFunction=UDFunction.create(functionName,argNames,argTypes,returnType,calledOnNullInput,language,body);
  MigrationManager.announceNewFunction(udFunction,isLocalOnly);
  return new Event.SchemaChange(replaced ? Event.SchemaChange.Change.UPDATED : Event.SchemaChange.Change.CREATED,Event.SchemaChange.Target.FUNCTION,udFunction.name().keyspace,udFunction.name().name,AbstractType.asCQLTypeStringList(udFunction.argTypes()));
}
