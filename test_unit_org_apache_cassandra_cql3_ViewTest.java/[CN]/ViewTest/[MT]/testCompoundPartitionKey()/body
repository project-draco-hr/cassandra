{
  createTable("CREATE TABLE %s (" + "k int, " + "asciival ascii, "+ "bigintval bigint, "+ "PRIMARY KEY((k, asciival)))");
  CFMetaData metadata=currentTableMetadata();
  execute("USE " + keyspace());
  executeNet(protocolVersion,"USE " + keyspace());
  for (  ColumnDefinition def : new HashSet<>(metadata.allColumns())) {
    try {
      String query="CREATE MATERIALIZED VIEW %s AS SELECT * FROM %%s WHERE " + def.name + " IS NOT NULL AND k IS NOT NULL "+ (def.name.toString().equals("asciival") ? "" : "AND asciival IS NOT NULL ")+ "PRIMARY KEY ("+ def.name+ ", k"+ (def.name.toString().equals("asciival") ? "" : ", asciival")+ ")";
      createView("mv1_" + def.name,query);
      if (def.type.isMultiCell())       Assert.fail("MV on a multicell should fail " + def);
    }
 catch (    InvalidQueryException e) {
      if (!def.type.isMultiCell() && !def.isPartitionKey())       Assert.fail("MV creation failed on " + def);
    }
    try {
      String query="CREATE MATERIALIZED VIEW %s AS SELECT * FROM %%s WHERE " + def.name + " IS NOT NULL AND k IS NOT NULL "+ (def.name.toString().equals("asciival") ? "" : "AND asciival IS NOT NULL ")+ " PRIMARY KEY ("+ def.name+ ", asciival"+ (def.name.toString().equals("k") ? "" : ", k")+ ")";
      createView("mv2_" + def.name,query);
      if (def.type.isMultiCell())       Assert.fail("MV on a multicell should fail " + def);
    }
 catch (    InvalidQueryException e) {
      if (!def.type.isMultiCell() && !def.isPartitionKey())       Assert.fail("MV creation failed on " + def);
    }
    try {
      String query="CREATE MATERIALIZED VIEW %s AS SELECT * FROM %%s WHERE " + def.name + " IS NOT NULL AND k IS NOT NULL "+ (def.name.toString().equals("asciival") ? "" : "AND asciival IS NOT NULL ")+ "PRIMARY KEY (("+ def.name+ ", k), asciival)";
      createView("mv3_" + def.name,query);
      if (def.type.isMultiCell())       Assert.fail("MV on a multicell should fail " + def);
    }
 catch (    InvalidQueryException e) {
      if (!def.type.isMultiCell() && !def.isPartitionKey())       Assert.fail("MV creation failed on " + def);
    }
    try {
      String query="CREATE MATERIALIZED VIEW %s AS SELECT * FROM %%s WHERE " + def.name + " IS NOT NULL AND k IS NOT NULL "+ (def.name.toString().equals("asciival") ? "" : "AND asciival IS NOT NULL ")+ "PRIMARY KEY (("+ def.name+ ", k), asciival)";
      createView("mv3_" + def.name,query);
      Assert.fail("Should fail on duplicate name");
    }
 catch (    Exception e) {
    }
    try {
      String query="CREATE MATERIALIZED VIEW %s AS SELECT * FROM %%s WHERE " + def.name + " IS NOT NULL AND k IS NOT NULL "+ (def.name.toString().equals("asciival") ? "" : "AND asciival IS NOT NULL ")+ "PRIMARY KEY (("+ def.name+ ", k), nonexistentcolumn)";
      createView("mv3_" + def.name,query);
      Assert.fail("Should fail with unknown base column");
    }
 catch (    InvalidQueryException e) {
    }
  }
  updateView("INSERT INTO %s (k, asciival, bigintval) VALUES (?, ?, fromJson(?))",0,"ascii text","123123123123");
  updateView("INSERT INTO %s (k, asciival) VALUES (?, fromJson(?))",0,"\"ascii text\"");
  assertRows(execute("SELECT bigintval FROM %s WHERE k = ? and asciival = ?",0,"ascii text"),row(123123123123L));
  assertRows(execute("SELECT k, bigintval from mv1_asciival WHERE asciival = ?","ascii text"),row(0,123123123123L));
  assertRows(execute("SELECT k, bigintval from mv2_k WHERE asciival = ? and k = ?","ascii text",0),row(0,123123123123L));
  assertRows(execute("SELECT k from mv1_bigintval WHERE bigintval = ?",123123123123L),row(0));
  assertRows(execute("SELECT asciival from mv3_bigintval where bigintval = ? AND k = ?",123123123123L,0),row("ascii text"));
  updateView("INSERT INTO %s (k, asciival, bigintval) VALUES (?, ?, fromJson(?))",0,"ascii text","1");
  assertRows(execute("SELECT bigintval FROM %s WHERE k = ? and asciival = ?",0,"ascii text"),row(1L));
  assertRows(execute("SELECT k, bigintval from mv1_asciival WHERE asciival = ?","ascii text"),row(0,1L));
  assertRows(execute("SELECT k, bigintval from mv2_k WHERE asciival = ? and k = ?","ascii text",0),row(0,1L));
  assertRows(execute("SELECT k from mv1_bigintval WHERE bigintval = ?",123123123123L));
  assertRows(execute("SELECT asciival from mv3_bigintval where bigintval = ? AND k = ?",123123123123L,0));
  assertRows(execute("SELECT asciival from mv3_bigintval where bigintval = ? AND k = ?",1L,0),row("ascii text"));
  updateView("TRUNCATE %s");
  assertRows(execute("SELECT bigintval FROM %s WHERE k = ? and asciival = ?",0,"ascii text"));
  assertRows(execute("SELECT k, bigintval from mv1_asciival WHERE asciival = ?","ascii text"));
  assertRows(execute("SELECT k, bigintval from mv2_k WHERE asciival = ? and k = ?","ascii text",0));
  assertRows(execute("SELECT asciival from mv3_bigintval where bigintval = ? AND k = ?",1L,0));
}
