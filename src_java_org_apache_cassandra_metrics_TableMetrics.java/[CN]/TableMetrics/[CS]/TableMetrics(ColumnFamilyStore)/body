{
  factory=new TableMetricNameFactory(cfs,"Table");
  aliasFactory=new TableMetricNameFactory(cfs,"ColumnFamily");
  samplers=Maps.newHashMap();
  for (  Sampler sampler : Sampler.values()) {
    samplers.put(sampler,new TopKSampler<>());
  }
  memtableColumnsCount=createTableGauge("MemtableColumnsCount",new Gauge<Long>(){
    public Long getValue(){
      return cfs.getTracker().getView().getCurrentMemtable().getOperations();
    }
  }
);
  memtableOnHeapSize=createTableGauge("MemtableOnHeapSize",new Gauge<Long>(){
    public Long getValue(){
      return cfs.getTracker().getView().getCurrentMemtable().getAllocator().onHeap().owns();
    }
  }
);
  memtableOffHeapSize=createTableGauge("MemtableOffHeapSize",new Gauge<Long>(){
    public Long getValue(){
      return cfs.getTracker().getView().getCurrentMemtable().getAllocator().offHeap().owns();
    }
  }
);
  memtableLiveDataSize=createTableGauge("MemtableLiveDataSize",new Gauge<Long>(){
    public Long getValue(){
      return cfs.getTracker().getView().getCurrentMemtable().getLiveDataSize();
    }
  }
);
  allMemtablesOnHeapSize=createTableGauge("AllMemtablesHeapSize",new Gauge<Long>(){
    public Long getValue(){
      long size=0;
      for (      ColumnFamilyStore cfs2 : cfs.concatWithIndexes())       size+=cfs2.getTracker().getView().getCurrentMemtable().getAllocator().onHeap().owns();
      return size;
    }
  }
);
  allMemtablesOffHeapSize=createTableGauge("AllMemtablesOffHeapSize",new Gauge<Long>(){
    public Long getValue(){
      long size=0;
      for (      ColumnFamilyStore cfs2 : cfs.concatWithIndexes())       size+=cfs2.getTracker().getView().getCurrentMemtable().getAllocator().offHeap().owns();
      return size;
    }
  }
);
  allMemtablesLiveDataSize=createTableGauge("AllMemtablesLiveDataSize",new Gauge<Long>(){
    public Long getValue(){
      long size=0;
      for (      ColumnFamilyStore cfs2 : cfs.concatWithIndexes())       size+=cfs2.getTracker().getView().getCurrentMemtable().getLiveDataSize();
      return size;
    }
  }
);
  memtableSwitchCount=createTableCounter("MemtableSwitchCount");
  estimatedPartitionSizeHistogram=Metrics.register(factory.createMetricName("EstimatedPartitionSizeHistogram"),aliasFactory.createMetricName("EstimatedRowSizeHistogram"),new Gauge<long[]>(){
    public long[] getValue(){
      return combineHistograms(cfs.getSSTables(SSTableSet.CANONICAL),new GetHistogram(){
        public EstimatedHistogram getHistogram(        SSTableReader reader){
          return reader.getEstimatedPartitionSize();
        }
      }
);
    }
  }
);
  estimatedPartitionCount=Metrics.register(factory.createMetricName("EstimatedPartitionCount"),aliasFactory.createMetricName("EstimatedRowCount"),new Gauge<Long>(){
    public Long getValue(){
      long memtablePartitions=0;
      for (      Memtable memtable : cfs.getTracker().getView().getAllMemtables())       memtablePartitions+=memtable.partitionCount();
      return SSTableReader.getApproximateKeyCount(cfs.getSSTables(SSTableSet.CANONICAL)) + memtablePartitions;
    }
  }
);
  estimatedColumnCountHistogram=Metrics.register(factory.createMetricName("EstimatedColumnCountHistogram"),aliasFactory.createMetricName("EstimatedColumnCountHistogram"),new Gauge<long[]>(){
    public long[] getValue(){
      return combineHistograms(cfs.getSSTables(SSTableSet.CANONICAL),new GetHistogram(){
        public EstimatedHistogram getHistogram(        SSTableReader reader){
          return reader.getEstimatedColumnCount();
        }
      }
);
    }
  }
);
  sstablesPerReadHistogram=createTableHistogram("SSTablesPerReadHistogram",cfs.keyspace.metric.sstablesPerReadHistogram,true);
  compressionRatio=createTableGauge("CompressionRatio",new Gauge<Double>(){
    public Double getValue(){
      double sum=0;
      int total=0;
      for (      SSTableReader sstable : cfs.getSSTables(SSTableSet.CANONICAL)) {
        if (sstable.getCompressionRatio() != MetadataCollector.NO_COMPRESSION_RATIO) {
          sum+=sstable.getCompressionRatio();
          total++;
        }
      }
      return total != 0 ? sum / total : 0;
    }
  }
,new Gauge<Double>(){
    public Double getValue(){
      double sum=0;
      int total=0;
      for (      Keyspace keyspace : Keyspace.all()) {
        for (        SSTableReader sstable : keyspace.getAllSSTables(SSTableSet.CANONICAL)) {
          if (sstable.getCompressionRatio() != MetadataCollector.NO_COMPRESSION_RATIO) {
            sum+=sstable.getCompressionRatio();
            total++;
          }
        }
      }
      return total != 0 ? sum / total : 0;
    }
  }
);
  readLatency=new LatencyMetrics(factory,"Read",cfs.keyspace.metric.readLatency,globalReadLatency);
  writeLatency=new LatencyMetrics(factory,"Write",cfs.keyspace.metric.writeLatency,globalWriteLatency);
  rangeLatency=new LatencyMetrics(factory,"Range",cfs.keyspace.metric.rangeLatency,globalRangeLatency);
  pendingFlushes=createTableCounter("PendingFlushes");
  pendingCompactions=createTableGauge("PendingCompactions",new Gauge<Integer>(){
    public Integer getValue(){
      return cfs.getCompactionStrategyManager().getEstimatedRemainingTasks();
    }
  }
);
  liveSSTableCount=createTableGauge("LiveSSTableCount",new Gauge<Integer>(){
    public Integer getValue(){
      return cfs.getTracker().getView().liveSSTables().size();
    }
  }
);
  liveDiskSpaceUsed=createTableCounter("LiveDiskSpaceUsed");
  totalDiskSpaceUsed=createTableCounter("TotalDiskSpaceUsed");
  minPartitionSize=createTableGauge("MinPartitionSize","MinRowSize",new Gauge<Long>(){
    public Long getValue(){
      long min=0;
      for (      SSTableReader sstable : cfs.getSSTables(SSTableSet.CANONICAL)) {
        if (min == 0 || sstable.getEstimatedPartitionSize().min() < min)         min=sstable.getEstimatedPartitionSize().min();
      }
      return min;
    }
  }
,new Gauge<Long>(){
    public Long getValue(){
      long min=Long.MAX_VALUE;
      for (      Metric cfGauge : allTableMetrics.get("MinPartitionSize")) {
        min=Math.min(min,((Gauge<? extends Number>)cfGauge).getValue().longValue());
      }
      return min;
    }
  }
);
  maxPartitionSize=createTableGauge("MaxPartitionSize","MaxRowSize",new Gauge<Long>(){
    public Long getValue(){
      long max=0;
      for (      SSTableReader sstable : cfs.getSSTables(SSTableSet.CANONICAL)) {
        if (sstable.getEstimatedPartitionSize().max() > max)         max=sstable.getEstimatedPartitionSize().max();
      }
      return max;
    }
  }
,new Gauge<Long>(){
    public Long getValue(){
      long max=0;
      for (      Metric cfGauge : allTableMetrics.get("MaxPartitionSize")) {
        max=Math.max(max,((Gauge<? extends Number>)cfGauge).getValue().longValue());
      }
      return max;
    }
  }
);
  meanPartitionSize=createTableGauge("MeanPartitionSize","MeanRowSize",new Gauge<Long>(){
    public Long getValue(){
      long sum=0;
      long count=0;
      for (      SSTableReader sstable : cfs.getSSTables(SSTableSet.CANONICAL)) {
        long n=sstable.getEstimatedPartitionSize().count();
        sum+=sstable.getEstimatedPartitionSize().mean() * n;
        count+=n;
      }
      return count > 0 ? sum / count : 0;
    }
  }
,new Gauge<Long>(){
    public Long getValue(){
      long sum=0;
      long count=0;
      for (      Keyspace keyspace : Keyspace.all()) {
        for (        SSTableReader sstable : keyspace.getAllSSTables(SSTableSet.CANONICAL)) {
          long n=sstable.getEstimatedPartitionSize().count();
          sum+=sstable.getEstimatedPartitionSize().mean() * n;
          count+=n;
        }
      }
      return count > 0 ? sum / count : 0;
    }
  }
);
  bloomFilterFalsePositives=createTableGauge("BloomFilterFalsePositives",new Gauge<Long>(){
    public Long getValue(){
      long count=0L;
      for (      SSTableReader sstable : cfs.getSSTables(SSTableSet.LIVE))       count+=sstable.getBloomFilterFalsePositiveCount();
      return count;
    }
  }
);
  recentBloomFilterFalsePositives=createTableGauge("RecentBloomFilterFalsePositives",new Gauge<Long>(){
    public Long getValue(){
      long count=0L;
      for (      SSTableReader sstable : cfs.getSSTables(SSTableSet.LIVE))       count+=sstable.getRecentBloomFilterFalsePositiveCount();
      return count;
    }
  }
);
  bloomFilterFalseRatio=createTableGauge("BloomFilterFalseRatio",new Gauge<Double>(){
    public Double getValue(){
      long falseCount=0L;
      long trueCount=0L;
      for (      SSTableReader sstable : cfs.getSSTables(SSTableSet.LIVE)) {
        falseCount+=sstable.getBloomFilterFalsePositiveCount();
        trueCount+=sstable.getBloomFilterTruePositiveCount();
      }
      if (falseCount == 0L && trueCount == 0L)       return 0d;
      return (double)falseCount / (trueCount + falseCount);
    }
  }
,new Gauge<Double>(){
    public Double getValue(){
      long falseCount=0L;
      long trueCount=0L;
      for (      Keyspace keyspace : Keyspace.all()) {
        for (        SSTableReader sstable : keyspace.getAllSSTables(SSTableSet.LIVE)) {
          falseCount+=sstable.getBloomFilterFalsePositiveCount();
          trueCount+=sstable.getBloomFilterTruePositiveCount();
        }
      }
      if (falseCount == 0L && trueCount == 0L)       return 0d;
      return (double)falseCount / (trueCount + falseCount);
    }
  }
);
  recentBloomFilterFalseRatio=createTableGauge("RecentBloomFilterFalseRatio",new Gauge<Double>(){
    public Double getValue(){
      long falseCount=0L;
      long trueCount=0L;
      for (      SSTableReader sstable : cfs.getSSTables(SSTableSet.LIVE)) {
        falseCount+=sstable.getRecentBloomFilterFalsePositiveCount();
        trueCount+=sstable.getRecentBloomFilterTruePositiveCount();
      }
      if (falseCount == 0L && trueCount == 0L)       return 0d;
      return (double)falseCount / (trueCount + falseCount);
    }
  }
,new Gauge<Double>(){
    public Double getValue(){
      long falseCount=0L;
      long trueCount=0L;
      for (      Keyspace keyspace : Keyspace.all()) {
        for (        SSTableReader sstable : keyspace.getAllSSTables(SSTableSet.LIVE)) {
          falseCount+=sstable.getRecentBloomFilterFalsePositiveCount();
          trueCount+=sstable.getRecentBloomFilterTruePositiveCount();
        }
      }
      if (falseCount == 0L && trueCount == 0L)       return 0d;
      return (double)falseCount / (trueCount + falseCount);
    }
  }
);
  bloomFilterDiskSpaceUsed=createTableGauge("BloomFilterDiskSpaceUsed",new Gauge<Long>(){
    public Long getValue(){
      long total=0;
      for (      SSTableReader sst : cfs.getSSTables(SSTableSet.CANONICAL))       total+=sst.getBloomFilterSerializedSize();
      return total;
    }
  }
);
  bloomFilterOffHeapMemoryUsed=createTableGauge("BloomFilterOffHeapMemoryUsed",new Gauge<Long>(){
    public Long getValue(){
      long total=0;
      for (      SSTableReader sst : cfs.getSSTables(SSTableSet.LIVE))       total+=sst.getBloomFilterOffHeapSize();
      return total;
    }
  }
);
  indexSummaryOffHeapMemoryUsed=createTableGauge("IndexSummaryOffHeapMemoryUsed",new Gauge<Long>(){
    public Long getValue(){
      long total=0;
      for (      SSTableReader sst : cfs.getSSTables(SSTableSet.LIVE))       total+=sst.getIndexSummaryOffHeapSize();
      return total;
    }
  }
);
  compressionMetadataOffHeapMemoryUsed=createTableGauge("CompressionMetadataOffHeapMemoryUsed",new Gauge<Long>(){
    public Long getValue(){
      long total=0;
      for (      SSTableReader sst : cfs.getSSTables(SSTableSet.LIVE))       total+=sst.getCompressionMetadataOffHeapSize();
      return total;
    }
  }
);
  speculativeRetries=createTableCounter("SpeculativeRetries");
  keyCacheHitRate=Metrics.register(factory.createMetricName("KeyCacheHitRate"),aliasFactory.createMetricName("KeyCacheHitRate"),new RatioGauge(){
    @Override public Ratio getRatio(){
      return Ratio.of(getNumerator(),getDenominator());
    }
    protected double getNumerator(){
      long hits=0L;
      for (      SSTableReader sstable : cfs.getSSTables(SSTableSet.LIVE))       hits+=sstable.getKeyCacheHit();
      return hits;
    }
    protected double getDenominator(){
      long requests=0L;
      for (      SSTableReader sstable : cfs.getSSTables(SSTableSet.LIVE))       requests+=sstable.getKeyCacheRequest();
      return Math.max(requests,1);
    }
  }
);
  tombstoneScannedHistogram=createTableHistogram("TombstoneScannedHistogram",cfs.keyspace.metric.tombstoneScannedHistogram,false);
  liveScannedHistogram=createTableHistogram("LiveScannedHistogram",cfs.keyspace.metric.liveScannedHistogram,false);
  colUpdateTimeDeltaHistogram=createTableHistogram("ColUpdateTimeDeltaHistogram",cfs.keyspace.metric.colUpdateTimeDeltaHistogram,false);
  coordinatorReadLatency=Metrics.timer(factory.createMetricName("CoordinatorReadLatency"));
  coordinatorScanLatency=Metrics.timer(factory.createMetricName("CoordinatorScanLatency"));
  waitingOnFreeMemtableSpace=Metrics.histogram(factory.createMetricName("WaitingOnFreeMemtableSpace"),false);
  if (cfs.metadata.isView()) {
    viewLockAcquireTime=null;
    viewReadTime=null;
  }
 else {
    viewLockAcquireTime=createTableTimer("ViewLockAcquireTime",cfs.keyspace.metric.viewLockAcquireTime);
    viewReadTime=createTableTimer("ViewReadTime",cfs.keyspace.metric.viewReadTime);
  }
  trueSnapshotsSize=createTableGauge("SnapshotsSize",new Gauge<Long>(){
    public Long getValue(){
      return cfs.trueSnapshotsSize();
    }
  }
);
  rowCacheHitOutOfRange=createTableCounter("RowCacheHitOutOfRange");
  rowCacheHit=createTableCounter("RowCacheHit");
  rowCacheMiss=createTableCounter("RowCacheMiss");
  casPrepare=new LatencyMetrics(factory,"CasPrepare",cfs.keyspace.metric.casPrepare);
  casPropose=new LatencyMetrics(factory,"CasPropose",cfs.keyspace.metric.casPropose);
  casCommit=new LatencyMetrics(factory,"CasCommit",cfs.keyspace.metric.casCommit);
}
