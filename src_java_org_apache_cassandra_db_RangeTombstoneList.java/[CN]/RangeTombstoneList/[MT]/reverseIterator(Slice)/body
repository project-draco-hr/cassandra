{
  int startIdx=slice.end() == Slice.Bound.TOP ? size - 1 : searchInternal(slice.end(),0,size);
  final int start=startIdx < 0 ? -startIdx - 2 : startIdx;
  if (start < 0)   return Collections.emptyIterator();
  int finishIdx=slice.start() == Slice.Bound.BOTTOM ? 0 : searchInternal(slice.start(),0,start + 1);
  final int finish=finishIdx < 0 ? -finishIdx - 1 : finishIdx;
  if (start < finish)   return Collections.emptyIterator();
  if (start == finish) {
    Slice.Bound s=comparator.compare(starts[start],slice.start()) < 0 ? slice.start() : starts[start];
    Slice.Bound e=comparator.compare(slice.end(),ends[start]) < 0 ? slice.end() : ends[start];
    return Iterators.<RangeTombstone>singletonIterator(rangeTombstoneWithNewBounds(start,s,e));
  }
  return new AbstractIterator<RangeTombstone>(){
    private int idx=start;
    protected RangeTombstone computeNext(){
      if (idx < 0 || idx < finish)       return endOfData();
      if (idx == start && comparator.compare(slice.end(),ends[idx]) < 0)       return rangeTombstoneWithNewEnd(idx--,slice.end());
      if (idx == finish && comparator.compare(starts[idx],slice.start()) < 0)       return rangeTombstoneWithNewStart(idx--,slice.start());
      return rangeTombstone(idx--);
    }
  }
;
}
