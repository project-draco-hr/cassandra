{
  int startIdx=from.isEmpty() ? 0 : searchInternal(from,0);
  final int start=startIdx < 0 ? -startIdx - 1 : startIdx;
  if (start >= size)   return Iterators.<RangeTombstone>emptyIterator();
  int finishIdx=till.isEmpty() ? size : searchInternal(till,start);
  final int finish=finishIdx < 0 ? -finishIdx - 2 : finishIdx;
  if (start > finish)   return Iterators.<RangeTombstone>emptyIterator();
 else   if (start == finish)   return Iterators.<RangeTombstone>singletonIterator(rangeTombstone(start));
  return new AbstractIterator<RangeTombstone>(){
    private int idx=start;
    protected RangeTombstone computeNext(){
      if (idx >= size || idx > finish)       return endOfData();
      return rangeTombstone(idx++);
    }
  }
;
}
