{
  createTable("CREATE TABLE %s (k int PRIMARY KEY, v1 int,)");
  assertRows(execute("DELETE FROM %s WHERE k=1 IF EXISTS"),row(false));
  execute("INSERT INTO %s (k, v1) VALUES (1, 2)");
  assertRows(execute("DELETE FROM %s WHERE k=1 IF EXISTS"),row(true));
  assertEmpty(execute("SELECT * FROM %s WHERE k=1"));
  assertRows(execute("DELETE FROM %s WHERE k=1 IF EXISTS"),row(false));
  execute("UPDATE %s USING TTL 1 SET v1=2 WHERE k=1");
  Thread.sleep(1001);
  assertRows(execute("DELETE FROM %s WHERE k=1 IF EXISTS"),row(false));
  assertEmpty(execute("SELECT * FROM %s WHERE k=1"));
  execute("INSERT INTO %s (k, v1) VALUES (2, 2) USING TTL 1");
  Thread.sleep(1001);
  assertRows(execute("DELETE FROM %s WHERE k=2 IF EXISTS"),row(false));
  assertEmpty(execute("SELECT * FROM %s WHERE k=2"));
  execute("INSERT INTO %s (k, v1) VALUES (3, 2)");
  assertRows(execute("DELETE v1 FROM %s WHERE k=3 IF EXISTS"),row(true));
  assertRows(execute("SELECT * FROM %s WHERE k=3"),row(3,null));
  assertRows(execute("DELETE v1 FROM %s WHERE k=3 IF EXISTS"),row(true));
  assertRows(execute("DELETE FROM %s WHERE k=3 IF EXISTS"),row(true));
  execute("INSERT INTO %s (k, v1) VALUES (4, 2)");
  execute("UPDATE %s USING TTL 1 SET v1=2 WHERE k=4");
  Thread.sleep(1001);
  assertRows(execute("SELECT * FROM %s WHERE k=4"),row(4,null));
  assertRows(execute("DELETE FROM %s WHERE k=4 IF EXISTS"),row(true));
  assertEmpty(execute("SELECT * FROM %s WHERE k=4"));
  createTable("CREATE TABLE %s (k text, s text static, i int, v text, PRIMARY KEY (k, i) )");
  execute("INSERT INTO %s (k, s, i, v) VALUES ('k', 's', 0, 'v')");
  assertRows(execute("DELETE v FROM %s WHERE k='k' AND i=0 IF EXISTS"),row(true));
  assertRows(execute("DELETE FROM %s WHERE k='k' AND i=0 IF EXISTS"),row(true));
  assertRows(execute("DELETE v FROM %s WHERE k='k' AND i=0 IF EXISTS"),row(false));
  assertRows(execute("DELETE FROM %s WHERE k='k' AND i=0 IF EXISTS"),row(false));
  assertInvalidMessage("DELETE statements must restrict all PRIMARY KEY columns with equality relations in order to delete non static columns","DELETE FROM %s WHERE k = 'k' IF EXISTS");
  assertInvalidMessage("DELETE statements must restrict all PRIMARY KEY columns with equality relations in order to delete non static columns","DELETE FROM %s WHERE k = 'k' IF v = 'foo'");
  assertInvalidMessage("Some partition key parts are missing: k","DELETE FROM %s WHERE i = 0 IF EXISTS");
  assertInvalidMessage("Invalid INTEGER constant (0) for \"k\" of type text","DELETE FROM %s WHERE k = 0 AND i > 0 IF EXISTS");
  assertInvalidMessage("Invalid INTEGER constant (0) for \"k\" of type text","DELETE FROM %s WHERE k = 0 AND i > 0 IF v = 'foo'");
  assertInvalidMessage("DELETE statements must restrict all PRIMARY KEY columns with equality relations in order to delete non static columns","DELETE FROM %s WHERE k = 'k' AND i > 0 IF EXISTS");
  assertInvalidMessage("DELETE statements must restrict all PRIMARY KEY columns with equality relations in order to delete non static columns","DELETE FROM %s WHERE k = 'k' AND i > 0 IF v = 'foo'");
  assertInvalidMessage("IN on the clustering key columns is not supported with conditional deletions","DELETE FROM %s WHERE k = 'k' AND i IN (0, 1) IF v = 'foo'");
  assertInvalidMessage("IN on the clustering key columns is not supported with conditional deletions","DELETE FROM %s WHERE k = 'k' AND i IN (0, 1) IF EXISTS");
  createTable("CREATE TABLE %s(k int, s int static, i int, v text, PRIMARY KEY(k, i))");
  execute("INSERT INTO %s (k, s, i, v) VALUES ( 1, 1, 2, '1')");
  assertRows(execute("DELETE v FROM %s WHERE k = 1 AND i = 2 IF s != 1"),row(false,1));
  assertRows(execute("DELETE v FROM %s WHERE k = 1 AND i = 2 IF s = 1"),row(true));
  assertRows(execute("SELECT * FROM %s WHERE k = 1 AND i = 2"),row(1,2,1,null));
  assertRows(execute("DELETE FROM %s WHERE  k = 1 AND i = 2 IF s != 1"),row(false,1));
  assertRows(execute("DELETE FROM %s WHERE k = 1 AND i = 2 IF s = 1"),row(true));
  assertEmpty(execute("SELECT * FROM %s WHERE k = 1 AND i = 2"));
  assertRows(execute("SELECT * FROM %s WHERE k = 1"),row(1,null,1,null));
}
