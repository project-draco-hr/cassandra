{
  if (comparator instanceof CompositeType) {
    CompositeType ct=(CompositeType)comparator;
    if (minSeen.isEmpty())     return Arrays.asList(ct.split(candidate));
    int typeCount=getTypeCount(ct);
    List<ByteBuffer> components=Arrays.asList(ct.split(candidate));
    List<ByteBuffer> biggest=minSeen.size() > components.size() ? minSeen : components;
    int minSize=Math.min(typeCount,Math.min(components.size(),minSeen.size()));
    int maxSize=Math.min(typeCount,biggest.size());
    List<ByteBuffer> retList=new ArrayList<ByteBuffer>(maxSize);
    for (int i=0; i < minSize; i++)     retList.add(ColumnNameHelper.min(minSeen.get(i),components.get(i),ct.types.get(i)));
    for (int i=minSize; i < maxSize; i++)     retList.add(biggest.get(i));
    return retList;
  }
 else {
    if (minSeen.size() == 0)     return Collections.singletonList(candidate);
    return Collections.singletonList(ColumnNameHelper.min(minSeen.get(0),candidate,comparator));
  }
}
