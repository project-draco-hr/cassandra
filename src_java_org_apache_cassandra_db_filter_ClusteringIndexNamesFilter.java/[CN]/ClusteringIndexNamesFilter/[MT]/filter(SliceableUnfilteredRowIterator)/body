{
  return new WrappingUnfilteredRowIterator(iter){
    private final Iterator<Clustering> clusteringIter=clusteringsInQueryOrder.iterator();
    private Iterator<Unfiltered> currentClustering;
    private Unfiltered next;
    @Override public boolean hasNext(){
      if (next != null)       return true;
      if (currentClustering != null && currentClustering.hasNext()) {
        next=currentClustering.next();
        return true;
      }
      while (clusteringIter.hasNext()) {
        Clustering nextClustering=clusteringIter.next();
        currentClustering=iter.slice(Slice.make(nextClustering));
        if (currentClustering.hasNext()) {
          next=currentClustering.next();
          return true;
        }
      }
      return false;
    }
    @Override public Unfiltered next(){
      if (next == null && !hasNext())       throw new NoSuchElementException();
      Unfiltered toReturn=next;
      next=null;
      return toReturn;
    }
  }
;
}
