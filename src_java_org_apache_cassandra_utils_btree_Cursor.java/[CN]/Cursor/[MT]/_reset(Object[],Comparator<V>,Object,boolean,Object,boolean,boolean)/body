{
  if (lowerBound == null)   lowerBound=NEGATIVE_INFINITY;
  if (upperBound == null)   upperBound=POSITIVE_INFINITY;
  this.forwards=forwards;
  Path findLast=Path.newPath();
  if (forwards) {
    findLast.find(btree,comparator,upperBound,inclusiveUpperBound ? Op.HIGHER : Op.CEIL,true);
    find(btree,comparator,lowerBound,inclusiveLowerBound ? Op.CEIL : Op.HIGHER,true);
  }
 else {
    findLast.find(btree,comparator,lowerBound,inclusiveLowerBound ? Op.LOWER : Op.FLOOR,false);
    find(btree,comparator,upperBound,inclusiveUpperBound ? Op.FLOOR : Op.LOWER,false);
  }
  int c=this.compareTo(findLast,forwards);
  if (forwards ? c > 0 : c < 0) {
    endNode=currentNode();
    endIndex=currentIndex();
  }
 else {
    endNode=findLast.currentNode();
    endIndex=findLast.currentIndex();
  }
}
