{
  String pmode_plain=System.getProperty(PMODE_PROPERTY);
  PasswordMode mode=PasswordMode.PLAIN;
  if (null != pmode_plain) {
    try {
      mode=PasswordMode.valueOf(pmode_plain);
    }
 catch (    Exception e) {
      String mode_values="";
      for (      PasswordMode pm : PasswordMode.values())       mode_values+="'" + pm + "', ";
      mode_values+="or leave it unspecified.";
      throw new AuthenticationException("The requested password check mode '" + pmode_plain + "' is not a valid mode.  Possible values are "+ mode_values);
    }
  }
  String pfilename=System.getProperty(PASSWD_FILENAME_PROPERTY);
  String username=authRequest.getCredentials().get(USERNAME_KEY);
  if (null == username)   throw new AuthenticationException("Authentication request was missing the required key '" + USERNAME_KEY + "'");
  String password=authRequest.getCredentials().get(PASSWORD_KEY);
  if (null == password)   throw new AuthenticationException("Authentication request was missing the required key '" + PASSWORD_KEY + "'");
  try {
    FileInputStream in=new FileInputStream(pfilename);
    Properties props=new Properties();
    props.load(in);
    in.close();
    if (null == props.getProperty(username))     throw new AuthenticationException(authenticationErrorMessage(mode,username));
    boolean authenticated=false;
switch (mode) {
case PLAIN:
      authenticated=password.equals(props.getProperty(username));
    break;
case MD5:
  authenticated=MessageDigest.isEqual(password.getBytes(),MessageDigest.getInstance("MD5").digest(props.getProperty(username).getBytes()));
break;
}
if (!authenticated) throw new AuthenticationException(authenticationErrorMessage(mode,username));
}
 catch (NoSuchAlgorithmException e) {
throw new AuthenticationException("You requested MD5 checking but the MD5 digest algorithm is not available: " + e.getMessage());
}
catch (FileNotFoundException e) {
throw new RuntimeException("Authentication table file given by property " + PASSWD_FILENAME_PROPERTY + " could not be found: "+ e.getMessage());
}
catch (IOException e) {
throw new RuntimeException("Authentication table file given by property " + PASSWD_FILENAME_PROPERTY + " could not be opened: "+ e.getMessage());
}
catch (Exception e) {
throw new RuntimeException("Unexpected authentication problem: " + e.getMessage());
}
String afilename=System.getProperty(AUTHORIZATION_FILENAME_PROPERTY);
boolean authorized=false;
try {
FileInputStream in=new FileInputStream(afilename);
Properties props=new Properties();
props.load(in);
in.close();
if (null == props.getProperty(keyspace)) throw new AuthorizationException(authorizationErrorMessage(keyspace,username));
for (String allow : props.getProperty(keyspace).split(",")) {
if (allow.equals(username)) authorized=true;
}
if (!authorized) throw new AuthorizationException(authorizationErrorMessage(keyspace,username));
}
 catch (FileNotFoundException e) {
throw new RuntimeException("Authorization table file given by property " + AUTHORIZATION_FILENAME_PROPERTY + " could not be found: "+ e.getMessage());
}
catch (IOException e) {
throw new RuntimeException("Authorization table file given by property " + AUTHORIZATION_FILENAME_PROPERTY + " could not be opened: "+ e.getMessage());
}
catch (Exception e) {
throw new RuntimeException("Unexpected authorization problem: " + e.getMessage());
}
}
