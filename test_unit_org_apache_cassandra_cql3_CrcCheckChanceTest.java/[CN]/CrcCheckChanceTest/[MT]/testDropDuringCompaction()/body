{
  CompactionManager.instance.disableAutoCompaction();
  createTable("CREATE TABLE %s (p text, c text, v text, s text static, PRIMARY KEY (p, c)) WITH compression = {'sstable_compression': 'LZ4Compressor', 'crc_check_chance' : 0.99}");
  ColumnFamilyStore cfs=Keyspace.open(CQLTester.KEYSPACE).getColumnFamilyStore(currentTable());
  for (int i=0; i < 100; i++) {
    execute("INSERT INTO %s(p, c, v, s) values (?, ?, ?, ?)","p1","k1","v1","sv1");
    execute("INSERT INTO %s(p, c, v) values (?, ?, ?)","p1","k2","v2");
    execute("INSERT INTO %s(p, s) values (?, ?)","p2","sv2");
    cfs.forceBlockingFlush();
  }
  DatabaseDescriptor.setCompactionThroughputMbPerSec(1);
  List<Future<?>> futures=CompactionManager.instance.submitMaximal(cfs,CompactionManager.getDefaultGcBefore(cfs),false);
  execute("DROP TABLE %s");
  try {
    FBUtilities.waitOnFutures(futures);
  }
 catch (  Throwable t) {
    if (!(t.getCause() instanceof ExecutionException) || !(t.getCause().getCause() instanceof CompactionInterruptedException))     throw t;
  }
}
