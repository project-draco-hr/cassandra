{
  if (ranges.isEmpty()) {
    return topLevel.localDeletionTime < gcBefore ? LIVE : this;
  }
 else {
    List<RangeTombstone> nonExpired=new ArrayList<RangeTombstone>();
    for (    RangeTombstone range : ranges) {
      if (range.data.localDeletionTime >= gcBefore)       nonExpired.add(range);
    }
    IntervalTree<ByteBuffer,DeletionTime,RangeTombstone> newRanges=nonExpired.size() == ranges.intervalCount() ? ranges : IntervalTree.build(nonExpired,ranges.comparator());
    return topLevel.localDeletionTime < gcBefore ? new DeletionInfo(DeletionTime.LIVE,newRanges) : new DeletionInfo(topLevel,newRanges);
  }
}
