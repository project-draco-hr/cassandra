{
  if (ranges.isEmpty()) {
    return topLevel.markedForDeleteAt < newInfo.topLevel.markedForDeleteAt ? newInfo : newInfo.ranges.isEmpty() ? this : new DeletionInfo(topLevel,newInfo.ranges);
  }
 else {
    if (newInfo.ranges.isEmpty()) {
      return topLevel.markedForDeleteAt < newInfo.topLevel.markedForDeleteAt ? new DeletionInfo(newInfo.topLevel,ranges) : this;
    }
 else {
      Set<RangeTombstone> merged=new HashSet<RangeTombstone>();
      Iterables.addAll(merged,Iterables.concat(ranges,newInfo.ranges));
      return new DeletionInfo(topLevel.markedForDeleteAt < newInfo.topLevel.markedForDeleteAt ? newInfo.topLevel : topLevel,IntervalTree.build(merged,ranges.comparator()));
    }
  }
}
