{
  final ColumnFamily container=ArrayBackedSortedColumns.factory.create(cfs.metadata,filter.filter.isReversed());
  List<OnDiskAtomIterator> iterators=new ArrayList<>();
  Tracing.trace("Acquiring sstable references");
  ColumnFamilyStore.ViewFragment view=cfs.select(cfs.viewFilter(filter.key));
  try {
    Tracing.trace("Merging memtable contents");
    for (    Memtable memtable : view.memtables) {
      ColumnFamily cf=memtable.getColumnFamily(filter.key);
      if (cf != null) {
        OnDiskAtomIterator iter=filter.getColumnFamilyIterator(cf);
        iterators.add(iter);
        filter.delete(container.deletionInfo(),iter.getColumnFamily());
        while (iter.hasNext()) {
          OnDiskAtom atom=iter.next();
          if (copyOnHeap)           atom=((Cell)atom).localCopy(HeapAllocator.instance);
          container.addAtom(atom);
        }
      }
    }
    NamesQueryFilter namesFilter=(NamesQueryFilter)filter.filter;
    TreeSet<CellName> filterColumns=new TreeSet<>(namesFilter.columns);
    QueryFilter reducedFilter=new QueryFilter(filter.key,filter.cfName,namesFilter.withUpdatedColumns(filterColumns),filter.timestamp);
    Collections.sort(view.sstables,SSTableReader.maxTimestampComparator);
    long mostRecentRowTombstone=Long.MIN_VALUE;
    for (    SSTableReader sstable : view.sstables) {
      if (sstable.getMaxTimestamp() < mostRecentRowTombstone)       break;
      long currentMaxTs=sstable.getMaxTimestamp();
      reduceNameFilter(reducedFilter,container,currentMaxTs);
      if (((NamesQueryFilter)reducedFilter.filter).columns.isEmpty())       break;
      Tracing.trace("Merging data from sstable {}",sstable.descriptor.generation);
      OnDiskAtomIterator iter=reducedFilter.getSSTableColumnIterator(sstable);
      iterators.add(iter);
      if (iter.getColumnFamily() != null) {
        ColumnFamily cf=iter.getColumnFamily();
        if (cf.isMarkedForDelete())         mostRecentRowTombstone=cf.deletionInfo().getTopLevelDeletion().markedForDeleteAt;
        container.delete(cf);
        sstablesIterated++;
        while (iter.hasNext())         container.addAtom(iter.next());
      }
    }
    if (iterators.isEmpty())     return null;
    ColumnFamily returnCF=container.cloneMeShallow();
    Tracing.trace("Collating all results");
    filter.collateOnDiskAtom(returnCF,container.iterator(),gcBefore);
    if (sstablesIterated > cfs.getMinimumCompactionThreshold() && !cfs.isAutoCompactionDisabled() && cfs.getCompactionStrategy() instanceof SizeTieredCompactionStrategy) {
      Tracing.trace("Defragmenting requested data");
      Mutation mutation=new Mutation(cfs.keyspace.getName(),filter.key.key,returnCF.cloneMe());
      Keyspace.open(mutation.getKeyspaceName()).apply(mutation,false,false);
    }
    return returnCF;
  }
  finally {
    for (    OnDiskAtomIterator iter : iterators)     FileUtils.closeQuietly(iter);
  }
}
