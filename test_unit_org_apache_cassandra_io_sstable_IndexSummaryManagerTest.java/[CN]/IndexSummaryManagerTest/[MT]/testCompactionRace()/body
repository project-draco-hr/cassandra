{
  String ksname=KEYSPACE1;
  String cfname=CF_STANDARDRACE;
  Keyspace keyspace=Keyspace.open(ksname);
  ColumnFamilyStore cfs=keyspace.getColumnFamilyStore(cfname);
  int numSSTables=50;
  int numRows=1 << 10;
  createSSTables(ksname,cfname,numSSTables,numRows);
  List<SSTableReader> sstables=new ArrayList<>(cfs.getSSTables());
  ExecutorService tp=Executors.newFixedThreadPool(2);
  final AtomicBoolean failed=new AtomicBoolean(false);
  for (int i=0; i < 2; i++) {
    tp.submit(new Runnable(){
      @Override public void run(){
        while (!failed.get()) {
          try {
            IndexSummaryManager.instance.redistributeSummaries();
          }
 catch (          Throwable e) {
            failed.set(true);
          }
        }
      }
    }
);
  }
  while (cfs.getSSTables().size() != 1)   cfs.forceMajorCompaction();
  try {
    Assert.assertFalse(failed.getAndSet(true));
    for (    SSTableReader sstable : sstables) {
      Assert.assertEquals(true,sstable.isMarkedCompacted());
    }
    Assert.assertEquals(numSSTables,sstables.size());
    try {
      totalOffHeapSize(sstables);
      Assert.fail("This should have failed");
    }
 catch (    AssertionError e) {
    }
  }
  finally {
    tp.shutdownNow();
    CompactionManager.instance.finishCompactionsAndShutdown(10,TimeUnit.SECONDS);
  }
  cfs.truncateBlocking();
}
