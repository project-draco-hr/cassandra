{
  String ksname="Keyspace1";
  String cfname="StandardRace";
  Keyspace keyspace=Keyspace.open(ksname);
  ColumnFamilyStore cfs=keyspace.getColumnFamilyStore(cfname);
  int numSSTables=20;
  int numRows=28;
  createSSTables(ksname,cfname,numSSTables,numRows);
  List<SSTableReader> sstables=new ArrayList<>(cfs.getSSTables());
  ExecutorService tp=Executors.newFixedThreadPool(2);
  final AtomicBoolean failed=new AtomicBoolean(false);
  for (int i=0; i < 2; i++) {
    tp.submit(new Runnable(){
      @Override public void run(){
        while (!failed.get()) {
          try {
            IndexSummaryManager.instance.redistributeSummaries();
          }
 catch (          Throwable e) {
            failed.set(true);
          }
        }
      }
    }
);
  }
  while (cfs.getSSTables().size() != 1)   cfs.forceMajorCompaction();
  try {
    Assert.assertFalse(failed.get());
    for (    SSTableReader sstable : sstables) {
      Assert.assertEquals(true,sstable.isMarkedCompacted());
    }
    Assert.assertEquals(20,sstables.size());
    try {
      totalOffHeapSize(sstables);
      Assert.fail("This should have failed");
    }
 catch (    AssertionError e) {
    }
  }
  finally {
    tp.shutdownNow();
    CompactionManager.instance.finishCompactionsAndShutdown(10,TimeUnit.SECONDS);
  }
}
