{
  String ksname=KEYSPACE1;
  String cfname=CF_STANDARDLOWiINTERVAL;
  Keyspace keyspace=Keyspace.open(ksname);
  ColumnFamilyStore cfs=keyspace.getColumnFamilyStore(cfname);
  cfs.truncateBlocking();
  cfs.disableAutoCompaction();
  ByteBuffer value=ByteBuffer.wrap(new byte[100]);
  int numRows=256;
  for (int row=0; row < numRows; row++) {
    String key=String.format("%3d",row);
    new RowUpdateBuilder(cfs.metadata,0,key).clustering("column").add("val",value).build().applyUnsafe();
  }
  cfs.forceBlockingFlush();
  List<SSTableReader> sstables=new ArrayList<>(cfs.getSSTables());
  assertEquals(1,sstables.size());
  SSTableReader original=sstables.get(0);
  SSTableReader sstable=original;
  try (LifecycleTransaction txn=cfs.getTracker().tryModify(asList(sstable),OperationType.UNKNOWN)){
    for (int samplingLevel=1; samplingLevel < BASE_SAMPLING_LEVEL; samplingLevel++) {
      sstable=sstable.cloneWithNewSummarySamplingLevel(cfs,samplingLevel);
      assertEquals(samplingLevel,sstable.getIndexSummarySamplingLevel());
      int expectedSize=(numRows * samplingLevel) / (sstable.metadata.getMinIndexInterval() * BASE_SAMPLING_LEVEL);
      assertEquals(expectedSize,sstable.getIndexSummarySize(),1);
      txn.update(sstable,true);
      txn.checkpoint();
    }
    txn.finish();
  }
 }
