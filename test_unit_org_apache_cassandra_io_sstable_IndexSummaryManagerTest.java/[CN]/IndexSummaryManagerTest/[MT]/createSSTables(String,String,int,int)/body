{
  Keyspace keyspace=Keyspace.open(ksname);
  ColumnFamilyStore cfs=keyspace.getColumnFamilyStore(cfname);
  cfs.truncateBlocking();
  cfs.disableAutoCompaction();
  ArrayList<Future> futures=new ArrayList<>(numSSTables);
  ByteBuffer value=ByteBuffer.wrap(new byte[100]);
  for (int sstable=0; sstable < numSSTables; sstable++) {
    for (int p=0; p < numPartition; p++) {
      String key=String.format("%3d",p);
      new RowUpdateBuilder(cfs.metadata,0,key).clustering("column").add("val",value).build().applyUnsafe();
    }
    futures.add(cfs.forceFlush());
  }
  for (  Future future : futures) {
    try {
      future.get();
    }
 catch (    InterruptedException|ExecutionException e) {
      throw new RuntimeException(e);
    }
  }
  assertEquals(numSSTables,cfs.getLiveSSTables().size());
  validateData(cfs,numPartition);
}
