{
  List<ColumnDefinition> cds=new ArrayList<>();
  for (  UntypedResultSet.Row row : serializedColumns) {
    Kind kind=row.has(KIND) ? Kind.deserialize(row.getString(KIND)) : Kind.REGULAR;
    Integer componentIndex=null;
    if (kind == Kind.REGULAR && isSuper)     componentIndex=1;
 else     if (row.has(COMPONENT_INDEX))     componentIndex=row.getInt(COMPONENT_INDEX);
    AbstractType<?> comparator=getComponentComparator(rawComparator,componentIndex,kind);
    ColumnIdentifier name=new ColumnIdentifier(comparator.fromString(row.getString(COLUMN_NAME)),comparator);
    AbstractType<?> validator;
    try {
      validator=TypeParser.parse(row.getString(TYPE));
    }
 catch (    RequestValidationException e) {
      throw new RuntimeException(e);
    }
    IndexType indexType=null;
    if (row.has(INDEX_TYPE))     indexType=IndexType.valueOf(row.getString(INDEX_TYPE));
    Map<String,String> indexOptions=null;
    if (row.has(INDEX_OPTIONS))     indexOptions=FBUtilities.fromJsonMap(row.getString(INDEX_OPTIONS));
    String indexName=null;
    if (row.has(INDEX_NAME))     indexName=row.getString(INDEX_NAME);
    cds.add(new ColumnDefinition(ksName,cfName,name,validator,indexType,indexOptions,indexName,componentIndex,kind));
  }
  return cds;
}
