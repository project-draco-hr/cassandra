{
  List<ColumnDefinition> cds=new ArrayList<>();
  String query=String.format("SELECT * FROM %s.%s",Keyspace.SYSTEM_KS,SystemKeyspace.SCHEMA_COLUMNS_CF);
  for (  UntypedResultSet.Row row : QueryProcessor.resultify(query,serializedColumns)) {
    Type type=row.has(TYPE) ? Enum.valueOf(Type.class,row.getString(TYPE).toUpperCase()) : Type.REGULAR;
    Integer componentIndex=null;
    if (row.has(COMPONENT_INDEX))     componentIndex=row.getInt(COMPONENT_INDEX);
 else     if (type == Type.CLUSTERING_KEY && cfm.isSuper())     componentIndex=1;
    ByteBuffer name=cfm.getComponentComparator(componentIndex,type).fromString(row.getString(COLUMN_NAME));
    AbstractType<?> validator;
    try {
      validator=TypeParser.parse(row.getString(VALIDATOR));
    }
 catch (    RequestValidationException e) {
      throw new RuntimeException(e);
    }
    IndexType indexType=null;
    if (row.has(INDEX_TYPE))     indexType=IndexType.valueOf(row.getString(INDEX_TYPE));
    Map<String,String> indexOptions=null;
    if (row.has(INDEX_OPTIONS))     indexOptions=FBUtilities.fromJsonMap(row.getString(INDEX_OPTIONS));
    String indexName=null;
    if (row.has(INDEX_NAME))     indexName=row.getString(INDEX_NAME);
    cds.add(new ColumnDefinition(name,validator,indexType,indexOptions,indexName,componentIndex,type));
  }
  return cds;
}
