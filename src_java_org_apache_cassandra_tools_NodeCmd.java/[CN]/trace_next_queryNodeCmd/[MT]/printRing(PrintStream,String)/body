{
  Map<String,String> tokensToEndpoints=probe.getTokenToEndpointMap();
  LinkedHashMultimap<String,String> endpointsToTokens=LinkedHashMultimap.create();
  for (  Map.Entry<String,String> entry : tokensToEndpoints.entrySet())   endpointsToTokens.put(entry.getValue(),entry.getKey());
  String format="%-16s%-12s%-7s%-8s%-16s%-20s%-44s%n";
  Map<InetAddress,Float> ownerships;
  boolean keyspaceSelected;
  try {
    ownerships=probe.effectiveOwnership(keyspace);
    keyspaceSelected=true;
  }
 catch (  ConfigurationException ex) {
    ownerships=probe.getOwnership();
    outs.printf("Note: Ownership information does not include topology; for complete information, specify a keyspace%n");
    keyspaceSelected=false;
  }
  try {
    outs.println();
    Map<String,Map<InetAddress,Float>> perDcOwnerships=Maps.newLinkedHashMap();
    for (    Map.Entry<InetAddress,Float> ownership : ownerships.entrySet()) {
      String dc=probe.getEndpointSnitchInfoProxy().getDatacenter(ownership.getKey().getHostAddress());
      if (!perDcOwnerships.containsKey(dc))       perDcOwnerships.put(dc,new LinkedHashMap<InetAddress,Float>());
      perDcOwnerships.get(dc).put(ownership.getKey(),ownership.getValue());
    }
    for (    Map.Entry<String,Map<InetAddress,Float>> entry : perDcOwnerships.entrySet())     printDc(outs,format,entry.getKey(),endpointsToTokens,keyspaceSelected,entry.getValue());
  }
 catch (  UnknownHostException e) {
    throw new RuntimeException(e);
  }
}
