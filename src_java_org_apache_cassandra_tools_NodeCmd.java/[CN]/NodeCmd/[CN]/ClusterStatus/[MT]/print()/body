{
  SetHostStat ownerships;
  boolean hasEffectiveOwns=false, isTokenPerNode=true;
  try {
    ownerships=new SetHostStat(probe.effectiveOwnership(kSpace));
    hasEffectiveOwns=true;
  }
 catch (  IllegalStateException e) {
    ownerships=new SetHostStat(probe.getOwnership());
  }
  if (new HashSet<String>(tokensToEndpoints.values()).size() < tokensToEndpoints.keySet().size())   isTokenPerNode=false;
  Map<String,SetHostStat> dcs=getOwnershipByDc(ownerships);
  findMaxAddressLength(dcs);
  for (  Map.Entry<String,SetHostStat> dc : dcs.entrySet()) {
    String dcHeader=String.format("Datacenter: %s%n",dc.getKey());
    outs.printf(dcHeader);
    for (int i=0; i < (dcHeader.length() - 1); i++)     outs.print('=');
    outs.println();
    printStatusLegend();
    printNodesHeader(hasEffectiveOwns,isTokenPerNode);
    for (    HostStat entry : dc.getValue())     printNode(entry,hasEffectiveOwns,isTokenPerNode);
  }
}
