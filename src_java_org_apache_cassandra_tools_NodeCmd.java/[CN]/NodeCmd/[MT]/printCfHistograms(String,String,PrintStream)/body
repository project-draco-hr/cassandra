{
  long[] estimatedRowSize=(long[])probe.getColumnFamilyMetric(keySpace,columnFamily,"EstimatedRowSizeHistogram");
  long[] estimatedColumnCount=(long[])probe.getColumnFamilyMetric(keySpace,columnFamily,"EstimatedColumnCountHistogram");
  long[] bucketOffsets=new EstimatedHistogram().getBucketOffsets();
  EstimatedHistogram rowSizeHist=new EstimatedHistogram(bucketOffsets,estimatedRowSize);
  EstimatedHistogram columnCountHist=new EstimatedHistogram(bucketOffsets,estimatedColumnCount);
  double[] estimatedRowSizePercentiles=new double[7];
  double[] estimatedColumnCountPercentiles=new double[7];
  double[] offsetPercentiles=new double[]{0.5,0.75,0.95,0.98,0.99};
  for (int i=0; i < offsetPercentiles.length; i++) {
    estimatedRowSizePercentiles[i]=rowSizeHist.percentile(offsetPercentiles[i]);
    estimatedColumnCountPercentiles[i]=columnCountHist.percentile(offsetPercentiles[i]);
  }
  estimatedRowSizePercentiles[5]=rowSizeHist.min();
  estimatedColumnCountPercentiles[5]=columnCountHist.min();
  estimatedRowSizePercentiles[6]=rowSizeHist.max();
  estimatedColumnCountPercentiles[6]=columnCountHist.max();
  String[] percentiles=new String[]{"50%","75%","95%","98%","99%","Min","Max"};
  double[] readLatency=probe.metricPercentilesAsArray((JmxReporter.HistogramMBean)probe.getColumnFamilyMetric(keySpace,columnFamily,"ReadLatency"));
  double[] writeLatency=probe.metricPercentilesAsArray((JmxReporter.TimerMBean)probe.getColumnFamilyMetric(keySpace,columnFamily,"WriteLatency"));
  double[] sstablesPerRead=probe.metricPercentilesAsArray((JmxReporter.HistogramMBean)probe.getColumnFamilyMetric(keySpace,columnFamily,"SSTablesPerReadHistogram"));
  output.println(String.format("%s/%s histograms",keySpace,columnFamily));
  output.println(String.format("%-10s%10s%18s%18s%18s%18s","Percentile","SSTables","Write Latency","Read Latency","Partition Size","Cell Count"));
  output.println(String.format("%-10s%10s%18s%18s%18s%18s","","","(micros)","(micros)","(bytes)",""));
  for (int i=0; i < percentiles.length; i++) {
    output.println(String.format("%-10s%10.2f%18.2f%18.2f%18.0f%18.0f",percentiles[i],sstablesPerRead[i],writeLatency[i],readLatency[i],estimatedRowSizePercentiles[i],estimatedColumnCountPercentiles[i]));
  }
  output.println();
}
