{
  ColumnFamilyStoreMBean store=this.probe.getCfsProxy(keySpace,columnFamily);
  long[] offsets=new EstimatedHistogram().getBucketOffsets();
  long[] rrlh=store.getRecentReadLatencyHistogramMicros();
  long[] rwlh=store.getRecentWriteLatencyHistogramMicros();
  long[] sprh=store.getRecentSSTablesPerReadHistogram();
  long[] ersh=store.getEstimatedRowSizeHistogram();
  long[] ecch=store.getEstimatedColumnCountHistogram();
  output.println(String.format("%s/%s histograms",keySpace,columnFamily));
  output.println("");
  if (compactFormat) {
    output.println(String.format("%-10s%10s%18s%18s%18s%18s","Offset","SSTables","Write Latency","Read Latency","Partition Size","Cell Count"));
    output.println(String.format("%-10s%10s%18s%18s%18s%18s","","","(micros)","(micros)","(bytes)",""));
    for (int i=0; i < offsets.length; i++) {
      output.println(String.format("%-10d%10s%18s%18s%18s%18s",offsets[i],(i < sprh.length ? sprh[i] : "0"),(i < rwlh.length ? rwlh[i] : "0"),(i < rrlh.length ? rrlh[i] : "0"),(i < ersh.length ? ersh[i] : "0"),(i < ecch.length ? ecch[i] : "0")));
    }
  }
 else {
    output.println("SSTables per Read");
    printHistogram(sprh,offsets,"sstables",output);
    output.println("Write Latency (microseconds)");
    printHistogram(rwlh,offsets,"us",output);
    output.println("Read Latency (microseconds)");
    printHistogram(rrlh,offsets,"us",output);
    output.println("Partition Size (bytes)");
    printHistogram(ersh,offsets,"bytes",output);
    output.println("Cell Count per Partition");
    printHistogram(ecch,offsets,"cells",output);
  }
}
