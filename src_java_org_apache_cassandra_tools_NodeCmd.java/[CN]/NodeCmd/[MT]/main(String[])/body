{
  CommandLineParser parser=new PosixParser();
  CommandLine cmd=null;
  try {
    cmd=parser.parse(options,args);
  }
 catch (  ParseException parseExcep) {
    System.err.println(parseExcep);
    printUsage();
    System.exit(1);
  }
  String host=cmd.getOptionValue(HOST_OPT_LONG);
  int port=defaultPort;
  String portNum=cmd.getOptionValue(PORT_OPT_LONG);
  if (portNum != null) {
    try {
      port=Integer.parseInt(portNum);
    }
 catch (    NumberFormatException e) {
      throw new ParseException("Port must be a number");
    }
  }
  NodeProbe probe=null;
  try {
    probe=new NodeProbe(host,port);
  }
 catch (  IOException ioe) {
    System.err.println("Error connecting to remote JMX agent!");
    ioe.printStackTrace();
    System.exit(3);
  }
  if (cmd.getArgs().length < 1) {
    System.err.println("Missing argument for command.");
    printUsage();
    System.exit(1);
  }
  NodeCmd nodeCmd=new NodeCmd(probe);
  String[] arguments=cmd.getArgs();
  String cmdName=arguments[0];
  if (cmdName.equals("ring")) {
    nodeCmd.printRing(System.out);
  }
 else   if (cmdName.equals("info")) {
    nodeCmd.printInfo(System.out);
  }
 else   if (cmdName.equals("cleanup")) {
    probe.forceTableCleanup();
  }
 else   if (cmdName.equals("compact")) {
    probe.forceTableCompaction();
  }
 else   if (cmdName.equals("cfstats")) {
    nodeCmd.printColumnFamilyStats(System.out);
  }
 else   if (cmdName.equals("decommission")) {
    probe.decommission();
  }
 else   if (cmdName.equals("loadbalance")) {
    probe.loadBalance();
  }
 else   if (cmdName.equals("move")) {
    if (arguments.length <= 1) {
      System.err.println("missing token argument");
    }
    probe.move(arguments[1]);
  }
 else   if (cmdName.equals("removetoken")) {
    if (arguments.length <= 1) {
      System.err.println("missing token argument");
    }
    probe.removeToken(arguments[1]);
  }
 else   if (cmdName.equals("snapshot")) {
    String snapshotName="";
    if (arguments.length > 1) {
      snapshotName=arguments[1];
    }
    probe.takeSnapshot(snapshotName);
  }
 else   if (cmdName.equals("clearsnapshot")) {
    probe.clearSnapshot();
  }
 else   if (cmdName.equals("tpstats")) {
    nodeCmd.printThreadPoolStats(System.out);
  }
 else   if (cmdName.equals("flush") || cmdName.equals("repair")) {
    if (cmd.getArgs().length < 2) {
      System.err.println("Missing keyspace argument.");
      printUsage();
      System.exit(1);
    }
    String[] columnFamilies=new String[cmd.getArgs().length - 2];
    for (int i=0; i < columnFamilies.length; i++) {
      columnFamilies[i]=cmd.getArgs()[i + 2];
    }
    if (cmdName.equals("flush"))     probe.forceTableFlush(cmd.getArgs()[1],columnFamilies);
 else     probe.forceTableRepair(cmd.getArgs()[1],columnFamilies);
  }
 else   if (cmdName.equals("drain")) {
    try {
      probe.drain();
    }
 catch (    ExecutionException ee) {
      System.err.println("Error occured during flushing");
      ee.printStackTrace();
      System.exit(3);
    }
  }
 else   if (cmdName.equals("setcachecapacity")) {
    if (cmd.getArgs().length != 5) {
      System.err.println("cacheinfo requires keyspace and column family name arguments, followed by key cache capacity and row cache capacity, in rows");
    }
    String tableName=cmd.getArgs()[1];
    String cfName=cmd.getArgs()[2];
    int keyCacheCapacity=Integer.valueOf(cmd.getArgs()[3]);
    int rowCacheCapacity=Integer.valueOf(cmd.getArgs()[4]);
    probe.setCacheCapacities(tableName,cfName,keyCacheCapacity,rowCacheCapacity);
  }
 else   if (cmdName.equals("getcompactionthreshold")) {
    probe.getCompactionThreshold(System.out);
  }
 else   if (cmdName.equals("setcompactionthreshold")) {
    if (arguments.length < 2) {
      System.err.println("Missing threshold value(s)");
      printUsage();
      System.exit(1);
    }
    int minthreshold=Integer.parseInt(arguments[1]);
    int maxthreshold=CompactionManager.instance.getMaximumCompactionThreshold();
    if (arguments.length > 2) {
      maxthreshold=Integer.parseInt(arguments[2]);
    }
    if (minthreshold > maxthreshold) {
      System.err.println("Min threshold can't be greater than Max threshold");
      printUsage();
      System.exit(1);
    }
    if (minthreshold < 2 && maxthreshold != 0) {
      System.err.println("Min threshold must be at least 2");
      printUsage();
      System.exit(1);
    }
    probe.setCompactionThreshold(minthreshold,maxthreshold);
  }
 else   if (cmdName.equals("streams")) {
    String otherHost=arguments.length > 1 ? arguments[1] : null;
    nodeCmd.printStreamInfo(otherHost == null ? null : InetAddress.getByName(otherHost),System.out);
  }
 else {
    System.err.println("Unrecognized command: " + cmdName + ".");
    printUsage();
    System.exit(1);
  }
  System.exit(0);
}
