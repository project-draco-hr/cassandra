{
  CommandLineParser parser=new PosixParser();
  CommandLine cmd=null;
  try {
    cmd=parser.parse(options,args);
  }
 catch (  ParseException parseExcep) {
    System.err.println(parseExcep);
    printUsage();
    System.exit(1);
  }
  String host=cmd.getOptionValue(HOST_OPT_LONG);
  int port=defaultPort;
  String portNum=cmd.getOptionValue(PORT_OPT_LONG);
  if (portNum != null) {
    try {
      port=Integer.parseInt(portNum);
    }
 catch (    NumberFormatException e) {
      throw new ParseException("Port must be a number");
    }
  }
  NodeProbe probe=null;
  try {
    probe=new NodeProbe(host,port);
  }
 catch (  IOException ioe) {
    System.err.println("Error connecting to remote JMX agent!");
    ioe.printStackTrace();
    System.exit(3);
  }
  if (cmd.getArgs().length < 1) {
    System.err.println("Missing argument for command.");
    printUsage();
    System.exit(1);
  }
  NodeCmd nodeCmd=new NodeCmd(probe);
  String[] arguments=cmd.getArgs();
  String cmdName=arguments[0];
  if (cmdName.equals("ring")) {
    nodeCmd.printRing(System.out);
  }
 else   if (cmdName.equals("info")) {
    nodeCmd.printInfo(System.out);
  }
 else   if (cmdName.equals("cleanup")) {
    try {
      if (arguments.length > 1)       probe.forceTableCleanup(arguments[1]);
 else       probe.forceTableCleanup();
    }
 catch (    ExecutionException ee) {
      System.err.println("Error occured during Keyspace cleanup");
      ee.printStackTrace();
      System.exit(3);
    }
  }
 else   if (cmdName.equals("compact")) {
    try {
      if (arguments.length > 1)       probe.forceTableCompaction(arguments[1]);
 else       probe.forceTableCompaction();
    }
 catch (    ExecutionException ee) {
      System.err.println("Error occured during Keyspace compaction");
      ee.printStackTrace();
      System.exit(3);
    }
  }
 else   if (cmdName.equals("compactionstats")) {
    nodeCmd.printCompactionStats(System.out);
  }
 else   if (cmdName.equals("cfstats")) {
    nodeCmd.printColumnFamilyStats(System.out);
  }
 else   if (cmdName.equals("decommission")) {
    probe.decommission();
  }
 else   if (cmdName.equals("loadbalance")) {
    probe.loadBalance();
  }
 else   if (cmdName.equals("move")) {
    if (arguments.length <= 1) {
      System.err.println("missing token argument");
    }
    probe.move(arguments[1]);
  }
 else   if (cmdName.equals("removetoken")) {
    if (arguments.length <= 1) {
      System.err.println("Missing an argument.");
      printUsage();
    }
 else     if (arguments[1].equals("status")) {
      nodeCmd.printRemovalStatus(System.out);
    }
 else     if (arguments[1].equals("force")) {
      nodeCmd.printRemovalStatus(System.out);
      probe.forceRemoveCompletion();
    }
 else     probe.removeToken(arguments[1]);
  }
 else   if (cmdName.equals("snapshot")) {
    String snapshotName="";
    if (arguments.length > 1) {
      snapshotName=arguments[1];
    }
    probe.takeSnapshot(snapshotName);
  }
 else   if (cmdName.equals("clearsnapshot")) {
    probe.clearSnapshot();
  }
 else   if (cmdName.equals("tpstats")) {
    nodeCmd.printThreadPoolStats(System.out);
  }
 else   if (cmdName.equals("flush") || cmdName.equals("repair")) {
    if (cmd.getArgs().length < 2) {
      System.err.println("Missing keyspace argument.");
      printUsage();
      System.exit(1);
    }
    String[] columnFamilies=new String[cmd.getArgs().length - 2];
    for (int i=0; i < columnFamilies.length; i++) {
      columnFamilies[i]=cmd.getArgs()[i + 2];
    }
    if (cmdName.equals("flush"))     try {
      probe.forceTableFlush(cmd.getArgs()[1],columnFamilies);
    }
 catch (    ExecutionException ee) {
      System.err.println("Error occured during flushing");
      ee.printStackTrace();
      System.exit(3);
    }
 else     probe.forceTableRepair(cmd.getArgs()[1],columnFamilies);
  }
 else   if (cmdName.equals("drain")) {
    try {
      probe.drain();
    }
 catch (    ExecutionException ee) {
      System.err.println("Error occured during flushing");
      ee.printStackTrace();
      System.exit(3);
    }
  }
 else   if (cmdName.equals("setcachecapacity")) {
    if (cmd.getArgs().length != 5) {
      System.err.println("cacheinfo requires: Keyspace name, ColumnFamily name, key cache capacity (in keys), and row cache capacity (in rows)");
    }
    String tableName=cmd.getArgs()[1];
    String cfName=cmd.getArgs()[2];
    int keyCacheCapacity=Integer.valueOf(cmd.getArgs()[3]);
    int rowCacheCapacity=Integer.valueOf(cmd.getArgs()[4]);
    probe.setCacheCapacities(tableName,cfName,keyCacheCapacity,rowCacheCapacity);
  }
 else   if (cmdName.equals("getcompactionthreshold")) {
    if (arguments.length < 3) {
      System.err.println("Missing keyspace/cfname");
      printUsage();
      System.exit(1);
    }
    probe.getCompactionThreshold(System.out,cmd.getArgs()[1],cmd.getArgs()[2]);
  }
 else   if (cmdName.equals("setcompactionthreshold")) {
    if (cmd.getArgs().length != 5) {
      System.err.println("setcompactionthreshold requires: Keyspace name, ColumnFamily name, " + "min threshold, and max threshold.");
      printUsage();
      System.exit(1);
    }
    String ks=cmd.getArgs()[1];
    String cf=cmd.getArgs()[2];
    int minthreshold=Integer.parseInt(arguments[3]);
    int maxthreshold=Integer.parseInt(arguments[4]);
    if ((minthreshold < 0) || (maxthreshold < 0)) {
      System.err.println("Thresholds must be positive integers.");
      printUsage();
      System.exit(1);
    }
    if (minthreshold > maxthreshold) {
      System.err.println("Min threshold can't be greater than Max threshold");
      printUsage();
      System.exit(1);
    }
    if (minthreshold < 2 && maxthreshold != 0) {
      System.err.println("Min threshold must be at least 2");
      printUsage();
      System.exit(1);
    }
    probe.setCompactionThreshold(ks,cf,minthreshold,maxthreshold);
  }
 else   if (cmdName.equals("netstats")) {
    String otherHost=arguments.length > 1 ? arguments[1] : null;
    nodeCmd.printNetworkStats(otherHost == null ? null : InetAddress.getByName(otherHost),System.out);
  }
 else   if (cmdName.equals("cfhistograms")) {
    if (arguments.length < 3) {
      System.err.println("Usage of cfhistograms: <keyspace> <column_family>.");
      System.exit(1);
    }
    nodeCmd.printCfHistograms(arguments[1],arguments[2],System.out);
  }
 else   if (cmdName.equals("version")) {
    nodeCmd.printReleaseVersion(System.out);
  }
 else {
    System.err.println("Unrecognized command: " + cmdName + ".");
    printUsage();
    System.exit(1);
  }
  System.exit(0);
}
