{
  outs.printf("Mode: %s%n",probe.getOperationMode());
  Set<InetAddress> hosts=addr == null ? probe.getStreamDestinations() : new HashSet<InetAddress>(){
{
      add(addr);
    }
  }
;
  if (hosts.size() == 0)   outs.println("Not sending any streams.");
  for (  InetAddress host : hosts) {
    try {
      List<String> files=probe.getFilesDestinedFor(host);
      if (files.size() > 0) {
        outs.printf("Streaming to: %s%n",host);
        for (        String file : files)         outs.printf("   %s%n",file);
      }
 else {
        outs.printf(" Nothing streaming to %s%n",host);
      }
    }
 catch (    IOException ex) {
      outs.printf("   Error retrieving file data for %s%n",host);
    }
  }
  hosts=addr == null ? probe.getStreamSources() : new HashSet<InetAddress>(){
{
      add(addr);
    }
  }
;
  if (hosts.size() == 0)   outs.println("Not receiving any streams.");
  for (  InetAddress host : hosts) {
    try {
      List<String> files=probe.getIncomingFiles(host);
      if (files.size() > 0) {
        outs.printf("Streaming from: %s%n",host);
        for (        String file : files)         outs.printf("   %s%n",file);
      }
 else {
        outs.printf(" Nothing streaming from %s%n",host);
      }
    }
 catch (    IOException ex) {
      outs.printf("   Error retrieving file data for %s%n",host);
    }
  }
  MessagingServiceMBean ms=probe.msProxy;
  outs.printf("%-25s","Pool Name");
  outs.printf("%10s","Active");
  outs.printf("%10s","Pending");
  outs.printf("%15s%n","Completed");
  int pending;
  long completed;
  pending=0;
  for (  int n : ms.getCommandPendingTasks().values())   pending+=n;
  completed=0;
  for (  long n : ms.getCommandCompletedTasks().values())   completed+=n;
  outs.printf("%-25s%10s%10s%15s%n","Commands","n/a",pending,completed);
  pending=0;
  for (  int n : ms.getResponsePendingTasks().values())   pending+=n;
  completed=0;
  for (  long n : ms.getResponseCompletedTasks().values())   completed+=n;
  outs.printf("%-25s%10s%10s%15s%n","Responses","n/a",pending,completed);
}
