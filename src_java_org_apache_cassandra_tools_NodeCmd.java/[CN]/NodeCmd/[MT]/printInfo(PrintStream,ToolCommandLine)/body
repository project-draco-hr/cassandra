{
  boolean gossipInitialized=probe.isInitialized();
  List<String> toks=probe.getTokens();
  if (toks.size() == 1)   outs.printf("%-17s: %s%n","Token",toks.get(0));
 else   if (!cmd.hasOption(TOKENS_OPT.left))   outs.printf("%-17s: (invoke with -T/--tokens to see all %d tokens)%n","Token",toks.size());
  outs.printf("%-17s: %s%n","ID",probe.getLocalHostId());
  outs.printf("%-17s: %s%n","Gossip active",gossipInitialized);
  outs.printf("%-17s: %s%n","Thrift active",probe.isThriftServerRunning());
  outs.printf("%-17s: %s%n","Native Transport active",probe.isNativeTransportRunning());
  outs.printf("%-17s: %s%n","Load",probe.getLoadString());
  if (gossipInitialized)   outs.printf("%-17s: %s%n","Generation No",probe.getCurrentGenerationNumber());
 else   outs.printf("%-17s: %s%n","Generation No",0);
  long secondsUp=probe.getUptime() / 1000;
  outs.printf("%-17s: %d%n","Uptime (seconds)",secondsUp);
  MemoryUsage heapUsage=probe.getHeapMemoryUsage();
  double memUsed=(double)heapUsage.getUsed() / (1024 * 1024);
  double memMax=(double)heapUsage.getMax() / (1024 * 1024);
  outs.printf("%-17s: %.2f / %.2f%n","Heap Memory (MB)",memUsed,memMax);
  outs.printf("%-17s: %s%n","Data Center",probe.getDataCenter());
  outs.printf("%-17s: %s%n","Rack",probe.getRack());
  outs.printf("%-17s: %s%n","Exceptions",probe.getStorageMetric("Exceptions"));
  CacheServiceMBean cacheService=probe.getCacheServiceMBean();
  outs.printf("%-17s: entries %d, size %d (bytes), capacity %d (bytes), %d hits, %d requests, %.3f recent hit rate, %d save period in seconds%n","Key Cache",probe.getCacheMetric("KeyCache","Entries"),probe.getCacheMetric("KeyCache","Size"),probe.getCacheMetric("KeyCache","Capacity"),probe.getCacheMetric("KeyCache","Hits"),probe.getCacheMetric("KeyCache","Requests"),probe.getCacheMetric("KeyCache","HitRate"),cacheService.getKeyCacheSavePeriodInSeconds());
  outs.printf("%-17s: entries %d, size %d (bytes), capacity %d (bytes), %d hits, %d requests, %.3f recent hit rate, %d save period in seconds%n","Row Cache",probe.getCacheMetric("RowCache","Entries"),probe.getCacheMetric("RowCache","Size"),probe.getCacheMetric("RowCache","Capacity"),probe.getCacheMetric("RowCache","Hits"),probe.getCacheMetric("RowCache","Requests"),probe.getCacheMetric("RowCache","HitRate"),cacheService.getRowCacheSavePeriodInSeconds());
  if (toks.size() > 1 && cmd.hasOption(TOKENS_OPT.left)) {
    for (    String tok : toks)     outs.printf("%-17s: %s%n","Token",tok);
  }
}
