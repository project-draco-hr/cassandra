{
  Collection<String> liveNodes=probe.getLiveNodes();
  Collection<String> deadNodes=probe.getUnreachableNodes();
  Collection<String> joiningNodes=probe.getJoiningNodes();
  Collection<String> leavingNodes=probe.getLeavingNodes();
  Collection<String> movingNodes=probe.getMovingNodes();
  Map<String,String> loadMap=probe.getLoadMap();
  outs.println("Datacenter: " + dc);
  outs.println("==========");
  List<String> tokens=new ArrayList<String>();
  String lastToken="";
  for (  HostStat stat : hoststats) {
    tokens.addAll(endpointsToTokens.get(stat.ip));
    lastToken=tokens.get(tokens.size() - 1);
  }
  outs.printf(format,"Address","Rack","Status","State","Load","Owns","Token");
  if (hoststats.size() > 1)   outs.printf(format,"","","","","","",lastToken);
 else   outs.println();
  for (  HostStat stat : hoststats) {
    String endpoint=stat.ip;
    String rack;
    try {
      rack=probe.getEndpointSnitchInfoProxy().getRack(endpoint);
    }
 catch (    UnknownHostException e) {
      rack="Unknown";
    }
    String status=liveNodes.contains(endpoint) ? "Up" : deadNodes.contains(endpoint) ? "Down" : "?";
    String state="Normal";
    if (joiningNodes.contains(endpoint))     state="Joining";
 else     if (leavingNodes.contains(endpoint))     state="Leaving";
 else     if (movingNodes.contains(endpoint))     state="Moving";
    String load=loadMap.containsKey(endpoint) ? loadMap.get(endpoint) : "?";
    String owns=stat.owns != null ? new DecimalFormat("##0.00%").format(stat.owns) : "?";
    outs.printf(format,endpoint,rack,status,state,load,owns,stat.token);
  }
  outs.println();
}
