{
  Map<Token,String> tokenToEndpoint=probe.getTokenToEndpointMap();
  List<Token> sortedTokens=new ArrayList<Token>(tokenToEndpoint.keySet());
  Collections.sort(sortedTokens);
  Collection<String> liveNodes=probe.getLiveNodes();
  Collection<String> deadNodes=probe.getUnreachableNodes();
  Collection<String> joiningNodes=probe.getJoiningNodes();
  Collection<String> leavingNodes=probe.getLeavingNodes();
  Map<String,String> loadMap=probe.getLoadMap();
  outs.printf("%-16s%-7s%-8s%-16s%-44s\n","Address","Status","State","Load","Token");
  if (sortedTokens.size() > 1)   outs.printf("%-14s%-11s%-14s%-43s\n","","","",sortedTokens.get(sortedTokens.size() - 1));
  for (  Token token : sortedTokens) {
    String primaryEndpoint=tokenToEndpoint.get(token);
    String status=liveNodes.contains(primaryEndpoint) ? "Up" : deadNodes.contains(primaryEndpoint) ? "Down" : "?";
    String state=joiningNodes.contains(primaryEndpoint) ? "Joining" : leavingNodes.contains(primaryEndpoint) ? "Leaving" : "Normal";
    String load=loadMap.containsKey(primaryEndpoint) ? loadMap.get(primaryEndpoint) : "?";
    outs.printf("%-16s%-7s%-8s%-16s%-44s\n",primaryEndpoint,status,state,load,token);
  }
}
