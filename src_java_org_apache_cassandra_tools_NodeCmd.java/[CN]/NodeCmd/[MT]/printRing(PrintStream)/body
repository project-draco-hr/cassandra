{
  Map<Range,List<String>> rangesToIterate=new HashMap<Range,List<String>>();
  try {
    rangesToIterate.putAll(probe.getPendingRangeToEndpoingMap(null));
    rangesToIterate.putAll(probe.getRangeToEndpointMap(null));
  }
 catch (  IllegalStateException ise) {
    outs.println(String.format("Ring information unavailable: %s",ise.getMessage()));
    return;
  }
  List<Range> ranges=new ArrayList<Range>(rangesToIterate.keySet());
  Collections.sort(ranges);
  Set<String> liveNodes=probe.getLiveNodes();
  Set<String> deadNodes=probe.getUnreachableNodes();
  Set<String> joiningNodes=probe.getJoiningNodes();
  Set<String> leavingNodes=probe.getLeavingNodes();
  Map<String,String> loadMap=probe.getLoadMap();
  outs.print(String.format("%-16s","Address"));
  outs.print(String.format("%-7s","Status"));
  outs.print(String.format("%-8s","State"));
  outs.print(String.format("%-16s","Load"));
  outs.print(String.format("%-44s","Token"));
  outs.println();
  if (ranges.size() > 1)   outs.println(String.format("%-14s%-11s%-14s%-43s","","","",ranges.get(0).left));
  for (  Range range : ranges) {
    List<String> endpoints=rangesToIterate.get(range);
    String primaryEndpoint=endpoints.get(0);
    outs.print(String.format("%-16s",primaryEndpoint));
    String status=liveNodes.contains(primaryEndpoint) ? "Up" : deadNodes.contains(primaryEndpoint) ? "Down" : "?";
    outs.print(String.format("%-7s",status));
    String state=joiningNodes.contains(primaryEndpoint) ? "Joining" : leavingNodes.contains(primaryEndpoint) ? "Leaving" : "Normal";
    outs.print(String.format("%-8s",state));
    outs.print(String.format("%-16s",loadMap.containsKey(primaryEndpoint) ? loadMap.get(primaryEndpoint) : "?"));
    outs.print(String.format("%-44s",range.right));
    outs.println();
  }
}
