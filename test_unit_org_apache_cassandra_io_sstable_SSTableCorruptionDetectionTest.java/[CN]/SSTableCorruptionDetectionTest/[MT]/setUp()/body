{
  CFMetaData cfm=CFMetaData.Builder.create(keyspace,table).addPartitionKey("pk",AsciiType.instance).addClusteringColumn("ck1",AsciiType.instance).addClusteringColumn("ck2",AsciiType.instance).addRegularColumn("reg1",BytesType.instance).addRegularColumn("reg2",BytesType.instance).build();
  cfm.compression(CompressionParams.noCompression());
  SchemaLoader.createKeyspace(keyspace,KeyspaceParams.simple(1),cfm);
  cfs=Keyspace.open(keyspace).getColumnFamilyStore(table);
  cfs.disableAutoCompaction();
  for (  ColumnDefinition cd : cfs.metadata.allColumns())   cd.type.setMaxValueSize(1024 * 1024);
  long seed=System.nanoTime();
  logger.info("Seed {}",seed);
  random=new Random(seed);
  truncate(cfs);
  File dir=cfs.getDirectories().getDirectoryForNewSSTables();
  txn=LifecycleTransaction.offline(OperationType.WRITE);
  writer=getWriter(cfs,dir,txn);
  for (int i=0; i < numberOfPks; i++) {
    UpdateBuilder builder=UpdateBuilder.create(cfs.metadata,String.format("pkvalue_%07d",i)).withTimestamp(1);
    byte[] reg1=new byte[valueSize];
    random.nextBytes(reg1);
    byte[] reg2=new byte[valueSize];
    random.nextBytes(reg2);
    builder.newRow("clustering_" + i,"clustering_" + (i + 1)).add("reg1",ByteBuffer.wrap(reg1)).add("reg2",ByteBuffer.wrap(reg2));
    writer.append(builder.build().unfilteredIterator());
  }
  cfs.forceBlockingFlush();
  ssTableReader=writer.finish(true);
  txn.update(ssTableReader,false);
  LifecycleTransaction.waitForDeletions();
}
