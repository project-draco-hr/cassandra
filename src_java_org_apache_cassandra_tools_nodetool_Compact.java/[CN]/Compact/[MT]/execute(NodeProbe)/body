{
  final boolean tokenProvided=!(startToken.isEmpty() && endToken.isEmpty());
  if (splitOutput && (userDefined || tokenProvided)) {
    throw new RuntimeException("Invalid option combination: Can not use split-output here");
  }
  if (userDefined && tokenProvided) {
    throw new RuntimeException("Invalid option combination: Can not provide tokens when using user-defined");
  }
  if (userDefined) {
    try {
      String userDefinedFiles=String.join(",",args);
      probe.forceUserDefinedCompaction(userDefinedFiles);
    }
 catch (    Exception e) {
      throw new RuntimeException("Error occurred during user defined compaction",e);
    }
    return;
  }
  List<String> keyspaces=parseOptionalKeyspace(args,probe);
  String[] tableNames=parseOptionalTables(args);
  for (  String keyspace : keyspaces) {
    try {
      if (tokenProvided) {
        probe.forceKeyspaceCompactionForTokenRange(keyspace,startToken,endToken,tableNames);
      }
 else {
        probe.forceKeyspaceCompaction(splitOutput,keyspace,tableNames);
      }
    }
 catch (    Exception e) {
      throw new RuntimeException("Error occurred during compaction",e);
    }
  }
}
