{
  int numCellNames=in.readInt();
  NavigableSet<Clustering> clusterings=new TreeSet<>(metadata.comparator);
  ColumnFilter.Builder selectionBuilder=ColumnFilter.selectionBuilder();
  for (int i=0; i < numCellNames; i++) {
    ByteBuffer buffer=ByteBufferUtil.readWithShortLength(in);
    LegacyLayout.LegacyCellName cellName;
    try {
      cellName=LegacyLayout.decodeCellName(metadata,buffer);
    }
 catch (    UnknownColumnException exc) {
      throw new UnknownColumnFamilyException("Received legacy range read command with names filter for unrecognized column name. " + "Fill name in filter (hex): " + ByteBufferUtil.bytesToHex(buffer),metadata.cfId);
    }
    if (metadata.isStaticCompactTable() && cellName.clustering.equals(Clustering.STATIC_CLUSTERING)) {
      clusterings.add(new Clustering(cellName.column.name.bytes));
      selectionBuilder.add(metadata.compactValueColumn());
    }
 else {
      clusterings.add(cellName.clustering);
    }
    selectionBuilder.add(cellName.column);
  }
  if (metadata.isStaticCompactTable() && clusterings.isEmpty())   selectionBuilder.addAll(metadata.partitionColumns());
  in.readBoolean();
  ClusteringIndexNamesFilter filter=new ClusteringIndexNamesFilter(clusterings,false);
  return Pair.create(selectionBuilder.build(),filter);
}
