{
  for (  String legacyVersion : legacyVersions) {
    logger.info("Preparing legacy version {}",legacyVersion);
    createTables(legacyVersion);
    loadLegacyTable("legacy_%s_simple",legacyVersion);
    loadLegacyTable("legacy_%s_simple_counter",legacyVersion);
    loadLegacyTable("legacy_%s_clust",legacyVersion);
    loadLegacyTable("legacy_%s_clust_counter",legacyVersion);
    CacheService.instance.invalidateKeyCache();
    long startCount=CacheService.instance.keyCache.size();
    for (int ck=0; ck < 50; ck++) {
      String ckValue=Integer.toString(ck) + longString;
      for (int pk=0; pk < 5; pk++) {
        logger.debug("for pk={} ck={}",pk,ck);
        String pkValue=Integer.toString(pk);
        UntypedResultSet rs;
        if (ck == 0) {
          rs=QueryProcessor.executeInternal(String.format("SELECT val FROM legacy_tables.legacy_%s_simple WHERE pk=?",legacyVersion),pkValue);
          Assert.assertNotNull(rs);
          Assert.assertEquals(1,rs.size());
          Assert.assertEquals("foo bar baz",rs.one().getString("val"));
          rs=QueryProcessor.executeInternal(String.format("SELECT val FROM legacy_tables.legacy_%s_simple_counter WHERE pk=?",legacyVersion),pkValue);
          Assert.assertNotNull(rs);
          Assert.assertEquals(1,rs.size());
          Assert.assertEquals(1L,rs.one().getLong("val"));
        }
        rs=QueryProcessor.executeInternal(String.format("SELECT val FROM legacy_tables.legacy_%s_clust WHERE pk=? AND ck=?",legacyVersion),pkValue,ckValue);
        assertLegacyClustRows(1,rs);
        String ckValue2=Integer.toString(ck < 10 ? 40 : ck - 1) + longString;
        String ckValue3=Integer.toString(ck > 39 ? 10 : ck + 1) + longString;
        rs=QueryProcessor.executeInternal(String.format("SELECT val FROM legacy_tables.legacy_%s_clust WHERE pk=? AND ck IN (?, ?, ?)",legacyVersion),pkValue,ckValue,ckValue2,ckValue3);
        assertLegacyClustRows(3,rs);
        rs=QueryProcessor.executeInternal(String.format("SELECT val FROM legacy_tables.legacy_%s_clust_counter WHERE pk=? AND ck=?",legacyVersion),pkValue,ckValue);
        Assert.assertNotNull(rs);
        Assert.assertEquals(1,rs.size());
        Assert.assertEquals(1L,rs.one().getLong("val"));
      }
    }
    long endCount=CacheService.instance.keyCache.size();
    Assert.assertTrue(endCount > startCount);
    CacheService.instance.keyCache.submitWrite(Integer.MAX_VALUE).get();
    CacheService.instance.invalidateKeyCache();
    Assert.assertEquals(startCount,CacheService.instance.keyCache.size());
    CacheService.instance.keyCache.loadSaved();
    if (BigFormat.instance.getVersion(legacyVersion).storeRows())     Assert.assertEquals(endCount,CacheService.instance.keyCache.size());
 else     Assert.assertEquals(startCount,CacheService.instance.keyCache.size());
  }
}
