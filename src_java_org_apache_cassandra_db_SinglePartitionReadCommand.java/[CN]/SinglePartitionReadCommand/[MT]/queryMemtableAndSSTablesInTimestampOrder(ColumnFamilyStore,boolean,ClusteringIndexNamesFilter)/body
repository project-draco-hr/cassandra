{
  Tracing.trace("Acquiring sstable references");
  ColumnFamilyStore.ViewFragment view=cfs.select(View.select(SSTableSet.LIVE,partitionKey()));
  ImmutableBTreePartition result=null;
  Tracing.trace("Merging memtable contents");
  for (  Memtable memtable : view.memtables) {
    Partition partition=memtable.getPartition(partitionKey());
    if (partition == null)     continue;
    try (UnfilteredRowIterator iter=filter.getUnfilteredRowIterator(columnFilter(),partition)){
      if (iter.isEmpty())       continue;
      UnfilteredRowIterator clonedFilter=copyOnHeap ? UnfilteredRowIterators.cloningIterator(iter,HeapAllocator.instance) : iter;
      result=add(isForThrift() ? ThriftResultsMerger.maybeWrap(clonedFilter,nowInSec()) : clonedFilter,result,filter,false);
    }
   }
  Collections.sort(view.sstables,SSTableReader.maxTimestampComparator);
  int sstablesIterated=0;
  boolean onlyUnrepaired=true;
  for (  SSTableReader sstable : view.sstables) {
    if (result != null && sstable.getMaxTimestamp() < result.partitionLevelDeletion().markedForDeleteAt())     break;
    long currentMaxTs=sstable.getMaxTimestamp();
    filter=reduceFilter(filter,result,currentMaxTs);
    if (filter == null)     break;
    if (!shouldInclude(sstable)) {
      if (sstable.getSSTableMetadata().maxLocalDeletionTime == Integer.MAX_VALUE)       continue;
      sstable.incrementReadCount();
      try (UnfilteredRowIterator iter=sstable.iterator(partitionKey(),columnFilter(),filter.isReversed(),isForThrift())){
        if (iter.partitionLevelDeletion().isLive()) {
          sstablesIterated++;
          result=add(UnfilteredRowIterators.noRowsIterator(iter.metadata(),iter.partitionKey(),Rows.EMPTY_STATIC_ROW,iter.partitionLevelDeletion(),filter.isReversed()),result,filter,sstable.isRepaired());
        }
      }
       continue;
    }
    Tracing.trace("Merging data from sstable {}",sstable.descriptor.generation);
    sstable.incrementReadCount();
    try (UnfilteredRowIterator iter=filter.filter(sstable.iterator(partitionKey(),columnFilter(),filter.isReversed(),isForThrift()))){
      if (iter.isEmpty())       continue;
      if (sstable.isRepaired())       onlyUnrepaired=false;
      sstablesIterated++;
      result=add(isForThrift() ? ThriftResultsMerger.maybeWrap(iter,nowInSec()) : iter,result,filter,sstable.isRepaired());
    }
   }
  cfs.metric.updateSSTableIterated(sstablesIterated);
  if (result == null || result.isEmpty())   return EmptyIterators.unfilteredRow(metadata(),partitionKey(),false);
  DecoratedKey key=result.partitionKey();
  cfs.metric.samplers.get(TableMetrics.Sampler.READS).addSample(key.getKey(),key.hashCode(),1);
  if (sstablesIterated > cfs.getMinimumCompactionThreshold() && onlyUnrepaired && !cfs.isAutoCompactionDisabled() && cfs.getCompactionStrategyManager().shouldDefragment()) {
    Tracing.trace("Defragmenting requested data");
    try (UnfilteredRowIterator iter=result.unfilteredIterator(columnFilter(),Slices.ALL,false)){
      final Mutation mutation=new Mutation(PartitionUpdate.fromIterator(iter));
      StageManager.getStage(Stage.MUTATION).execute(new Runnable(){
        public void run(){
          Keyspace.open(mutation.getKeyspaceName()).apply(mutation,false,false);
        }
      }
);
    }
   }
  return result.unfilteredIterator(columnFilter(),Slices.ALL,clusteringIndexFilter().isReversed());
}
