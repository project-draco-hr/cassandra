{
  if (clusteringIndexFilter() instanceof ClusteringIndexNamesFilter && !queriesMulticellType())   return queryMemtableAndSSTablesInTimestampOrder(cfs,(ClusteringIndexNamesFilter)clusteringIndexFilter());
  Tracing.trace("Acquiring sstable references");
  ColumnFamilyStore.ViewFragment view=cfs.select(View.select(SSTableSet.LIVE,partitionKey()));
  List<UnfilteredRowIterator> iterators=new ArrayList<>(Iterables.size(view.memtables) + view.sstables.size());
  ClusteringIndexFilter filter=clusteringIndexFilter();
  long minTimestamp=Long.MAX_VALUE;
  try {
    for (    Memtable memtable : view.memtables) {
      Partition partition=memtable.getPartition(partitionKey());
      if (partition == null)       continue;
      minTimestamp=Math.min(minTimestamp,memtable.getMinTimestamp());
      @SuppressWarnings("resource") UnfilteredRowIterator iter=filter.getUnfilteredRowIterator(columnFilter(),partition);
      oldestUnrepairedTombstone=Math.min(oldestUnrepairedTombstone,partition.stats().minLocalDeletionTime);
      iterators.add(isForThrift() ? ThriftResultsMerger.maybeWrap(iter,nowInSec()) : iter);
    }
    Collections.sort(view.sstables,SSTableReader.maxTimestampComparator);
    long mostRecentPartitionTombstone=Long.MIN_VALUE;
    int nonIntersectingSSTables=0;
    List<SSTableReader> skippedSSTablesWithTombstones=null;
    for (    SSTableReader sstable : view.sstables) {
      if (sstable.getMaxTimestamp() < mostRecentPartitionTombstone)       break;
      if (!shouldInclude(sstable)) {
        nonIntersectingSSTables++;
        if (sstable.hasTombstones()) {
          if (skippedSSTablesWithTombstones == null)           skippedSSTablesWithTombstones=new ArrayList<>();
          skippedSSTablesWithTombstones.add(sstable);
        }
        continue;
      }
      minTimestamp=Math.min(minTimestamp,sstable.getMinTimestamp());
      @SuppressWarnings("resource") UnfilteredRowIteratorWithLowerBound iter=makeIterator(cfs,sstable,true);
      if (!sstable.isRepaired())       oldestUnrepairedTombstone=Math.min(oldestUnrepairedTombstone,sstable.getMinLocalDeletionTime());
      iterators.add(iter);
      mostRecentPartitionTombstone=Math.max(mostRecentPartitionTombstone,iter.partitionLevelDeletion().markedForDeleteAt());
    }
    int includedDueToTombstones=0;
    if (skippedSSTablesWithTombstones != null) {
      for (      SSTableReader sstable : skippedSSTablesWithTombstones) {
        if (sstable.getMaxTimestamp() <= minTimestamp)         continue;
        @SuppressWarnings("resource") UnfilteredRowIteratorWithLowerBound iter=makeIterator(cfs,sstable,false);
        if (!sstable.isRepaired())         oldestUnrepairedTombstone=Math.min(oldestUnrepairedTombstone,sstable.getMinLocalDeletionTime());
        iterators.add(iter);
        includedDueToTombstones++;
      }
    }
    if (Tracing.isTracing())     Tracing.trace("Skipped {}/{} non-slice-intersecting sstables, included {} due to tombstones",nonIntersectingSSTables,view.sstables.size(),includedDueToTombstones);
    if (iterators.isEmpty())     return EmptyIterators.unfilteredRow(cfs.metadata,partitionKey(),filter.isReversed());
    StorageHook.instance.reportRead(cfs.metadata.cfId,partitionKey());
    return withStateTracking(withSSTablesIterated(iterators,cfs.metric));
  }
 catch (  RuntimeException|Error e) {
    try {
      FBUtilities.closeAll(iterators);
    }
 catch (    Exception suppressed) {
      e.addSuppressed(suppressed);
    }
    throw e;
  }
}
