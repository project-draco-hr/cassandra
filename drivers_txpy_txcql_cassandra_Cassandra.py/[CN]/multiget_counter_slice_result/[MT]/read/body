def read(self, iprot):
    if ((iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated) and isinstance(iprot.trans, TTransport.CReadableTransport) and (self.thrift_spec is not None) and (fastbinary is not None)):
        fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
        return
    iprot.readStructBegin()
    while True:
        (fname, ftype, fid) = iprot.readFieldBegin()
        if (ftype == TType.STOP):
            break
        if (fid == 0):
            if (ftype == TType.MAP):
                self.success = {}
                (_ktype188, _vtype189, _size187) = iprot.readMapBegin()
                for _i191 in xrange(_size187):
                    _key192 = iprot.readString()
                    _val193 = []
                    (_etype197, _size194) = iprot.readListBegin()
                    for _i198 in xrange(_size194):
                        _elem199 = Counter()
                        _elem199.read(iprot)
                        _val193.append(_elem199)
                    iprot.readListEnd()
                    self.success[_key192] = _val193
                iprot.readMapEnd()
            else:
                iprot.skip(ftype)
        elif (fid == 1):
            if (ftype == TType.STRUCT):
                self.ire = InvalidRequestException()
                self.ire.read(iprot)
            else:
                iprot.skip(ftype)
        elif (fid == 2):
            if (ftype == TType.STRUCT):
                self.ue = UnavailableException()
                self.ue.read(iprot)
            else:
                iprot.skip(ftype)
        elif (fid == 3):
            if (ftype == TType.STRUCT):
                self.te = TimedOutException()
                self.te.read(iprot)
            else:
                iprot.skip(ftype)
        else:
            iprot.skip(ftype)
        iprot.readFieldEnd()
    iprot.readStructEnd()
