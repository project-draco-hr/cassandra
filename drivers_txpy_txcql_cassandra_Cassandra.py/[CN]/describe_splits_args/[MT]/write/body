def write(self, oprot):
    if ((oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated) and (self.thrift_spec is not None) and (fastbinary is not None)):
        oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
        return
    oprot.writeStructBegin('describe_splits_args')
    if (self.cfName != None):
        oprot.writeFieldBegin('cfName', TType.STRING, 1)
        oprot.writeString(self.cfName)
        oprot.writeFieldEnd()
    if (self.start_token != None):
        oprot.writeFieldBegin('start_token', TType.STRING, 2)
        oprot.writeString(self.start_token)
        oprot.writeFieldEnd()
    if (self.end_token != None):
        oprot.writeFieldBegin('end_token', TType.STRING, 3)
        oprot.writeString(self.end_token)
        oprot.writeFieldEnd()
    if (self.keys_per_split != None):
        oprot.writeFieldBegin('keys_per_split', TType.I32, 4)
        oprot.writeI32(self.keys_per_split)
        oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

    def validate(self):
        if (self.cfName is None):
            raise TProtocol.TProtocolException(message='Required field cfName is unset!')
        if (self.start_token is None):
            raise TProtocol.TProtocolException(message='Required field start_token is unset!')
        if (self.end_token is None):
            raise TProtocol.TProtocolException(message='Required field end_token is unset!')
        if (self.keys_per_split is None):
            raise TProtocol.TProtocolException(message='Required field keys_per_split is unset!')
        return
