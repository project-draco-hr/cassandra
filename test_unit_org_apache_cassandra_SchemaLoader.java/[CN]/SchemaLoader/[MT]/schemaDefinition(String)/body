{
  List<KeyspaceMetadata> schema=new ArrayList<KeyspaceMetadata>();
  String ks1=testName + "Keyspace1";
  String ks2=testName + "Keyspace2";
  String ks3=testName + "Keyspace3";
  String ks4=testName + "Keyspace4";
  String ks5=testName + "Keyspace5";
  String ks6=testName + "Keyspace6";
  String ks_kcs=testName + "KeyCacheSpace";
  String ks_rcs=testName + "RowCacheSpace";
  String ks_ccs=testName + "CounterCacheSpace";
  String ks_nocommit=testName + "NoCommitlogSpace";
  String ks_prsi=testName + "PerRowSecondaryIndex";
  String ks_cql=testName + "cql_keyspace";
  AbstractType bytes=BytesType.instance;
  AbstractType<?> composite=CompositeType.getInstance(Arrays.asList(new AbstractType<?>[]{BytesType.instance,TimeUUIDType.instance,IntegerType.instance}));
  AbstractType<?> compositeMaxMin=CompositeType.getInstance(Arrays.asList(new AbstractType<?>[]{BytesType.instance,IntegerType.instance}));
  Map<Byte,AbstractType<?>> aliases=new HashMap<Byte,AbstractType<?>>();
  aliases.put((byte)'b',BytesType.instance);
  aliases.put((byte)'t',TimeUUIDType.instance);
  aliases.put((byte)'B',ReversedType.getInstance(BytesType.instance));
  aliases.put((byte)'T',ReversedType.getInstance(TimeUUIDType.instance));
  AbstractType<?> dynamicComposite=DynamicCompositeType.getInstance(aliases);
  Map<String,String> compactionOptions=new HashMap<String,String>();
  compactionOptions.put("tombstone_compaction_interval","1");
  Map<String,String> leveledOptions=new HashMap<String,String>();
  leveledOptions.put("sstable_size_in_mb","1");
  schema.add(KeyspaceMetadata.create(ks1,KeyspaceParams.simple(1),Tables.of(standardCFMD(ks1,"Standard1").compaction(CompactionParams.scts(compactionOptions)),standardCFMD(ks1,"Standard2"),standardCFMD(ks1,"Standard3"),standardCFMD(ks1,"Standard4"),standardCFMD(ks1,"StandardGCGS0").gcGraceSeconds(0),standardCFMD(ks1,"StandardLong1"),standardCFMD(ks1,"StandardLong2"),superCFMD(ks1,"Super1",LongType.instance),superCFMD(ks1,"Super2",LongType.instance),superCFMD(ks1,"Super3",LongType.instance),superCFMD(ks1,"Super4",UTF8Type.instance),superCFMD(ks1,"Super5",bytes),superCFMD(ks1,"Super6",LexicalUUIDType.instance,UTF8Type.instance),keysIndexCFMD(ks1,"Indexed1",true),keysIndexCFMD(ks1,"Indexed2",false),superCFMD(ks1,"SuperDirectGC",BytesType.instance).gcGraceSeconds(0),jdbcCFMD(ks1,"JdbcUtf8",UTF8Type.instance).addColumnDefinition(utf8Column(ks1,"JdbcUtf8")),jdbcCFMD(ks1,"JdbcLong",LongType.instance),jdbcCFMD(ks1,"JdbcBytes",bytes),jdbcCFMD(ks1,"JdbcAscii",AsciiType.instance),standardCFMD(ks1,"StandardLeveled").compaction(CompactionParams.lcs(leveledOptions)),standardCFMD(ks1,"legacyleveled").compaction(CompactionParams.lcs(leveledOptions)),standardCFMD(ks1,"StandardLowIndexInterval").minIndexInterval(8).maxIndexInterval(256).caching(CachingParams.CACHE_NOTHING))));
  schema.add(KeyspaceMetadata.create(ks2,KeyspaceParams.simple(1),Tables.of(standardCFMD(ks2,"Standard1"),standardCFMD(ks2,"Standard3"),superCFMD(ks2,"Super3",bytes),superCFMD(ks2,"Super4",TimeUUIDType.instance),keysIndexCFMD(ks2,"Indexed1",true),compositeIndexCFMD(ks2,"Indexed2",true),compositeIndexCFMD(ks2,"Indexed3",true).gcGraceSeconds(0))));
  schema.add(KeyspaceMetadata.create(ks3,KeyspaceParams.simple(5),Tables.of(standardCFMD(ks3,"Standard1"),keysIndexCFMD(ks3,"Indexed1",true))));
  schema.add(KeyspaceMetadata.create(ks4,KeyspaceParams.simple(3),Tables.of(standardCFMD(ks4,"Standard1"),standardCFMD(ks4,"Standard3"),superCFMD(ks4,"Super3",bytes),superCFMD(ks4,"Super4",TimeUUIDType.instance),superCFMD(ks4,"Super5",TimeUUIDType.instance,BytesType.instance))));
  schema.add(KeyspaceMetadata.create(ks5,KeyspaceParams.simple(2),Tables.of(standardCFMD(ks5,"Standard1"))));
  schema.add(KeyspaceMetadata.create(ks6,KeyspaceParams.simple(1),Tables.of(keysIndexCFMD(ks6,"Indexed1",true))));
  schema.add(KeyspaceMetadata.create(ks_kcs,KeyspaceParams.simple(1),Tables.of(standardCFMD(ks_kcs,"Standard1"),standardCFMD(ks_kcs,"Standard2"),standardCFMD(ks_kcs,"Standard3"))));
  schema.add(KeyspaceMetadata.create(ks_rcs,KeyspaceParams.simple(1),Tables.of(standardCFMD(ks_rcs,"CFWithoutCache").caching(CachingParams.CACHE_NOTHING),standardCFMD(ks_rcs,"CachedCF").caching(CachingParams.CACHE_EVERYTHING),standardCFMD(ks_rcs,"CachedIntCF").caching(new CachingParams(true,100)))));
  schema.add(KeyspaceMetadata.create(ks_nocommit,KeyspaceParams.simpleTransient(1),Tables.of(standardCFMD(ks_nocommit,"Standard1"))));
  schema.add(KeyspaceMetadata.create(ks_cql,KeyspaceParams.simple(1),Tables.of(CFMetaData.compile("CREATE TABLE table1 (" + "k int PRIMARY KEY," + "v1 text,"+ "v2 int"+ ")",ks_cql),CFMetaData.compile("CREATE TABLE table2 (" + "k text," + "c text,"+ "v text,"+ "PRIMARY KEY (k, c))",ks_cql),CFMetaData.compile("CREATE TABLE foo (" + "bar text, " + "baz text, "+ "qux text, "+ "PRIMARY KEY(bar, baz) ) "+ "WITH COMPACT STORAGE",ks_cql),CFMetaData.compile("CREATE TABLE foofoo (" + "bar text, " + "baz text, "+ "qux text, "+ "quz text, "+ "foo text, "+ "PRIMARY KEY((bar, baz), qux, quz) ) "+ "WITH COMPACT STORAGE",ks_cql))));
  if (Boolean.parseBoolean(System.getProperty("cassandra.test.compression","false")))   useCompression(schema);
  for (  KeyspaceMetadata ksm : schema)   MigrationManager.announceNewKeyspace(ksm,false);
}
