{
  TField field;
  iprot.readStructBegin();
  while (true) {
    field=iprot.readFieldBegin();
    if (field.type == TType.STOP) {
      break;
    }
switch (field.id) {
case 1:
      if (field.type == TType.STRING) {
        this.name=iprot.readString();
      }
 else {
        TProtocolUtil.skip(iprot,field.type);
      }
    break;
case 2:
  if (field.type == TType.STRING) {
    this.strategy_class=iprot.readString();
  }
 else {
    TProtocolUtil.skip(iprot,field.type);
  }
break;
case 3:
if (field.type == TType.I32) {
this.replication_factor=iprot.readI32();
setReplication_factorIsSet(true);
}
 else {
TProtocolUtil.skip(iprot,field.type);
}
break;
case 5:
if (field.type == TType.LIST) {
{
TList _list33=iprot.readListBegin();
this.cf_defs=new ArrayList<CfDef>(_list33.size);
for (int _i34=0; _i34 < _list33.size; ++_i34) {
CfDef _elem35;
_elem35=new CfDef();
_elem35.read(iprot);
this.cf_defs.add(_elem35);
}
iprot.readListEnd();
}
}
 else {
TProtocolUtil.skip(iprot,field.type);
}
break;
case 6:
if (field.type == TType.MAP) {
{
TMap _map36=iprot.readMapBegin();
this.users_access=new HashMap<String,AccessLevel>(2 * _map36.size);
for (int _i37=0; _i37 < _map36.size; ++_i37) {
String _key38;
AccessLevel _val39;
_key38=iprot.readString();
_val39=AccessLevel.findByValue(iprot.readI32());
this.users_access.put(_key38,_val39);
}
iprot.readMapEnd();
}
}
 else {
TProtocolUtil.skip(iprot,field.type);
}
break;
case 7:
if (field.type == TType.MAP) {
{
TMap _map40=iprot.readMapBegin();
this.groups_access=new HashMap<String,AccessLevel>(2 * _map40.size);
for (int _i41=0; _i41 < _map40.size; ++_i41) {
String _key42;
AccessLevel _val43;
_key42=iprot.readString();
_val43=AccessLevel.findByValue(iprot.readI32());
this.groups_access.put(_key42,_val43);
}
iprot.readMapEnd();
}
}
 else {
TProtocolUtil.skip(iprot,field.type);
}
break;
default :
TProtocolUtil.skip(iprot,field.type);
}
iprot.readFieldEnd();
}
iprot.readStructEnd();
if (!isSetReplication_factor()) {
throw new TProtocolException("Required field 'replication_factor' was not found in serialized data! Struct: " + toString());
}
validate();
}
