{
  SetType t=SetType.getInstance(ListType.getInstance(Int32Type.instance,false),true);
  assertEquals("SetType(FrozenType(ListType(Int32Type)))",clean(t.toString()));
  assertEquals("SetType(ListType(Int32Type))",clean(t.toString(true)));
  t=SetType.getInstance(ListType.getInstance(Int32Type.instance,false),false);
  assertEquals("FrozenType(SetType(ListType(Int32Type)))",clean(t.toString()));
  assertEquals("SetType(ListType(Int32Type))",clean(t.toString(true)));
  MapType m=MapType.getInstance(ListType.getInstance(Int32Type.instance,false),Int32Type.instance,true);
  assertEquals("MapType(FrozenType(ListType(Int32Type)),Int32Type)",clean(m.toString()));
  assertEquals("MapType(ListType(Int32Type),Int32Type)",clean(m.toString(true)));
  m=MapType.getInstance(ListType.getInstance(Int32Type.instance,false),Int32Type.instance,false);
  assertEquals("FrozenType(MapType(ListType(Int32Type),Int32Type))",clean(m.toString()));
  assertEquals("MapType(ListType(Int32Type),Int32Type)",clean(m.toString(true)));
  List<AbstractType<?>> types=new ArrayList<>();
  types.add(SetType.getInstance(Int32Type.instance,true));
  TupleType tuple=new TupleType(types);
  assertEquals("TupleType(SetType(Int32Type))",clean(tuple.toString()));
}
