{
  if (logger.isDebugEnabled())   logger.debug("Aborting transaction over {}, with ({},{}) logged and ({},{}) staged",originals,logged.update,logged.obsolete,staged.update,staged.obsolete);
  accumulate=abortObsoletion(obsoletions,accumulate);
  if (logged.isEmpty() && staged.isEmpty())   return log.abort(accumulate);
  Iterable<SSTableReader> obsolete=filterOut(concatUniq(staged.update,logged.update),originals);
  logger.debug("Obsoleting {}",obsolete);
  accumulate=prepareForObsoletion(obsolete,log,obsoletions=new ArrayList<>(),accumulate);
  accumulate=log.abort(accumulate);
  accumulate=markObsolete(obsoletions,accumulate);
  accumulate=tracker.apply(updateLiveSet(logged.update,restoreUpdatedOriginals()),accumulate);
  accumulate=setReplaced(logged.update,accumulate);
  accumulate=release(selfRefs(concat(staged.update,logged.update,logged.obsolete)),accumulate);
  logged.clear();
  staged.clear();
  return accumulate;
}
