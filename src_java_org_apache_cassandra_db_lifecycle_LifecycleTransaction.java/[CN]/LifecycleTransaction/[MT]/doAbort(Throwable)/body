{
  if (logger.isTraceEnabled())   logger.trace("Aborting transaction over {}, with ({},{}) logged and ({},{}) staged",originals,logged.update,logged.obsolete,staged.update,staged.obsolete);
  if (logged.isEmpty() && staged.isEmpty())   return accumulate;
  Iterable<SSTableReader> obsolete=filterOut(concatUniq(staged.update,logged.update),originals);
  logger.trace("Obsoleting {}",obsolete);
  accumulate=markObsolete(null,obsolete,accumulate);
  List<SSTableReader> restored=restoreUpdatedOriginals();
  List<SSTableReader> invalid=Lists.newArrayList(Iterables.concat(logged.update,logged.obsolete));
  accumulate=tracker.apply(updateLiveSet(logged.update,restored),accumulate);
  accumulate=tracker.notifySSTablesChanged(invalid,restored,OperationType.COMPACTION,accumulate);
  accumulate=setReplaced(logged.update,accumulate);
  accumulate=release(selfRefs(concat(staged.update,logged.update,logged.obsolete)),accumulate);
  logged.clear();
  staged.clear();
  return accumulate;
}
