{
  if (coldReadsToOmit == 0.0)   return sstables;
  final Map<SSTableReader,Double> hotnessSnapshot=getHotnessMap(sstables);
  Collections.sort(sstables,new Comparator<SSTableReader>(){
    public int compare(    SSTableReader o1,    SSTableReader o2){
      int comparison=Double.compare(hotnessSnapshot.get(o1),hotnessSnapshot.get(o2));
      if (comparison != 0)       return comparison;
      comparison=Long.compare(o1.bytesOnDisk(),o2.bytesOnDisk());
      if (comparison != 0)       return comparison;
      return o1.descriptor.generation - o2.descriptor.generation;
    }
  }
);
  double totalReads=0.0;
  for (  SSTableReader sstr : sstables)   if (sstr.readMeter != null)   totalReads+=sstr.readMeter.twoHourRate();
  if (totalReads == 0.0)   return sstables;
  double maxColdReads=coldReadsToOmit * totalReads;
  double totalColdReads=0.0;
  int cutoffIndex=0;
  while (cutoffIndex < sstables.size()) {
    SSTableReader sstable=sstables.get(cutoffIndex);
    if (sstable.readMeter == null) {
      throw new AssertionError("If you're seeing this exception, please attach your logs to CASSANDRA-8238 to help us debug. " + sstable);
    }
    double reads=sstable.readMeter.twoHourRate();
    if (totalColdReads + reads > maxColdReads)     break;
    totalColdReads+=reads;
    cutoffIndex++;
  }
  return sstables.subList(cutoffIndex,sstables.size());
}
