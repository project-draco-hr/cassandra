{
  Map<String,String> uncheckedOptions=AbstractCompactionStrategy.validateOptions(options);
  String optionValue=options.get(MIN_SSTABLE_SIZE_KEY);
  try {
    long minSSTableSize=optionValue == null ? DEFAULT_MIN_SSTABLE_SIZE : Long.parseLong(optionValue);
    if (minSSTableSize < 0) {
      throw new ConfigurationException(String.format("%s must be non negative: %d",MIN_SSTABLE_SIZE_KEY,minSSTableSize));
    }
  }
 catch (  NumberFormatException e) {
    throw new ConfigurationException(String.format("%s is not a parsable int (base10) for %s",optionValue,MIN_SSTABLE_SIZE_KEY),e);
  }
  double bucketLow, bucketHigh;
  optionValue=options.get(BUCKET_LOW_KEY);
  try {
    bucketLow=optionValue == null ? DEFAULT_BUCKET_LOW : Double.parseDouble(optionValue);
  }
 catch (  NumberFormatException e) {
    throw new ConfigurationException(String.format("%s is not a parsable int (base10) for %s",optionValue,DEFAULT_BUCKET_LOW),e);
  }
  optionValue=options.get(BUCKET_HIGH_KEY);
  try {
    bucketHigh=optionValue == null ? DEFAULT_BUCKET_HIGH : Double.parseDouble(optionValue);
  }
 catch (  NumberFormatException e) {
    throw new ConfigurationException(String.format("%s is not a parsable int (base10) for %s",optionValue,DEFAULT_BUCKET_HIGH),e);
  }
  if (bucketHigh <= bucketLow) {
    throw new ConfigurationException(String.format("Bucket high value (%s) is less than or equal bucket low value (%s)",bucketHigh,bucketLow));
  }
  uncheckedOptions.remove(MIN_SSTABLE_SIZE_KEY);
  uncheckedOptions.remove(BUCKET_LOW_KEY);
  uncheckedOptions.remove(BUCKET_HIGH_KEY);
  uncheckedOptions.remove(CFPropDefs.KW_MINCOMPACTIONTHRESHOLD);
  uncheckedOptions.remove(CFPropDefs.KW_MAXCOMPACTIONTHRESHOLD);
  return uncheckedOptions;
}
