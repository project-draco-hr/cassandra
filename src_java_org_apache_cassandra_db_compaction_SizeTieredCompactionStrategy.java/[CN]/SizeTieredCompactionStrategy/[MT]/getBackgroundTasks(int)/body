{
  if (cfs.isCompactionDisabled()) {
    logger.debug("Compaction is currently disabled.");
    return Collections.emptyList();
  }
  List<AbstractCompactionTask> tasks=new ArrayList<AbstractCompactionTask>();
  List<List<SSTableReader>> buckets=getBuckets(createSSTableAndLengthPairs(cfs.getSSTables()),minSSTableSize);
  logger.debug("Compaction buckets are {}",buckets);
  for (  List<SSTableReader> bucket : buckets) {
    if (bucket.size() < cfs.getMinimumCompactionThreshold())     continue;
    Collections.sort(bucket,new Comparator<SSTableReader>(){
      public int compare(      SSTableReader o1,      SSTableReader o2){
        return o1.descriptor.generation - o2.descriptor.generation;
      }
    }
);
    tasks.add(new CompactionTask(cfs,bucket.subList(0,Math.min(bucket.size(),cfs.getMaximumCompactionThreshold())),gcBefore));
  }
  updateEstimatedCompactionsByTasks(tasks);
  return tasks;
}
