{
  final List<Pair<List<SSTableReader>,Double>> prunedBucketsAndHotness=new ArrayList<>(buckets.size());
  for (  List<SSTableReader> bucket : buckets) {
    Pair<List<SSTableReader>,Double> bucketAndHotness=trimToThresholdWithHotness(bucket,maxThreshold);
    if (bucketAndHotness != null && bucketAndHotness.left.size() >= minThreshold)     prunedBucketsAndHotness.add(bucketAndHotness);
  }
  if (prunedBucketsAndHotness.isEmpty())   return Collections.emptyList();
  Pair<List<SSTableReader>,Double> hottest=Collections.max(prunedBucketsAndHotness,new Comparator<Pair<List<SSTableReader>,Double>>(){
    public int compare(    Pair<List<SSTableReader>,Double> o1,    Pair<List<SSTableReader>,Double> o2){
      int comparison=Double.compare(o1.right,o2.right);
      if (comparison != 0)       return comparison;
      return Long.compare(avgSize(o1.left),avgSize(o2.left));
    }
    private long avgSize(    List<SSTableReader> sstables){
      long n=0;
      for (      SSTableReader sstable : sstables)       n+=sstable.bytesOnDisk();
      return n / sstables.size();
    }
  }
);
  return hottest.left;
}
