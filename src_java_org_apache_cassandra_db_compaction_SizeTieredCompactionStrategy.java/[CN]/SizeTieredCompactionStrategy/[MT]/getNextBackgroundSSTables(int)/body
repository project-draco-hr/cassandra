{
  if (!isEnabled())   return Collections.emptyList();
  int minThreshold=cfs.getMinimumCompactionThreshold();
  int maxThreshold=cfs.getMaximumCompactionThreshold();
  Set<SSTableReader> candidates=cfs.getUncompactingSSTables();
  List<List<SSTableReader>> buckets=getBuckets(createSSTableAndLengthPairs(filterSuspectSSTables(candidates)),options.bucketHigh,options.bucketLow,options.minSSTableSize);
  logger.debug("Compaction buckets are {}",buckets);
  updateEstimatedCompactionsByTasks(buckets);
  List<SSTableReader> mostInteresting=mostInterestingBucket(buckets,minThreshold,maxThreshold);
  if (!mostInteresting.isEmpty())   return mostInteresting;
  List<SSTableReader> sstablesWithTombstones=new ArrayList<SSTableReader>();
  for (  SSTableReader sstable : candidates) {
    if (worthDroppingTombstones(sstable,gcBefore))     sstablesWithTombstones.add(sstable);
  }
  if (sstablesWithTombstones.isEmpty())   return Collections.emptyList();
  Collections.sort(sstablesWithTombstones,new SSTableReader.SizeComparator());
  return Collections.singletonList(sstablesWithTombstones.get(0));
}
