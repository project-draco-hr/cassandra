{
  List<Pair<T,Long>> sortedFiles=new ArrayList<Pair<T,Long>>(files);
  Collections.sort(sortedFiles,new Comparator<Pair<T,Long>>(){
    public int compare(    Pair<T,Long> p1,    Pair<T,Long> p2){
      return p1.right.compareTo(p2.right);
    }
  }
);
  Map<Long,List<T>> buckets=new HashMap<Long,List<T>>();
  for (  Pair<T,Long> pair : sortedFiles) {
    long size=pair.right;
    boolean bFound=false;
    for (    Entry<Long,List<T>> entry : buckets.entrySet()) {
      List<T> bucket=entry.getValue();
      long oldAverageSize=entry.getKey();
      if ((size > (oldAverageSize / 2) && size < (3 * oldAverageSize) / 2) || (size < minSSTableSize && oldAverageSize < minSSTableSize)) {
        buckets.remove(oldAverageSize);
        long totalSize=bucket.size() * oldAverageSize;
        long newAverageSize=(totalSize + size) / (bucket.size() + 1);
        bucket.add(pair.left);
        buckets.put(newAverageSize,bucket);
        bFound=true;
        break;
      }
    }
    if (!bFound) {
      ArrayList<T> bucket=new ArrayList<T>();
      bucket.add(pair.left);
      buckets.put(size,bucket);
    }
  }
  return new ArrayList<List<T>>(buckets.values());
}
