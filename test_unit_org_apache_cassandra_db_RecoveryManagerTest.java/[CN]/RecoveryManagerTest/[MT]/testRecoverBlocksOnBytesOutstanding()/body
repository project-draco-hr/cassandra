{
  long originalMaxOutstanding=CommitLogReplayer.MAX_OUTSTANDING_REPLAY_BYTES;
  CommitLogReplayer.MAX_OUTSTANDING_REPLAY_BYTES=1;
  CommitLogReplayer.MutationInitiator originalInitiator=CommitLogReplayer.mutationInitiator;
  MockInitiator mockInitiator=new MockInitiator();
  CommitLogReplayer.mutationInitiator=mockInitiator;
  try {
    CommitLog.instance.resetUnsafe(true);
    Keyspace keyspace1=Keyspace.open(KEYSPACE1);
    Keyspace keyspace2=Keyspace.open(KEYSPACE2);
    UnfilteredRowIterator upd1=Util.apply(new RowUpdateBuilder(keyspace1.getColumnFamilyStore(CF_STANDARD1).metadata,1L,0,"keymulti").clustering("col1").add("val","1").build());
    UnfilteredRowIterator upd2=Util.apply(new RowUpdateBuilder(keyspace2.getColumnFamilyStore(CF_STANDARD3).metadata,1L,0,"keymulti").clustering("col2").add("val","1").build());
    keyspace1.getColumnFamilyStore("Standard1").clearUnsafe();
    keyspace2.getColumnFamilyStore("Standard3").clearUnsafe();
    DecoratedKey dk=Util.dk("keymulti");
    Assert.assertTrue(Util.getAllUnfiltered(Util.cmd(keyspace1.getColumnFamilyStore(CF_STANDARD1),dk).build()).isEmpty());
    Assert.assertTrue(Util.getAllUnfiltered(Util.cmd(keyspace2.getColumnFamilyStore(CF_STANDARD3),dk).build()).isEmpty());
    final AtomicReference<Throwable> err=new AtomicReference<Throwable>();
    Thread t=new Thread(){
      @Override public void run(){
        try {
          CommitLog.instance.resetUnsafe(false);
        }
 catch (        Throwable t) {
          err.set(t);
        }
      }
    }
;
    t.start();
    Assert.assertTrue(mockInitiator.blocked.tryAcquire(1,20,TimeUnit.SECONDS));
    Thread.sleep(100);
    Assert.assertTrue(t.isAlive());
    mockInitiator.blocker.release(Integer.MAX_VALUE);
    t.join(20 * 1000);
    if (err.get() != null)     throw new RuntimeException(err.get());
    if (t.isAlive()) {
      Throwable toPrint=new Throwable();
      toPrint.setStackTrace(Thread.getAllStackTraces().get(t));
      toPrint.printStackTrace(System.out);
    }
    Assert.assertFalse(t.isAlive());
    Assert.assertTrue(Util.equal(upd1,Util.getOnlyPartitionUnfiltered(Util.cmd(keyspace1.getColumnFamilyStore(CF_STANDARD1),dk).build()).unfilteredIterator()));
    Assert.assertTrue(Util.equal(upd2,Util.getOnlyPartitionUnfiltered(Util.cmd(keyspace2.getColumnFamilyStore(CF_STANDARD3),dk).build()).unfilteredIterator()));
  }
  finally {
    CommitLogReplayer.mutationInitiator=originalInitiator;
    CommitLogReplayer.MAX_OUTSTANDING_REPLAY_BYTES=originalMaxOutstanding;
  }
}
