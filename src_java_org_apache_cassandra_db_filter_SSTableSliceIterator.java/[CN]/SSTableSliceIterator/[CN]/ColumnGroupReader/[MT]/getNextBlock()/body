{
  if (curRangeIndex < 0 || curRangeIndex >= indexes.size())   return false;
  IndexHelper.IndexInfo curColPosition=indexes.get(curRangeIndex);
  if (reversed) {
    if ((finishColumn.length > 0 && comparator.compare(finishColumn,curColPosition.lastName) > 0) || (startColumn.length > 0 && comparator.compare(startColumn,curColPosition.firstName) < 0))     return false;
  }
 else {
    if ((startColumn.length > 0 && comparator.compare(startColumn,curColPosition.lastName) > 0) || (finishColumn.length > 0 && comparator.compare(finishColumn,curColPosition.firstName) < 0))     return false;
  }
  boolean outOfBounds=false;
  file.seek(columnStartPosition + curColPosition.offset);
  while (file.getFilePointer() < columnStartPosition + curColPosition.offset + curColPosition.width && !outOfBounds) {
    IColumn column=emptyColumnFamily.getColumnSerializer().deserialize(file);
    if (reversed)     blockColumns.addFirst(column);
 else     blockColumns.addLast(column);
    if (!reversed && finishColumn.length > 0)     outOfBounds=comparator.compare(column.name(),finishColumn) >= 0;
 else     if (reversed && startColumn.length > 0)     outOfBounds=comparator.compare(column.name(),startColumn) >= 0;
    if (outOfBounds)     break;
  }
  if (reversed)   curRangeIndex--;
 else   curRangeIndex++;
  return true;
}
