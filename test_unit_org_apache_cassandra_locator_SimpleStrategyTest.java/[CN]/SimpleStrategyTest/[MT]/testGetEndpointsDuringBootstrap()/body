{
  final int RING_SIZE=10;
  TokenMetadata tmd=new TokenMetadata();
  TokenMetadata oldTmd=StorageServiceAccessor.setTokenMetadata(tmd);
  Token[] endpointTokens=new Token[RING_SIZE];
  Token[] keyTokens=new Token[RING_SIZE];
  for (int i=0; i < RING_SIZE; i++) {
    endpointTokens[i]=new BigIntegerToken(String.valueOf(RING_SIZE * 2 * i));
    keyTokens[i]=new BigIntegerToken(String.valueOf(RING_SIZE * 2 * i + RING_SIZE));
  }
  List<InetAddress> hosts=new ArrayList<InetAddress>();
  for (int i=0; i < endpointTokens.length; i++) {
    InetAddress ep=InetAddress.getByName("127.0.0." + String.valueOf(i + 1));
    tmd.updateNormalToken(endpointTokens[i],ep);
    hosts.add(ep);
  }
  Token bsToken=new BigIntegerToken(String.valueOf(210));
  InetAddress bootstrapEndpoint=InetAddress.getByName("127.0.0.11");
  tmd.addBootstrapToken(bsToken,bootstrapEndpoint);
  AbstractReplicationStrategy strategy=null;
  for (  String keyspaceName : Schema.instance.getNonSystemKeyspaces()) {
    strategy=getStrategy(keyspaceName,tmd);
    PendingRangeCalculatorService.calculatePendingRanges(strategy,keyspaceName);
    int replicationFactor=strategy.getReplicationFactor();
    for (int i=0; i < keyTokens.length; i++) {
      Collection<InetAddress> endpoints=tmd.getWriteEndpoints(keyTokens[i],keyspaceName,strategy.getNaturalEndpoints(keyTokens[i]));
      assertTrue(endpoints.size() >= replicationFactor);
      for (int j=0; j < replicationFactor; j++) {
        assertTrue(endpoints.contains(hosts.get((i + j + 1) % hosts.size())));
      }
      if (i < RING_SIZE - replicationFactor)       assertFalse(endpoints.contains(bootstrapEndpoint));
 else       assertTrue(endpoints.contains(bootstrapEndpoint));
    }
  }
  StorageServiceAccessor.setTokenMetadata(oldTmd);
}
