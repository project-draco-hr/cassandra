{
  final TraceState traceState;
  final String tag="repair:" + cmd;
  final AtomicInteger progress=new AtomicInteger();
  final int totalProgress=4 + options.getRanges().size();
  String[] columnFamilies=options.getColumnFamilies().toArray(new String[options.getColumnFamilies().size()]);
  Iterable<ColumnFamilyStore> validColumnFamilies;
  try {
    validColumnFamilies=storageService.getValidColumnFamilies(false,false,keyspace,columnFamilies);
    progress.incrementAndGet();
  }
 catch (  IllegalArgumentException e) {
    logger.error("Repair failed:",e);
    fireErrorAndComplete(tag,progress.get(),totalProgress,e.getMessage());
    return;
  }
  final long startTime=System.currentTimeMillis();
  String message=String.format("Starting repair command #%d, repairing keyspace %s with %s",cmd,keyspace,options);
  logger.info(message);
  fireProgressEvent(tag,new ProgressEvent(ProgressEventType.START,0,100,message));
  if (options.isTraced()) {
    StringBuilder cfsb=new StringBuilder();
    for (    ColumnFamilyStore cfs : validColumnFamilies)     cfsb.append(", ").append(cfs.keyspace.getName()).append(".").append(cfs.name);
    UUID sessionId=Tracing.instance.newSession(Tracing.TraceType.REPAIR);
    traceState=Tracing.instance.begin("repair",ImmutableMap.of("keyspace",keyspace,"columnFamilies",cfsb.substring(2)));
    Tracing.traceRepair(message);
    traceState.enableActivityNotification(tag);
    for (    ProgressListener listener : listeners)     traceState.addProgressListener(listener);
    Thread queryThread=createQueryThread(cmd,sessionId);
    queryThread.setName("RepairTracePolling");
    queryThread.start();
  }
 else {
    traceState=null;
  }
  final Set<InetAddress> allNeighbors=new HashSet<>();
  List<Pair<Set<InetAddress>,? extends Collection<Range<Token>>>> commonRanges=new ArrayList<>();
  Collection<Range<Token>> keyspaceLocalRanges=storageService.getLocalRanges(keyspace);
  try {
    for (    Range<Token> range : options.getRanges()) {
      Set<InetAddress> neighbors=ActiveRepairService.getNeighbors(keyspace,keyspaceLocalRanges,range,options.getDataCenters(),options.getHosts());
      addRangeToNeighbors(commonRanges,range,neighbors);
      allNeighbors.addAll(neighbors);
    }
    progress.incrementAndGet();
  }
 catch (  IllegalArgumentException e) {
    logger.error("Repair failed:",e);
    fireErrorAndComplete(tag,progress.get(),totalProgress,e.getMessage());
    return;
  }
  List<ColumnFamilyStore> columnFamilyStores=new ArrayList<>();
  try {
    Iterables.addAll(columnFamilyStores,validColumnFamilies);
    progress.incrementAndGet();
  }
 catch (  IllegalArgumentException e) {
    fireErrorAndComplete(tag,progress.get(),totalProgress,e.getMessage());
    return;
  }
  String[] cfnames=new String[columnFamilyStores.size()];
  for (int i=0; i < columnFamilyStores.size(); i++) {
    cfnames[i]=columnFamilyStores.get(i).name;
  }
  final UUID parentSession=UUIDGen.getTimeUUID();
  SystemDistributedKeyspace.startParentRepair(parentSession,keyspace,cfnames,options.getRanges());
  long repairedAt;
  try {
    ActiveRepairService.instance.prepareForRepair(parentSession,FBUtilities.getBroadcastAddress(),allNeighbors,options,columnFamilyStores);
    repairedAt=ActiveRepairService.instance.getParentRepairSession(parentSession).getRepairedAt();
    progress.incrementAndGet();
  }
 catch (  Throwable t) {
    SystemDistributedKeyspace.failParentRepair(parentSession,t);
    fireErrorAndComplete(tag,progress.get(),totalProgress,t.getMessage());
    return;
  }
  final ListeningExecutorService executor=MoreExecutors.listeningDecorator(new JMXConfigurableThreadPoolExecutor(options.getJobThreads(),Integer.MAX_VALUE,TimeUnit.SECONDS,new LinkedBlockingQueue<Runnable>(),new NamedThreadFactory("Repair#" + cmd),"internal"));
  List<ListenableFuture<RepairSessionResult>> futures=new ArrayList<>(options.getRanges().size());
  for (  Pair<Set<InetAddress>,? extends Collection<Range<Token>>> p : commonRanges) {
    final RepairSession session=ActiveRepairService.instance.submitRepairSession(parentSession,p.right,keyspace,options.getParallelism(),p.left,repairedAt,executor,cfnames);
    if (session == null)     continue;
    Futures.addCallback(session,new FutureCallback<RepairSessionResult>(){
      public void onSuccess(      RepairSessionResult result){
        String message=String.format("Repair session %s for range %s finished",session.getId(),session.getRanges().toString());
        logger.info(message);
        fireProgressEvent(tag,new ProgressEvent(ProgressEventType.PROGRESS,progress.incrementAndGet(),totalProgress,message));
      }
      public void onFailure(      Throwable t){
        String message=String.format("Repair session %s for range %s failed with error %s",session.getId(),session.getRanges().toString(),t.getMessage());
        logger.error(message,t);
        fireProgressEvent(tag,new ProgressEvent(ProgressEventType.PROGRESS,progress.incrementAndGet(),totalProgress,message));
      }
    }
);
    futures.add(session);
  }
  final Collection<Range<Token>> successfulRanges=new ArrayList<>();
  final AtomicBoolean hasFailure=new AtomicBoolean();
  final ListenableFuture<List<RepairSessionResult>> allSessions=Futures.successfulAsList(futures);
  ListenableFuture anticompactionResult=Futures.transform(allSessions,new AsyncFunction<List<RepairSessionResult>,Object>(){
    @SuppressWarnings("unchecked") public ListenableFuture apply(    List<RepairSessionResult> results) throws Exception {
      for (      RepairSessionResult sessionResult : results) {
        if (sessionResult != null) {
          successfulRanges.addAll(sessionResult.ranges);
        }
 else {
          hasFailure.compareAndSet(false,true);
        }
      }
      return ActiveRepairService.instance.finishParentSession(parentSession,allNeighbors,successfulRanges);
    }
  }
);
  Futures.addCallback(anticompactionResult,new FutureCallback<Object>(){
    public void onSuccess(    Object result){
      SystemDistributedKeyspace.successfulParentRepair(parentSession,successfulRanges);
      if (hasFailure.get()) {
        fireProgressEvent(tag,new ProgressEvent(ProgressEventType.ERROR,progress.get(),totalProgress,"Some repair failed"));
      }
 else {
        fireProgressEvent(tag,new ProgressEvent(ProgressEventType.SUCCESS,progress.get(),totalProgress,"Repair completed successfully"));
      }
      repairComplete();
    }
    public void onFailure(    Throwable t){
      fireProgressEvent(tag,new ProgressEvent(ProgressEventType.ERROR,progress.get(),totalProgress,t.getMessage()));
      SystemDistributedKeyspace.failParentRepair(parentSession,t);
      repairComplete();
    }
    private void repairComplete(){
      String duration=DurationFormatUtils.formatDurationWords(System.currentTimeMillis() - startTime,true,true);
      String message=String.format("Repair command #%d finished in %s",cmd,duration);
      fireProgressEvent(tag,new ProgressEvent(ProgressEventType.COMPLETE,progress.get(),totalProgress,message));
      logger.info(message);
      if (options.isTraced() && traceState != null) {
        for (        ProgressListener listener : listeners)         traceState.removeProgressListener(listener);
        Tracing.instance.set(traceState);
        Tracing.traceRepair(message);
        Tracing.instance.stopSession();
      }
      executor.shutdownNow();
    }
  }
);
}
