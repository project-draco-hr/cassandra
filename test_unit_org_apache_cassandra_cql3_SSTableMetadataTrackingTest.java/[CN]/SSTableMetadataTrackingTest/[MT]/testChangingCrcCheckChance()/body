{
  String currentTable="crctest";
  createTable("CREATE TABLE %s.crctest (p text, c text, v text, s text static, PRIMARY KEY (p, c)) WITH compression = {'sstable_compression': 'LZ4Compressor', 'crc_check_chance' : 0.99}");
  createTable("CREATE INDEX foo ON %s.crctest(v)");
  execute("INSERT INTO %s.crctest(p, c, v, s) values ('p1', 'k1', 'v1', 'sv1')");
  execute("INSERT INTO %s.crctest(p, c, v) values ('p1', 'k2', 'v2')");
  execute("INSERT INTO %s.crctest(p, s) values ('p2', 'sv2')");
  ColumnFamilyStore cfs=Keyspace.open(keyspace).getColumnFamilyStore(currentTable);
  ColumnFamilyStore indexCfs=cfs.indexManager.getIndexesBackedByCfs().iterator().next();
  cfs.forceBlockingFlush();
  Assert.assertEquals(0.99,cfs.metadata.compressionParameters.getCrcCheckChance(),0.00);
  Assert.assertEquals(0.99,cfs.getSSTables().iterator().next().getCompressionMetadata().parameters.getCrcCheckChance(),0.00);
  Assert.assertEquals(0.99,indexCfs.metadata.compressionParameters.getCrcCheckChance(),0.00);
  Assert.assertEquals(0.99,indexCfs.getSSTables().iterator().next().getCompressionMetadata().parameters.getCrcCheckChance(),0.00);
  Assert.assertEquals(execute("SELECT * FROM %s.crctest WHERE p='p1'").size(),2);
  Assert.assertEquals(execute("SELECT * FROM %s.crctest WHERE v='v1'").size(),1);
  execute("INSERT INTO %s.crctest(p, c, v, s) values ('p1', 'k1', 'v1', 'sv1')");
  execute("INSERT INTO %s.crctest(p, c, v) values ('p1', 'k2', 'v2')");
  execute("INSERT INTO %s.crctest(p, s) values ('p2', 'sv2')");
  cfs.forceBlockingFlush();
  execute("INSERT INTO %s.crctest(p, c, v, s) values ('p1', 'k1', 'v1', 'sv1')");
  execute("INSERT INTO %s.crctest(p, c, v) values ('p1', 'k2', 'v2')");
  execute("INSERT INTO %s.crctest(p, s) values ('p2', 'sv2')");
  cfs.forceBlockingFlush();
  execute("INSERT INTO %s.crctest(p, c, v, s) values ('p1', 'k1', 'v1', 'sv1')");
  execute("INSERT INTO %s.crctest(p, c, v) values ('p1', 'k2', 'v2')");
  execute("INSERT INTO %s.crctest(p, s) values ('p2', 'sv2')");
  cfs.forceBlockingFlush();
  cfs.forceMajorCompaction();
  createTable("ALTER TABLE %s.crctest WITH compression = {'sstable_compression': 'LZ4Compressor', 'crc_check_chance': 0.01}");
  Assert.assertEquals(0.01,cfs.metadata.compressionParameters.getCrcCheckChance(),0.00);
  Assert.assertEquals(0.01,cfs.getSSTables().iterator().next().getCompressionMetadata().parameters.getCrcCheckChance(),0.00);
  Assert.assertEquals(0.01,indexCfs.metadata.compressionParameters.getCrcCheckChance(),0.00);
  Assert.assertEquals(0.01,indexCfs.getSSTables().iterator().next().getCompressionMetadata().parameters.getCrcCheckChance(),0.00);
  Assert.assertEquals(execute("SELECT * FROM %s.crctest WHERE p='p1'").size(),2);
  Assert.assertEquals(execute("SELECT * FROM %s.crctest WHERE v='v1'").size(),1);
  cfs.setCrcCheckChance(0.03);
  Assert.assertEquals(0.03,cfs.metadata.compressionParameters.getCrcCheckChance(),0.00);
  Assert.assertEquals(0.03,cfs.getSSTables().iterator().next().getCompressionMetadata().parameters.getCrcCheckChance(),0.00);
  Assert.assertEquals(0.03,indexCfs.metadata.compressionParameters.getCrcCheckChance(),0.00);
  Assert.assertEquals(0.03,indexCfs.getSSTables().iterator().next().getCompressionMetadata().parameters.getCrcCheckChance(),0.00);
}
