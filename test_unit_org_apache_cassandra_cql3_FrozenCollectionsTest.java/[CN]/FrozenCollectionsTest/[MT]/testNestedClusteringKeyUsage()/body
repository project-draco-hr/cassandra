{
  for (  String option : Arrays.asList(""," WITH COMPACT STORAGE")) {
    createTable("CREATE TABLE %s (a int, b frozen<map<set<int>, list<int>>>, c frozen<set<int>>, d int, PRIMARY KEY (a, b, c))" + option);
    execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)",0,map(),set(),0);
    execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)",0,map(set(),list(1,2,3)),set(),0);
    execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)",0,map(set(1,2,3),list(1,2,3)),set(1,2,3),0);
    execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)",0,map(set(4,5,6),list(1,2,3)),set(1,2,3),0);
    execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)",0,map(set(7,8,9),list(1,2,3)),set(1,2,3),0);
    assertRows(execute("SELECT * FROM %s"),row(0,map(),set(),0),row(0,map(set(),list(1,2,3)),set(),0),row(0,map(set(1,2,3),list(1,2,3)),set(1,2,3),0),row(0,map(set(4,5,6),list(1,2,3)),set(1,2,3),0),row(0,map(set(7,8,9),list(1,2,3)),set(1,2,3),0));
    assertRows(execute("SELECT b FROM %s"),row(map()),row(map(set(),list(1,2,3))),row(map(set(1,2,3),list(1,2,3))),row(map(set(4,5,6),list(1,2,3))),row(map(set(7,8,9),list(1,2,3))));
    assertRows(execute("SELECT c FROM %s"),row(set()),row(set()),row(set(1,2,3)),row(set(1,2,3)),row(set(1,2,3)));
    assertRows(execute("SELECT * FROM %s LIMIT 3"),row(0,map(),set(),0),row(0,map(set(),list(1,2,3)),set(),0),row(0,map(set(1,2,3),list(1,2,3)),set(1,2,3),0));
    assertRows(execute("SELECT * FROM %s WHERE a=0 ORDER BY b DESC LIMIT 4"),row(0,map(set(7,8,9),list(1,2,3)),set(1,2,3),0),row(0,map(set(4,5,6),list(1,2,3)),set(1,2,3),0),row(0,map(set(1,2,3),list(1,2,3)),set(1,2,3),0),row(0,map(set(),list(1,2,3)),set(),0));
    assertRows(execute("SELECT * FROM %s WHERE a=? AND b=?",0,map()),row(0,map(),set(),0));
    assertRows(execute("SELECT * FROM %s WHERE a=? AND b=?",0,map(set(),list(1,2,3))),row(0,map(set(),list(1,2,3)),set(),0));
    assertRows(execute("SELECT * FROM %s WHERE a=? AND b=?",0,map(set(1,2,3),list(1,2,3))),row(0,map(set(1,2,3),list(1,2,3)),set(1,2,3),0));
    assertRows(execute("SELECT * FROM %s WHERE a=? AND b=? AND c=?",0,map(set(),list(1,2,3)),set()),row(0,map(set(),list(1,2,3)),set(),0));
    assertRows(execute("SELECT * FROM %s WHERE a=? AND (b, c) IN ?",0,list(tuple(map(set(4,5,6),list(1,2,3)),set(1,2,3)),tuple(map(),set()))),row(0,map(),set(),0),row(0,map(set(4,5,6),list(1,2,3)),set(1,2,3),0));
    assertRows(execute("SELECT * FROM %s WHERE a=? AND b > ?",0,map(set(4,5,6),list(1,2,3))),row(0,map(set(7,8,9),list(1,2,3)),set(1,2,3),0));
    assertRows(execute("SELECT * FROM %s WHERE a=? AND b >= ?",0,map(set(4,5,6),list(1,2,3))),row(0,map(set(4,5,6),list(1,2,3)),set(1,2,3),0),row(0,map(set(7,8,9),list(1,2,3)),set(1,2,3),0));
    assertRows(execute("SELECT * FROM %s WHERE a=? AND b < ?",0,map(set(4,5,6),list(1,2,3))),row(0,map(),set(),0),row(0,map(set(),list(1,2,3)),set(),0),row(0,map(set(1,2,3),list(1,2,3)),set(1,2,3),0));
    assertRows(execute("SELECT * FROM %s WHERE a=? AND b <= ?",0,map(set(4,5,6),list(1,2,3))),row(0,map(),set(),0),row(0,map(set(),list(1,2,3)),set(),0),row(0,map(set(1,2,3),list(1,2,3)),set(1,2,3),0),row(0,map(set(4,5,6),list(1,2,3)),set(1,2,3),0));
    assertRows(execute("SELECT * FROM %s WHERE a=? AND b > ? AND b <= ?",0,map(set(1,2,3),list(1,2,3)),map(set(4,5,6),list(1,2,3))),row(0,map(set(4,5,6),list(1,2,3)),set(1,2,3),0));
    execute("DELETE FROM %s WHERE a=? AND b=? AND c=?",0,map(),set());
    assertEmpty(execute("SELECT * FROM %s WHERE a=? AND b=? AND c=?",0,map(),set()));
    execute("DELETE FROM %s WHERE a=? AND b=? AND c=?",0,map(set(),list(1,2,3)),set());
    assertEmpty(execute("SELECT * FROM %s WHERE a=? AND b=? AND c=?",0,map(set(),list(1,2,3)),set()));
    execute("DELETE FROM %s WHERE a=? AND b=? AND c=?",0,map(set(4,5,6),list(1,2,3)),set(1,2,3));
    assertEmpty(execute("SELECT * FROM %s WHERE a=? AND b=? AND c=?",0,map(set(4,5,6),list(1,2,3)),set(1,2,3)));
    assertRows(execute("SELECT * FROM %s"),row(0,map(set(1,2,3),list(1,2,3)),set(1,2,3),0),row(0,map(set(7,8,9),list(1,2,3)),set(1,2,3),0));
  }
}
