{
  TField field;
  iprot.readStructBegin();
  while (true) {
    field=iprot.readFieldBegin();
    if (field.type == TType.STOP) {
      break;
    }
    _Fields fieldId=_Fields.findByThriftId(field.id);
    if (fieldId == null) {
      TProtocolUtil.skip(iprot,field.type);
    }
 else {
switch (fieldId) {
case SUCCESS:
        if (field.type == TType.LIST) {
{
            TList _list38=iprot.readListBegin();
            this.success=new ArrayList<String>(_list38.size);
            for (int _i39=0; _i39 < _list38.size; ++_i39) {
              String _elem40;
              _elem40=iprot.readString();
              this.success.add(_elem40);
            }
            iprot.readListEnd();
          }
        }
 else {
          TProtocolUtil.skip(iprot,field.type);
        }
      break;
case IRE:
    if (field.type == TType.STRUCT) {
      this.ire=new InvalidRequestException();
      this.ire.read(iprot);
    }
 else {
      TProtocolUtil.skip(iprot,field.type);
    }
  break;
case UE:
if (field.type == TType.STRUCT) {
  this.ue=new UnavailableException();
  this.ue.read(iprot);
}
 else {
  TProtocolUtil.skip(iprot,field.type);
}
break;
case TE:
if (field.type == TType.STRUCT) {
this.te=new TimedOutException();
this.te.read(iprot);
}
 else {
TProtocolUtil.skip(iprot,field.type);
}
break;
}
iprot.readFieldEnd();
}
}
iprot.readStructEnd();
validate();
}
