{
  TField field;
  iprot.readStructBegin();
  while (true) {
    field=iprot.readFieldBegin();
    if (field.type == TType.STOP) {
      break;
    }
switch (field.id) {
case KEYSPACE:
      if (field.type == TType.STRING) {
        this.keyspace=iprot.readString();
      }
 else {
        TProtocolUtil.skip(iprot,field.type);
      }
    break;
case MUTATION_MAP:
  if (field.type == TType.MAP) {
{
      TMap _map55=iprot.readMapBegin();
      this.mutation_map=new HashMap<String,Map<String,List<Mutation>>>(2 * _map55.size);
      for (int _i56=0; _i56 < _map55.size; ++_i56) {
        String _key57;
        Map<String,List<Mutation>> _val58;
        _key57=iprot.readString();
{
          TMap _map59=iprot.readMapBegin();
          _val58=new HashMap<String,List<Mutation>>(2 * _map59.size);
          for (int _i60=0; _i60 < _map59.size; ++_i60) {
            String _key61;
            List<Mutation> _val62;
            _key61=iprot.readString();
{
              TList _list63=iprot.readListBegin();
              _val62=new ArrayList<Mutation>(_list63.size);
              for (int _i64=0; _i64 < _list63.size; ++_i64) {
                Mutation _elem65;
                _elem65=new Mutation();
                _elem65.read(iprot);
                _val62.add(_elem65);
              }
              iprot.readListEnd();
            }
            _val58.put(_key61,_val62);
          }
          iprot.readMapEnd();
        }
        this.mutation_map.put(_key57,_val58);
      }
      iprot.readMapEnd();
    }
  }
 else {
    TProtocolUtil.skip(iprot,field.type);
  }
break;
case CONSISTENCY_LEVEL:
if (field.type == TType.I32) {
this.consistency_level=iprot.readI32();
setConsistency_levelIsSet(true);
}
 else {
TProtocolUtil.skip(iprot,field.type);
}
break;
default :
TProtocolUtil.skip(iprot,field.type);
break;
}
iprot.readFieldEnd();
}
iprot.readStructEnd();
if (!isSetConsistency_level()) {
throw new TProtocolException("Required field 'consistency_level' was not found in serialized data! Struct: " + toString());
}
validate();
}
