{
  TField field;
  iprot.readStructBegin();
  while (true) {
    field=iprot.readFieldBegin();
    if (field.type == TType.STOP) {
      break;
    }
switch (field.id) {
case TABLE:
      if (field.type == TType.STRING) {
        this.table=iprot.readString();
      }
 else {
        TProtocolUtil.skip(iprot,field.type);
      }
    break;
case KEY:
  if (field.type == TType.STRING) {
    this.key=iprot.readString();
  }
 else {
    TProtocolUtil.skip(iprot,field.type);
  }
break;
case COLUMN_FAMILY:
if (field.type == TType.STRING) {
this.column_family=iprot.readString();
}
 else {
TProtocolUtil.skip(iprot,field.type);
}
break;
case SUPER_COLUMN_NAMES:
if (field.type == TType.LIST) {
{
TList _list47=iprot.readListBegin();
this.super_column_names=new ArrayList<byte[]>(_list47.size);
for (int _i48=0; _i48 < _list47.size; ++_i48) {
byte[] _elem49;
_elem49=iprot.readBinary();
this.super_column_names.add(_elem49);
}
iprot.readListEnd();
}
}
 else {
TProtocolUtil.skip(iprot,field.type);
}
break;
case CONSISTENCY_LEVEL:
if (field.type == TType.I32) {
this.consistency_level=iprot.readI32();
this.__isset.consistency_level=true;
}
 else {
TProtocolUtil.skip(iprot,field.type);
}
break;
default :
TProtocolUtil.skip(iprot,field.type);
break;
}
iprot.readFieldEnd();
}
iprot.readStructEnd();
validate();
}
