{
  TField field;
  iprot.readStructBegin();
  while (true) {
    field=iprot.readFieldBegin();
    if (field.type == TType.STOP) {
      break;
    }
switch (field.id) {
case KEYSPACE:
      if (field.type == TType.STRING) {
        this.keyspace=iprot.readString();
      }
 else {
        TProtocolUtil.skip(iprot,field.type);
      }
    break;
case KEY:
  if (field.type == TType.STRING) {
    this.key=iprot.readString();
  }
 else {
    TProtocolUtil.skip(iprot,field.type);
  }
break;
case CFMAP:
if (field.type == TType.MAP) {
{
  TMap _map38=iprot.readMapBegin();
  this.cfmap=new HashMap<String,List<ColumnOrSuperColumn>>(2 * _map38.size);
  for (int _i39=0; _i39 < _map38.size; ++_i39) {
    String _key40;
    List<ColumnOrSuperColumn> _val41;
    _key40=iprot.readString();
{
      TList _list42=iprot.readListBegin();
      _val41=new ArrayList<ColumnOrSuperColumn>(_list42.size);
      for (int _i43=0; _i43 < _list42.size; ++_i43) {
        ColumnOrSuperColumn _elem44;
        _elem44=new ColumnOrSuperColumn();
        _elem44.read(iprot);
        _val41.add(_elem44);
      }
      iprot.readListEnd();
    }
    this.cfmap.put(_key40,_val41);
  }
  iprot.readMapEnd();
}
}
 else {
TProtocolUtil.skip(iprot,field.type);
}
break;
case CONSISTENCY_LEVEL:
if (field.type == TType.I32) {
this.consistency_level=iprot.readI32();
setConsistency_levelIsSet(true);
}
 else {
TProtocolUtil.skip(iprot,field.type);
}
break;
default :
TProtocolUtil.skip(iprot,field.type);
break;
}
iprot.readFieldEnd();
}
iprot.readStructEnd();
validate();
}
