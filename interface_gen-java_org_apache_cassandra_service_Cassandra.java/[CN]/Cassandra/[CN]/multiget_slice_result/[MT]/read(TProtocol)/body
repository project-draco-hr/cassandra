{
  TField field;
  iprot.readStructBegin();
  while (true) {
    field=iprot.readFieldBegin();
    if (field.type == TType.STOP) {
      break;
    }
switch (field.id) {
case SUCCESS:
      if (field.type == TType.MAP) {
{
          TMap _map25=iprot.readMapBegin();
          this.success=new HashMap<String,List<ColumnOrSuperColumn>>(2 * _map25.size);
          for (int _i26=0; _i26 < _map25.size; ++_i26) {
            String _key27;
            List<ColumnOrSuperColumn> _val28;
            _key27=iprot.readString();
{
              TList _list29=iprot.readListBegin();
              _val28=new ArrayList<ColumnOrSuperColumn>(_list29.size);
              for (int _i30=0; _i30 < _list29.size; ++_i30) {
                ColumnOrSuperColumn _elem31;
                _elem31=new ColumnOrSuperColumn();
                _elem31.read(iprot);
                _val28.add(_elem31);
              }
              iprot.readListEnd();
            }
            this.success.put(_key27,_val28);
          }
          iprot.readMapEnd();
        }
      }
 else {
        TProtocolUtil.skip(iprot,field.type);
      }
    break;
case IRE:
  if (field.type == TType.STRUCT) {
    this.ire=new InvalidRequestException();
    this.ire.read(iprot);
  }
 else {
    TProtocolUtil.skip(iprot,field.type);
  }
break;
case UE:
if (field.type == TType.STRUCT) {
this.ue=new UnavailableException();
this.ue.read(iprot);
}
 else {
TProtocolUtil.skip(iprot,field.type);
}
break;
default :
TProtocolUtil.skip(iprot,field.type);
break;
}
iprot.readFieldEnd();
}
iprot.readStructEnd();
validate();
}
