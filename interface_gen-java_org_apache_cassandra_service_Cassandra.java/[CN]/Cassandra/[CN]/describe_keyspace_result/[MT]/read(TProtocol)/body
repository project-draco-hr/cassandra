{
  TField field;
  iprot.readStructBegin();
  while (true) {
    field=iprot.readFieldBegin();
    if (field.type == TType.STOP) {
      break;
    }
switch (field.id) {
case SUCCESS:
      if (field.type == TType.MAP) {
{
          TMap _map29=iprot.readMapBegin();
          this.success=new HashMap<String,Map<String,String>>(2 * _map29.size);
          for (int _i30=0; _i30 < _map29.size; ++_i30) {
            String _key31;
            Map<String,String> _val32;
            _key31=iprot.readString();
{
              TMap _map33=iprot.readMapBegin();
              _val32=new HashMap<String,String>(2 * _map33.size);
              for (int _i34=0; _i34 < _map33.size; ++_i34) {
                String _key35;
                String _val36;
                _key35=iprot.readString();
                _val36=iprot.readString();
                _val32.put(_key35,_val36);
              }
              iprot.readMapEnd();
            }
            this.success.put(_key31,_val32);
          }
          iprot.readMapEnd();
        }
      }
 else {
        TProtocolUtil.skip(iprot,field.type);
      }
    break;
case NFE:
  if (field.type == TType.STRUCT) {
    this.nfe=new NotFoundException();
    this.nfe.read(iprot);
  }
 else {
    TProtocolUtil.skip(iprot,field.type);
  }
break;
default :
TProtocolUtil.skip(iprot,field.type);
break;
}
iprot.readFieldEnd();
}
iprot.readStructEnd();
validate();
}
