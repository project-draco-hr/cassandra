{
  TField field;
  iprot.readStructBegin();
  while (true) {
    field=iprot.readFieldBegin();
    if (field.type == TType.STOP) {
      break;
    }
switch (field.id) {
case KEYSPACE:
      if (field.type == TType.STRING) {
        this.keyspace=iprot.readString();
      }
 else {
        TProtocolUtil.skip(iprot,field.type);
      }
    break;
case KEYS:
  if (field.type == TType.LIST) {
{
      TList _list21=iprot.readListBegin();
      this.keys=new ArrayList<String>(_list21.size);
      for (int _i22=0; _i22 < _list21.size; ++_i22) {
        String _elem23;
        _elem23=iprot.readString();
        this.keys.add(_elem23);
      }
      iprot.readListEnd();
    }
  }
 else {
    TProtocolUtil.skip(iprot,field.type);
  }
break;
case COLUMN_PARENT:
if (field.type == TType.STRUCT) {
this.column_parent=new ColumnParent();
this.column_parent.read(iprot);
}
 else {
TProtocolUtil.skip(iprot,field.type);
}
break;
case PREDICATE:
if (field.type == TType.STRUCT) {
this.predicate=new SlicePredicate();
this.predicate.read(iprot);
}
 else {
TProtocolUtil.skip(iprot,field.type);
}
break;
case CONSISTENCY_LEVEL:
if (field.type == TType.I32) {
this.consistency_level=iprot.readI32();
setConsistency_levelIsSet(true);
}
 else {
TProtocolUtil.skip(iprot,field.type);
}
break;
default :
TProtocolUtil.skip(iprot,field.type);
break;
}
iprot.readFieldEnd();
}
iprot.readStructEnd();
if (!isSetConsistency_level()) {
throw new TProtocolException("Required field 'consistency_level' was not found in serialized data! Struct: " + toString());
}
validate();
}
