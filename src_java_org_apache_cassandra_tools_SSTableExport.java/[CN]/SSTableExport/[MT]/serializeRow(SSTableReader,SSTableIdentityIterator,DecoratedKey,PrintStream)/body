{
  ColumnFamily columnFamily=row.getColumnFamilyWithColumns();
  CFMetaData cfMetaData=columnFamily.metadata();
  AbstractType comparator=columnFamily.getComparator();
  outs.print("  " + asKey(bytesToHex(row.getKey().key)));
  if (columnFamily.isSuper()) {
    QueryFilter filter=QueryFilter.getSliceFilter(key,new QueryPath(columnFamily.metadata().tableName),startColumn,ByteBufferUtil.EMPTY_BYTE_BUFFER,false,PAGE_SIZE);
    Iterator<IColumn> iter=columnFamily.getSortedColumns().iterator();
    while (iter.hasNext()) {
      IColumn column=iter.next();
      outs.print(asKey(comparator.getString(column.name())));
      outs.print("{");
      outs.print(asKey("deletedAt"));
      outs.print(column.getMarkedForDeleteAt());
      outs.print(", ");
      outs.print(asKey("subColumns"));
      serializeColumns(outs,column.getSubColumns(),columnFamily.getSubComparator(),cfMetaData);
      outs.print("}");
      if (iter.hasNext()) {
        outs.print(", ");
      }
    }
    try {
      columns=filter.getSSTableColumnIterator(reader);
      serializeRow(columns,isSuperCF,out);
    }
 catch (    IOException e) {
      System.err.println("WARNING: Corrupt row " + key + " (skipping).");
    }
    if (columnCount < PAGE_SIZE)     break;
  }
  out.print(isSuperCF ? "}" : "]");
}
