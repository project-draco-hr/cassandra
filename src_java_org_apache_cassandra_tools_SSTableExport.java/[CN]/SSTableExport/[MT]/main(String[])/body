{
  String usage=String.format("Usage: %s <sstable> [-k key [-k key [...]] -x key [-x key [...]]]%n",SSTableExport.class.getName());
  CommandLineParser parser=new PosixParser();
  try {
    cmd=parser.parse(options,args);
  }
 catch (  ParseException e1) {
    System.err.println(e1.getMessage());
    System.err.println(usage);
    System.exit(1);
  }
  if (cmd.getArgs().length != 1) {
    System.err.println("You must supply exactly one sstable");
    System.err.println(usage);
    System.exit(1);
  }
  String[] keys=cmd.getOptionValues(KEY_OPTION);
  String[] excludes=cmd.getOptionValues(EXCLUDEKEY_OPTION);
  String ssTableFileName=new File(cmd.getArgs()[0]).getAbsolutePath();
  DatabaseDescriptor.loadSchemas();
  Descriptor descriptor=Descriptor.fromFilename(ssTableFileName);
  if (Schema.instance.getKSMetaData(descriptor.ksname) == null) {
    System.err.println(String.format("Filename %s references to nonexistent keyspace: %s!",ssTableFileName,descriptor.ksname));
    System.exit(1);
  }
  Table table=Table.open(descriptor.ksname);
  String baseName=descriptor.cfname;
  if (descriptor.cfname.contains(".")) {
    String[] parts=descriptor.cfname.split("\\.",2);
    baseName=parts[0];
  }
  try {
    table.getColumnFamilyStore(baseName);
  }
 catch (  IllegalArgumentException e) {
    System.err.println(String.format("The provided column family is not part of this cassandra keyspace: keyspace = %s, column family = %s",descriptor.ksname,descriptor.cfname));
    System.exit(1);
  }
  if (cmd.hasOption(ENUMERATEKEYS_OPTION)) {
    enumeratekeys(descriptor,System.out);
  }
 else {
    if ((keys != null) && (keys.length > 0))     export(descriptor,System.out,Arrays.asList(keys),excludes);
 else     export(descriptor,excludes);
  }
  System.exit(0);
}
