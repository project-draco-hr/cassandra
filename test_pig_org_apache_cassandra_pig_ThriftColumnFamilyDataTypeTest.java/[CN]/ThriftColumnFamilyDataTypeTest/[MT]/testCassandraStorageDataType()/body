{
  pig.registerQuery("rows = LOAD 'cassandra://thrift_ks/some_app?" + defaultParameters + "' USING CassandraStorage();");
  Tuple t=pig.openIterator("rows").next();
  assertEquals("foo",t.get(0));
  Tuple column=(Tuple)t.get(1);
  assertEquals("ascii",column.get(1));
  column=(Tuple)t.get(2);
  assertEquals(12345678L,column.get(1));
  column=(Tuple)t.get(3);
  assertEquals(new DataByteArray(Hex.hexToBytes("DEADBEEF")),column.get(1));
  column=(Tuple)t.get(4);
  assertEquals(false,column.get(1));
  column=(Tuple)t.get(5);
  assertEquals("23.345",column.get(1));
  column=(Tuple)t.get(6);
  assertEquals(2.7182818284590451d,column.get(1));
  column=(Tuple)t.get(7);
  assertEquals(23.45f,column.get(1));
  column=(Tuple)t.get(8);
  assertEquals("127.0.0.1",column.get(1));
  column=(Tuple)t.get(9);
  assertEquals(23,column.get(1));
  column=(Tuple)t.get(10);
  assertEquals("hello",column.get(1));
  column=(Tuple)t.get(11);
  assertEquals(1296705900000L,column.get(1));
  column=(Tuple)t.get(12);
  assertEquals(new DataByteArray((TimeUUIDType.instance.fromString("e23f450f-53a6-11e2-7f7f-7f7f7f7f7f7f").array())),column.get(1));
  column=(Tuple)t.get(13);
  assertEquals(new DataByteArray((UUIDType.instance.fromString("550e8400-e29b-41d4-a716-446655440000").array())),column.get(1));
  column=(Tuple)t.get(14);
  assertEquals(12345,column.get(1));
  pig.registerQuery("cc_rows = LOAD 'cassandra://thrift_ks/cc?" + defaultParameters + "' USING CassandraStorage();");
  t=pig.openIterator("cc_rows").next();
  assertEquals("chuck",t.get(0));
  DataBag columns=(DataBag)t.get(1);
  column=columns.iterator().next();
  assertEquals("kick",column.get(0));
  assertEquals(3L,column.get(1));
}
