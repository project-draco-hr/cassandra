{
  float STDev=0.1f;
  CommandLineParser parser=new PosixParser();
  try {
    CommandLine cmd=parser.parse(availableOptions,arguments);
    if (cmd.hasOption("h"))     throw new IllegalArgumentException("help");
    if (cmd.hasOption("n"))     numKeys=Integer.parseInt(cmd.getOptionValue("n"));
    if (cmd.hasOption("N"))     skipKeys=Float.parseFloat(cmd.getOptionValue("N"));
    if (cmd.hasOption("t"))     threads=Integer.parseInt(cmd.getOptionValue("t"));
    if (cmd.hasOption("c"))     columns=Integer.parseInt(cmd.getOptionValue("c"));
    if (cmd.hasOption("S"))     columnSize=Integer.parseInt(cmd.getOptionValue("S"));
    if (cmd.hasOption("C"))     cardinality=Integer.parseInt(cmd.getOptionValue("C"));
    if (cmd.hasOption("d"))     nodes=cmd.getOptionValue("d").split(",");
    if (cmd.hasOption("D")) {
      try {
        String node=null;
        List<String> tmpNodes=new ArrayList<String>();
        BufferedReader in=new BufferedReader(new InputStreamReader(new FileInputStream(cmd.getOptionValue("D"))));
        while ((node=in.readLine()) != null) {
          if (node.length() > 0)           tmpNodes.add(node);
        }
        nodes=tmpNodes.toArray(new String[tmpNodes.size()]);
        in.close();
      }
 catch (      IOException ioe) {
        throw new RuntimeException(ioe);
      }
    }
    if (cmd.hasOption("s"))     STDev=Float.parseFloat(cmd.getOptionValue("s"));
    if (cmd.hasOption("r"))     random=Boolean.parseBoolean(cmd.getOptionValue("r"));
    if (cmd.hasOption("f")) {
      try {
        out=new PrintStream(new FileOutputStream(cmd.getOptionValue("f")));
      }
 catch (      FileNotFoundException e) {
        System.out.println(e.getMessage());
      }
    }
    if (cmd.hasOption("p"))     port=Integer.parseInt(cmd.getOptionValue("p"));
    if (cmd.hasOption("m"))     unframed=Boolean.parseBoolean(cmd.getOptionValue("m"));
    if (cmd.hasOption("o"))     operation=Stress.Operation.valueOf(cmd.getOptionValue("o").toUpperCase());
    if (cmd.hasOption("u"))     superColumns=Integer.parseInt(cmd.getOptionValue("u"));
    if (cmd.hasOption("y"))     columnFamilyType=ColumnFamilyType.valueOf(cmd.getOptionValue("y"));
    if (cmd.hasOption("K")) {
      retryTimes=Integer.valueOf(cmd.getOptionValue("K"));
      if (retryTimes <= 0) {
        throw new RuntimeException("--keep-trying option value should be > 0");
      }
    }
    if (cmd.hasOption("k")) {
      retryTimes=1;
      ignoreErrors=true;
    }
    if (cmd.hasOption("i"))     progressInterval=Integer.parseInt(cmd.getOptionValue("i"));
    if (cmd.hasOption("g"))     keysPerCall=Integer.parseInt(cmd.getOptionValue("g"));
    if (cmd.hasOption("l"))     replicationFactor=Integer.parseInt(cmd.getOptionValue("l"));
    if (cmd.hasOption("e"))     consistencyLevel=ConsistencyLevel.valueOf(cmd.getOptionValue("e").toUpperCase());
    if (cmd.hasOption("x"))     indexType=IndexType.valueOf(cmd.getOptionValue("x").toUpperCase());
    if (cmd.hasOption("R"))     replicationStrategy=cmd.getOptionValue("R");
    if (cmd.hasOption("O")) {
      String[] pairs=StringUtils.split(cmd.getOptionValue("O"),',');
      for (      String pair : pairs) {
        String[] keyAndValue=StringUtils.split(pair,':');
        if (keyAndValue.length != 2)         throw new RuntimeException("Invalid --strategy-properties value.");
        replicationStrategyOptions.put(keyAndValue[0],keyAndValue[1]);
      }
    }
  }
 catch (  ParseException e) {
    throw new IllegalArgumentException(e.getMessage(),e);
  }
  mean=numKeys / 2;
  sigma=numKeys * STDev;
  operationCount=new AtomicIntegerArray(threads);
  keyCount=new AtomicIntegerArray(threads);
  latencies=new AtomicLongArray(threads);
}
