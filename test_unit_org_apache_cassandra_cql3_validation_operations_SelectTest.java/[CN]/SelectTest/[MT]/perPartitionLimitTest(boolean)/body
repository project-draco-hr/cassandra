{
  String query="CREATE TABLE %s (a int, b int, c int, PRIMARY KEY (a, b))";
  if (withCompactStorage)   createTable(query + " WITH COMPACT STORAGE");
 else   createTable(query);
  for (int i=0; i < 5; i++) {
    for (int j=0; j < 5; j++) {
      execute("INSERT INTO %s (a, b, c) VALUES (?, ?, ?)",i,j,j);
    }
  }
  assertInvalidMessage("LIMIT must be strictly positive","SELECT * FROM %s PER PARTITION LIMIT ?",0);
  assertInvalidMessage("LIMIT must be strictly positive","SELECT * FROM %s PER PARTITION LIMIT ?",-1);
  assertRowsIgnoringOrder(execute("SELECT * FROM %s PER PARTITION LIMIT ?",2),row(0,0,0),row(0,1,1),row(1,0,0),row(1,1,1),row(2,0,0),row(2,1,1),row(3,0,0),row(3,1,1),row(4,0,0),row(4,1,1));
  assertRowCount(execute("SELECT * FROM %s PER PARTITION LIMIT ? LIMIT ?",2,6),6);
  assertRowCount(execute("SELECT * FROM %s PER PARTITION LIMIT ? LIMIT ?",2,5),5);
  assertRowsIgnoringOrder(execute("SELECT * FROM %s WHERE a IN (2,3) PER PARTITION LIMIT ?",2),row(2,0,0),row(2,1,1),row(3,0,0),row(3,1,1));
  assertRowCount(execute("SELECT * FROM %s WHERE a IN (2,3) PER PARTITION LIMIT ? LIMIT 3",2),3);
  assertRowCount(execute("SELECT * FROM %s WHERE a IN (1,2,3) PER PARTITION LIMIT ? LIMIT 3",2),3);
  assertRows(execute("SELECT * FROM %s WHERE a = ? PER PARTITION LIMIT ?",2,3),row(2,0,0),row(2,1,1),row(2,2,2));
  assertRows(execute("SELECT * FROM %s WHERE a = ? ORDER BY b DESC PER PARTITION LIMIT ?",2,3),row(2,4,4),row(2,3,3),row(2,2,2));
  assertRows(execute("SELECT * FROM %s WHERE a = ? AND b > ? PER PARTITION LIMIT ? ALLOW FILTERING",2,0,2),row(2,1,1),row(2,2,2));
  assertRows(execute("SELECT * FROM %s WHERE a = ? AND b > ? ORDER BY b DESC PER PARTITION LIMIT ? ALLOW FILTERING",2,2,2),row(2,4,4),row(2,3,3));
  assertInvalidMessage("PER PARTITION LIMIT is not allowed with SELECT DISTINCT queries","SELECT DISTINCT a FROM %s PER PARTITION LIMIT ?",3);
  assertInvalidMessage("PER PARTITION LIMIT is not allowed with SELECT DISTINCT queries","SELECT DISTINCT a FROM %s PER PARTITION LIMIT ? LIMIT ?",3,4);
}
