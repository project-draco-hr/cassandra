{
  createTable("CREATE TABLE %s (a int, b int, c int, d int, s int static, PRIMARY KEY (a, b))");
  execute("INSERT INTO %s (a, b, c, d) VALUES (1, 2, 4, 8)");
  execute("INSERT INTO %s (a, b, c, d) VALUES (1, 3, 6, 12)");
  execute("INSERT INTO %s (a, b, c, d) VALUES (1, 4, 4, 8)");
  execute("INSERT INTO %s (a, b, c, d) VALUES (2, 3, 7, 12)");
  execute("UPDATE %s SET s = 1 WHERE a = 1");
  execute("UPDATE %s SET s = 2 WHERE a = 2");
  execute("UPDATE %s SET s = 3 WHERE a = 3");
  execute("INSERT INTO %s (a, b, c, d) VALUES (1, 1, 4, 8)");
  execute("INSERT INTO %s (a, b, c, d) VALUES (2, 2, 7, 12)");
  execute("DELETE FROM %s WHERE a = 1 AND b = 1");
  execute("DELETE FROM %s WHERE a = 2 AND b = 2");
  flush();
  assertInvalidMessage(StatementRestrictions.REQUIRES_ALLOW_FILTERING_MESSAGE,"SELECT * FROM %s WHERE c = 4 AND d = 8");
  assertRows(execute("SELECT * FROM %s WHERE c = 4 AND d = 8 ALLOW FILTERING"),row(1,2,1,4,8),row(1,4,1,4,8));
  assertInvalidMessage(StatementRestrictions.REQUIRES_ALLOW_FILTERING_MESSAGE,"SELECT * FROM %s WHERE a = 1 AND b = 4 AND d = 8");
  assertRows(execute("SELECT * FROM %s WHERE a = 1 AND b = 4 AND d = 8 ALLOW FILTERING"),row(1,4,1,4,8));
  assertInvalidMessage(StatementRestrictions.REQUIRES_ALLOW_FILTERING_MESSAGE,"SELECT * FROM %s WHERE s = 1 AND d = 12");
  assertRows(execute("SELECT * FROM %s WHERE s = 1 AND d = 12 ALLOW FILTERING"),row(1,3,1,6,12));
  assertInvalidMessage("IN predicates on non-primary-key columns (c) is not yet supported","SELECT * FROM %s WHERE a IN (1, 2) AND c IN (6, 7)");
  assertInvalidMessage("IN predicates on non-primary-key columns (c) is not yet supported","SELECT * FROM %s WHERE a IN (1, 2) AND c IN (6, 7) ALLOW FILTERING");
  assertInvalidMessage(StatementRestrictions.REQUIRES_ALLOW_FILTERING_MESSAGE,"SELECT * FROM %s WHERE c > 4");
  assertRows(execute("SELECT * FROM %s WHERE c > 4 ALLOW FILTERING"),row(1,3,1,6,12),row(2,3,2,7,12));
  assertInvalidMessage(StatementRestrictions.REQUIRES_ALLOW_FILTERING_MESSAGE,"SELECT * FROM %s WHERE s > 1");
  assertRows(execute("SELECT * FROM %s WHERE s > 1 ALLOW FILTERING"),row(2,3,2,7,12),row(3,null,3,null,null));
  assertInvalidMessage(StatementRestrictions.REQUIRES_ALLOW_FILTERING_MESSAGE,"SELECT * FROM %s WHERE b < 3 AND c <= 4");
  assertRows(execute("SELECT * FROM %s WHERE b < 3 AND c <= 4 ALLOW FILTERING"),row(1,2,1,4,8));
  assertInvalidMessage(StatementRestrictions.REQUIRES_ALLOW_FILTERING_MESSAGE,"SELECT * FROM %s WHERE c >= 3 AND c <= 6");
  assertRows(execute("SELECT * FROM %s WHERE c >= 3 AND c <= 6 ALLOW FILTERING"),row(1,2,1,4,8),row(1,3,1,6,12),row(1,4,1,4,8));
  assertRows(execute("SELECT * FROM %s WHERE s >= 1 LIMIT 2 ALLOW FILTERING"),row(1,2,1,4,8),row(1,3,1,6,12));
  assertInvalidMessage(StatementRestrictions.REQUIRES_ALLOW_FILTERING_MESSAGE,"SELECT * FROM %s WHERE c = null");
  assertInvalidMessage("Unsupported null value for column c","SELECT * FROM %s WHERE c = null ALLOW FILTERING");
  assertInvalidMessage(StatementRestrictions.REQUIRES_ALLOW_FILTERING_MESSAGE,"SELECT * FROM %s WHERE c > null");
  assertInvalidMessage("Unsupported null value for column c","SELECT * FROM %s WHERE c > null ALLOW FILTERING");
  assertInvalidMessage(StatementRestrictions.REQUIRES_ALLOW_FILTERING_MESSAGE,"SELECT * FROM %s WHERE s > null");
  assertInvalidMessage("Unsupported null value for column s","SELECT * FROM %s WHERE s > null ALLOW FILTERING");
  assertInvalidMessage("Unsupported unset value for column c","SELECT * FROM %s WHERE c = ? ALLOW FILTERING",unset());
  assertInvalidMessage("Unsupported unset value for column s","SELECT * FROM %s WHERE s = ? ALLOW FILTERING",unset());
  assertInvalidMessage("Unsupported unset value for column c","SELECT * FROM %s WHERE c > ? ALLOW FILTERING",unset());
}
