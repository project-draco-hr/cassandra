{
  createTable("CREATE TABLE %s (a int, b int, c frozen<set<int>>, PRIMARY KEY (a, b)) WITH COMPACT STORAGE");
  execute("INSERT INTO %s (a, b, c) VALUES (1, 2, {4, 2})");
  execute("INSERT INTO %s (a, b, c) VALUES (1, 3, {6, 2})");
  execute("INSERT INTO %s (a, b, c) VALUES (1, 4, {4, 1})");
  execute("INSERT INTO %s (a, b, c) VALUES (2, 3, {7, 1})");
  flush();
  assertInvalidMessage("Predicates on non-primary-key columns (c) are not yet supported for non secondary index queries","SELECT * FROM %s WHERE a = 1 AND b = 4 AND c = {4, 1} ALLOW FILTERING");
  assertInvalidMessage("Predicates on non-primary-key columns (c) are not yet supported for non secondary index queries","SELECT * FROM %s WHERE c > {4, 2} ALLOW FILTERING");
  assertInvalidMessage("Predicates on non-primary-key columns (c) are not yet supported for non secondary index queries","SELECT * FROM %s WHERE c >= {4, 2} AND c <= {6, 4} ALLOW FILTERING");
  assertInvalidMessage("Predicates on non-primary-key columns (c) are not yet supported for non secondary index queries","SELECT * FROM %s WHERE c CONTAINS 2 ALLOW FILTERING");
  assertInvalidMessage("Cannot use CONTAINS KEY on non-map column c","SELECT * FROM %s WHERE c CONTAINS KEY 2 ALLOW FILTERING");
  assertInvalidMessage("Predicates on non-primary-key columns (c) are not yet supported for non secondary index queries","SELECT * FROM %s WHERE c = null");
  assertInvalidMessage("Predicates on non-primary-key columns (c) are not yet supported for non secondary index queries","SELECT * FROM %s WHERE c = null ALLOW FILTERING");
  assertInvalidMessage("Predicates on non-primary-key columns (c) are not yet supported for non secondary index queries","SELECT * FROM %s WHERE c > null");
  assertInvalidMessage("Predicates on non-primary-key columns (c) are not yet supported for non secondary index queries","SELECT * FROM %s WHERE c > null ALLOW FILTERING");
  assertInvalidMessage("Predicates on non-primary-key columns (c) are not yet supported for non secondary index queries","SELECT * FROM %s WHERE c CONTAINS null");
  assertInvalidMessage("Predicates on non-primary-key columns (c) are not yet supported for non secondary index queries","SELECT * FROM %s WHERE c CONTAINS null ALLOW FILTERING");
  assertInvalidMessage("Predicates on non-primary-key columns (c) are not yet supported for non secondary index queries","SELECT * FROM %s WHERE c = ? ALLOW FILTERING",unset());
  assertInvalidMessage("Predicates on non-primary-key columns (c) are not yet supported for non secondary index queries","SELECT * FROM %s WHERE c > ? ALLOW FILTERING",unset());
  assertInvalidMessage("Predicates on non-primary-key columns (c) are not yet supported for non secondary index queries","SELECT * FROM %s WHERE c CONTAINS ? ALLOW FILTERING",unset());
  createTable("CREATE TABLE %s (a int PRIMARY KEY, b int, c frozen<set<int>>) WITH COMPACT STORAGE");
  execute("INSERT INTO %s (a, b, c) VALUES (1, 2, {4, 2})");
  execute("INSERT INTO %s (a, b, c) VALUES (2, 1, {6, 2})");
  execute("INSERT INTO %s (a, b, c) VALUES (3, 2, {4, 1})");
  execute("INSERT INTO %s (a, b, c) VALUES (4, 1, {7, 1})");
  flush();
  assertInvalidMessage(StatementRestrictions.REQUIRES_ALLOW_FILTERING_MESSAGE,"SELECT * FROM %s WHERE a = 1 AND b = 2 AND c = {4, 2}");
  assertRows(execute("SELECT * FROM %s WHERE a = 1 AND b = 2 AND c = {4, 2} ALLOW FILTERING"),row(1,2,set(4,2)));
  assertInvalidMessage(StatementRestrictions.REQUIRES_ALLOW_FILTERING_MESSAGE,"SELECT * FROM %s WHERE c > {4, 2}");
  assertRows(execute("SELECT * FROM %s WHERE c > {4, 2} ALLOW FILTERING"),row(2,1,set(6,2)));
  assertInvalidMessage(StatementRestrictions.REQUIRES_ALLOW_FILTERING_MESSAGE,"SELECT * FROM %s WHERE b < 3 AND c <= {4, 2}");
  assertRows(execute("SELECT * FROM %s WHERE b < 3 AND c <= {4, 2} ALLOW FILTERING"),row(1,2,set(4,2)),row(4,1,set(1,7)),row(3,2,set(4,1)));
  assertInvalidMessage(StatementRestrictions.REQUIRES_ALLOW_FILTERING_MESSAGE,"SELECT * FROM %s WHERE c >= {4, 3} AND c <= {7}");
  assertRows(execute("SELECT * FROM %s WHERE c >= {5, 2} AND c <= {7} ALLOW FILTERING"),row(2,1,set(6,2)));
  assertInvalidMessage(StatementRestrictions.REQUIRES_ALLOW_FILTERING_MESSAGE,"SELECT * FROM %s WHERE c CONTAINS 2");
  assertRows(execute("SELECT * FROM %s WHERE c CONTAINS 2 ALLOW FILTERING"),row(1,2,set(4,2)),row(2,1,set(6,2)));
  assertInvalidMessage("Cannot use CONTAINS KEY on non-map column c","SELECT * FROM %s WHERE c CONTAINS KEY 2 ALLOW FILTERING");
  assertRows(execute("SELECT * FROM %s WHERE c CONTAINS 2 AND c CONTAINS 6 ALLOW FILTERING"),row(2,1,set(6,2)));
  assertInvalidMessage(StatementRestrictions.REQUIRES_ALLOW_FILTERING_MESSAGE,"SELECT * FROM %s WHERE c = null");
  assertInvalidMessage("Unsupported null value for column c","SELECT * FROM %s WHERE c = null ALLOW FILTERING");
  assertInvalidMessage(StatementRestrictions.REQUIRES_ALLOW_FILTERING_MESSAGE,"SELECT * FROM %s WHERE c > null");
  assertInvalidMessage("Unsupported null value for column c","SELECT * FROM %s WHERE c > null ALLOW FILTERING");
  assertInvalidMessage(StatementRestrictions.REQUIRES_ALLOW_FILTERING_MESSAGE,"SELECT * FROM %s WHERE c CONTAINS null");
  assertInvalidMessage("Unsupported null value for column c","SELECT * FROM %s WHERE c CONTAINS null ALLOW FILTERING");
  assertInvalidMessage("Unsupported unset value for column c","SELECT * FROM %s WHERE c = ? ALLOW FILTERING",unset());
  assertInvalidMessage("Unsupported unset value for column c","SELECT * FROM %s WHERE c > ? ALLOW FILTERING",unset());
  assertInvalidMessage("Unsupported unset value for column c","SELECT * FROM %s WHERE c CONTAINS ? ALLOW FILTERING",unset());
}
