{
  createTable("CREATE TABLE %s (a int, b int, c frozen<list<int>>, d frozen<set<int>>, e frozen<map<int, int>>, PRIMARY KEY (a, b))");
  execute("INSERT INTO %s (a, b, c, d, e) VALUES (1, 2, [1, 6], {2, 12}, {1: 6})");
  execute("INSERT INTO %s (a, b, c, d, e) VALUES (1, 3, [3, 2], {6, 4}, {3: 2})");
  execute("INSERT INTO %s (a, b, c, d, e) VALUES (1, 4, [1, 2], {2, 4}, {1: 2})");
  execute("INSERT INTO %s (a, b, c, d, e) VALUES (2, 3, [3, 6], {6, 12}, {3: 6})");
  flush();
  assertInvalidMessage(StatementRestrictions.REQUIRES_ALLOW_FILTERING_MESSAGE,"SELECT * FROM %s WHERE c = [3, 2]");
  assertRows(execute("SELECT * FROM %s WHERE c = [3, 2] ALLOW FILTERING"),row(1,3,list(3,2),set(6,4),map(3,2)));
  assertInvalidMessage(StatementRestrictions.REQUIRES_ALLOW_FILTERING_MESSAGE,"SELECT * FROM %s WHERE c > [1, 5] AND c < [3, 6]");
  assertRows(execute("SELECT * FROM %s WHERE c > [1, 5] AND c < [3, 6] ALLOW FILTERING"),row(1,2,list(1,6),set(2,12),map(1,6)),row(1,3,list(3,2),set(6,4),map(3,2)));
  assertRows(execute("SELECT * FROM %s WHERE c >= [1, 6] AND c < [3, 3] ALLOW FILTERING"),row(1,2,list(1,6),set(2,12),map(1,6)),row(1,3,list(3,2),set(6,4),map(3,2)));
  assertInvalidMessage(StatementRestrictions.REQUIRES_ALLOW_FILTERING_MESSAGE,"SELECT * FROM %s WHERE c CONTAINS 2");
  assertRows(execute("SELECT * FROM %s WHERE c CONTAINS 2 ALLOW FILTERING"),row(1,3,list(3,2),set(6,4),map(3,2)),row(1,4,list(1,2),set(2,4),map(1,2)));
  assertRows(execute("SELECT * FROM %s WHERE c CONTAINS 2 AND c CONTAINS 3 ALLOW FILTERING"),row(1,3,list(3,2),set(6,4),map(3,2)));
  assertInvalidMessage(StatementRestrictions.REQUIRES_ALLOW_FILTERING_MESSAGE,"SELECT * FROM %s WHERE d = {6, 4}");
  assertRows(execute("SELECT * FROM %s WHERE d = {6, 4} ALLOW FILTERING"),row(1,3,list(3,2),set(6,4),map(3,2)));
  assertInvalidMessage(StatementRestrictions.REQUIRES_ALLOW_FILTERING_MESSAGE,"SELECT * FROM %s WHERE d > {4, 5} AND d < {6}");
  assertRows(execute("SELECT * FROM %s WHERE d > {4, 5} AND d < {6} ALLOW FILTERING"),row(1,3,list(3,2),set(6,4),map(3,2)));
  assertRows(execute("SELECT * FROM %s WHERE d >= {2, 12} AND d <= {4, 6} ALLOW FILTERING"),row(1,2,list(1,6),set(2,12),map(1,6)),row(1,3,list(3,2),set(6,4),map(3,2)));
  assertInvalidMessage(StatementRestrictions.REQUIRES_ALLOW_FILTERING_MESSAGE,"SELECT * FROM %s WHERE d CONTAINS 4");
  assertRows(execute("SELECT * FROM %s WHERE d CONTAINS 4 ALLOW FILTERING"),row(1,3,list(3,2),set(6,4),map(3,2)),row(1,4,list(1,2),set(2,4),map(1,2)));
  assertRows(execute("SELECT * FROM %s WHERE d CONTAINS 4 AND d CONTAINS 6 ALLOW FILTERING"),row(1,3,list(3,2),set(6,4),map(3,2)));
  assertInvalidMessage(StatementRestrictions.REQUIRES_ALLOW_FILTERING_MESSAGE,"SELECT * FROM %s WHERE e = {1 : 2}");
  assertRows(execute("SELECT * FROM %s WHERE e = {1 : 2} ALLOW FILTERING"),row(1,4,list(1,2),set(2,4),map(1,2)));
  assertInvalidMessage(StatementRestrictions.REQUIRES_ALLOW_FILTERING_MESSAGE,"SELECT * FROM %s WHERE e > {1 : 4} AND e < {3 : 6}");
  assertRows(execute("SELECT * FROM %s WHERE e > {1 : 4} AND e < {3 : 6} ALLOW FILTERING"),row(1,2,list(1,6),set(2,12),map(1,6)),row(1,3,list(3,2),set(6,4),map(3,2)));
  assertRows(execute("SELECT * FROM %s WHERE e >= {1 : 6} AND e <= {3 : 2} ALLOW FILTERING"),row(1,2,list(1,6),set(2,12),map(1,6)),row(1,3,list(3,2),set(6,4),map(3,2)));
  assertInvalidMessage(StatementRestrictions.REQUIRES_ALLOW_FILTERING_MESSAGE,"SELECT * FROM %s WHERE e CONTAINS 2");
  assertRows(execute("SELECT * FROM %s WHERE e CONTAINS 2 ALLOW FILTERING"),row(1,3,list(3,2),set(6,4),map(3,2)),row(1,4,list(1,2),set(2,4),map(1,2)));
  assertRows(execute("SELECT * FROM %s WHERE e CONTAINS KEY 1 ALLOW FILTERING"),row(1,2,list(1,6),set(2,12),map(1,6)),row(1,4,list(1,2),set(2,4),map(1,2)));
  assertInvalidMessage("Map-entry equality predicates on frozen map column e are not supported","SELECT * FROM %s WHERE e[1] = 6 ALLOW FILTERING");
  assertRows(execute("SELECT * FROM %s WHERE e CONTAINS KEY 1 AND e CONTAINS 2 ALLOW FILTERING"),row(1,4,list(1,2),set(2,4),map(1,2)));
  assertRows(execute("SELECT * FROM %s WHERE c CONTAINS 2 AND d CONTAINS 4 AND e CONTAINS KEY 3 ALLOW FILTERING"),row(1,3,list(3,2),set(6,4),map(3,2)));
  assertInvalidMessage("Unsupported null value for column c","SELECT * FROM %s WHERE c = null ALLOW FILTERING");
  assertInvalidMessage("Unsupported null value for column c","SELECT * FROM %s WHERE c CONTAINS null ALLOW FILTERING");
  assertInvalidMessage("Unsupported null value for column d","SELECT * FROM %s WHERE d = null ALLOW FILTERING");
  assertInvalidMessage("Unsupported null value for column d","SELECT * FROM %s WHERE d CONTAINS null ALLOW FILTERING");
  assertInvalidMessage("Unsupported null value for column e","SELECT * FROM %s WHERE e = null ALLOW FILTERING");
  assertInvalidMessage("Unsupported null value for column e","SELECT * FROM %s WHERE e CONTAINS null ALLOW FILTERING");
  assertInvalidMessage("Unsupported null value for column e","SELECT * FROM %s WHERE e CONTAINS KEY null ALLOW FILTERING");
  assertInvalidMessage("Map-entry equality predicates on frozen map column e are not supported","SELECT * FROM %s WHERE e[null] = 2 ALLOW FILTERING");
  assertInvalidMessage("Map-entry equality predicates on frozen map column e are not supported","SELECT * FROM %s WHERE e[1] = null ALLOW FILTERING");
  assertInvalidMessage("Unsupported unset value for column c","SELECT * FROM %s WHERE c = ? ALLOW FILTERING",unset());
  assertInvalidMessage("Unsupported unset value for column c","SELECT * FROM %s WHERE c CONTAINS ? ALLOW FILTERING",unset());
  assertInvalidMessage("Unsupported unset value for column d","SELECT * FROM %s WHERE d = ? ALLOW FILTERING",unset());
  assertInvalidMessage("Unsupported unset value for column d","SELECT * FROM %s WHERE d CONTAINS ? ALLOW FILTERING",unset());
  assertInvalidMessage("Unsupported unset value for column e","SELECT * FROM %s WHERE e = ? ALLOW FILTERING",unset());
  assertInvalidMessage("Unsupported unset value for column e","SELECT * FROM %s WHERE e CONTAINS ? ALLOW FILTERING",unset());
  assertInvalidMessage("Unsupported unset value for column e","SELECT * FROM %s WHERE e CONTAINS KEY ? ALLOW FILTERING",unset());
  assertInvalidMessage("Map-entry equality predicates on frozen map column e are not supported","SELECT * FROM %s WHERE e[?] = 2 ALLOW FILTERING",unset());
  assertInvalidMessage("Map-entry equality predicates on frozen map column e are not supported","SELECT * FROM %s WHERE e[1] = ? ALLOW FILTERING",unset());
}
