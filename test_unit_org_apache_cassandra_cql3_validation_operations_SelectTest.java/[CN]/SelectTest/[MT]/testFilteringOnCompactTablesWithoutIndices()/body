{
  createTable("CREATE TABLE %s (a int, b int, c int, PRIMARY KEY (a, b)) WITH COMPACT STORAGE");
  execute("INSERT INTO %s (a, b, c) VALUES (1, 2, 4)");
  execute("INSERT INTO %s (a, b, c) VALUES (1, 3, 6)");
  execute("INSERT INTO %s (a, b, c) VALUES (1, 4, 4)");
  execute("INSERT INTO %s (a, b, c) VALUES (2, 3, 7)");
  execute("INSERT INTO %s (a, b, c) VALUES (1, 1, 4)");
  execute("INSERT INTO %s (a, b, c) VALUES (2, 2, 7)");
  execute("DELETE FROM %s WHERE a = 1 AND b = 1");
  execute("DELETE FROM %s WHERE a = 2 AND b = 2");
  flush();
  assertInvalidMessage("Predicates on non-primary-key columns (c) are not yet supported for non secondary index queries","SELECT * FROM %s WHERE a = 1 AND b = 4 AND c = 4 ALLOW FILTERING");
  assertInvalidMessage("IN predicates on non-primary-key columns (c) is not yet supported","SELECT * FROM %s WHERE a IN (1, 2) AND c IN (6, 7) ALLOW FILTERING");
  assertInvalidMessage("Predicates on non-primary-key columns (c) are not yet supported for non secondary index queries","SELECT * FROM %s WHERE c > 4 ALLOW FILTERING");
  assertInvalidMessage("Predicates on non-primary-key columns (c) are not yet supported for non secondary index queries","SELECT * FROM %s WHERE c = null");
  assertInvalidMessage("Predicates on non-primary-key columns (c) are not yet supported for non secondary index queries","SELECT * FROM %s WHERE c = null ALLOW FILTERING");
  assertInvalidMessage("Predicates on non-primary-key columns (c) are not yet supported for non secondary index queries","SELECT * FROM %s WHERE c > null");
  assertInvalidMessage("Predicates on non-primary-key columns (c) are not yet supported for non secondary index queries","SELECT * FROM %s WHERE c > null ALLOW FILTERING");
  assertInvalidMessage("Predicates on non-primary-key columns (c) are not yet supported for non secondary index queries","SELECT * FROM %s WHERE c = ? ALLOW FILTERING",unset());
  assertInvalidMessage("Predicates on non-primary-key columns (c) are not yet supported for non secondary index queries","SELECT * FROM %s WHERE c > ? ALLOW FILTERING",unset());
  createTable("CREATE TABLE %s (a int PRIMARY KEY, b int, c int) WITH COMPACT STORAGE");
  execute("INSERT INTO %s (a, b, c) VALUES (1, 2, 4)");
  execute("INSERT INTO %s (a, b, c) VALUES (2, 1, 6)");
  execute("INSERT INTO %s (a, b, c) VALUES (3, 2, 4)");
  execute("INSERT INTO %s (a, b, c) VALUES (4, 1, 7)");
  execute("INSERT INTO %s (a, b, c) VALUES (0, 1, 4)");
  execute("INSERT INTO %s (a, b, c) VALUES (5, 2, 7)");
  execute("DELETE FROM %s WHERE a = 0");
  execute("DELETE FROM %s WHERE a = 5");
  flush();
  assertInvalidMessage(StatementRestrictions.REQUIRES_ALLOW_FILTERING_MESSAGE,"SELECT * FROM %s WHERE a = 1 AND b = 4 AND c = 4");
  assertRows(execute("SELECT * FROM %s WHERE a = 1 AND b = 2 AND c = 4 ALLOW FILTERING"),row(1,2,4));
  assertInvalidMessage("IN predicates on non-primary-key columns (c) is not yet supported","SELECT * FROM %s WHERE a IN (1, 2) AND c IN (6, 7)");
  assertInvalidMessage("IN predicates on non-primary-key columns (c) is not yet supported","SELECT * FROM %s WHERE a IN (1, 2) AND c IN (6, 7) ALLOW FILTERING");
  assertInvalidMessage(StatementRestrictions.REQUIRES_ALLOW_FILTERING_MESSAGE,"SELECT * FROM %s WHERE c > 4");
  assertRows(execute("SELECT * FROM %s WHERE c > 4 ALLOW FILTERING"),row(2,1,6),row(4,1,7));
  assertInvalidMessage(StatementRestrictions.REQUIRES_ALLOW_FILTERING_MESSAGE,"SELECT * FROM %s WHERE b < 3 AND c <= 4");
  assertRows(execute("SELECT * FROM %s WHERE b < 3 AND c <= 4 ALLOW FILTERING"),row(1,2,4),row(3,2,4));
  assertInvalidMessage(StatementRestrictions.REQUIRES_ALLOW_FILTERING_MESSAGE,"SELECT * FROM %s WHERE c >= 3 AND c <= 6");
  assertRows(execute("SELECT * FROM %s WHERE c >= 3 AND c <= 6 ALLOW FILTERING"),row(1,2,4),row(2,1,6),row(3,2,4));
  assertInvalidMessage(StatementRestrictions.REQUIRES_ALLOW_FILTERING_MESSAGE,"SELECT * FROM %s WHERE c = null");
  assertInvalidMessage("Unsupported null value for column c","SELECT * FROM %s WHERE c = null ALLOW FILTERING");
  assertInvalidMessage(StatementRestrictions.REQUIRES_ALLOW_FILTERING_MESSAGE,"SELECT * FROM %s WHERE c > null");
  assertInvalidMessage("Unsupported null value for column c","SELECT * FROM %s WHERE c > null ALLOW FILTERING");
  assertInvalidMessage("Unsupported unset value for column c","SELECT * FROM %s WHERE c = ? ALLOW FILTERING",unset());
  assertInvalidMessage("Unsupported unset value for column c","SELECT * FROM %s WHERE c > ? ALLOW FILTERING",unset());
}
