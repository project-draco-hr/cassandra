{
  lock.readLock().lock();
  try {
    PendingRangeMaps newPendingRanges=new PendingRangeMaps();
    if (bootstrapTokens.isEmpty() && leavingEndpoints.isEmpty() && movingEndpoints.isEmpty()) {
      if (logger.isTraceEnabled())       logger.trace("No bootstrapping, leaving or moving nodes -> empty pending ranges for {}",keyspaceName);
      pendingRanges.put(keyspaceName,newPendingRanges);
      return;
    }
    Multimap<InetAddress,Range<Token>> addressRanges=strategy.getAddressRanges();
    TokenMetadata allLeftMetadata=cloneAfterAllLeft();
    Set<Range<Token>> affectedRanges=new HashSet<Range<Token>>();
    for (    InetAddress endpoint : leavingEndpoints)     affectedRanges.addAll(addressRanges.get(endpoint));
    TokenMetadata metadata=cloneOnlyTokenMap();
    for (    Range<Token> range : affectedRanges) {
      Set<InetAddress> currentEndpoints=ImmutableSet.copyOf(strategy.calculateNaturalEndpoints(range.right,metadata));
      Set<InetAddress> newEndpoints=ImmutableSet.copyOf(strategy.calculateNaturalEndpoints(range.right,allLeftMetadata));
      for (      InetAddress address : Sets.difference(newEndpoints,currentEndpoints)) {
        newPendingRanges.addPendingRange(range,address);
      }
    }
    Multimap<InetAddress,Token> bootstrapAddresses=bootstrapTokens.inverse();
    for (    InetAddress endpoint : bootstrapAddresses.keySet()) {
      Collection<Token> tokens=bootstrapAddresses.get(endpoint);
      allLeftMetadata.updateNormalTokens(tokens,endpoint);
      for (      Range<Token> range : strategy.getAddressRanges(allLeftMetadata).get(endpoint)) {
        newPendingRanges.addPendingRange(range,endpoint);
      }
      allLeftMetadata.removeEndpoint(endpoint);
    }
    for (    Pair<Token,InetAddress> moving : movingEndpoints) {
      InetAddress endpoint=moving.right;
      allLeftMetadata.updateNormalToken(moving.left,endpoint);
      for (      Range<Token> range : strategy.getAddressRanges(allLeftMetadata).get(endpoint)) {
        newPendingRanges.addPendingRange(range,endpoint);
      }
      allLeftMetadata.removeEndpoint(endpoint);
    }
    pendingRanges.put(keyspaceName,newPendingRanges);
    if (logger.isTraceEnabled())     logger.trace("Pending ranges:\n{}",(pendingRanges.isEmpty() ? "<empty>" : printPendingRanges()));
  }
  finally {
    lock.readLock().unlock();
  }
}
