def test_batch_mutate_remove_slice_of_entire_supercolumns(self):
    _set_keyspace('Keyspace1')
    columns = [SuperColumn(name='sc1', columns=[Column(_i64(1), 'value1', 0)]), SuperColumn(name='sc2', columns=[Column(_i64(2), 'value2', 0), Column(_i64(3), 'value3', 0)]), SuperColumn(name='sc3', columns=[Column(_i64(4), 'value4', 0)]), SuperColumn(name='sc4', columns=[Column(_i64(5), 'value5', 0), Column(_i64(6), 'value6', 0)]), SuperColumn(name='sc5', columns=[Column(_i64(7), 'value7', 0)])]
    for column in columns:
        for subcolumn in column.columns:
            client.insert('key', ColumnParent('Super1', column.name), subcolumn, ConsistencyLevel.ONE)
    d = Deletion(1, predicate=SlicePredicate(slice_range=SliceRange(start='sc2', finish='sc4')))
    client.batch_mutate({'key': {'Super1': [Mutation(deletion=d)], }, }, ConsistencyLevel.ONE)
    _assert_columnpath_exists('key', ColumnPath('Super1', super_column='sc1', column=_i64(1)))
    _assert_no_columnpath('key', ColumnPath('Super1', super_column='sc2', column=_i64(2)))
    _assert_no_columnpath('key', ColumnPath('Super1', super_column='sc2', column=_i64(3)))
    _assert_no_columnpath('key', ColumnPath('Super1', super_column='sc3', column=_i64(4)))
    _assert_no_columnpath('key', ColumnPath('Super1', super_column='sc4', column=_i64(5)))
    _assert_no_columnpath('key', ColumnPath('Super1', super_column='sc4', column=_i64(6)))
    _assert_columnpath_exists('key', ColumnPath('Super1', super_column='sc5', column=_i64(7)))
