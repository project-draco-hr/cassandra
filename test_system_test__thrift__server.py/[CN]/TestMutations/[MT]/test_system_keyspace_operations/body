def test_system_keyspace_operations(self):
    ' Test keyspace (add, drop, rename) operations '
    keyspace = KsDef('CreateKeyspace', 'org.apache.cassandra.locator.SimpleStrategy', {}, 1, [CfDef('CreateKeyspace', 'CreateKsCf')])
    client.system_add_keyspace(keyspace)
    newks = client.describe_keyspace('CreateKeyspace')
    assert ('CreateKsCf' in [x.name for x in newks.cf_defs])
    _set_keyspace('CreateKeyspace')
    modified_keyspace = KsDef('CreateKeyspace', 'org.apache.cassandra.locator.OldNetworkTopologyStrategy', {}, 2, [])

    def fail_too_high_rf():
        client.system_update_keyspace(modified_keyspace)
    _expect_exception(fail_too_high_rf, InvalidRequestException)
    modified_keyspace.replication_factor = 1
    client.system_update_keyspace(modified_keyspace)
    modks = client.describe_keyspace('CreateKeyspace')
    assert (modks.replication_factor == modified_keyspace.replication_factor)
    assert (modks.strategy_class == modified_keyspace.strategy_class)
    client.system_rename_keyspace('CreateKeyspace', 'RenameKeyspace')
    renameks = client.describe_keyspace('RenameKeyspace')
    assert ('CreateKsCf' in [x.name for x in renameks.cf_defs])

    def get_first_ks():
        client.describe_keyspace('CreateKeyspace')
    _expect_exception(get_first_ks, NotFoundException)
    client.system_drop_keyspace('RenameKeyspace')

    def get_second_ks():
        client.describe_keyspace('RenameKeyspace')
    _expect_exception(get_second_ks, NotFoundException)
