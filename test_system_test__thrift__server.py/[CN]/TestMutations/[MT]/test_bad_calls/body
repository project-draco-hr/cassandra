def test_bad_calls(self):
    _set_keyspace('Keyspace1')
    _expect_exception((lambda : client.insert(None, None, None, None)), TApplicationException)
    _expect_exception((lambda : client.insert('key1', ColumnParent('Standard1', 'x'), Column('y', 'value', 0), ConsistencyLevel.ONE)), InvalidRequestException)
    _expect_exception((lambda : client.insert('key1', ColumnParent('Super1'), Column('y', 'value', 0), ConsistencyLevel.ONE)), InvalidRequestException)
    _expect_exception((lambda : client.remove('key1', ColumnPath('Super1', column='x'), 0, ConsistencyLevel.ONE)), InvalidRequestException)
    _expect_exception((lambda : client.remove('key1', ColumnPath('Standard1', 'y', 'x'), 0, ConsistencyLevel.ONE)), InvalidRequestException)
    _expect_exception((lambda : client.get(('x' * (2 ** 16)), ColumnPath('Standard1', column='c1'), ConsistencyLevel.ONE)), InvalidRequestException)
    _expect_exception((lambda : client.get('', ColumnPath('Standard1', column='c1'), ConsistencyLevel.ONE)), InvalidRequestException)
    cfmap = {'Super1': [Mutation(ColumnOrSuperColumn(super_column=c)) for c in _SUPER_COLUMNS], 'Super2': [Mutation(ColumnOrSuperColumn(super_column=c)) for c in _SUPER_COLUMNS], }
    _expect_exception((lambda : client.batch_mutate({'': cfmap, }, ConsistencyLevel.ONE)), InvalidRequestException)
    _expect_exception((lambda : client.get('key1', ColumnPath('Standard1', column=''), ConsistencyLevel.ONE)), InvalidRequestException)
    _expect_exception((lambda : client.get('key1', ColumnPath('Standard1'), ConsistencyLevel.ONE)), InvalidRequestException)
    _expect_exception((lambda : client.get('key1', ColumnPath('Standard1', 'x', 'y'), ConsistencyLevel.ONE)), InvalidRequestException)
    _expect_exception((lambda : client.get('key1', ColumnPath('Super1'), ConsistencyLevel.ONE)), InvalidRequestException)
    _expect_exception((lambda : get_range_slice(client, ColumnParent('S'), SlicePredicate(column_names=['', '']), '', '', 5, ConsistencyLevel.ONE)), InvalidRequestException)
    _expect_exception((lambda : client.insert('key1', ColumnParent('Super1', 'sc1'), Column('x', 'value', 0), ConsistencyLevel.ONE)), InvalidRequestException)
    p = SlicePredicate(slice_range=SliceRange('x', '', False, 1))
    column_parent = ColumnParent('StandardLong1')
    _expect_exception((lambda : client.get_slice('key1', column_parent, p, ConsistencyLevel.ONE)), InvalidRequestException)
    p = SlicePredicate(slice_range=SliceRange(_i64(10), _i64(0), False, 1))
    column_parent = ColumnParent('StandardLong1')
    _expect_exception((lambda : client.get_slice('key1', column_parent, p, ConsistencyLevel.ONE)), InvalidRequestException)
    p = SlicePredicate(slice_range=SliceRange('x', '', False, 1))
    column_parent = ColumnParent('Super1', 'sc1')
    _expect_exception((lambda : client.get_slice('key1', column_parent, p, ConsistencyLevel.ONE)), InvalidRequestException)
    p = SlicePredicate(slice_range=SliceRange(_i64(10), _i64(0), False, 1))
    column_parent = ColumnParent('Super1', 'sc1')
    _expect_exception((lambda : client.get_slice('key1', column_parent, p, ConsistencyLevel.ONE)), InvalidRequestException)
    _expect_exception((lambda : get_range_slice(client, ColumnParent('Standard1'), SlicePredicate(column_names=['']), 'z', 'a', 1, ConsistencyLevel.ONE)), InvalidRequestException)
    column = Column('cttl1', 'value1', 0, 0)
    _expect_exception((lambda : client.insert('key1', ColumnParent('Standard1'), column, ConsistencyLevel.ONE)), InvalidRequestException)
    deletion = Deletion(1, 'supercolumn', None)
    mutation = Mutation(deletion=deletion)
    mutations = {'key': {'Standard1': [mutation], }, }
    _expect_exception((lambda : client.batch_mutate(mutations, ConsistencyLevel.QUORUM)), InvalidRequestException)
    deletion = Deletion(1, 'x', None)
    mutation = Mutation(deletion=deletion)
    mutations = {'key': {'Super5': [mutation], }, }
    _expect_exception((lambda : client.batch_mutate(mutations, ConsistencyLevel.QUORUM)), InvalidRequestException)
    _expect_exception((lambda : client.add('key1', ColumnParent('Counter1', 'x'), CounterColumn('y', 1), ConsistencyLevel.ANY)), InvalidRequestException)
