def test_index_scan_uuid_names(self):
    _set_keyspace('Keyspace1')
    sp = SlicePredicate(slice_range=SliceRange('', ''))
    cp = ColumnParent('Indexed3')
    u = uuid.UUID('00000000-0000-1000-0000-000000000000').bytes
    u2 = uuid.UUID('00000000-0000-1000-0000-000000000001').bytes
    client.insert('key1', ColumnParent('Indexed3'), Column(u, 'a', 0), ConsistencyLevel.ONE)
    client.insert('key1', ColumnParent('Indexed3'), Column(u2, 'b', 0), ConsistencyLevel.ONE)
    clause = IndexClause([IndexExpression(u, IndexOperator.EQ, 'a'), IndexExpression(u2, IndexOperator.EQ, 'b')], '')
    result = client.get_indexed_slices(cp, clause, sp, ConsistencyLevel.ONE)
    assert (len(result) == 1), result
    cp = ColumnParent('Indexed2')
    clause = IndexClause([IndexExpression('foo', IndexOperator.EQ, uuid.UUID('00000000-0000-1000-0000-000000000000').bytes)], '')
    _expect_exception((lambda : client.get_indexed_slices(cp, clause, sp, ConsistencyLevel.ONE)), InvalidRequestException)
    clause = IndexClause([IndexExpression(uuid.UUID('00000000-0000-1000-0000-000000000000').bytes, IndexOperator.EQ, 'foo')], '')
    _expect_exception((lambda : client.get_indexed_slices(cp, clause, sp, ConsistencyLevel.ONE)), InvalidRequestException)
