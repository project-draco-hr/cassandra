{
  if (version < MessagingService.VERSION_30)   throw new UnsupportedOperationException();
  final boolean isForThrift=in.readBoolean();
  return new AbstractUnfilteredPartitionIterator(){
    private UnfilteredRowIterator next;
    private boolean hasNext;
    private boolean nextReturned=true;
    public boolean isForThrift(){
      return isForThrift;
    }
    public boolean hasNext(){
      if (!nextReturned)       return hasNext;
      if (next != null && next.hasNext())       throw new IllegalStateException("Cannot call hasNext() until the previous iterator has been fully consumed");
      try {
        hasNext=in.readBoolean();
        nextReturned=false;
        return hasNext;
      }
 catch (      IOException e) {
        throw new IOError(e);
      }
    }
    public UnfilteredRowIterator next(){
      if (nextReturned && !hasNext())       throw new NoSuchElementException();
      try {
        nextReturned=true;
        next=UnfilteredRowIteratorSerializer.serializer.deserialize(in,version,flag);
        return next;
      }
 catch (      IOException e) {
        throw new IOError(e);
      }
    }
    @Override public void close(){
      if (next != null)       next.close();
    }
  }
;
}
