{
  return new FilteringPartitionIterator(iterator){
    @Override protected FilteringRow makeRowFilter(){
      return new FilteringRow(){
        @Override protected boolean include(        Cell cell){
          return include(cell.column(),cell.livenessInfo().timestamp());
        }
        @Override protected boolean include(        ColumnDefinition c,        DeletionTime dt){
          return include(c,dt.markedForDeleteAt());
        }
        private boolean include(        ColumnDefinition column,        long timestamp){
          CFMetaData.DroppedColumn dropped=droppedColumns.get(column.name.bytes);
          return dropped == null || timestamp > dropped.droppedTime;
        }
      }
;
    }
    @Override protected boolean shouldFilter(    UnfilteredRowIterator iterator){
      for (      ColumnDefinition c : iterator.columns())       if (droppedColumns.containsKey(c.name.bytes))       return true;
      return false;
    }
  }
;
}
