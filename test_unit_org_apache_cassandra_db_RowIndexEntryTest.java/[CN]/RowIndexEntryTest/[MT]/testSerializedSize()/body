{
  String tableName=createTable("CREATE TABLE %s (a int, b text, c int, PRIMARY KEY(a, b))");
  ColumnFamilyStore cfs=Keyspace.open(KEYSPACE).getColumnFamilyStore(tableName);
  final RowIndexEntry simple=new RowIndexEntry(123);
  DataOutputBuffer buffer=new DataOutputBuffer();
  SerializationHeader header=new SerializationHeader(cfs.metadata,cfs.metadata.partitionColumns(),EncodingStats.NO_STATS);
  RowIndexEntry.Serializer serializer=new RowIndexEntry.Serializer(cfs.metadata,BigFormat.latestVersion,header);
  serializer.serialize(simple,buffer);
  assertEquals(buffer.getLength(),serializer.serializedSize(simple));
  for (int i=0; i <= DatabaseDescriptor.getColumnIndexSize() / 4; i++)   execute("INSERT INTO %s (a, b, c) VALUES (?, ?, ?)",0,"" + i,i);
  buffer=new DataOutputBuffer();
  ImmutableBTreePartition partition=Util.getOnlyPartitionUnfiltered(Util.cmd(cfs).build());
  File tempFile=File.createTempFile("row_index_entry_test",null);
  tempFile.deleteOnExit();
  SequentialWriter writer=SequentialWriter.open(tempFile);
  ColumnIndex columnIndex=ColumnIndex.writeAndBuildIndex(partition.unfilteredIterator(),writer,header,BigFormat.latestVersion);
  RowIndexEntry<IndexHelper.IndexInfo> withIndex=RowIndexEntry.create(0xdeadbeef,DeletionTime.LIVE,columnIndex);
  assertTrue(columnIndex.columnsIndex.size() >= 3);
  serializer.serialize(withIndex,buffer);
  assertEquals(buffer.getLength(),serializer.serializedSize(withIndex));
}
