{
  CFMetaData cfMeta=CFMetaData.compile("CREATE TABLE pipe.dev_null (pk bigint, ck bigint, val text, PRIMARY KEY(pk, ck))","foo");
  DeletionTime deletionInfo=new DeletionTime(FBUtilities.timestampMicros(),FBUtilities.nowInSeconds());
  SerializationHeader header=new SerializationHeader(cfMeta,cfMeta.partitionColumns(),EncodingStats.NO_STATS);
  IndexHelper.IndexInfo.Serializer indexSerializer=new IndexHelper.IndexInfo.Serializer(cfMeta,BigFormat.latestVersion,header);
  DataOutputBuffer dob=new DataOutputBuffer();
  dob.writeUnsignedVInt(0);
  DeletionTime.serializer.serialize(DeletionTime.LIVE,dob);
  dob.writeUnsignedVInt(3);
  int off0=dob.getLength();
  indexSerializer.serialize(new IndexHelper.IndexInfo(cn(0L),cn(5L),0,0,deletionInfo),dob);
  int off1=dob.getLength();
  indexSerializer.serialize(new IndexHelper.IndexInfo(cn(10L),cn(15L),0,0,deletionInfo),dob);
  int off2=dob.getLength();
  indexSerializer.serialize(new IndexHelper.IndexInfo(cn(20L),cn(25L),0,0,deletionInfo),dob);
  dob.writeInt(off0);
  dob.writeInt(off1);
  dob.writeInt(off2);
  @SuppressWarnings("resource") DataOutputBuffer dobRie=new DataOutputBuffer();
  dobRie.writeUnsignedVInt(42L);
  dobRie.writeUnsignedVInt(dob.getLength());
  dobRie.write(dob.buffer());
  ByteBuffer buf=dobRie.buffer();
  RowIndexEntry<IndexHelper.IndexInfo> rie=new RowIndexEntry.Serializer(cfMeta,BigFormat.latestVersion,header).deserialize(new DataInputBuffer(buf,false));
  Assert.assertEquals(42L,rie.position);
  Assert.assertEquals(0,IndexHelper.indexFor(cn(-1L),rie.columnsIndex(),comp,false,-1));
  Assert.assertEquals(0,IndexHelper.indexFor(cn(5L),rie.columnsIndex(),comp,false,-1));
  Assert.assertEquals(1,IndexHelper.indexFor(cn(12L),rie.columnsIndex(),comp,false,-1));
  Assert.assertEquals(2,IndexHelper.indexFor(cn(17L),rie.columnsIndex(),comp,false,-1));
  Assert.assertEquals(3,IndexHelper.indexFor(cn(100L),rie.columnsIndex(),comp,false,-1));
  Assert.assertEquals(3,IndexHelper.indexFor(cn(100L),rie.columnsIndex(),comp,false,0));
  Assert.assertEquals(3,IndexHelper.indexFor(cn(100L),rie.columnsIndex(),comp,false,1));
  Assert.assertEquals(3,IndexHelper.indexFor(cn(100L),rie.columnsIndex(),comp,false,2));
  Assert.assertEquals(3,IndexHelper.indexFor(cn(100L),rie.columnsIndex(),comp,false,3));
  Assert.assertEquals(-1,IndexHelper.indexFor(cn(-1L),rie.columnsIndex(),comp,true,-1));
  Assert.assertEquals(0,IndexHelper.indexFor(cn(5L),rie.columnsIndex(),comp,true,3));
  Assert.assertEquals(0,IndexHelper.indexFor(cn(5L),rie.columnsIndex(),comp,true,2));
  Assert.assertEquals(1,IndexHelper.indexFor(cn(17L),rie.columnsIndex(),comp,true,3));
  Assert.assertEquals(2,IndexHelper.indexFor(cn(100L),rie.columnsIndex(),comp,true,3));
  Assert.assertEquals(2,IndexHelper.indexFor(cn(100L),rie.columnsIndex(),comp,true,4));
  Assert.assertEquals(1,IndexHelper.indexFor(cn(12L),rie.columnsIndex(),comp,true,3));
  Assert.assertEquals(1,IndexHelper.indexFor(cn(12L),rie.columnsIndex(),comp,true,2));
  Assert.assertEquals(1,IndexHelper.indexFor(cn(100L),rie.columnsIndex(),comp,true,1));
  Assert.assertEquals(2,IndexHelper.indexFor(cn(100L),rie.columnsIndex(),comp,true,2));
}
