{
  try {
    if (nextEntry == null) {
      do {
        if (startScan != -1)         bytesScanned+=dfile.getFilePointer() - startScan;
        if (!rangeIterator.hasNext())         return endOfData();
        currentRange=rangeIterator.next();
        seekToCurrentRangeStart();
        startScan=dfile.getFilePointer();
        if (ifile.isEOF())         return endOfData();
        currentKey=sstable.decorateKey(ByteBufferUtil.readWithShortLength(ifile));
        currentEntry=rowIndexEntrySerializer.deserialize(ifile,ifile.getFilePointer());
      }
 while (!currentRange.contains(currentKey));
    }
 else {
      currentKey=nextKey;
      currentEntry=nextEntry;
    }
    if (ifile.isEOF()) {
      nextEntry=null;
      nextKey=null;
    }
 else {
      nextKey=sstable.decorateKey(ByteBufferUtil.readWithShortLength(ifile));
      nextEntry=rowIndexEntrySerializer.deserialize(ifile,ifile.getFilePointer());
      if (!currentRange.contains(nextKey)) {
        nextKey=null;
        nextEntry=null;
      }
    }
    return new LazilyInitializedUnfilteredRowIterator(currentKey){
      protected UnfilteredRowIterator initializeIterator(){
        if (startScan != -1)         bytesScanned+=dfile.getFilePointer() - startScan;
        try {
          if (dataRange == null) {
            dfile.seek(currentEntry.position);
            startScan=dfile.getFilePointer();
            ByteBufferUtil.skipShortLength(dfile);
            return SSTableIdentityIterator.create(sstable,dfile,partitionKey());
          }
 else {
            startScan=dfile.getFilePointer();
          }
          ClusteringIndexFilter filter=dataRange.clusteringIndexFilter(partitionKey());
          return sstable.iterator(dfile,partitionKey(),currentEntry,filter.getSlices(BigTableScanner.this.metadata()),columns,filter.isReversed(),isForThrift);
        }
 catch (        CorruptSSTableException|IOException e) {
          sstable.markSuspect();
          throw new CorruptSSTableException(e,sstable.getFilename());
        }
      }
    }
;
  }
 catch (  CorruptSSTableException|IOException e) {
    sstable.markSuspect();
    throw new CorruptSSTableException(e,sstable.getFilename());
  }
}
