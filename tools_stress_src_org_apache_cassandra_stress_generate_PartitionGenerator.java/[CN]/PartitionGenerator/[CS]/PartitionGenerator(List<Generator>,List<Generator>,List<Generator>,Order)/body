{
  this.partitionKey=partitionKey;
  this.clusteringComponents=clusteringComponents;
  this.valueComponents=valueComponents;
  this.order=order;
  this.clusteringDescendantAverages=new int[clusteringComponents.size()];
  this.clusteringComponentAverages=new int[clusteringComponents.size()];
  for (int i=0; i < clusteringComponentAverages.length; i++)   clusteringComponentAverages[i]=(int)clusteringComponents.get(i).clusteringDistribution.average();
  for (int i=clusteringDescendantAverages.length - 1; i >= 0; i--)   clusteringDescendantAverages[i]=(int)(i < (clusteringDescendantAverages.length - 1) ? clusteringComponentAverages[i + 1] * clusteringDescendantAverages[i + 1] : 1);
  double maxRowCount=1d;
  double minRowCount=1d;
  for (  Generator component : clusteringComponents) {
    maxRowCount*=component.clusteringDistribution.maxValue();
    minRowCount*=component.clusteringDistribution.minValue();
  }
  this.maxRowCount=maxRowCount;
  this.minRowCount=minRowCount;
  this.indexMap=new LinkedHashMap<>();
  int i=0;
  for (  Generator generator : partitionKey)   indexMap.put(generator.name,--i);
  i=0;
  for (  Generator generator : Iterables.concat(clusteringComponents,valueComponents))   indexMap.put(generator.name,i++);
}
