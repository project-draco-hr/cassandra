{
  ExecutorService mutationStage=StageManager.getStage(Stage.MUTATION);
  if (mutationStage.isTerminated()) {
    logger.warn("Cannot drain node (did it already happen?)");
    return;
  }
  setMode(Mode.DRAINING,"starting drain process",true);
  shutdownClientServers();
  optionalTasks.shutdown();
  Gossiper.instance.stop();
  setMode(Mode.DRAINING,"shutting down MessageService",false);
  MessagingService.instance().shutdown();
  setMode(Mode.DRAINING,"clearing mutation stage",false);
  mutationStage.shutdown();
  mutationStage.awaitTermination(3600,TimeUnit.SECONDS);
  StorageProxy.instance.verifyNoHintsInProgress();
  setMode(Mode.DRAINING,"flushing column families",false);
  totalCFs=0;
  for (  Keyspace keyspace : Keyspace.nonSystem())   totalCFs+=keyspace.getColumnFamilyStores().size();
  remainingCFs=totalCFs;
  List<Future<?>> flushes=new ArrayList<Future<?>>();
  for (  Keyspace keyspace : Keyspace.nonSystem()) {
    for (    ColumnFamilyStore cfs : keyspace.getColumnFamilyStores())     flushes.add(cfs.forceFlush());
  }
  for (  Future f : flushes) {
    FBUtilities.waitOnFuture(f);
    remainingCFs--;
  }
  flushes.clear();
  for (  Keyspace keyspace : Keyspace.system()) {
    for (    ColumnFamilyStore cfs : keyspace.getColumnFamilyStores())     flushes.add(cfs.forceFlush());
  }
  FBUtilities.waitOnFutures(flushes);
  BatchlogManager.batchlogTasks.shutdown();
  BatchlogManager.batchlogTasks.awaitTermination(60,TimeUnit.SECONDS);
  ColumnFamilyStore.postFlushExecutor.shutdown();
  ColumnFamilyStore.postFlushExecutor.awaitTermination(60,TimeUnit.SECONDS);
  CommitLog.instance.shutdownBlocking();
  tasks.shutdown();
  if (!tasks.awaitTermination(1,TimeUnit.MINUTES))   logger.warn("Miscellaneous task executor still busy after one minute; proceeding with shutdown");
  setMode(Mode.DRAINED,true);
}
