{
  if (SystemKeyspace.bootstrapComplete())   throw new RuntimeException("Cannot replace address with a node that is already bootstrapped");
  if (!joinRing)   throw new ConfigurationException("Cannot set both join_ring=false and attempt to replace a node");
  if (!DatabaseDescriptor.isAutoBootstrap() && !Boolean.getBoolean("cassandra.allow_unsafe_replace"))   throw new RuntimeException("Replacing a node without bootstrapping risks invalidating consistency " + "guarantees as the expected data may not be present until repair is run. " + "To perform this operation, please restart with "+ "-Dcassandra.allow_unsafe_replace=true");
  InetAddress replaceAddress=DatabaseDescriptor.getReplaceAddress();
  logger.info("Gathering node replacement information for {}",replaceAddress);
  Gossiper.instance.doShadowRound();
  if (Gossiper.instance.getEndpointStateForEndpoint(replaceAddress) == null)   throw new RuntimeException(String.format("Cannot replace_address %s because it doesn't exist in gossip",replaceAddress));
  try {
    VersionedValue tokensVersionedValue=Gossiper.instance.getEndpointStateForEndpoint(replaceAddress).getApplicationState(ApplicationState.TOKENS);
    if (tokensVersionedValue == null)     throw new RuntimeException(String.format("Could not find tokens for %s to replace",replaceAddress));
    bootstrapTokens=TokenSerializer.deserialize(tokenMetadata.partitioner,new DataInputStream(new ByteArrayInputStream(tokensVersionedValue.toBytes())));
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
  UUID localHostId=SystemKeyspace.getLocalHostId();
  if (isReplacingSameAddress()) {
    localHostId=Gossiper.instance.getHostId(replaceAddress);
    SystemKeyspace.setLocalHostId(localHostId);
  }
  Gossiper.instance.resetEndpointStateMap();
  return localHostId;
}
