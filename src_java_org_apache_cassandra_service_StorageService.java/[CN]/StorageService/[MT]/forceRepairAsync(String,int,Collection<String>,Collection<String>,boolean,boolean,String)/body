{
  if (parallelismDegree < 0 || parallelismDegree > RepairParallelism.values().length - 1) {
    throw new IllegalArgumentException("Invalid parallelism degree specified: " + parallelismDegree);
  }
  RepairParallelism parallelism=RepairParallelism.values()[parallelismDegree];
  if (FBUtilities.isWindows() && parallelism != RepairParallelism.PARALLEL) {
    logger.warn("Snapshot-based repair is not yet supported on Windows.  Reverting to parallel repair.");
    parallelism=RepairParallelism.PARALLEL;
  }
  RepairOption options=new RepairOption(parallelism,primaryRange,!fullRepair,false,1,Collections.<Range<Token>>emptyList(),false);
  if (dataCenters != null) {
    options.getDataCenters().addAll(dataCenters);
  }
  if (hosts != null) {
    options.getHosts().addAll(hosts);
  }
  if (primaryRange) {
    if (options.getDataCenters().isEmpty() && options.getHosts().isEmpty())     options.getRanges().addAll(getPrimaryRanges(keyspace));
 else     if (options.getDataCenters().size() == 1 && options.getDataCenters().contains(DatabaseDescriptor.getLocalDataCenter()))     options.getRanges().addAll(getPrimaryRangesWithinDC(keyspace));
 else     throw new IllegalArgumentException("You need to run primary range repair on all nodes in the cluster.");
  }
 else {
    options.getRanges().addAll(getLocalRanges(keyspace));
  }
  if (tableNames != null) {
    for (    String table : tableNames) {
      options.getColumnFamilies().add(table);
    }
  }
  return forceRepairAsync(keyspace,options,true);
}
