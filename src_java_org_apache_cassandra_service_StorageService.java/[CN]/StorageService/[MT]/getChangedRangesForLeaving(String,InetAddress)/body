{
  Collection<Range<Token>> ranges=getRangesForEndpoint(keyspaceName,endpoint);
  if (logger.isDebugEnabled())   logger.debug("Node {} ranges [{}]",endpoint,StringUtils.join(ranges,", "));
  Map<Range<Token>,List<InetAddress>> currentReplicaEndpoints=new HashMap<>();
  TokenMetadata metadata=tokenMetadata.cloneOnlyTokenMap();
  for (  Range<Token> range : ranges)   currentReplicaEndpoints.put(range,Keyspace.open(keyspaceName).getReplicationStrategy().calculateNaturalEndpoints(range.right,metadata));
  TokenMetadata temp=tokenMetadata.cloneAfterAllLeft();
  if (temp.isMember(endpoint))   temp.removeEndpoint(endpoint);
  Multimap<Range<Token>,InetAddress> changedRanges=HashMultimap.create();
  for (  Range<Token> range : ranges) {
    Collection<InetAddress> newReplicaEndpoints=Keyspace.open(keyspaceName).getReplicationStrategy().calculateNaturalEndpoints(range.right,temp);
    newReplicaEndpoints.removeAll(currentReplicaEndpoints.get(range));
    if (logger.isDebugEnabled())     if (newReplicaEndpoints.isEmpty())     logger.debug("Range {} already in all replicas",range);
 else     logger.debug("Range {} will be responsibility of {}",range,StringUtils.join(newReplicaEndpoints,", "));
    changedRanges.putAll(range,newReplicaEndpoints);
  }
  return changedRanges;
}
