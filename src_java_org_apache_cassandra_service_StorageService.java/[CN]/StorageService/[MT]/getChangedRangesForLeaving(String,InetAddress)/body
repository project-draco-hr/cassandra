{
  Collection<Range<Token>> ranges=getRangesForEndpoint(table,endpoint);
  if (logger.isDebugEnabled())   logger.debug("Node " + endpoint + " ranges ["+ StringUtils.join(ranges,", ")+ "]");
  Map<Range<Token>,List<InetAddress>> currentReplicaEndpoints=new HashMap<Range<Token>,List<InetAddress>>();
  for (  Range<Token> range : ranges)   currentReplicaEndpoints.put(range,Table.open(table).getReplicationStrategy().calculateNaturalEndpoints(range.right,tokenMetadata.cloneOnlyTokenMap()));
  TokenMetadata temp=tokenMetadata.cloneAfterAllLeft();
  if (temp.isMember(endpoint))   temp.removeEndpoint(endpoint);
  Multimap<Range<Token>,InetAddress> changedRanges=HashMultimap.create();
  for (  Range<Token> range : ranges) {
    Collection<InetAddress> newReplicaEndpoints=Table.open(table).getReplicationStrategy().calculateNaturalEndpoints(range.right,temp);
    newReplicaEndpoints.removeAll(currentReplicaEndpoints.get(range));
    if (logger.isDebugEnabled())     if (newReplicaEndpoints.isEmpty())     logger.debug("Range " + range + " already in all replicas");
 else     logger.debug("Range " + range + " will be responsibility of "+ StringUtils.join(newReplicaEndpoints,", "));
    changedRanges.putAll(range,newReplicaEndpoints);
  }
  return changedRanges;
}
