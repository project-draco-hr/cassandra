{
  isBootstrapMode=true;
  SystemKeyspace.updateTokens(tokens);
  if (!replacing) {
    List<Pair<ApplicationState,VersionedValue>> states=new ArrayList<>();
    states.add(Pair.create(ApplicationState.TOKENS,valueFactory.tokens(tokens)));
    states.add(Pair.create(ApplicationState.STATUS,valueFactory.bootstrapping(tokens)));
    Gossiper.instance.addLocalApplicationStates(states);
    setMode(Mode.JOINING,"sleeping " + RING_DELAY + " ms for pending range setup",true);
    Uninterruptibles.sleepUninterruptibly(RING_DELAY,TimeUnit.MILLISECONDS);
  }
 else {
    tokenMetadata.updateNormalTokens(tokens,FBUtilities.getBroadcastAddress());
    SystemKeyspace.removeEndpoint(DatabaseDescriptor.getReplaceAddress());
  }
  if (!Gossiper.instance.seenAnySeed())   throw new IllegalStateException("Unable to contact any seeds!");
  if (Boolean.getBoolean("cassandra.reset_bootstrap_progress")) {
    logger.info("Resetting bootstrap progress to start fresh");
    SystemKeyspace.resetAvailableRanges();
  }
  setMode(Mode.JOINING,"Starting to bootstrap...",true);
  BootStrapper bootstrapper=new BootStrapper(FBUtilities.getBroadcastAddress(),tokens,tokenMetadata);
  bootstrapper.addProgressListener(progressSupport);
  ListenableFuture<StreamState> bootstrapStream=bootstrapper.bootstrap(streamStateStore,!replacing && useStrictConsistency);
  Futures.addCallback(bootstrapStream,new FutureCallback<StreamState>(){
    @Override public void onSuccess(    StreamState streamState){
      isBootstrapMode=false;
      logger.info("Bootstrap completed! for the tokens {}",tokens);
    }
    @Override public void onFailure(    Throwable e){
      logger.warn("Error during bootstrap.",e);
    }
  }
);
  try {
    bootstrapStream.get();
    return true;
  }
 catch (  Throwable e) {
    logger.error("Error while waiting on bootstrap to complete. Bootstrap will have to be restarted.",e);
    return false;
  }
}
