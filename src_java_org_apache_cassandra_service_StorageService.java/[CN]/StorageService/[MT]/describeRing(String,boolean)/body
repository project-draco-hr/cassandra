{
  if (!Schema.instance.getKeyspaces().contains(keyspace))   throw new InvalidRequestException("No such keyspace: " + keyspace);
  if (keyspace == null || Keyspace.open(keyspace).getReplicationStrategy() instanceof LocalStrategy)   throw new InvalidRequestException("There is no ring for the keyspace: " + keyspace);
  List<TokenRange> ranges=new ArrayList<>();
  Token.TokenFactory tf=getPartitioner().getTokenFactory();
  Map<Range<Token>,List<InetAddress>> rangeToAddressMap=includeOnlyLocalDC ? getRangeToAddressMapInLocalDC(keyspace) : getRangeToAddressMap(keyspace);
  for (  Map.Entry<Range<Token>,List<InetAddress>> entry : rangeToAddressMap.entrySet()) {
    Range range=entry.getKey();
    List<InetAddress> addresses=entry.getValue();
    List<String> endpoints=new ArrayList<>(addresses.size());
    List<String> rpc_endpoints=new ArrayList<>(addresses.size());
    List<EndpointDetails> epDetails=new ArrayList<>(addresses.size());
    for (    InetAddress endpoint : addresses) {
      EndpointDetails details=new EndpointDetails();
      details.host=endpoint.getHostAddress();
      details.datacenter=DatabaseDescriptor.getEndpointSnitch().getDatacenter(endpoint);
      details.rack=DatabaseDescriptor.getEndpointSnitch().getRack(endpoint);
      endpoints.add(details.host);
      rpc_endpoints.add(getRpcaddress(endpoint));
      epDetails.add(details);
    }
    TokenRange tr=new TokenRange(tf.toString(range.left.getToken()),tf.toString(range.right.getToken()),endpoints).setEndpoint_details(epDetails).setRpc_endpoints(rpc_endpoints);
    ranges.add(tr);
  }
  return ranges;
}
