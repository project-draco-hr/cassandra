{
  storageMetadata_=SystemTable.initMetadata();
  tcpAddr_=new EndPoint(DatabaseDescriptor.getStoragePort());
  udpAddr_=new EndPoint(DatabaseDescriptor.getControlPort());
  MessagingService.instance().listen(tcpAddr_);
  MessagingService.instance().listenUDP(udpAddr_);
  SelectorManager.getSelectorManager().start();
  SelectorManager.getUdpSelectorManager().start();
  loadTimer_.schedule(new LoadDisseminator(),StorageService.threshold_,StorageService.threshold_);
  storageLoadBalancer_.start();
  Gossiper.instance().register(this);
  Gossiper.instance().start(udpAddr_,storageMetadata_.getGeneration());
  tokenMetadata_.update(storageMetadata_.getToken(),StorageService.tcpAddr_,isBootstrapMode);
  ApplicationState state=new ApplicationState(StorageService.getPartitioner().getTokenFactory().toString(storageMetadata_.getToken()));
  Gossiper.instance().addApplicationState(StorageService.nodeId_,state);
  if (isBootstrapMode) {
    logger_.info("Starting in bootstrap mode (first, sleeping to get load information)");
    try {
      while (storageLoadBalancer_.getLoadInfo().isEmpty()) {
        Thread.sleep(100);
      }
      Thread.sleep(BootStrapper.INITIAL_DELAY);
    }
 catch (    InterruptedException e) {
      throw new AssertionError(e);
    }
    if (DatabaseDescriptor.getInitialToken() == null) {
      double maxLoad=0;
      EndPoint maxEndpoint=null;
      for (      Map.Entry<EndPoint,Double> entry : storageLoadBalancer_.getLoadInfo().entrySet()) {
        if (maxEndpoint == null || entry.getValue() > maxLoad) {
          maxEndpoint=entry.getKey();
          maxLoad=entry.getValue();
        }
      }
      if (!maxEndpoint.equals(getLocalStorageEndPoint())) {
        Token<?> t=getBootstrapTokenFrom(maxEndpoint);
        logger_.info("Setting token to " + t + " to assume load from "+ maxEndpoint.getHost());
        updateToken(t);
      }
    }
    doBootstrap(StorageService.getLocalStorageEndPoint());
    Gossiper.instance().addApplicationState(BOOTSTRAP_MODE,new ApplicationState(""));
  }
}
