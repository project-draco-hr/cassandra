{
  logger.info("Cassandra version: " + FBUtilities.getReleaseVersionString());
  logger.info("Thrift API version: " + Constants.VERSION);
  logger.info("CQL supported versions: " + StringUtils.join(ClientState.getCQLSupportedVersion(),",") + " (default: "+ ClientState.DEFAULT_CQL_VERSION+ ")");
  if (initialized) {
    if (isClientMode)     throw new UnsupportedOperationException("StorageService does not support switching modes.");
    return;
  }
  initialized=true;
  isClientMode=false;
  try {
    Class.forName("org.apache.cassandra.service.StorageProxy");
  }
 catch (  ClassNotFoundException e) {
    throw new AssertionError(e);
  }
  if (!isClientMode) {
    new ClientRequestMetrics();
  }
  if (Boolean.parseBoolean(System.getProperty("cassandra.load_ring_state","true"))) {
    logger.info("Loading persisted ring state");
    for (    Map.Entry<Token,InetAddress> entry : SystemTable.loadTokens().entrySet()) {
      if (entry.getValue() == FBUtilities.getLocalAddress()) {
        SystemTable.removeToken(entry.getKey());
      }
 else {
        tokenMetadata.updateNormalToken(entry.getKey(),entry.getValue());
        Gossiper.instance.addSavedEndpoint(entry.getValue());
      }
    }
  }
  if (Boolean.parseBoolean(System.getProperty("cassandra.renew_counter_id","false"))) {
    logger.info("Renewing local node id (as requested)");
    NodeId.renewLocalId();
  }
  Thread drainOnShutdown=new Thread(new WrappedRunnable(){
    @Override public void runMayThrow() throws ExecutionException, InterruptedException, IOException {
      ThreadPoolExecutor mutationStage=StageManager.getStage(Stage.MUTATION);
      if (mutationStage.isShutdown())       return;
      stopRPCServer();
      optionalTasks.shutdown();
      Gossiper.instance.stop();
      MessagingService.instance().shutdown();
      mutationStage.shutdown();
      mutationStage.awaitTermination(3600,TimeUnit.SECONDS);
      StorageProxy.instance.verifyNoHintsInProgress();
      List<Future<?>> flushes=new ArrayList<Future<?>>();
      for (      Table table : Table.all()) {
        KSMetaData ksm=Schema.instance.getKSMetaData(table.name);
        if (!ksm.durableWrites) {
          for (          ColumnFamilyStore cfs : table.getColumnFamilyStores()) {
            Future<?> future=cfs.forceFlush();
            if (future != null)             flushes.add(future);
          }
        }
      }
      FBUtilities.waitOnFutures(flushes);
      CommitLog.instance.shutdownBlocking();
      tasks.shutdown();
      if (!tasks.awaitTermination(1,TimeUnit.MINUTES))       logger.warn("Miscellaneous task executor still busy after one minute; proceeding with shutdown");
    }
  }
,"StorageServiceShutdownHook");
  Runtime.getRuntime().addShutdownHook(drainOnShutdown);
  if (Boolean.parseBoolean(System.getProperty("cassandra.join_ring","true"))) {
    joinTokenRing(delay);
  }
 else {
    logger.info("Not joining ring as requested. Use JMX (StorageService->joinRing()) to initiate ring joining");
  }
}
