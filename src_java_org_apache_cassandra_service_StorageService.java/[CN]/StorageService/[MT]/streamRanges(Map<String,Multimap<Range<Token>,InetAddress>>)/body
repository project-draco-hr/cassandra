{
  final Map<String,Map<InetAddress,List<Range<Token>>>> sessionsToStreamByTable=new HashMap<String,Map<InetAddress,List<Range<Token>>>>();
  int sessionCount=0;
  for (  Map.Entry<String,Multimap<Range<Token>,InetAddress>> entry : rangesToStreamByTable.entrySet()) {
    Multimap<Range<Token>,InetAddress> rangesWithEndpoints=entry.getValue();
    if (rangesWithEndpoints.isEmpty())     continue;
    final String table=entry.getKey();
    Map<InetAddress,List<Range<Token>>> rangesPerEndpoint=new HashMap<InetAddress,List<Range<Token>>>();
    for (    final Map.Entry<Range<Token>,InetAddress> endPointEntry : rangesWithEndpoints.entries()) {
      final Range<Token> range=endPointEntry.getKey();
      final InetAddress endpoint=endPointEntry.getValue();
      List<Range<Token>> curRanges=rangesPerEndpoint.get(endpoint);
      if (curRanges == null) {
        curRanges=new LinkedList<Range<Token>>();
        rangesPerEndpoint.put(endpoint,curRanges);
      }
      curRanges.add(range);
    }
    sessionCount+=rangesPerEndpoint.size();
    sessionsToStreamByTable.put(table,rangesPerEndpoint);
  }
  final CountDownLatch latch=new CountDownLatch(sessionCount);
  for (  Map.Entry<String,Map<InetAddress,List<Range<Token>>>> entry : sessionsToStreamByTable.entrySet()) {
    final String table=entry.getKey();
    final Map<InetAddress,List<Range<Token>>> rangesPerEndpoint=entry.getValue();
    for (    final Map.Entry<InetAddress,List<Range<Token>>> rangesEntry : rangesPerEndpoint.entrySet()) {
      final List<Range<Token>> ranges=rangesEntry.getValue();
      final InetAddress newEndpoint=rangesEntry.getKey();
      final IStreamCallback callback=new IStreamCallback(){
        public void onSuccess(){
          latch.countDown();
        }
        public void onFailure(){
          logger.warn("Streaming to " + newEndpoint + " failed");
          onSuccess();
        }
      }
;
      StageManager.getStage(Stage.STREAM).execute(new Runnable(){
        public void run(){
          StreamOut.transferRanges(newEndpoint,Table.open(table),ranges,callback,OperationType.UNBOOTSTRAP);
        }
      }
);
    }
  }
  return latch;
}
