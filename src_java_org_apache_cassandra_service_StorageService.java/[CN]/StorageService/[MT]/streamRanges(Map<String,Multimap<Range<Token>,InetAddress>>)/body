{
  final Map<String,Map<InetAddress,List<Range<Token>>>> sessionsToStreamByTable=new HashMap<String,Map<InetAddress,List<Range<Token>>>>();
  for (  Map.Entry<String,Multimap<Range<Token>,InetAddress>> entry : rangesToStreamByTable.entrySet()) {
    String keyspace=entry.getKey();
    Multimap<Range<Token>,InetAddress> rangesWithEndpoints=entry.getValue();
    if (rangesWithEndpoints.isEmpty())     continue;
    Map<InetAddress,List<Range<Token>>> rangesPerEndpoint=new HashMap<InetAddress,List<Range<Token>>>();
    for (    final Map.Entry<Range<Token>,InetAddress> endPointEntry : rangesWithEndpoints.entries()) {
      final Range<Token> range=endPointEntry.getKey();
      final InetAddress endpoint=endPointEntry.getValue();
      List<Range<Token>> curRanges=rangesPerEndpoint.get(endpoint);
      if (curRanges == null) {
        curRanges=new LinkedList<Range<Token>>();
        rangesPerEndpoint.put(endpoint,curRanges);
      }
      curRanges.add(range);
    }
    sessionsToStreamByTable.put(keyspace,rangesPerEndpoint);
  }
  StreamPlan streamPlan=new StreamPlan("Unbootstrap");
  for (  Map.Entry<String,Map<InetAddress,List<Range<Token>>>> entry : sessionsToStreamByTable.entrySet()) {
    final String table=entry.getKey();
    final Map<InetAddress,List<Range<Token>>> rangesPerEndpoint=entry.getValue();
    for (    final Map.Entry<InetAddress,List<Range<Token>>> rangesEntry : rangesPerEndpoint.entrySet()) {
      final List<Range<Token>> ranges=rangesEntry.getValue();
      final InetAddress newEndpoint=rangesEntry.getKey();
      streamPlan.transferRanges(newEndpoint,table,ranges);
    }
  }
  return streamPlan.execute();
}
