{
  Multimap<String,Map.Entry<InetAddress,Collection<Range<Token>>>> rangesToFetch=HashMultimap.create();
  InetAddress myAddress=FBUtilities.getBroadcastAddress();
  for (  String keyspaceName : Schema.instance.getNonSystemKeyspaces()) {
    Multimap<Range<Token>,InetAddress> changedRanges=getChangedRangesForLeaving(keyspaceName,endpoint);
    Set<Range<Token>> myNewRanges=new HashSet<>();
    for (    Map.Entry<Range<Token>,InetAddress> entry : changedRanges.entries()) {
      if (entry.getValue().equals(myAddress))       myNewRanges.add(entry.getKey());
    }
    Multimap<InetAddress,Range<Token>> sourceRanges=getNewSourceRanges(keyspaceName,myNewRanges);
    for (    Map.Entry<InetAddress,Collection<Range<Token>>> entry : sourceRanges.asMap().entrySet()) {
      rangesToFetch.put(keyspaceName,entry);
    }
  }
  StreamPlan stream=new StreamPlan("Restore replica count");
  for (  String keyspaceName : rangesToFetch.keySet()) {
    for (    Map.Entry<InetAddress,Collection<Range<Token>>> entry : rangesToFetch.get(keyspaceName)) {
      InetAddress source=entry.getKey();
      InetAddress preferred=SystemKeyspace.getPreferredIP(source);
      Collection<Range<Token>> ranges=entry.getValue();
      if (logger.isDebugEnabled())       logger.debug("Requesting from {} ranges {}",source,StringUtils.join(ranges,", "));
      stream.requestRanges(source,preferred,keyspaceName,ranges);
    }
  }
  StreamResultFuture future=stream.execute();
  Futures.addCallback(future,new FutureCallback<StreamState>(){
    public void onSuccess(    StreamState finalState){
      sendReplicationNotification(notifyEndpoint);
    }
    public void onFailure(    Throwable t){
      logger.warn("Streaming to restore replica count failed",t);
      sendReplicationNotification(notifyEndpoint);
    }
  }
);
}
