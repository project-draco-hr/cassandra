{
  final Multimap<InetAddress,String> fetchSources=HashMultimap.create();
  Multimap<String,Map.Entry<InetAddress,Collection<Range>>> rangesToFetch=HashMultimap.create();
  final InetAddress myAddress=FBUtilities.getBroadcastAddress();
  for (  String table : DatabaseDescriptor.getNonSystemTables()) {
    Multimap<Range,InetAddress> changedRanges=getChangedRangesForLeaving(table,endpoint);
    Set<Range> myNewRanges=new HashSet<Range>();
    for (    Map.Entry<Range,InetAddress> entry : changedRanges.entries()) {
      if (entry.getValue().equals(myAddress))       myNewRanges.add(entry.getKey());
    }
    Multimap<InetAddress,Range> sourceRanges=getNewSourceRanges(table,myNewRanges);
    for (    Map.Entry<InetAddress,Collection<Range>> entry : sourceRanges.asMap().entrySet()) {
      fetchSources.put(entry.getKey(),table);
      rangesToFetch.put(table,entry);
    }
  }
  for (  final String table : rangesToFetch.keySet()) {
    for (    Map.Entry<InetAddress,Collection<Range>> entry : rangesToFetch.get(table)) {
      final InetAddress source=entry.getKey();
      Collection<Range> ranges=entry.getValue();
      final Runnable callback=new Runnable(){
        public void run(){
synchronized (fetchSources) {
            fetchSources.remove(source,table);
            if (fetchSources.isEmpty())             sendReplicationNotification(myAddress,notifyEndpoint);
          }
        }
      }
;
      if (logger_.isDebugEnabled())       logger_.debug("Requesting from " + source + " ranges "+ StringUtils.join(ranges,", "));
      StreamIn.requestRanges(source,table,ranges,callback,OperationType.RESTORE_REPLICA_COUNT);
    }
  }
}
