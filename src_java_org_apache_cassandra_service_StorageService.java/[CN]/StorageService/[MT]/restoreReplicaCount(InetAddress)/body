{
  InetAddress myAddress=FBUtilities.getLocalAddress();
  for (  String table : DatabaseDescriptor.getNonSystemTables()) {
    Multimap<Range,InetAddress> changedRanges=getChangedRangesForLeaving(table,endpoint);
    Set<Range> myNewRanges=new HashSet<Range>();
    for (    Map.Entry<Range,InetAddress> entry : changedRanges.entries()) {
      if (entry.getValue().equals(myAddress))       myNewRanges.add(entry.getKey());
    }
    if (!myNewRanges.isEmpty()) {
      if (logger_.isDebugEnabled())       logger_.debug(endpoint + " was removed, my added ranges: " + StringUtils.join(myNewRanges,", "));
      Multimap<Range,InetAddress> rangeAddresses=getReplicationStrategy(table).getRangeAddresses(tokenMetadata_,table);
      Multimap<InetAddress,Range> sourceRanges=HashMultimap.create();
      IFailureDetector failureDetector=FailureDetector.instance;
      for (      Range myNewRange : myNewRanges) {
        List<InetAddress> sources=DatabaseDescriptor.getEndpointSnitch().getSortedListByProximity(myAddress,rangeAddresses.get(myNewRange));
        assert(!sources.contains(myAddress));
        for (        InetAddress source : sources) {
          if (source.equals(endpoint))           continue;
          if (failureDetector.isAlive(source)) {
            sourceRanges.put(source,myNewRange);
            break;
          }
        }
      }
      for (      Map.Entry<InetAddress,Collection<Range>> entry : sourceRanges.asMap().entrySet()) {
        if (logger_.isDebugEnabled())         logger_.debug("Requesting from " + entry.getKey() + " ranges "+ StringUtils.join(entry.getValue(),", "));
        StreamIn.requestRanges(entry.getKey(),table,entry.getValue());
      }
    }
  }
}
