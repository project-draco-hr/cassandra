{
  if (!isRebuilding.compareAndSet(false,true)) {
    throw new IllegalStateException("Node is still rebuilding. Check nodetool netstats.");
  }
  if (keyspace == null && tokens != null) {
    throw new IllegalArgumentException("Cannot specify tokens without keyspace.");
  }
  logger.info("rebuild from dc: {}, {}, {}",sourceDc == null ? "(any dc)" : sourceDc,keyspace == null ? "(All keyspaces)" : keyspace,tokens == null ? "(All tokens)" : tokens);
  try {
    RangeStreamer streamer=new RangeStreamer(tokenMetadata,null,FBUtilities.getBroadcastAddress(),"Rebuild",!replacing && useStrictConsistency,DatabaseDescriptor.getEndpointSnitch(),streamStateStore,false);
    streamer.addSourceFilter(new RangeStreamer.FailureDetectorSourceFilter(FailureDetector.instance));
    if (sourceDc != null)     streamer.addSourceFilter(new RangeStreamer.SingleDatacenterFilter(DatabaseDescriptor.getEndpointSnitch(),sourceDc));
    if (keyspace == null) {
      for (      String keyspaceName : Schema.instance.getNonSystemKeyspaces())       streamer.addRanges(keyspaceName,getLocalRanges(keyspaceName));
    }
 else     if (tokens == null) {
      streamer.addRanges(keyspace,getLocalRanges(keyspace));
    }
 else {
      Token.TokenFactory factory=getTokenFactory();
      List<Range<Token>> ranges=new ArrayList<>();
      Pattern rangePattern=Pattern.compile("\\(\\s*(-?\\w+)\\s*,\\s*(-?\\w+)\\s*\\]");
      try (Scanner tokenScanner=new Scanner(tokens)){
        while (tokenScanner.findInLine(rangePattern) != null) {
          MatchResult range=tokenScanner.match();
          Token startToken=factory.fromString(range.group(1));
          Token endToken=factory.fromString(range.group(2));
          logger.info(String.format("adding range: (%s,%s]",startToken,endToken));
          ranges.add(new Range<>(startToken,endToken));
        }
        if (tokenScanner.hasNext())         throw new IllegalArgumentException("Unexpected string: " + tokenScanner.next());
      }
       streamer.addRanges(keyspace,ranges);
    }
    StreamResultFuture resultFuture=streamer.fetchAsync();
    resultFuture.get();
  }
 catch (  InterruptedException e) {
    throw new RuntimeException("Interrupted while waiting on rebuild streaming");
  }
catch (  ExecutionException e) {
    logger.error("Error while rebuilding node",e.getCause());
    throw new RuntimeException("Error while rebuilding node: " + e.getCause().getMessage());
  }
 finally {
    isRebuilding.set(false);
  }
}
