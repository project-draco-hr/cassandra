{
  assert(pieces.length > 0);
  if (endpoint.equals(FBUtilities.getBroadcastAddress())) {
    logger.info("Received removenode gossip about myself. Is this node rejoining after an explicit removenode?");
    try {
      drain();
    }
 catch (    Exception e) {
      throw new RuntimeException(e);
    }
    return;
  }
  if (tokenMetadata.isMember(endpoint)) {
    String state=pieces[0];
    Collection<Token> removeTokens=tokenMetadata.getTokens(endpoint);
    if (VersionedValue.REMOVED_TOKEN.equals(state)) {
      excise(removeTokens,endpoint,extractExpireTime(pieces));
    }
 else     if (VersionedValue.REMOVING_TOKEN.equals(state)) {
      if (logger.isDebugEnabled())       logger.debug("Tokens {} removed manually (endpoint was {})",removeTokens,endpoint);
      tokenMetadata.addLeavingEndpoint(endpoint);
      PendingRangeCalculatorService.instance.update();
      String[] coordinator=Gossiper.instance.getEndpointStateForEndpoint(endpoint).getApplicationState(ApplicationState.REMOVAL_COORDINATOR).value.split(VersionedValue.DELIMITER_STR,-1);
      UUID hostId=UUID.fromString(coordinator[1]);
      restoreReplicaCount(endpoint,tokenMetadata.getEndpointForHostId(hostId));
    }
  }
 else {
    addExpireTimeIfFound(endpoint,extractExpireTime(pieces));
    removeEndpoint(endpoint);
  }
}
