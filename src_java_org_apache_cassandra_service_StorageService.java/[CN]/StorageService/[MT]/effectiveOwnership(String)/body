{
  Map<String,Float> effective=Maps.newHashMap();
  if (Schema.instance.getNonSystemTables().size() <= 0)   throw new ConfigurationException("Couldn't find any Non System Keyspaces to infer replication topology");
  if (keyspace == null && !hasSameReplication(Schema.instance.getNonSystemTables()))   throw new ConfigurationException("Non System keyspaces doesnt have the same topology");
  if (keyspace == null)   keyspace=Schema.instance.getNonSystemTables().get(0);
  List<Token> sortedTokens=new ArrayList<Token>(tokenMetadata.getTokenToEndpointMapForReading().keySet());
  Collections.sort(sortedTokens);
  Map<Token,Float> ownership=getPartitioner().describeOwnership(sortedTokens);
  for (  Entry<InetAddress,Collection<Range<Token>>> ranges : constructEndpointToRangeMap(keyspace).entrySet()) {
    Token token=tokenMetadata.getToken(ranges.getKey());
    for (    Range<Token> range : ranges.getValue()) {
      float value=effective.get(token.toString()) == null ? 0.0F : effective.get(token.toString());
      effective.put(token.toString(),value + ownership.get(range.left));
    }
  }
  return effective;
}
