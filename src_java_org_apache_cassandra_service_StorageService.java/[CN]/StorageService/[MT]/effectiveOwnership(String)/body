{
  AbstractReplicationStrategy strategy;
  if (keyspace != null) {
    Keyspace keyspaceInstance=Schema.instance.getKeyspaceInstance(keyspace);
    if (keyspaceInstance == null)     throw new IllegalArgumentException("The keyspace " + keyspace + ", does not exist");
    if (keyspaceInstance.getReplicationStrategy() instanceof LocalStrategy)     throw new IllegalStateException("Ownership values for keyspaces with LocalStrategy are meaningless");
    strategy=keyspaceInstance.getReplicationStrategy();
  }
 else {
    List<String> userKeyspaces=Schema.instance.getUserKeyspaces();
    if (userKeyspaces.size() > 0) {
      keyspace=userKeyspaces.iterator().next();
      AbstractReplicationStrategy replicationStrategy=Schema.instance.getKeyspaceInstance(keyspace).getReplicationStrategy();
      for (      String keyspaceName : userKeyspaces) {
        if (!Schema.instance.getKeyspaceInstance(keyspaceName).getReplicationStrategy().hasSameSettings(replicationStrategy))         throw new IllegalStateException("Non-system keyspaces don't have the same replication settings, effective ownership information is meaningless");
      }
    }
 else {
      keyspace="system_traces";
    }
    Keyspace keyspaceInstance=Schema.instance.getKeyspaceInstance(keyspace);
    if (keyspaceInstance == null)     throw new IllegalArgumentException("The node does not have " + keyspace + " yet, probably still bootstrapping");
    strategy=keyspaceInstance.getReplicationStrategy();
  }
  TokenMetadata metadata=tokenMetadata.cloneOnlyTokenMap();
  Collection<Collection<InetAddress>> endpointsGroupedByDc=new ArrayList<>();
  SortedMap<String,Collection<InetAddress>> sortedDcsToEndpoints=new TreeMap<>();
  sortedDcsToEndpoints.putAll(metadata.getTopology().getDatacenterEndpoints().asMap());
  for (  Collection<InetAddress> endpoints : sortedDcsToEndpoints.values())   endpointsGroupedByDc.add(endpoints);
  Map<Token,Float> tokenOwnership=getPartitioner().describeOwnership(tokenMetadata.sortedTokens());
  LinkedHashMap<InetAddress,Float> finalOwnership=Maps.newLinkedHashMap();
  Multimap<InetAddress,Range<Token>> endpointToRanges=strategy.getAddressRanges();
  for (  Collection<InetAddress> endpoints : endpointsGroupedByDc) {
    for (    InetAddress endpoint : endpoints) {
      float ownership=0.0f;
      for (      Range<Token> range : endpointToRanges.get(endpoint)) {
        if (tokenOwnership.containsKey(range.right))         ownership+=tokenOwnership.get(range.right);
      }
      finalOwnership.put(endpoint,ownership);
    }
  }
  return finalOwnership;
}
