{
  if (parallelismDegree < 0 || parallelismDegree > RepairParallelism.values().length - 1) {
    throw new IllegalArgumentException("Invalid parallelism degree specified: " + parallelismDegree);
  }
  RepairParallelism parallelism=RepairParallelism.values()[parallelismDegree];
  if (FBUtilities.isWindows() && parallelism != RepairParallelism.PARALLEL) {
    logger.warn("Snapshot-based repair is not yet supported on Windows.  Reverting to parallel repair.");
    parallelism=RepairParallelism.PARALLEL;
  }
  if (!fullRepair)   logger.warn("Incremental repair can't be requested with subrange repair " + "because each subrange repair would generate an anti-compacted table. " + "The repair will occur but without anti-compaction.");
  Collection<Range<Token>> repairingRange=createRepairRangeFrom(beginToken,endToken);
  RepairOption options=new RepairOption(parallelism,false,!fullRepair,false,1,repairingRange,true);
  if (dataCenters != null) {
    options.getDataCenters().addAll(dataCenters);
  }
  if (hosts != null) {
    options.getHosts().addAll(hosts);
  }
  if (tableNames != null) {
    for (    String table : tableNames) {
      options.getColumnFamilies().add(table);
    }
  }
  logger.info("starting user-requested repair of range {} for keyspace {} and column families {}",repairingRange,keyspaceName,tableNames);
  return forceRepairAsync(keyspaceName,options,true);
}
