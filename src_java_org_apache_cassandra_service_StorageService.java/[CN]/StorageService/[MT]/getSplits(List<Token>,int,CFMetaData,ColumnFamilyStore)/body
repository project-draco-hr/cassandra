{
  final double step=(double)(tokens.size() - 1) / splitCount;
  Token prevToken=tokens.get(0);
  List<Pair<Range<Token>,Long>> splits=Lists.newArrayListWithExpectedSize(splitCount);
  for (int i=1; i <= splitCount; i++) {
    int index=(int)Math.round(i * step);
    Token token=tokens.get(index);
    Range<Token> range=new Range<>(prevToken,token);
    splits.add(Pair.create(range,cfs.estimatedKeysForRange(range)));
    prevToken=token;
  }
  return splits;
}
