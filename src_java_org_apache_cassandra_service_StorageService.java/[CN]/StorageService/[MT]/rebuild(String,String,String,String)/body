{
  if (!isRebuilding.compareAndSet(false,true)) {
    throw new IllegalStateException("Node is still rebuilding. Check nodetool netstats.");
  }
  if (keyspace == null && tokens != null) {
    throw new IllegalArgumentException("Cannot specify tokens without keyspace.");
  }
  logger.info("rebuild from dc: {}, {}, {}",sourceDc == null ? "(any dc)" : sourceDc,keyspace == null ? "(All keyspaces)" : keyspace,tokens == null ? "(All tokens)" : tokens);
  try {
    RangeStreamer streamer=new RangeStreamer(tokenMetadata,null,FBUtilities.getBroadcastAddress(),"Rebuild",useStrictConsistency && !replacing,DatabaseDescriptor.getEndpointSnitch(),streamStateStore,false);
    streamer.addSourceFilter(new RangeStreamer.FailureDetectorSourceFilter(FailureDetector.instance));
    if (sourceDc != null)     streamer.addSourceFilter(new RangeStreamer.SingleDatacenterFilter(DatabaseDescriptor.getEndpointSnitch(),sourceDc));
    if (keyspace == null) {
      for (      String keyspaceName : Schema.instance.getNonLocalStrategyKeyspaces())       streamer.addRanges(keyspaceName,getLocalRanges(keyspaceName));
    }
 else     if (tokens == null) {
      streamer.addRanges(keyspace,getLocalRanges(keyspace));
    }
 else {
      Token.TokenFactory factory=getTokenFactory();
      List<Range<Token>> ranges=new ArrayList<>();
      Pattern rangePattern=Pattern.compile("\\(\\s*(-?\\w+)\\s*,\\s*(-?\\w+)\\s*\\]");
      try (Scanner tokenScanner=new Scanner(tokens)){
        while (tokenScanner.findInLine(rangePattern) != null) {
          MatchResult range=tokenScanner.match();
          Token startToken=factory.fromString(range.group(1));
          Token endToken=factory.fromString(range.group(2));
          logger.info(String.format("adding range: (%s,%s]",startToken,endToken));
          ranges.add(new Range<>(startToken,endToken));
        }
        if (tokenScanner.hasNext())         throw new IllegalArgumentException("Unexpected string: " + tokenScanner.next());
      }
       Collection<Range<Token>> localRanges=getLocalRanges(keyspace);
      for (      Range<Token> specifiedRange : ranges) {
        boolean foundParentRange=false;
        for (        Range<Token> localRange : localRanges) {
          if (localRange.contains(specifiedRange)) {
            foundParentRange=true;
            break;
          }
        }
        if (!foundParentRange) {
          throw new IllegalArgumentException(String.format("The specified range %s is not a range that is owned by this node. Please ensure that all token ranges specified to be rebuilt belong to this node.",specifiedRange.toString()));
        }
      }
      if (specificSources != null) {
        String[] stringHosts=specificSources.split(",");
        Set<InetAddress> sources=new HashSet<>(stringHosts.length);
        for (        String stringHost : stringHosts) {
          try {
            InetAddress endpoint=InetAddress.getByName(stringHost);
            if (FBUtilities.getBroadcastAddress().equals(endpoint)) {
              throw new IllegalArgumentException("This host was specified as a source for rebuilding. Sources for a rebuild can only be other nodes in the cluster.");
            }
            sources.add(endpoint);
          }
 catch (          UnknownHostException ex) {
            throw new IllegalArgumentException("Unknown host specified " + stringHost,ex);
          }
        }
        streamer.addSourceFilter(new RangeStreamer.WhitelistedSourcesFilter(sources));
      }
      streamer.addRanges(keyspace,ranges);
    }
    StreamResultFuture resultFuture=streamer.fetchAsync();
    resultFuture.get();
  }
 catch (  InterruptedException e) {
    throw new RuntimeException("Interrupted while waiting on rebuild streaming");
  }
catch (  ExecutionException e) {
    logger.error("Error while rebuilding node",e.getCause());
    throw new RuntimeException("Error while rebuilding node: " + e.getCause().getMessage());
  }
 finally {
    isRebuilding.set(false);
  }
}
