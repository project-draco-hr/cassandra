{
  Multimap<Range,InetAddress> rangesMM=getChangedRangesForLeaving(FBUtilities.getLocalAddress());
  if (logger_.isDebugEnabled())   logger_.debug("Ranges needing transfer are [" + StringUtils.join(rangesMM.keySet(),",") + "]");
  final Set<Map.Entry<Range,InetAddress>> pending=new HashSet<Map.Entry<Range,InetAddress>>(rangesMM.entries());
  for (  final Map.Entry<Range,InetAddress> entry : rangesMM.entries()) {
    final Range range=entry.getKey();
    final InetAddress newEndpoint=entry.getValue();
    final Runnable callback=new Runnable(){
      public synchronized void run(){
        pending.remove(entry);
        if (pending.isEmpty()) {
          SystemTable.setBootstrapped(false);
          tokenMetadata_.removeEndpoint(FBUtilities.getLocalAddress());
          replicationStrategy_.removeObsoletePendingRanges();
          if (logger_.isDebugEnabled())           logger_.debug("");
          Gossiper.instance().addApplicationState(STATE_LEFT,new ApplicationState(getLocalToken().toString()));
          try {
            Thread.sleep(2 * Gossiper.intervalInMillis_);
          }
 catch (          InterruptedException e) {
            throw new AssertionError(e);
          }
          onFinish.run();
        }
      }
    }
;
    StageManager.getStage(streamStage_).execute(new Runnable(){
      public void run(){
        Streaming.transferRanges(newEndpoint,Arrays.asList(range),callback);
      }
    }
);
  }
}
