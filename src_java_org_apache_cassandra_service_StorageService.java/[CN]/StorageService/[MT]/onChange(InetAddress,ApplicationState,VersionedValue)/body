{
  if (state.equals(ApplicationState.STATUS)) {
    String apStateValue=value.value;
    String[] pieces=apStateValue.split(VersionedValue.DELIMITER_STR,-1);
    assert(pieces.length > 0);
    String moveName=pieces[0];
switch (moveName) {
case VersionedValue.STATUS_BOOTSTRAPPING:
      handleStateBootstrap(endpoint);
    break;
case VersionedValue.STATUS_NORMAL:
  handleStateNormal(endpoint);
break;
case VersionedValue.REMOVING_TOKEN:
case VersionedValue.REMOVED_TOKEN:
handleStateRemoving(endpoint,pieces);
break;
case VersionedValue.STATUS_LEAVING:
handleStateLeaving(endpoint);
break;
case VersionedValue.STATUS_LEFT:
handleStateLeft(endpoint,pieces);
break;
case VersionedValue.STATUS_MOVING:
handleStateMoving(endpoint,pieces);
break;
case VersionedValue.STATUS_RELOCATING:
handleStateRelocating(endpoint,pieces);
break;
}
}
 else {
EndpointState epState=Gossiper.instance.getEndpointStateForEndpoint(endpoint);
if (epState == null || Gossiper.instance.isDeadState(epState)) {
logger.debug("Ignoring state change for dead or unknown endpoint: {}",endpoint);
return;
}
switch (state) {
case RELEASE_VERSION:
SystemKeyspace.updatePeerInfo(endpoint,"release_version",quote(value.value));
break;
case DC:
SystemKeyspace.updatePeerInfo(endpoint,"data_center",quote(value.value));
break;
case RACK:
SystemKeyspace.updatePeerInfo(endpoint,"rack",quote(value.value));
break;
case RPC_ADDRESS:
SystemKeyspace.updatePeerInfo(endpoint,"rpc_address",quote(value.value));
break;
case SCHEMA:
SystemKeyspace.updatePeerInfo(endpoint,"schema_version",value.value);
break;
case HOST_ID:
SystemKeyspace.updatePeerInfo(endpoint,"host_id",value.value);
break;
}
}
}
