{
  InetAddress myAddress=FBUtilities.getLocalAddress();
  Token localToken=tokenMetadata_.getToken(myAddress);
  Token token=partitioner_.getTokenFactory().fromString(tokenString);
  InetAddress endpoint=tokenMetadata_.getEndpoint(token);
  if (endpoint == null)   throw new UnsupportedOperationException("Token not found.");
  if (endpoint.equals(myAddress))   throw new UnsupportedOperationException("Cannot remove node's own token");
  if (Gossiper.instance.getLiveMembers().contains(endpoint))   throw new UnsupportedOperationException("Node " + endpoint + " is alive and owns this token. Use decommission command to remove it from the ring");
  if (tokenMetadata_.isLeaving(endpoint))   throw new UnsupportedOperationException("Node " + endpoint + " is already being removed.");
  if (replicatingNodes != null || replicateLatch != null)   throw new UnsupportedOperationException("This node is already processing a removal. Wait for it to complete.");
  replicatingNodes=Collections.synchronizedSet(getNewEndpoints(endpoint));
  replicateLatch=new CountDownLatch(replicatingNodes.size());
  removingNode=endpoint;
  tokenMetadata_.addLeavingEndpoint(endpoint);
  calculatePendingRanges();
  Gossiper.instance.addLocalApplicationState(ApplicationState.STATUS,valueFactory.removingNonlocal(localToken,token));
  restoreReplicaCount(endpoint,myAddress);
  try {
    replicateLatch.await();
  }
 catch (  InterruptedException e) {
    logger_.error("Interrupted while waiting for replication confirmation.");
  }
  Gossiper.instance.removeEndpoint(endpoint);
  tokenMetadata_.removeBootstrapToken(token);
  tokenMetadata_.removeEndpoint(endpoint);
  HintedHandOffManager.deleteHintsForEndPoint(endpoint);
  calculatePendingRanges();
  Gossiper.instance.addLocalApplicationState(ApplicationState.STATUS,valueFactory.removedNonlocal(localToken,token));
  if (!replicatingNodes.isEmpty())   logger_.error("Failed to recieve removal confirmation for " + StringUtils.join(replicatingNodes,","));
  replicatingNodes=null;
  removingNode=null;
  replicateLatch=null;
}
