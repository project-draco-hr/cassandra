{
  logger_.info("Cassandra version: " + FBUtilities.getReleaseVersionString());
  logger_.info("Thrift API version: " + Constants.VERSION);
  if (initialized) {
    if (isClientMode)     throw new UnsupportedOperationException("StorageService does not support switching modes.");
    return;
  }
  initialized=true;
  isClientMode=false;
  if (Boolean.parseBoolean(System.getProperty("cassandra.load_ring_state","true"))) {
    logger_.info("Loading persisted ring state");
    for (    Map.Entry<Token,InetAddress> entry : SystemTable.loadTokens().entrySet()) {
      tokenMetadata_.updateNormalToken(entry.getKey(),entry.getValue());
      Gossiper.instance.addSavedEndpoint(entry.getValue());
    }
  }
  if (Boolean.parseBoolean(System.getProperty("cassandra.renew_counter_id","false"))) {
    logger_.info("Renewing local node id (as requested)");
    NodeId.renewLocalId();
  }
  Thread drainOnShutdown=new Thread(new WrappedRunnable(){
    public void runMayThrow() throws ExecutionException, InterruptedException, IOException {
      ThreadPoolExecutor mutationStage=StageManager.getStage(Stage.MUTATION);
      if (!mutationStage.isShutdown()) {
        mutationStage.shutdown();
        mutationStage.awaitTermination(1,TimeUnit.SECONDS);
        CommitLog.instance.shutdownBlocking();
      }
      List<Future<?>> flushes=new ArrayList<Future<?>>();
      for (      Table table : Table.all()) {
        KSMetaData ksm=DatabaseDescriptor.getKSMetaData(table.name);
        if (!ksm.durableWrites) {
          for (          ColumnFamilyStore cfs : table.getColumnFamilyStores()) {
            Future<?> future=cfs.forceFlush();
            if (future != null)             flushes.add(future);
          }
        }
      }
      FBUtilities.waitOnFutures(flushes);
    }
  }
);
  Runtime.getRuntime().addShutdownHook(drainOnShutdown);
  if (Boolean.parseBoolean(System.getProperty("cassandra.join_ring","true"))) {
    joinTokenRing();
  }
 else {
    logger_.info("Not joining ring as requested. Use JMX (StorageService->joinRing()) to initiate ring joining");
  }
}
