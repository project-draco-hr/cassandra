{
  InetAddress myAddress=FBUtilities.getBroadcastAddress();
  UUID localHostId=tokenMetadata.getHostId(myAddress);
  UUID hostId=UUID.fromString(hostIdString);
  InetAddress endpoint=tokenMetadata.getEndpointForHostId(hostId);
  if (endpoint == null)   throw new UnsupportedOperationException("Host ID not found.");
  Token token=tokenMetadata.getToken(endpoint);
  if (endpoint.equals(myAddress))   throw new UnsupportedOperationException("Cannot remove self");
  if (Gossiper.instance.getLiveMembers().contains(endpoint))   throw new UnsupportedOperationException("Node " + endpoint + " is alive and owns this ID. Use decommission command to remove it from the ring");
  if (tokenMetadata.isLeaving(endpoint))   logger.warn("Node " + endpoint + " is already being removed, continuing removal anyway");
  if (!replicatingNodes.isEmpty())   throw new UnsupportedOperationException("This node is already processing a removal. Wait for it to complete, or use 'removetoken force' if this has failed.");
  for (  String table : Schema.instance.getNonSystemTables()) {
    if (Table.open(table).getReplicationStrategy().getReplicationFactor() == 1)     continue;
    Multimap<Range<Token>,InetAddress> changedRanges=getChangedRangesForLeaving(table,endpoint);
    IFailureDetector failureDetector=FailureDetector.instance;
    for (    InetAddress ep : changedRanges.values()) {
      if (failureDetector.isAlive(ep))       replicatingNodes.add(ep);
 else       logger.warn("Endpoint " + ep + " is down and will not receive data for re-replication of "+ endpoint);
    }
  }
  removingNode=endpoint;
  tokenMetadata.addLeavingEndpoint(endpoint);
  calculatePendingRanges();
  Gossiper.instance.advertiseRemoving(endpoint,hostId,localHostId);
  restoreReplicaCount(endpoint,myAddress);
  while (!replicatingNodes.isEmpty()) {
    try {
      Thread.sleep(100);
    }
 catch (    InterruptedException e) {
      throw new AssertionError(e);
    }
  }
  excise(token,endpoint);
  Gossiper.instance.advertiseTokenRemoved(endpoint,hostId);
  replicatingNodes.clear();
  removingNode=null;
}
