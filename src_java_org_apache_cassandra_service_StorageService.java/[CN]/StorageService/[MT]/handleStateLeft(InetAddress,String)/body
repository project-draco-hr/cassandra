{
  int index=moveValue.indexOf(Delimiter);
  assert(index != -1);
  String typeOfState=moveValue.substring(0,index);
  Token token=getPartitioner().getTokenFactory().fromString(moveValue.substring(index + 1));
  if (typeOfState.equals(LEFT_NORMALLY)) {
    if (logger_.isDebugEnabled())     logger_.debug("Node " + endPoint + " state left, token "+ token);
    if (tokenMetadata_.isMember(endPoint)) {
      if (!tokenMetadata_.getToken(endPoint).equals(token))       logger_.warn("Node " + endPoint + " 'left' token mismatch. Long network partition?");
      tokenMetadata_.removeEndpoint(endPoint);
    }
  }
 else {
    assert(typeOfState.equals(REMOVE_TOKEN));
    InetAddress endPointThatLeft=tokenMetadata_.getEndPoint(token);
    if (endPointThatLeft.equals(FBUtilities.getLocalAddress())) {
      logger_.info("Received removeToken gossip about myself. Is this node a replacement for a removed one?");
      return;
    }
    if (logger_.isDebugEnabled())     logger_.debug("Token " + token + " removed manually (endpoint was "+ ((endPointThatLeft == null) ? "unknown" : endPointThatLeft)+ ")");
    if (endPointThatLeft != null) {
      removeEndPointLocally(endPointThatLeft);
    }
  }
  tokenMetadata_.removeBootstrapToken(token);
  calculatePendingRanges();
}
