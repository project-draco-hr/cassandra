{
  AbstractType<?> keyType=DatabaseDescriptor.getCFMetaData(keyspace,select.getColumnFamily()).getKeyValidator();
  ByteBuffer startKey=(select.getKeyStart() != null) ? select.getKeyStart().getByteBuffer(keyType) : (new Term()).getByteBuffer();
  ByteBuffer finishKey=(select.getKeyFinish() != null) ? select.getKeyFinish().getByteBuffer(keyType) : (new Term()).getByteBuffer();
  IPartitioner<?> p=StorageService.getPartitioner();
  AbstractBounds bounds=new Bounds(p.getToken(startKey),p.getToken(finishKey));
  CFMetaData metadata=validateColumnFamily(keyspace,select.getColumnFamily(),false);
  AbstractType<?> comparator=metadata.getComparatorFor(null);
  SlicePredicate thriftSlicePredicate=slicePredicateFromSelect(select,comparator);
  validateSlicePredicate(metadata,thriftSlicePredicate);
  try {
    return StorageProxy.getRangeSlice(new RangeSliceCommand(keyspace,select.getColumnFamily(),null,thriftSlicePredicate,bounds,select.getNumRecords()),select.getConsistencyLevel());
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
catch (  org.apache.cassandra.thrift.UnavailableException e) {
    throw new UnavailableException();
  }
catch (  TimeoutException e) {
    throw new TimedOutException();
  }
}
