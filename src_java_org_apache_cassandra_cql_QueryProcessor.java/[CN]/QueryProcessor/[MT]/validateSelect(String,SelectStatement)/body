{
  if (select.isCountOperation() && (select.isKeyRange() || select.getKeys().size() < 1))   throw newInvalidRequestException("Counts can only be performed for a single record (Hint: KEY=term)");
  if (!select.isKeyRange() && (select.getKeyFinish() != null))   throw newInvalidRequestException("Key range clauses must include a start key (i.e. KEY > term)");
  if (select.isKeyRange() && select.getKeys().size() > 0)   throw newInvalidRequestException("You cannot combine key range and by-key clauses in a SELECT");
  if (select.isKeyRange() && (select.getKeyFinish() != null) && (select.getColumnRelations().size() > 0))   throw newInvalidRequestException("You cannot combine key range and by-column clauses in a SELECT");
  if (select.getKeys().size() > 1)   throw newInvalidRequestException("SELECTs can contain only by by-key clause");
  if (select.getColumnRelations().size() > 0) {
    Set<ByteBuffer> indexed=Table.open(keyspace).getColumnFamilyStore(select.getColumnFamily()).getIndexedColumns();
    for (    Relation relation : select.getColumnRelations()) {
      if ((relation.operator().equals(RelationType.EQ)) && indexed.contains(relation.getEntity().getByteBuffer()))       return;
    }
    throw newInvalidRequestException("No indexed columns present in by-columns clause with \"equals\" operator");
  }
}
