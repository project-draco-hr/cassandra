{
  List<ReadCommand> commands=new ArrayList<ReadCommand>();
  if (!select.isColumnRange()) {
    SortedSet<CellName> columnNames=getColumnNames(select,metadata,variables);
    validateColumnNames(columnNames);
    for (    Term rawKey : select.getKeys()) {
      ByteBuffer key=rawKey.getByteBuffer(metadata.getKeyValidator(),variables);
      validateKey(key);
      commands.add(new SliceByNamesReadCommand(metadata.ksName,key,select.getColumnFamily(),now,new NamesQueryFilter(columnNames)));
    }
  }
 else {
    AbstractType<?> at=metadata.comparator.asAbstractType();
    Composite start=metadata.comparator.fromByteBuffer(select.getColumnStart().getByteBuffer(at,variables));
    Composite finish=metadata.comparator.fromByteBuffer(select.getColumnFinish().getByteBuffer(at,variables));
    for (    Term rawKey : select.getKeys()) {
      ByteBuffer key=rawKey.getByteBuffer(metadata.getKeyValidator(),variables);
      validateKey(key);
      validateSliceFilter(metadata,start,finish,select.isColumnsReversed());
      commands.add(new SliceFromReadCommand(metadata.ksName,key,select.getColumnFamily(),now,new SliceQueryFilter(start,finish,select.isColumnsReversed(),select.getColumnsLimit())));
    }
  }
  return StorageProxy.read(commands,select.getConsistencyLevel());
}
