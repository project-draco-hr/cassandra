{
  SlicePredicate thriftSlicePredicate=slicePredicateFromSelect(select);
  List<IndexExpression> expressions=new ArrayList<IndexExpression>();
  for (  Relation columnRelation : select.getColumnRelations()) {
    expressions.add(new IndexExpression(columnRelation.getEntity().getByteBuffer(),IndexOperator.valueOf(columnRelation.operator().toString()),columnRelation.getValue().getByteBuffer()));
  }
  ByteBuffer startKey=(!select.isKeyRange()) ? (new Term()).getByteBuffer() : select.getKeyStart().getByteBuffer();
  IndexClause thriftIndexClause=new IndexClause(expressions,startKey,select.getNumRecords());
  List<org.apache.cassandra.db.Row> rows;
  try {
    rows=StorageProxy.scan(keyspace,select.getColumnFamily(),thriftIndexClause,thriftSlicePredicate,select.getConsistencyLevel());
  }
 catch (  org.apache.cassandra.thrift.UnavailableException ex) {
    UnavailableException avroEx=new UnavailableException();
    avroEx.why=ex.getMessage();
    if (avroEx.why == null || avroEx.why.length() == 0)     avroEx.why="StorageProxy.scan() failed because of insufficent responses.";
    throw avroEx;
  }
catch (  IOException e) {
    throw new RuntimeException(e);
  }
catch (  TimeoutException e) {
    throw new TimedOutException();
  }
  return rows;
}
