{
  CFMetaData metadata=validateColumnFamily(keyspace,select.getColumnFamily(),false);
  AbstractType<?> comparator=metadata.getComparatorFor(null);
  SlicePredicate thriftSlicePredicate=slicePredicateFromSelect(select,comparator);
  validateSlicePredicate(metadata,thriftSlicePredicate);
  List<IndexExpression> expressions=new ArrayList<IndexExpression>();
  for (  Relation columnRelation : select.getColumnRelations()) {
    ByteBuffer entity=columnRelation.getEntity().getByteBuffer(comparator);
    ByteBuffer value=columnRelation.getValue().getByteBuffer(select.getValueValidator(keyspace,entity));
    expressions.add(new IndexExpression(entity,IndexOperator.valueOf(columnRelation.operator().toString()),value));
  }
  AbstractType<?> keyType=DatabaseDescriptor.getCFMetaData(keyspace,select.getColumnFamily()).getKeyValidator();
  ByteBuffer startKey=(!select.isKeyRange()) ? (new Term()).getByteBuffer() : select.getKeyStart().getByteBuffer(keyType);
  IndexClause thriftIndexClause=new IndexClause(expressions,startKey,select.getNumRecords());
  List<org.apache.cassandra.db.Row> rows;
  try {
    rows=StorageProxy.scan(keyspace,select.getColumnFamily(),thriftIndexClause,thriftSlicePredicate,select.getConsistencyLevel());
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
catch (  TimeoutException e) {
    throw new TimedOutException();
  }
  return rows;
}
