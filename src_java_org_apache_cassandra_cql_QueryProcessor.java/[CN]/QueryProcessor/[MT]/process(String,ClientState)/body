{
  logger.trace("CQL QUERY: {}",queryString);
  CqlParser parser=getParser(queryString);
  CQLStatement statement=parser.query();
  parser.throwLastRecognitionError();
  String keyspace=clientState.getKeyspace();
  CqlResult avroResult=new CqlResult();
switch (statement.type) {
case SELECT:
    SelectStatement select=(SelectStatement)statement.statement;
  List<CqlRow> avroRows=new ArrayList<CqlRow>();
avroResult.type=CqlResultType.ROWS;
List<org.apache.cassandra.db.Row> rows=null;
if (!select.isKeyRange() && (select.getKeys().size() > 0)) {
if (select.getKeys().size() > 1) throw newInvalidRequestException("SELECTs can contain only one by-key clause (i.e. KEY = TERM)");
rows=getSlice(keyspace,select);
}
 else {
if (select.getColumnRelations().size() > 0) throw newInvalidRequestException("You cannot combine key ranges and by-column clauses " + "(i.e. \"name\" = \"value\") in a SELECT statement");
rows=multiRangeSlice(keyspace,select);
}
for (org.apache.cassandra.db.Row row : rows) {
if (row.cf == null) continue;
List<Column> avroColumns=new ArrayList<Column>();
for (IColumn column : row.cf.getSortedColumns()) {
Column avroColumn=new Column();
avroColumn.name=column.name();
avroColumn.value=column.value();
avroColumn.timestamp=column.timestamp();
avroColumns.add(avroColumn);
}
CqlRow avroRow=new CqlRow();
avroRow.key=row.key.key;
avroRow.columns=avroColumns;
avroRows.add(avroRow);
}
avroResult.rows=avroRows;
return avroResult;
case UPDATE:
UpdateStatement update=(UpdateStatement)statement.statement;
validateColumnFamily(keyspace,update.getColumnFamily());
avroResult.type=CqlResultType.VOID;
List<RowMutation> rowMutations=new ArrayList<RowMutation>();
for (Row row : update.getRows()) {
validateKey(row.getKey().getByteBuffer());
RowMutation rm=new RowMutation(keyspace,row.getKey().getByteBuffer());
for (org.apache.cassandra.cql.Column col : row.getColumns()) {
rm.add(new QueryPath(update.getColumnFamily(),null,col.getName().getByteBuffer()),col.getValue().getByteBuffer(),System.currentTimeMillis());
}
rowMutations.add(rm);
}
try {
StorageProxy.mutate(rowMutations,update.getConsistencyLevel());
}
 catch (org.apache.cassandra.thrift.UnavailableException e) {
throw new UnavailableException();
}
catch (TimeoutException e) {
throw new TimedOutException();
}
return avroResult;
case USE:
clientState.setKeyspace((String)statement.statement);
avroResult.type=CqlResultType.VOID;
return avroResult;
}
return null;
}
