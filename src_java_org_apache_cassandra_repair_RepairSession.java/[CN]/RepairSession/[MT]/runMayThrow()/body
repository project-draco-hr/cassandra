{
  logger.info(String.format("[repair #%s] new session: will sync %s on range %s for %s.%s",getId(),repairedNodes(),range,keyspace,Arrays.toString(cfnames)));
  if (endpoints.isEmpty()) {
    differencingDone.signalAll();
    logger.info(String.format("[repair #%s] No neighbors to repair with on range %s: session completed",getId(),range));
    return;
  }
  for (  InetAddress endpoint : endpoints) {
    if (!FailureDetector.instance.isAlive(endpoint)) {
      String message=String.format("Cannot proceed on repair because a neighbor (%s) is dead: session failed",endpoint);
      differencingDone.signalAll();
      logger.error("[repair #{}] {}",getId(),message);
      throw new IOException(message);
    }
  }
  ActiveRepairService.instance.addToActiveSessions(this);
  try {
    for (    String cfname : cfnames) {
      RepairJob job=new RepairJob(parentRepairSession,id,keyspace,cfname,range,isSequential);
      jobs.offer(job);
    }
    logger.debug("Sending tree requests to endpoints {}",endpoints);
    jobs.peek().sendTreeRequests(endpoints);
    completed.await();
    if (exception == null) {
      logger.info(String.format("[repair #%s] session completed successfully",getId()));
    }
 else {
      logger.error(String.format("[repair #%s] session completed with the following error",getId()),exception);
      throw exception;
    }
  }
 catch (  InterruptedException e) {
    throw new RuntimeException("Interrupted while waiting for repair.");
  }
 finally {
    terminate();
    ActiveRepairService.instance.removeFromActiveSessions(this);
  }
}
