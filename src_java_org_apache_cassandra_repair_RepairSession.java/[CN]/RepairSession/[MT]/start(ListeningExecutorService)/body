{
  String message;
  if (terminated)   return;
  logger.info(String.format("[repair #%s] new session: will sync %s on range %s for %s.%s",getId(),repairedNodes(),ranges,keyspace,Arrays.toString(cfnames)));
  Tracing.traceRepair("Syncing range {}",ranges);
  SystemDistributedKeyspace.startRepairs(getId(),parentRepairSession,keyspace,cfnames,ranges,endpoints);
  if (endpoints.isEmpty()) {
    logger.info("[repair #{}] {}",getId(),message=String.format("No neighbors to repair with on range %s: session completed",ranges));
    Tracing.traceRepair(message);
    set(new RepairSessionResult(id,keyspace,ranges,Lists.<RepairResult>newArrayList()));
    SystemDistributedKeyspace.failRepairs(getId(),keyspace,cfnames,new RuntimeException(message));
    return;
  }
  for (  InetAddress endpoint : endpoints) {
    if (!FailureDetector.instance.isAlive(endpoint)) {
      message=String.format("Cannot proceed on repair because a neighbor (%s) is dead: session failed",endpoint);
      logger.error("[repair #{}] {}",getId(),message);
      Exception e=new IOException(message);
      setException(e);
      SystemDistributedKeyspace.failRepairs(getId(),keyspace,cfnames,e);
      return;
    }
  }
  List<ListenableFuture<RepairResult>> jobs=new ArrayList<>(cfnames.length);
  for (  String cfname : cfnames) {
    RepairJob job=new RepairJob(this,cfname);
    executor.execute(job);
    jobs.add(job);
  }
  Futures.addCallback(Futures.allAsList(jobs),new FutureCallback<List<RepairResult>>(){
    public void onSuccess(    List<RepairResult> results){
      logger.info("[repair #{}] {}",getId(),"Session completed successfully");
      Tracing.traceRepair("Completed sync of range {}",ranges);
      set(new RepairSessionResult(id,keyspace,ranges,results));
      taskExecutor.shutdown();
      terminate();
    }
    public void onFailure(    Throwable t){
      logger.error(String.format("[repair #%s] Session completed with the following error",getId()),t);
      Tracing.traceRepair("Session completed with the following error: {}",t);
      forceShutdown(t);
    }
  }
);
}
