{
  int inclusiveLowerBound=max(0,start == null ? Integer.MIN_VALUE : startInclusive ? ceilIndex(btree,comparator,start) : higherIndex(btree,comparator,start));
  int inclusiveUpperBound=min(size(btree) - 1,end == null ? Integer.MAX_VALUE : endInclusive ? floorIndex(btree,comparator,end) : lowerIndex(btree,comparator,end));
  return new BTreeSearchIterator<>(btree,comparator,dir,inclusiveLowerBound,inclusiveUpperBound);
}
