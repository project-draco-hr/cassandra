{
  boolean isLeaf=isLeaf(btree);
  int childOffset=isLeaf ? 0 : getChildStart(btree);
  int limit=isLeaf ? getLeafKeyEnd(btree) : btree.length - 1;
  for (int i=limit - 1, visited=0; i >= 0; i--, visited++) {
    int idx=i;
    if (!isLeaf) {
      int typeOffset=visited / 2;
      if (i % 2 == 0) {
        idx+=typeOffset;
      }
 else {
        idx=i - childOffset + typeOffset;
      }
    }
    Object current=btree[idx];
    if (isLeaf || idx < childOffset) {
      V castedCurrent=(V)current;
      if (stopCondition != null && stopCondition.apply(castedCurrent))       return true;
      function.accept(castedCurrent);
    }
 else {
      if (applyReverse((Object[])current,function,stopCondition))       return true;
    }
  }
  return false;
}
