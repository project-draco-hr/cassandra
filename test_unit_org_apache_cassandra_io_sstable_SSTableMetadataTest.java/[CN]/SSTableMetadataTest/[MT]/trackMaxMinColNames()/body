{
  Keyspace keyspace=Keyspace.open(KEYSPACE1);
  ColumnFamilyStore store=keyspace.getColumnFamilyStore("Standard3");
  store.getCompactionStrategy();
  for (int j=0; j < 8; j++) {
    DecoratedKey key=Util.dk("row" + j);
    Mutation rm=new Mutation(KEYSPACE1,key.getKey());
    for (int i=100; i < 150; i++) {
      rm.add("Standard3",cellname(j + "col" + i),ByteBufferUtil.EMPTY_BYTE_BUFFER,System.currentTimeMillis());
    }
    rm.apply();
  }
  store.forceBlockingFlush();
  assertEquals(1,store.getSSTables().size());
  for (  SSTableReader sstable : store.getSSTables()) {
    assertEquals(ByteBufferUtil.string(sstable.getSSTableMetadata().minColumnNames.get(0)),"0col100");
    assertEquals(ByteBufferUtil.string(sstable.getSSTableMetadata().maxColumnNames.get(0)),"7col149");
  }
  DecoratedKey key=Util.dk("row2");
  Mutation rm=new Mutation(KEYSPACE1,key.getKey());
  for (int i=101; i < 299; i++) {
    rm.add("Standard3",cellname(9 + "col" + i),ByteBufferUtil.EMPTY_BYTE_BUFFER,System.currentTimeMillis());
  }
  rm.apply();
  store.forceBlockingFlush();
  store.forceMajorCompaction();
  assertEquals(1,store.getSSTables().size());
  for (  SSTableReader sstable : store.getSSTables()) {
    assertEquals(ByteBufferUtil.string(sstable.getSSTableMetadata().minColumnNames.get(0)),"0col100");
    assertEquals(ByteBufferUtil.string(sstable.getSSTableMetadata().maxColumnNames.get(0)),"9col298");
  }
}
