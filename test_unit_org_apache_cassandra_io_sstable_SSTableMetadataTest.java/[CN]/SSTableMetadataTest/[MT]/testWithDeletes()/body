{
  Keyspace keyspace=Keyspace.open(KEYSPACE1);
  ColumnFamilyStore store=keyspace.getColumnFamilyStore("Standard2");
  long timestamp=System.currentTimeMillis();
  DecoratedKey key=Util.dk("deletetest");
  Mutation rm=new Mutation(KEYSPACE1,key.getKey());
  for (int i=0; i < 5; i++)   rm.add("Standard2",cellname("deletecolumn" + i),ByteBufferUtil.EMPTY_BYTE_BUFFER,timestamp,100);
  rm.add("Standard2",cellname("todelete"),ByteBufferUtil.EMPTY_BYTE_BUFFER,timestamp,1000);
  rm.applyUnsafe();
  store.forceBlockingFlush();
  assertEquals(1,store.getSSTables().size());
  int ttltimestamp=(int)(System.currentTimeMillis() / 1000);
  int firstMaxDelTime=0;
  for (  SSTableReader sstable : store.getSSTables()) {
    firstMaxDelTime=sstable.getSSTableMetadata().maxLocalDeletionTime;
    assertEquals(ttltimestamp + 1000,firstMaxDelTime,10);
  }
  rm=new Mutation(KEYSPACE1,key.getKey());
  rm.delete("Standard2",cellname("todelete"),timestamp + 1);
  rm.applyUnsafe();
  store.forceBlockingFlush();
  assertEquals(2,store.getSSTables().size());
  boolean foundDelete=false;
  for (  SSTableReader sstable : store.getSSTables()) {
    if (sstable.getSSTableMetadata().maxLocalDeletionTime != firstMaxDelTime) {
      assertEquals(sstable.getSSTableMetadata().maxLocalDeletionTime,ttltimestamp,10);
      foundDelete=true;
    }
  }
  assertTrue(foundDelete);
  Util.compact(store,store.getSSTables());
  assertEquals(1,store.getSSTables().size());
  for (  SSTableReader sstable : store.getSSTables()) {
    assertEquals(ttltimestamp + 100,sstable.getSSTableMetadata().maxLocalDeletionTime,10);
  }
}
