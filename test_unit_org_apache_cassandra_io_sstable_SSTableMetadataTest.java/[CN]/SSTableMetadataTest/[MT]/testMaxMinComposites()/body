{
  Keyspace keyspace=Keyspace.open(KEYSPACE1);
  ColumnFamilyStore cfs=keyspace.getColumnFamilyStore("StandardComposite2");
  CellNameType type=cfs.getComparator();
  ByteBuffer key=ByteBufferUtil.bytes("k");
  for (int i=0; i < 10; i++) {
    Mutation rm=new Mutation(KEYSPACE1,key);
    CellName colName=type.makeCellName(ByteBufferUtil.bytes("a" + (9 - i)),ByteBufferUtil.bytes(i));
    rm.add("StandardComposite2",colName,ByteBufferUtil.EMPTY_BYTE_BUFFER,0);
    rm.apply();
  }
  cfs.forceBlockingFlush();
  key=ByteBufferUtil.bytes("k2");
  for (int i=0; i < 10; i++) {
    Mutation rm=new Mutation(KEYSPACE1,key);
    CellName colName=type.makeCellName(ByteBufferUtil.bytes("b" + (9 - i)),ByteBufferUtil.bytes(i));
    rm.add("StandardComposite2",colName,ByteBufferUtil.EMPTY_BYTE_BUFFER,0);
    rm.apply();
  }
  cfs.forceBlockingFlush();
  cfs.forceMajorCompaction();
  assertEquals(cfs.getSSTables().size(),1);
  for (  SSTableReader sstable : cfs.getSSTables()) {
    assertEquals("b9",ByteBufferUtil.string(sstable.getSSTableMetadata().maxColumnNames.get(0)));
    assertEquals(9,ByteBufferUtil.toInt(sstable.getSSTableMetadata().maxColumnNames.get(1)));
    assertEquals("a0",ByteBufferUtil.string(sstable.getSSTableMetadata().minColumnNames.get(0)));
    assertEquals(0,ByteBufferUtil.toInt(sstable.getSSTableMetadata().minColumnNames.get(1)));
  }
}
