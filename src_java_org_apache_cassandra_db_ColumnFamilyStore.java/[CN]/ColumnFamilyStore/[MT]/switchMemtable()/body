{
synchronized (data) {
    if (previousFlushFailure != null)     throw new IllegalStateException("A flush previously failed with the error below. To prevent data loss, " + "no flushes can be carried out until the node is restarted.",previousFlushFailure);
    logFlush();
    Flush flush=new Flush(false);
    ListenableFutureTask<?> flushTask=ListenableFutureTask.create(flush,null);
    flushExecutor.submit(flushTask);
    ListenableFutureTask<ReplayPosition> task=ListenableFutureTask.create(flush.postFlush);
    postFlushExecutor.submit(task);
    @SuppressWarnings("unchecked") ListenableFuture<ReplayPosition> future=Futures.transform(Futures.allAsList(flushTask,task),new Function<List<Object>,ReplayPosition>(){
      public ReplayPosition apply(      List<Object> input){
        return (ReplayPosition)input.get(1);
      }
    }
);
    return future;
  }
}
