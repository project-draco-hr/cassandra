{
  List<IColumnIterator> iterators=new ArrayList<IColumnIterator>();
  final ColumnFamily returnCF=ColumnFamily.create(metadata);
  try {
    IColumnIterator iter;
    int sstablesToIterate=0;
    DataTracker.View currentView=data.getView();
    iter=filter.getMemtableColumnIterator(currentView.memtable,getComparator());
    if (iter != null) {
      returnCF.delete(iter.getColumnFamily());
      iterators.add(iter);
    }
    for (    Memtable memtable : currentView.memtablesPendingFlush) {
      iter=filter.getMemtableColumnIterator(memtable,getComparator());
      if (iter != null) {
        returnCF.delete(iter.getColumnFamily());
        iterators.add(iter);
      }
    }
    for (    SSTableReader sstable : currentView.sstables) {
      iter=filter.getSSTableColumnIterator(sstable);
      if (iter.getColumnFamily() != null) {
        returnCF.delete(iter.getColumnFamily());
        iterators.add(iter);
        sstablesToIterate++;
      }
    }
    recentSSTablesPerRead.add(sstablesToIterate);
    sstablesPerRead.add(sstablesToIterate);
    Comparator<IColumn> comparator=filter.filter.getColumnComparator(getComparator());
    Iterator collated=IteratorUtils.collatedIterator(comparator,iterators);
    filter.collectCollatedColumns(returnCF,collated,gcBefore);
    return returnCF;
  }
  finally {
    for (    IColumnIterator ci : iterators) {
      try {
        ci.close();
      }
 catch (      Throwable th) {
        logger.error("error closing " + ci,th);
      }
    }
  }
}
