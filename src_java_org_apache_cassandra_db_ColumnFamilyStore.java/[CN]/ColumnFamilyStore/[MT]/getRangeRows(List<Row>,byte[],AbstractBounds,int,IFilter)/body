{
  final DecoratedKey startWith=new DecoratedKey(range.left,(byte[])null);
  final DecoratedKey stopAt=new DecoratedKey(range.right,(byte[])null);
  final int gcBefore=CompactionManager.getDefaultGCBefore();
  final QueryPath queryPath=new QueryPath(columnFamily_,superColumn,null);
  final QueryFilter filter=new QueryFilter(null,queryPath,columnFilter);
  Collection<Memtable> memtables=new ArrayList<Memtable>();
  memtables.add(getMemtableThreadSafe());
  memtables.addAll(memtablesPendingFlush);
  Collection<SSTableReader> sstables=new ArrayList<SSTableReader>();
  Iterables.addAll(sstables,ssTables_);
  RowIterator iterator=RowIteratorFactory.getIterator(memtables,sstables,startWith,stopAt,filter,getComparator(),this,gcBefore);
  try {
    boolean first=true;
    while (iterator.hasNext()) {
      Row current=iterator.next();
      DecoratedKey key=current.key;
      if (!stopAt.isEmpty() && stopAt.compareTo(key) < 0)       return;
      if (range instanceof Bounds || !first || !key.equals(startWith)) {
        rows.add(current);
        if (logger_.isDebugEnabled())         logger_.debug("scanned " + key);
      }
      first=false;
      if (rows.size() >= maxResults)       return;
    }
  }
  finally {
    try {
      iterator.close();
    }
 catch (    IOException e) {
      throw new IOError(e);
    }
  }
}
