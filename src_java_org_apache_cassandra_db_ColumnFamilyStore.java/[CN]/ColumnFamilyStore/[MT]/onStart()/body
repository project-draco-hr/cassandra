{
  List<File> sstableFiles=new ArrayList<File>();
  String[] dataFileDirectories=DatabaseDescriptor.getAllDataFileLocations();
  for (  String directory : dataFileDirectories) {
    File fileDir=new File(directory);
    File[] files=fileDir.listFiles();
    for (    File file : files) {
      String filename=file.getName();
      if (((file.length() == 0) || (filename.contains("-" + SSTable.temporaryFile_))) && (filename.contains(columnFamily_))) {
        file.delete();
        continue;
      }
      String[] tblCfName=getTableAndColumnFamilyName(filename);
      if (tblCfName[0].equals(table_) && tblCfName[1].equals(columnFamily_) && filename.contains("-Data.db")) {
        sstableFiles.add(file.getAbsoluteFile());
      }
    }
  }
  Collections.sort(sstableFiles,new FileUtils.FileComparator());
  List<String> filenames=new ArrayList<String>();
  for (  File ssTable : sstableFiles) {
    filenames.add(ssTable.getAbsolutePath());
  }
  for (  String filename : filenames) {
    try {
      SSTable sstable=SSTable.open(filename,StorageService.getPartitioner());
      ssTables_.put(filename,sstable);
    }
 catch (    IOException ex) {
      logger_.info("Deleting corrupted file " + filename);
      FileUtils.delete(filename);
      logger_.warn(LogUtil.throwableToString(ex));
    }
  }
  MinorCompactionManager.instance().submit(ColumnFamilyStore.this);
  if (table_.equals(Table.SYSTEM_TABLE) && columnFamily_.equals(Table.HINTS_CF)) {
    HintedHandOffManager.instance().submit(this);
  }
  MinorCompactionManager.instance().submitPeriodicCompaction(this);
  int flushPeriod=DatabaseDescriptor.getFlushPeriod(table_,columnFamily_);
  if (flushPeriod > 0) {
    PeriodicFlushManager.instance().submitPeriodicFlusher(this,flushPeriod);
  }
}
