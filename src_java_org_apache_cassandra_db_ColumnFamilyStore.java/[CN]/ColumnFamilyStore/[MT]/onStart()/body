{
  if (logger_.isDebugEnabled())   logger_.debug("Starting CFS " + columnFamily_);
  List<File> sstableFiles=new ArrayList<File>();
  Pattern auxFilePattern=Pattern.compile("(.*)(-Filter\\.db$|-Index\\.db$)");
  String[] dataFileDirectories=DatabaseDescriptor.getAllDataFileLocationsForTable(table_);
  for (  String directory : dataFileDirectories) {
    File fileDir=new File(directory);
    File[] files=fileDir.listFiles();
    for (    File file : files) {
      String filename=file.getName();
      Matcher matcher=auxFilePattern.matcher(file.getAbsolutePath());
      if (matcher.matches()) {
        String basePath=matcher.group(1);
        if (!new File(basePath + "-Data.db").exists()) {
          logger_.info(String.format("Removing orphan %s",file.getAbsolutePath()));
          FileUtils.deleteWithConfirm(file);
          continue;
        }
      }
      if (((file.length() == 0 && !filename.endsWith("-Compacted")) || (filename.contains("-" + SSTable.TEMPFILE_MARKER))) && (filename.contains(columnFamily_))) {
        FileUtils.deleteWithConfirm(file);
        continue;
      }
      String cfName=getColumnFamilyFromFileName(filename);
      if (cfName.equals(columnFamily_) && filename.contains("-Data.db")) {
        sstableFiles.add(file.getAbsoluteFile());
      }
    }
  }
  Collections.sort(sstableFiles,new FileUtils.FileComparator());
  List<SSTableReader> sstables=new ArrayList<SSTableReader>();
  for (  File file : sstableFiles) {
    String filename=file.getAbsolutePath();
    if (SSTable.deleteIfCompacted(filename))     continue;
    SSTableReader sstable;
    try {
      sstable=SSTableReader.open(filename);
    }
 catch (    IOException ex) {
      logger_.error("Corrupt file " + filename + "; skipped",ex);
      continue;
    }
    sstables.add(sstable);
  }
  ssTables_.onStart(sstables);
  CompactionManager.instance().submit(ColumnFamilyStore.this);
  if (table_.equals(Table.SYSTEM_TABLE) && columnFamily_.equals(HintedHandOffManager.HINTS_CF)) {
    HintedHandOffManager.instance().scheduleHandoffsFor(this);
  }
}
