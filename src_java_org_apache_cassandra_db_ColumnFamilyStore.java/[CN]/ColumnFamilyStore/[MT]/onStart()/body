{
  List<File> sstableFiles=new ArrayList<File>();
  String[] dataFileDirectories=DatabaseDescriptor.getAllDataFileLocations();
  for (  String directory : dataFileDirectories) {
    File fileDir=new File(directory);
    File[] files=fileDir.listFiles();
    for (    File file : files) {
      String filename=file.getName();
      if (((file.length() == 0) || (filename.contains("-" + SSTable.TEMPFILE_MARKER))) && (filename.contains(columnFamily_))) {
        file.delete();
        continue;
      }
      String[] tblCfName=getTableAndColumnFamilyName(filename);
      if (tblCfName[0].equals(table_) && tblCfName[1].equals(columnFamily_) && filename.contains("-Data.db")) {
        sstableFiles.add(file.getAbsoluteFile());
      }
    }
  }
  Collections.sort(sstableFiles,new FileUtils.FileComparator());
  for (  File file : sstableFiles) {
    String filename=file.getAbsolutePath();
    try {
      SSTableReader sstable=SSTableReader.open(filename);
      ssTables_.put(filename,sstable);
    }
 catch (    IOException ex) {
      logger_.error("Corrupt file " + filename,ex);
      FileUtils.delete(filename);
    }
  }
  MinorCompactionManager.instance().submit(ColumnFamilyStore.this);
  if (table_.equals(Table.SYSTEM_TABLE) && columnFamily_.equals(HintedHandOffManager.HINTS_CF)) {
    HintedHandOffManager.instance().submit(this);
  }
  int flushPeriod=DatabaseDescriptor.getFlushPeriod(table_,columnFamily_);
  if (flushPeriod > 0) {
    PeriodicFlushManager.instance().submitPeriodicFlusher(this,flushPeriod);
  }
}
