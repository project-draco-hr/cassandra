{
  logger.trace("truncating {}",name);
  final long truncatedAt;
  final ReplayPosition replayAfter;
  if (keyspace.getMetadata().params.durableWrites || DatabaseDescriptor.isAutoSnapshot()) {
    replayAfter=forceBlockingFlush();
    viewManager.forceBlockingFlush();
  }
 else {
    viewManager.dumpMemtables();
    try {
      replayAfter=dumpMemtable().get();
    }
 catch (    Exception e) {
      throw new RuntimeException(e);
    }
  }
  long now=System.currentTimeMillis();
  for (  ColumnFamilyStore cfs : concatWithIndexes())   for (  SSTableReader sstable : cfs.getLiveSSTables())   now=Math.max(now,sstable.maxDataAge);
  truncatedAt=now;
  Runnable truncateRunnable=new Runnable(){
    public void run(){
      logger.debug("Discarding sstable data for truncated CF + indexes");
      data.notifyTruncated(truncatedAt);
      if (DatabaseDescriptor.isAutoSnapshot())       snapshot(Keyspace.getTimestampedSnapshotName(name));
      discardSSTables(truncatedAt);
      indexManager.truncateAllIndexesBlocking(truncatedAt);
      viewManager.truncateBlocking(replayAfter,truncatedAt);
      SystemKeyspace.saveTruncationRecord(ColumnFamilyStore.this,truncatedAt,replayAfter);
      logger.trace("cleaning out row cache");
      invalidateCaches();
    }
  }
;
  runWithCompactionsDisabled(Executors.callable(truncateRunnable),true,true);
  logger.trace("truncate complete");
}
