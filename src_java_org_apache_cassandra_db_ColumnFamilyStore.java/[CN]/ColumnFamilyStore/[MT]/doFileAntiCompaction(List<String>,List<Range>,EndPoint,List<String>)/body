{
  boolean result=false;
  long startTime=System.currentTimeMillis();
  long totalBytesRead=0;
  long totalBytesWritten=0;
  long totalkeysRead=0;
  long totalkeysWritten=0;
  String rangeFileLocation;
  String mergedFileName;
  long expectedRangeFileSize=getExpectedCompactedFileSize(files);
  expectedRangeFileSize=expectedRangeFileSize / 2;
  rangeFileLocation=DatabaseDescriptor.getDataFileLocationForTable(table_,expectedRangeFileSize);
  if (rangeFileLocation == null) {
    logger_.error("Total bytes to be written for range compaction  ..." + expectedRangeFileSize + "   is greater than the safe limit of the disk space available.");
    return result;
  }
  PriorityQueue<FileStruct> pq=initializePriorityQueue(files,ranges);
  if (pq.isEmpty()) {
    return result;
  }
  mergedFileName=getTempSSTableFileName();
  SSTableWriter rangeWriter=null;
  String lastkey=null;
  List<FileStruct> lfs=new ArrayList<FileStruct>();
  DataOutputBuffer bufOut=new DataOutputBuffer();
  int expectedBloomFilterSize=SSTableReader.getApproximateKeyCount(files);
  expectedBloomFilterSize=(expectedBloomFilterSize > 0) ? expectedBloomFilterSize : SSTableReader.indexInterval();
  if (logger_.isDebugEnabled())   logger_.debug("Expected bloom filter size : " + expectedBloomFilterSize);
  List<ColumnFamily> columnFamilies=new ArrayList<ColumnFamily>();
  while (pq.size() > 0 || lfs.size() > 0) {
    FileStruct fs=null;
    if (pq.size() > 0) {
      fs=pq.poll();
    }
    if (fs != null && (lastkey == null || lastkey.equals(fs.getKey()))) {
      lastkey=fs.getKey();
      lfs.add(fs);
    }
 else {
      Collections.sort(lfs,new FileStructComparator());
      ColumnFamily columnFamily;
      bufOut.reset();
      if (lfs.size() > 1) {
        for (        FileStruct filestruct : lfs) {
          if (columnFamilies.size() > 1) {
            merge(columnFamilies);
          }
          columnFamilies.add(filestruct.getColumnFamily());
        }
        columnFamily=resolveAndRemoveDeleted(columnFamilies);
        columnFamilies.clear();
        if (columnFamily != null) {
          ColumnFamily.serializer().serializeWithIndexes(columnFamily,bufOut);
        }
      }
 else {
        FileStruct filestruct=lfs.get(0);
        ColumnFamily.serializer().serializeWithIndexes(filestruct.getColumnFamily(),bufOut);
      }
      if (Range.isTokenInRanges(StorageService.getPartitioner().getToken(lastkey),ranges)) {
        if (rangeWriter == null) {
          if (target != null) {
            rangeFileLocation=rangeFileLocation + File.separator + "bootstrap";
          }
          FileUtils.createDirectory(rangeFileLocation);
          String fname=new File(rangeFileLocation,mergedFileName).getAbsolutePath();
          rangeWriter=new SSTableWriter(fname,expectedBloomFilterSize,StorageService.getPartitioner());
        }
        rangeWriter.append(lastkey,bufOut);
      }
      totalkeysWritten++;
      for (      FileStruct filestruct : lfs) {
        filestruct.advance(true);
        if (filestruct.isExhausted()) {
          continue;
        }
        while (!Range.isTokenInRanges(StorageService.getPartitioner().getToken(filestruct.getKey()),ranges)) {
          filestruct.advance(true);
          if (filestruct.isExhausted()) {
            break;
          }
        }
        if (!filestruct.isExhausted()) {
          pq.add(filestruct);
        }
        totalkeysRead++;
      }
      lfs.clear();
      lastkey=null;
      if (fs != null) {
        pq.add(fs);
      }
    }
  }
  if (rangeWriter != null) {
    rangeWriter.closeAndOpenReader(DatabaseDescriptor.getKeysCachedFraction(table_));
    if (fileList != null) {
      fileList.add(rangeWriter.indexFilename());
      fileList.add(rangeWriter.filterFilename());
      fileList.add(rangeWriter.getFilename());
    }
    result=true;
  }
  if (logger_.isDebugEnabled()) {
    logger_.debug("Total time taken for range split   ..." + (System.currentTimeMillis() - startTime));
    logger_.debug("Total bytes Read for range split  ..." + totalBytesRead);
    logger_.debug("Total bytes written for range split  ..." + totalBytesWritten + "   Total keys read ..."+ totalkeysRead);
  }
  return result;
}
