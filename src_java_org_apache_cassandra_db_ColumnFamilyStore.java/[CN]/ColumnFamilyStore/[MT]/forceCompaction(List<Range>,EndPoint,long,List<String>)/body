{
  Future<Boolean> futurePtr=null;
  if (ranges != null) {
    futurePtr=MinorCompactionManager.instance().submit(ColumnFamilyStore.this,ranges,target,fileList);
  }
 else {
    MinorCompactionManager.instance().submitMajor(ColumnFamilyStore.this,skip);
  }
  boolean result=true;
  try {
    if (futurePtr != null) {
      result=futurePtr.get();
    }
    if (logger_.isDebugEnabled())     logger_.debug("Done forcing compaction ...");
  }
 catch (  ExecutionException ex) {
    if (logger_.isDebugEnabled())     logger_.debug(LogUtil.throwableToString(ex));
  }
catch (  InterruptedException ex2) {
    if (logger_.isDebugEnabled())     logger_.debug(LogUtil.throwableToString(ex2));
  }
  return result;
}
