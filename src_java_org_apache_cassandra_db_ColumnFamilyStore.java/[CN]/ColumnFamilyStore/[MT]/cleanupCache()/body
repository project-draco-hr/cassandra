{
  Collection<Range<Token>> ranges=StorageService.instance.getLocalRanges(keyspace.getName());
  for (Iterator<RowCacheKey> keyIter=CacheService.instance.rowCache.keyIterator(); keyIter.hasNext(); ) {
    RowCacheKey key=keyIter.next();
    DecoratedKey dk=partitioner.decorateKey(ByteBuffer.wrap(key.key));
    if (key.cfId.equals(metadata.cfId) && !Range.isInRanges(dk.getToken(),ranges))     invalidateCachedPartition(dk);
  }
  if (metadata.isCounter()) {
    for (Iterator<CounterCacheKey> keyIter=CacheService.instance.counterCache.keyIterator(); keyIter.hasNext(); ) {
      CounterCacheKey key=keyIter.next();
      DecoratedKey dk=partitioner.decorateKey(ByteBuffer.wrap(key.partitionKey));
      if (key.cfId.equals(metadata.cfId) && !Range.isInRanges(dk.getToken(),ranges))       CacheService.instance.counterCache.remove(key);
    }
  }
}
