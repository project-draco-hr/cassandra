{
  logger.debug("truncating {}",columnFamily);
  if (DatabaseDescriptor.isAutoSnapshot()) {
    forceBlockingFlush();
  }
 else {
    Table.switchLock.writeLock().lock();
    try {
      for (      ColumnFamilyStore cfs : concatWithIndexes()) {
        Memtable mt=cfs.getMemtableThreadSafe();
        if (!mt.isClean() && !mt.isFrozen()) {
          mt.cfs.data.renewMemtable();
        }
      }
    }
  finally {
      Table.switchLock.writeLock().unlock();
    }
  }
  KSMetaData ksm=Schema.instance.getKSMetaData(this.table.name);
  if (ksm.durableWrites) {
    CommitLog.instance.forceNewSegment();
    ReplayPosition position=CommitLog.instance.getContext();
    for (    ColumnFamilyStore cfs : ColumnFamilyStore.all())     cfs.forceFlush();
    waitForActiveFlushes();
    CommitLog.instance.discardCompletedSegments(metadata.cfId,position);
  }
  try {
    long starttime=System.currentTimeMillis();
    while ((System.currentTimeMillis() - starttime) < 1) {
      Thread.sleep(1);
    }
  }
 catch (  InterruptedException e) {
    throw new AssertionError(e);
  }
  long truncatedAt=System.currentTimeMillis();
  if (DatabaseDescriptor.isAutoSnapshot())   snapshot(Table.getTimestampedSnapshotName(columnFamily));
  return CompactionManager.instance.submitTruncate(this,truncatedAt);
}
