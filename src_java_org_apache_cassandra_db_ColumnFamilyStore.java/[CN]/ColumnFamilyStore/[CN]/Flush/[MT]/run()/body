{
  writeBarrier.markBlocking();
  writeBarrier.await();
  Iterator<Memtable> iter=memtables.iterator();
  while (iter.hasNext()) {
    Memtable memtable=iter.next();
    memtable.cfs.data.markFlushing(memtable);
    if (memtable.isClean() || truncate) {
      memtable.cfs.data.replaceFlushed(memtable,Collections.emptyList());
      memtable.cfs.compactionStrategyManager.replaceFlushed(memtable,Collections.emptyList());
      reclaim(memtable);
      iter.remove();
    }
  }
  metric.memtableSwitchCount.inc();
  try {
    for (    Memtable memtable : memtables) {
      Collection<SSTableReader> readers=memtable.flush();
      memtable.cfs.data.replaceFlushed(memtable,readers);
      reclaim(memtable);
      this.readers.add(readers);
    }
  }
 catch (  FSWriteError e) {
    JVMStabilityInspector.inspectThrowable(e);
    postFlush.flushFailure=e;
  }
  postFlush.latch.countDown();
}
