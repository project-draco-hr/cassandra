{
  table_=table;
  columnFamily_=columnFamilyName;
  isSuper_=isSuper;
  fileIndexGenerator_.set(indexValue);
  memtable_=new Memtable(this);
  binaryMemtable_=new AtomicReference<BinaryMemtable>(new BinaryMemtable(this));
  if (logger_.isDebugEnabled())   logger_.debug("Starting CFS {}",columnFamily_);
  List<File> sstableFiles=new ArrayList<File>();
  Pattern auxFilePattern=Pattern.compile("(.*)(-Filter\\.db$|-Index\\.db$)");
  for (  File file : files()) {
    String filename=file.getName();
    Matcher matcher=auxFilePattern.matcher(file.getAbsolutePath());
    if (matcher.matches()) {
      String basePath=matcher.group(1);
      if (!new File(basePath + "-Data.db").exists()) {
        logger_.info(String.format("Removing orphan %s",file.getAbsolutePath()));
        try {
          FileUtils.deleteWithConfirm(file);
        }
 catch (        IOException e) {
          throw new IOError(e);
        }
        continue;
      }
    }
    if (((file.length() == 0 && !filename.endsWith("-Compacted")) || (filename.contains("-" + SSTable.TEMPFILE_MARKER)))) {
      try {
        FileUtils.deleteWithConfirm(file);
      }
 catch (      IOException e) {
        throw new IOError(e);
      }
      continue;
    }
    if (filename.contains("-Data.db")) {
      sstableFiles.add(file.getAbsoluteFile());
    }
  }
  Collections.sort(sstableFiles,new FileUtils.FileComparator());
  List<SSTableReader> sstables=new ArrayList<SSTableReader>();
  for (  File file : sstableFiles) {
    String filename=file.getAbsolutePath();
    if (SSTable.deleteIfCompacted(filename))     continue;
    SSTableReader sstable;
    try {
      sstable=SSTableReader.open(filename);
    }
 catch (    IOException ex) {
      logger_.error("Corrupt file " + filename + "; skipped",ex);
      continue;
    }
    sstables.add(sstable);
  }
  ssTables_=new SSTableTracker(table,columnFamilyName);
  ssTables_.add(sstables);
}
