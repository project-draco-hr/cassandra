{
  try {
    byte[] sessionBytes=qm.message.parameters.get(Tracing.TRACE_HEADER);
    if (sessionBytes != null) {
      UUID sessionId=UUIDGen.getUUID(ByteBuffer.wrap(sessionBytes));
      TraceState state=Tracing.instance.get(sessionId);
      String message=String.format("Sending %s message to %s",qm.message.verb,poolReference.endPoint());
      if (state == null) {
        byte[] traceTypeBytes=qm.message.parameters.get(Tracing.TRACE_TYPE);
        Tracing.TraceType traceType=traceTypeBytes == null ? Tracing.TraceType.QUERY : Tracing.TraceType.deserialize(traceTypeBytes[0]);
        Tracing.instance.trace(ByteBuffer.wrap(sessionBytes),message,traceType.getTTL());
      }
 else {
        state.trace(message);
        if (qm.message.verb == MessagingService.Verb.REQUEST_RESPONSE)         Tracing.instance.doneWithNonLocalSession(state);
      }
    }
    long timestampMillis=NanoTimeToCurrentTimeMillis.convert(qm.timestampNanos);
    writeInternal(qm.message,qm.id,timestampMillis);
    completed++;
    if (flush)     out.flush();
  }
 catch (  Throwable e) {
    JVMStabilityInspector.inspectThrowable(e);
    disconnect();
    if (e instanceof IOException || e.getCause() instanceof IOException) {
      logger.debug("Error writing to {}",poolReference.endPoint(),e);
      if (qm.shouldRetry()) {
        try {
          backlog.put(new RetriedQueuedMessage(qm));
        }
 catch (        InterruptedException e1) {
          throw new AssertionError(e1);
        }
      }
    }
 else {
      logger.error("error writing to {}",poolReference.endPoint(),e);
    }
  }
}
