{
  try {
    byte[] sessionBytes=qm.message.parameters.get(Tracing.TRACE_HEADER);
    if (sessionBytes != null) {
      UUID sessionId=UUIDGen.getUUID(ByteBuffer.wrap(sessionBytes));
      TraceState state=Tracing.instance().get(sessionId);
      state.trace("Sending message to {}",poolReference.endPoint());
      Tracing.instance().stopIfNonLocal(state);
    }
    write(qm.message,qm.id,qm.timestamp,out,targetVersion);
    completed++;
    if (active.peek() == null) {
      out.flush();
    }
  }
 catch (  Exception e) {
    disconnect();
    if (e instanceof IOException) {
      if (logger.isDebugEnabled())       logger.debug("error writing to " + poolReference.endPoint(),e);
      if (e instanceof SocketException && qm.shouldRetry()) {
        try {
          backlog.put(new RetriedQueuedMessage(qm));
        }
 catch (        InterruptedException e1) {
          throw new AssertionError(e1);
        }
      }
    }
 else {
      logger.error("error writing to " + poolReference.endPoint(),e);
    }
  }
}
