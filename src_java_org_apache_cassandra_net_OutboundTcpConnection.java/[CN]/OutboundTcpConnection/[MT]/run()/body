{
  final int drainedMessageSize=128;
  final List<QueuedMessage> drainedMessages=new ArrayList<>(drainedMessageSize);
  outer:   while (true) {
    try {
      cs.coalesce(backlog,drainedMessages,drainedMessageSize);
    }
 catch (    InterruptedException e) {
      throw new AssertionError(e);
    }
    currentMsgBufferCount=drainedMessages.size();
    int count=drainedMessages.size();
    for (    QueuedMessage qm : drainedMessages) {
      try {
        MessageOut<?> m=qm.message;
        if (m == CLOSE_SENTINEL) {
          disconnect();
          if (isStopped)           break outer;
          continue;
        }
        if (qm.isTimedOut())         dropped.incrementAndGet();
 else         if (socket != null || connect())         writeConnected(qm,count == 1 && backlog.isEmpty());
 else         backlog.clear();
      }
 catch (      Exception e) {
        JVMStabilityInspector.inspectThrowable(e);
        logger.error("error processing a message intended for {}",poolReference.endPoint(),e);
      }
      currentMsgBufferCount=--count;
    }
    drainedMessages.clear();
  }
}
