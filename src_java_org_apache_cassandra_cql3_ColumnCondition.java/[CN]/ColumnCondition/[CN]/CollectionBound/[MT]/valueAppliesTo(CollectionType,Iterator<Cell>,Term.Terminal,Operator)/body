{
  if (value == null)   return !iter.hasNext();
switch (type.kind) {
case LIST:
    return listAppliesTo((ListType)type,iter,((Lists.Value)value).elements,operator);
case SET:
  return setAppliesTo((SetType)type,iter,((Sets.Value)value).elements,operator);
case MAP:
return mapAppliesTo((MapType)type,iter,((Maps.Value)value).map,operator);
}
throw new AssertionError();
}
