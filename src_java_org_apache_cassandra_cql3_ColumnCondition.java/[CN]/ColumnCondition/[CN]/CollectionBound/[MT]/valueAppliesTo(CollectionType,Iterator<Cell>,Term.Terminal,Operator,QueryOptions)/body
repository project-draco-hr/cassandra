{
  if (value == null)   return !iter.hasNext();
switch (type.kind) {
case LIST:
    List<ByteBuffer> valueList=((Lists.Value)value).elements;
  return listAppliesTo((ListType)type,iter,valueList,operator);
case SET:
Set<ByteBuffer> valueSet=((Sets.Value)value).elements;
return setAppliesTo((SetType)type,iter,valueSet,operator);
case MAP:
Map<ByteBuffer,ByteBuffer> valueMap=((Maps.Value)value).map;
return mapAppliesTo((MapType)type,iter,valueMap,operator);
}
throw new AssertionError();
}
