{
  Runnable runnable=new WrappedRunnable(){
    public void runMayThrow() throws Exception {
      while (run) {
        try {
          Runnable task=segmentManagementTasks.poll();
          if (task == null) {
            if (availableSegments.isEmpty() && (activeSegments.isEmpty() || createReserveSegments)) {
              logger.trace("No segments in reserve; creating a fresh one");
              availableSegments.add(CommitLogSegment.createSegment(commitLog));
              hasAvailableSegments.signalAll();
            }
            long unused=unusedCapacity();
            if (unused < 0) {
              List<CommitLogSegment> segmentsToRecycle=new ArrayList<>();
              long spaceToReclaim=0;
              for (              CommitLogSegment segment : activeSegments) {
                if (segment == allocatingFrom)                 break;
                segmentsToRecycle.add(segment);
                spaceToReclaim+=DatabaseDescriptor.getCommitLogSegmentSize();
                if (spaceToReclaim + unused >= 0)                 break;
              }
              flushDataFrom(segmentsToRecycle,false);
            }
            try {
              task=segmentManagementTasks.take();
            }
 catch (            InterruptedException e) {
              throw new AssertionError();
            }
          }
          task.run();
        }
 catch (        Throwable t) {
          JVMStabilityInspector.inspectThrowable(t);
          if (!CommitLog.handleCommitError("Failed managing commit log segments",t))           return;
          Uninterruptibles.sleepUninterruptibly(1,TimeUnit.SECONDS);
        }
      }
    }
  }
;
  run=true;
  managerThread=new Thread(runnable,"COMMIT-LOG-ALLOCATOR");
  managerThread.start();
}
