{
  Iterator<InetAddress> hostiter=hosts.iterator();
  while (hostiter.hasNext()) {
    try {
      InetAddress host=hostiter.next();
      Cassandra.Client client=createThriftClient(host.getHostAddress(),rpcPort,this.user,this.passwd,this.transportFactory);
      setPartitioner(client.describe_partitioner());
      Token.TokenFactory tkFactory=getPartitioner().getTokenFactory();
      for (      TokenRange tr : client.describe_ring(keyspace)) {
        Range<Token> range=new Range<>(tkFactory.fromString(tr.start_token),tkFactory.fromString(tr.end_token),getPartitioner());
        for (        String ep : tr.endpoints) {
          addRangeForEndpoint(range,InetAddress.getByName(ep));
        }
      }
      String cfQuery=String.format("SELECT * FROM %s.%s WHERE keyspace_name = '%s'",Keyspace.SYSTEM_KS,SystemKeyspace.SCHEMA_COLUMNFAMILIES_CF,keyspace);
      CqlResult cfRes=client.execute_cql3_query(ByteBufferUtil.bytes(cfQuery),Compression.NONE,ConsistencyLevel.ONE);
      for (      CqlRow row : cfRes.rows) {
        String columnFamily=UTF8Type.instance.getString(row.columns.get(1).bufferForName());
        String columnsQuery=String.format("SELECT * FROM %s.%s WHERE keyspace_name = '%s' AND columnfamily_name = '%s'",Keyspace.SYSTEM_KS,SystemKeyspace.SCHEMA_COLUMNS_CF,keyspace,columnFamily);
        CqlResult columnsRes=client.execute_cql3_query(ByteBufferUtil.bytes(columnsQuery),Compression.NONE,ConsistencyLevel.ONE);
        CFMetaData metadata=CFMetaData.fromThriftCqlRow(row,columnsRes);
        knownCfs.put(metadata.cfName,metadata);
      }
      break;
    }
 catch (    Exception e) {
      if (!hostiter.hasNext())       throw new RuntimeException("Could not retrieve endpoint ranges: ",e);
    }
  }
}
