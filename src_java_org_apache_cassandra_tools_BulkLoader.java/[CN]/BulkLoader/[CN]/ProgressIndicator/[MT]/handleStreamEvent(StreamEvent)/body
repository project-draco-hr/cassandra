{
  if (event.eventType == StreamEvent.Type.FILE_PROGRESS) {
    ProgressInfo progressInfo=((StreamEvent.ProgressEvent)event).progress;
    if (progresses.contains(progressInfo))     progresses.remove(progressInfo);
    progresses.add(progressInfo);
    StringBuilder sb=new StringBuilder();
    sb.append("\rprogress: ");
    long totalProgress=0;
    long totalSize=0;
    long completed=0;
    for (    ProgressInfo entry : progresses) {
      if (entry.currentBytes == entry.totalBytes)       completed++;
      totalProgress+=entry.currentBytes;
      totalSize+=entry.totalBytes;
      sb.append("[").append(entry.peer);
      sb.append(" ").append(completed).append("/").append(progresses.size());
      sb.append(" (").append(entry.totalBytes == 0 ? 100L : entry.currentBytes * 100L / entry.totalBytes).append(")] ");
    }
    long time=System.nanoTime();
    long deltaTime=TimeUnit.NANOSECONDS.toMillis(time - lastTime);
    lastTime=time;
    long deltaProgress=totalProgress - lastProgress;
    lastProgress=totalProgress;
    sb.append("[total: ").append(totalSize == 0 ? 100L : totalProgress * 100L / totalSize).append(" - ");
    sb.append(mbPerSec(deltaProgress,deltaTime)).append("MB/s");
    sb.append(" (avg: ").append(mbPerSec(totalProgress,TimeUnit.NANOSECONDS.toMillis(time - start))).append("MB/s)]");
    handler.output(sb.toString());
  }
}
