{
  if (event.eventType == StreamEvent.Type.STREAM_PREPARED) {
    SessionInfo session=((StreamEvent.SessionPreparedEvent)event).session;
    sessionsByHost.put(session.peer,session);
  }
 else   if (event.eventType == StreamEvent.Type.FILE_PROGRESS || event.eventType == StreamEvent.Type.STREAM_COMPLETE) {
    ProgressInfo progressInfo=null;
    if (event.eventType == StreamEvent.Type.FILE_PROGRESS) {
      progressInfo=((StreamEvent.ProgressEvent)event).progress;
    }
    long time=System.nanoTime();
    long deltaTime=time - lastTime;
    StringBuilder sb=new StringBuilder();
    sb.append("\rprogress: ");
    long totalProgress=0;
    long totalSize=0;
    boolean updateTotalFiles=totalFiles == 0;
    for (    InetAddress peer : sessionsByHost.keySet()) {
      sb.append("[").append(peer).append("]");
      for (      SessionInfo session : sessionsByHost.get(peer)) {
        long size=session.getTotalSizeToSend();
        long current=0;
        int completed=0;
        if (progressInfo != null && session.peer.equals(progressInfo.peer) && session.sessionIndex == progressInfo.sessionIndex) {
          session.updateProgress(progressInfo);
        }
        for (        ProgressInfo progress : session.getSendingFiles()) {
          if (progress.isCompleted()) {
            completed++;
          }
          current+=progress.currentBytes;
        }
        totalProgress+=current;
        totalSize+=size;
        sb.append(session.sessionIndex).append(":");
        sb.append(completed).append("/").append(session.getTotalFilesToSend());
        sb.append(" ").append(String.format("%-3d",size == 0 ? 100L : current * 100L / size)).append("% ");
        if (updateTotalFiles) {
          totalFiles+=session.getTotalFilesToSend();
        }
      }
    }
    lastTime=time;
    long deltaProgress=totalProgress - lastProgress;
    lastProgress=totalProgress;
    sb.append("total: ").append(totalSize == 0 ? 100L : totalProgress * 100L / totalSize).append("% ");
    sb.append(FBUtilities.prettyPrintMemoryPerSecond(deltaProgress,deltaTime));
    long average=bytesPerSecond(totalProgress,time - start);
    if (average > peak) {
      peak=average;
    }
    sb.append(" (avg: ").append(FBUtilities.prettyPrintMemoryPerSecond(totalProgress,time - start)).append(")");
    System.out.println(sb.toString());
  }
}
