{
  boolean done=true;
  StringBuilder sb=new StringBuilder();
  sb.append("\rprogress: ");
  long totalProgress=0;
  long totalSize=0;
  for (  Map.Entry<InetAddress,Collection<PendingFile>> entry : filesByHost.entrySet()) {
    long progress=0;
    long size=0;
    int completed=0;
    Collection<PendingFile> pendings=entry.getValue();
    for (    PendingFile f : pendings) {
      progress+=f.progress;
      size+=f.size;
      if (f.progress == f.size)       completed++;
    }
    totalProgress+=progress;
    totalSize+=size;
    if (completed != pendings.size())     done=false;
    sb.append("[").append(entry.getKey());
    sb.append(" ").append(completed).append("/").append(pendings.size());
    sb.append(" (").append(size == 0 ? 100L : progress * 100L / size).append(")] ");
  }
  long time=System.currentTimeMillis();
  long deltaTime=time - lastTime;
  lastTime=time;
  long deltaProgress=totalProgress - lastProgress;
  lastProgress=totalProgress;
  sb.append("[total: ").append(totalSize == 0 ? 100L : totalProgress * 100L / totalSize).append(" - ");
  sb.append(mbPerSec(deltaProgress,deltaTime)).append("MB/s");
  sb.append(" (avg: ").append(mbPerSec(totalProgress,time - startTime)).append("MB/s)]");
  ;
  System.out.print(sb.toString());
  return done;
}
