{
  if (discardingTooLongFrame) {
    bytesToDiscard=discard(buffer,bytesToDiscard);
    if (bytesToDiscard <= 0)     fail();
    return;
  }
  int readableBytes=buffer.readableBytes();
  if (readableBytes == 0)   return;
  int idx=buffer.readerIndex();
  int firstByte=buffer.getByte(idx++);
  Message.Direction direction=Message.Direction.extractFromVersion(firstByte);
  int version=firstByte & PROTOCOL_VERSION_MASK;
  if (version < Server.MIN_SUPPORTED_VERSION || version > Server.CURRENT_VERSION)   throw new ProtocolException(String.format("Invalid or unsupported protocol version (%d); the lowest supported version is %d and the greatest is %d",version,Server.MIN_SUPPORTED_VERSION,Server.CURRENT_VERSION),version);
  if (readableBytes < Header.LENGTH)   return;
  int flags=buffer.getByte(idx++);
  int streamId=buffer.getShort(idx);
  idx+=2;
  Message.Type type;
  try {
    type=Message.Type.fromOpcode(buffer.getByte(idx++),direction);
  }
 catch (  ProtocolException e) {
    throw ErrorMessage.wrap(e,streamId);
  }
  long bodyLength=buffer.getUnsignedInt(idx);
  idx+=Header.BODY_LENGTH_SIZE;
  long frameLength=bodyLength + Header.LENGTH;
  if (frameLength > MAX_FRAME_LENGTH) {
    discardingTooLongFrame=true;
    tooLongStreamId=streamId;
    tooLongFrameLength=frameLength;
    bytesToDiscard=discard(buffer,frameLength);
    if (bytesToDiscard <= 0)     fail();
    return;
  }
  if (buffer.readableBytes() < frameLength)   return;
  ByteBuf body=buffer.slice(idx,(int)bodyLength);
  body.retain();
  idx+=bodyLength;
  buffer.readerIndex(idx);
  Attribute<Connection> attrConn=ctx.channel().attr(Connection.attributeKey);
  Connection connection=attrConn.get();
  if (connection == null) {
    connection=factory.newConnection(ctx.channel(),version);
    attrConn.set(connection);
  }
 else   if (connection.getVersion() != version) {
    throw ErrorMessage.wrap(new ProtocolException(String.format("Invalid message version. Got %d but previous messages on this connection had version %d",version,connection.getVersion())),streamId);
  }
  results.add(new Frame(new Header(version,flags,streamId,type),body));
}
