{
  if (discardingTooLongFrame) {
    bytesToDiscard=discard(buffer,bytesToDiscard);
    if (bytesToDiscard <= 0)     fail();
    return null;
  }
  if (buffer.readableBytes() < Header.LENGTH)   return null;
  int idx=buffer.readerIndex();
  int firstByte=buffer.getByte(idx);
  Message.Direction direction=Message.Direction.extractFromVersion(firstByte);
  int version=firstByte & 0x7F;
  if (version > Server.CURRENT_VERSION)   throw new ProtocolException("Invalid or unsupported protocol version: " + version);
  int flags=buffer.getByte(idx + 1);
  int streamId=buffer.getByte(idx + 2);
  Message.Type type;
  try {
    type=Message.Type.fromOpcode(buffer.getByte(idx + 3),direction);
  }
 catch (  ProtocolException e) {
    throw ErrorMessage.wrap(e,streamId);
  }
  long bodyLength=buffer.getUnsignedInt(idx + Header.BODY_LENGTH_OFFSET);
  if (bodyLength < 0) {
    buffer.skipBytes(Header.LENGTH);
    throw ErrorMessage.wrap(new ProtocolException("Invalid frame body length: " + bodyLength),streamId);
  }
  long frameLength=bodyLength + Header.LENGTH;
  if (frameLength > MAX_FRAME_LENGTH) {
    discardingTooLongFrame=true;
    tooLongStreamId=streamId;
    tooLongFrameLength=frameLength;
    bytesToDiscard=discard(buffer,frameLength);
    if (bytesToDiscard <= 0)     fail();
    return null;
  }
  int frameLengthInt=(int)frameLength;
  if (buffer.readableBytes() < frameLengthInt)   return null;
  ChannelBuffer body=extractFrame(buffer,idx + Header.LENGTH,(int)bodyLength);
  buffer.readerIndex(idx + frameLengthInt);
  Connection connection=(Connection)channel.getAttachment();
  if (connection == null) {
    connection=factory.newConnection(channel,version);
    channel.setAttachment(connection);
  }
 else   if (connection.getVersion() != version) {
    throw ErrorMessage.wrap(new ProtocolException(String.format("Invalid message version. Got %d but previous messages on this connection had version %d",version,connection.getVersion())),streamId);
  }
  return new Frame(new Header(version,flags,streamId,type),body);
}
