{
  int globalCount=0;
  int localCount=0;
  int remoteCount=0;
  ContextState leftState=ContextState.wrap(left);
  ContextState rightState=ContextState.wrap(right);
  while (leftState.hasRemaining() && rightState.hasRemaining()) {
    int cmp=leftState.compareIdTo(rightState);
    if (cmp == 0) {
      if (leftState.isGlobal() || rightState.isGlobal())       globalCount+=1;
 else       if (leftState.isLocal() || rightState.isLocal())       localCount+=1;
 else       remoteCount+=1;
      leftState.moveToNext();
      rightState.moveToNext();
    }
 else     if (cmp > 0) {
      if (rightState.isGlobal())       globalCount+=1;
 else       if (rightState.isLocal())       localCount+=1;
 else       remoteCount+=1;
      rightState.moveToNext();
    }
 else {
      if (leftState.isGlobal())       globalCount+=1;
 else       if (leftState.isLocal())       localCount+=1;
 else       remoteCount+=1;
      leftState.moveToNext();
    }
  }
  while (leftState.hasRemaining()) {
    if (leftState.isGlobal())     globalCount+=1;
 else     if (leftState.isLocal())     localCount+=1;
 else     remoteCount+=1;
    leftState.moveToNext();
  }
  while (rightState.hasRemaining()) {
    if (rightState.isGlobal())     globalCount+=1;
 else     if (rightState.isLocal())     localCount+=1;
 else     remoteCount+=1;
    rightState.moveToNext();
  }
  leftState.reset();
  rightState.reset();
  return merge(ContextState.allocate(globalCount,localCount,remoteCount,allocator),leftState,rightState);
}
