{
  if (leftState.isGlobal() || rightState.isGlobal()) {
    if (leftState.isGlobal() && rightState.isGlobal()) {
      long leftClock=leftState.getClock();
      long rightClock=rightState.getClock();
      if (leftClock == rightClock) {
        long leftCount=leftState.getCount();
        long rightCount=rightState.getCount();
        if (leftCount != rightCount && CompactionManager.isCompactionManager.get()) {
          logger.warn("invalid global counter shard detected; ({}, {}, {}) and ({}, {}, {}) differ only in " + "count; will pick highest to self-heal on compaction",leftState.getCounterId(),leftClock,leftCount,rightState.getCounterId(),rightClock,rightCount);
        }
        if (leftCount > rightCount)         leftState.copyTo(mergedState);
 else         rightState.copyTo(mergedState);
      }
 else {
        (leftClock > rightClock ? leftState : rightState).copyTo(mergedState);
      }
    }
 else {
      (leftState.isGlobal() ? leftState : rightState).copyTo(mergedState);
    }
  }
 else   if (leftState.isLocal() || rightState.isLocal()) {
    if (leftState.isLocal() && rightState.isLocal()) {
      long clock=leftState.getClock() + rightState.getClock();
      long count=leftState.getCount() + rightState.getCount();
      mergedState.writeLocal(leftState.getCounterId(),clock,count);
    }
 else {
      (leftState.isLocal() ? leftState : rightState).copyTo(mergedState);
    }
  }
 else {
    long leftClock=leftState.getClock();
    long rightClock=rightState.getClock();
    if (leftClock == rightClock) {
      long leftCount=leftState.getCount();
      long rightCount=rightState.getCount();
      if (leftCount != rightCount && CompactionManager.isCompactionManager.get()) {
        logger.warn("invalid remote counter shard detected; ({}, {}, {}) and ({}, {}, {}) differ only in " + "count; will pick highest to self-heal on compaction",leftState.getCounterId(),leftClock,leftCount,rightState.getCounterId(),rightClock,rightCount);
      }
      if (leftCount > rightCount)       leftState.copyTo(mergedState);
 else       rightState.copyTo(mergedState);
    }
 else {
      if ((leftClock >= 0 && rightClock > 0 && leftClock >= rightClock) || (leftClock < 0 && (rightClock > 0 || leftClock < rightClock)))       leftState.copyTo(mergedState);
 else       rightState.copyTo(mergedState);
    }
  }
}
