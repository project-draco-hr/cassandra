{
  long leftClock=leftState.getClock();
  long leftCount=leftState.getCount();
  long rightClock=rightState.getClock();
  long rightCount=rightState.getCount();
  if (leftState.isGlobal() || rightState.isGlobal()) {
    if (leftState.isGlobal() && rightState.isGlobal()) {
      if (leftClock == rightClock) {
        if (leftCount != rightCount && CompactionManager.isCompactionManager.get()) {
          logger.warn("invalid global counter shard detected; ({}, {}, {}) and ({}, {}, {}) differ only in " + "count; will pick highest to self-heal on compaction",leftState.getCounterId(),leftClock,leftCount,rightState.getCounterId(),rightClock,rightCount);
        }
        if (leftCount > rightCount)         return Relationship.GREATER_THAN;
 else         if (leftCount == rightCount)         return Relationship.EQUAL;
 else         return Relationship.LESS_THAN;
      }
 else {
        return leftClock > rightClock ? Relationship.GREATER_THAN : Relationship.LESS_THAN;
      }
    }
 else {
      return leftState.isGlobal() ? Relationship.GREATER_THAN : Relationship.LESS_THAN;
    }
  }
  if (leftState.isLocal() || rightState.isLocal()) {
    if (leftState.isLocal() && rightState.isLocal())     return Relationship.DISJOINT;
 else     return leftState.isLocal() ? Relationship.GREATER_THAN : Relationship.LESS_THAN;
  }
  if (leftClock == rightClock) {
    if (leftCount != rightCount && CompactionManager.isCompactionManager.get()) {
      logger.warn("invalid remote counter shard detected; ({}, {}, {}) and ({}, {}, {}) differ only in " + "count; will pick highest to self-heal on compaction",leftState.getCounterId(),leftClock,leftCount,rightState.getCounterId(),rightClock,rightCount);
    }
    if (leftCount > rightCount)     return Relationship.GREATER_THAN;
 else     if (leftCount == rightCount)     return Relationship.EQUAL;
 else     return Relationship.LESS_THAN;
  }
 else {
    if ((leftClock >= 0 && rightClock > 0 && leftClock >= rightClock) || (leftClock < 0 && (rightClock > 0 || leftClock < rightClock)))     return Relationship.GREATER_THAN;
 else     return Relationship.LESS_THAN;
  }
}
