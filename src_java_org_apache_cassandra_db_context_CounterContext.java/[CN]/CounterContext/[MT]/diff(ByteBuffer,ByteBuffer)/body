{
  ContextRelationship relationship=ContextRelationship.EQUAL;
  int leftIndex=left.position();
  int rightIndex=right.position();
  while (leftIndex < left.remaining() && rightIndex < right.remaining()) {
    int compareId=ByteBufferUtil.compareSubArrays(left,leftIndex,right,rightIndex,idLength);
    if (compareId == 0) {
      long leftClock=left.getLong(leftIndex + idLength);
      long rightClock=right.getLong(rightIndex + idLength);
      leftIndex+=stepLength;
      rightIndex+=stepLength;
      if (leftClock == rightClock) {
        continue;
      }
 else       if (leftClock > rightClock) {
        if (relationship == ContextRelationship.EQUAL) {
          relationship=ContextRelationship.GREATER_THAN;
        }
 else         if (relationship == ContextRelationship.GREATER_THAN) {
          continue;
        }
 else {
          return ContextRelationship.DISJOINT;
        }
      }
 else {
        if (relationship == ContextRelationship.EQUAL) {
          relationship=ContextRelationship.LESS_THAN;
        }
 else         if (relationship == ContextRelationship.GREATER_THAN) {
          return ContextRelationship.DISJOINT;
        }
 else {
          continue;
        }
      }
    }
 else     if (compareId > 0) {
      rightIndex+=stepLength;
      if (relationship == ContextRelationship.EQUAL) {
        relationship=ContextRelationship.LESS_THAN;
      }
 else       if (relationship == ContextRelationship.GREATER_THAN) {
        return ContextRelationship.DISJOINT;
      }
 else {
        continue;
      }
    }
 else {
      leftIndex+=stepLength;
      if (relationship == ContextRelationship.EQUAL) {
        relationship=ContextRelationship.GREATER_THAN;
      }
 else       if (relationship == ContextRelationship.GREATER_THAN) {
        continue;
      }
 else {
        return ContextRelationship.DISJOINT;
      }
    }
  }
  if (leftIndex < left.remaining()) {
    if (relationship == ContextRelationship.EQUAL) {
      return ContextRelationship.GREATER_THAN;
    }
 else     if (relationship == ContextRelationship.LESS_THAN) {
      return ContextRelationship.DISJOINT;
    }
  }
 else   if (rightIndex < right.remaining()) {
    if (relationship == ContextRelationship.EQUAL) {
      return ContextRelationship.LESS_THAN;
    }
 else     if (relationship == ContextRelationship.GREATER_THAN) {
      return ContextRelationship.DISJOINT;
    }
  }
  return relationship;
}
