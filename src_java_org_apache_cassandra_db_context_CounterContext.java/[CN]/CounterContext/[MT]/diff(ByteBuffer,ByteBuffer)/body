{
  Relationship relationship=Relationship.EQUAL;
  ContextState leftState=ContextState.wrap(left);
  ContextState rightState=ContextState.wrap(right);
  while (leftState.hasRemaining() && rightState.hasRemaining()) {
    int compareId=leftState.compareIdTo(rightState);
    if (compareId == 0) {
      long leftClock=leftState.getClock();
      long rightClock=rightState.getClock();
      long leftCount=leftState.getCount();
      long rightCount=rightState.getCount();
      leftState.moveToNext();
      rightState.moveToNext();
      if (leftClock == rightClock) {
        if (leftCount != rightCount) {
          return Relationship.DISJOINT;
        }
      }
 else       if ((leftClock >= 0 && rightClock > 0 && leftClock > rightClock) || (leftClock < 0 && (rightClock > 0 || leftClock < rightClock))) {
        if (relationship == Relationship.EQUAL)         relationship=Relationship.GREATER_THAN;
 else         if (relationship == Relationship.LESS_THAN)         return Relationship.DISJOINT;
      }
 else {
        if (relationship == Relationship.EQUAL)         relationship=Relationship.LESS_THAN;
 else         if (relationship == Relationship.GREATER_THAN)         return Relationship.DISJOINT;
      }
    }
 else     if (compareId > 0) {
      rightState.moveToNext();
      if (relationship == Relationship.EQUAL)       relationship=Relationship.LESS_THAN;
 else       if (relationship == Relationship.GREATER_THAN)       return Relationship.DISJOINT;
    }
 else {
      leftState.moveToNext();
      if (relationship == Relationship.EQUAL)       relationship=Relationship.GREATER_THAN;
 else       if (relationship == Relationship.LESS_THAN)       return Relationship.DISJOINT;
    }
  }
  if (leftState.hasRemaining()) {
    if (relationship == Relationship.EQUAL)     return Relationship.GREATER_THAN;
 else     if (relationship == Relationship.LESS_THAN)     return Relationship.DISJOINT;
  }
  if (rightState.hasRemaining()) {
    if (relationship == Relationship.EQUAL)     return Relationship.LESS_THAN;
 else     if (relationship == Relationship.GREATER_THAN)     return Relationship.DISJOINT;
  }
  return relationship;
}
