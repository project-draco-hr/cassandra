{
  boolean reversed=filter.reversed;
  if (filter.slices.length == 1) {
    ByteBuffer start=filter.slices[0].start;
    ByteBuffer finish=filter.slices[0].start;
    if (filter.compositesToGroup == 1) {
      if (start.remaining() == 0) {
        if (finish.remaining() == 0)         return new SCFilter(null,new SliceQueryFilter(filter.start(),filter.finish(),reversed,filter.count));
        if (subName(finish) == null && ((!reversed && !firstEndOfComponent(finish)) || (reversed && firstEndOfComponent(finish))))         return new SCFilter(null,new SliceQueryFilter(ByteBufferUtil.EMPTY_BYTE_BUFFER,scName(finish),reversed,filter.count));
      }
 else       if (finish.remaining() == 0) {
        if (subName(start) == null && ((!reversed && firstEndOfComponent(start)) || (reversed && !firstEndOfComponent(start))))         return new SCFilter(null,new SliceQueryFilter(scName(start),ByteBufferUtil.EMPTY_BYTE_BUFFER,reversed,filter.count));
      }
 else       if (subName(start) == null && subName(finish) == null && ((reversed && !firstEndOfComponent(start) && firstEndOfComponent(finish)) || (!reversed && firstEndOfComponent(start) && !firstEndOfComponent(finish)))) {
        return new SCFilter(null,new SliceQueryFilter(scName(start),scName(finish),reversed,filter.count));
      }
    }
 else     if (filter.compositesToGroup == 0 && type.types.get(0).compare(scName(start),scName(finish)) == 0) {
      return new SCFilter(scName(start),filter.withUpdatedSlice(subName(start),subName(finish)));
    }
  }
 else   if (!reversed) {
    SortedSet<ByteBuffer> columns=new TreeSet<ByteBuffer>(type.types.get(0));
    for (int i=0; i < filter.slices.length; ++i) {
      ByteBuffer start=filter.slices[i].start;
      ByteBuffer finish=filter.slices[i].finish;
      if (subName(start) != null || subName(finish) != null || type.types.get(0).compare(scName(start),scName(finish)) != 0 || firstEndOfComponent(start) || !firstEndOfComponent(finish))       throw new RuntimeException("Cannot convert filter to old super column format. Update all nodes to Cassandra 2.0 first.");
      columns.add(scName(start));
    }
    return new SCFilter(null,new NamesQueryFilter(columns));
  }
  throw new RuntimeException("Cannot convert filter to old super column format. Update all nodes to Cassandra 2.0 first.");
}
