{
  InetAddress from=CompactEndpointSerializationHelper.deserialize(in);
  MessagingService.Verb verb=MessagingService.verbValues[in.readInt()];
  int parameterCount=in.readInt();
  Map<String,byte[]> parameters;
  if (parameterCount == 0) {
    parameters=Collections.emptyMap();
  }
 else {
    ImmutableMap.Builder<String,byte[]> builder=ImmutableMap.builder();
    for (int i=0; i < parameterCount; i++) {
      String key=in.readUTF();
      byte[] value=new byte[in.readInt()];
      in.readFully(value);
      builder.put(key,value);
    }
    parameters=builder.build();
  }
  int payloadSize=in.readInt();
  IVersionedSerializer<T2> serializer=(IVersionedSerializer<T2>)MessagingService.verbSerializers.get(verb);
  if (serializer instanceof MessagingService.CallbackDeterminedSerializer) {
    CallbackInfo callback=MessagingService.instance().getRegisteredCallback(id);
    if (callback == null) {
      in.skipBytesFully(payloadSize);
      return null;
    }
    serializer=(IVersionedSerializer<T2>)callback.serializer;
  }
  if (payloadSize == 0 || serializer == null)   return create(from,null,parameters,verb,version,constructionTime);
  T2 payload=serializer.deserialize(in,version);
  return MessageIn.create(from,payload,parameters,verb,version,constructionTime);
}
