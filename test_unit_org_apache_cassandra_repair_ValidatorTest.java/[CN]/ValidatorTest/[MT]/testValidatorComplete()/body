{
  Range<Token> range=new Range<>(partitioner.getMinimumToken(),partitioner.getRandomToken());
  final RepairJobDesc desc=new RepairJobDesc(UUID.randomUUID(),UUID.randomUUID(),keyspace,columnFamily,Arrays.asList(range));
  final CompletableFuture<MessageOut> outgoingMessageSink=registerOutgoingMessageSink();
  InetAddress remote=InetAddress.getByName("127.0.0.2");
  ColumnFamilyStore cfs=Keyspace.open(keyspace).getColumnFamilyStore(columnFamily);
  Validator validator=new Validator(desc,remote,0);
  MerkleTrees tree=new MerkleTrees(partitioner);
  tree.addMerkleTrees((int)Math.pow(2,15),validator.desc.ranges);
  validator.prepare(cfs,tree);
  assertTrue(tree.size() > 1);
  Token mid=partitioner.midpoint(range.left,range.right);
  validator.add(EmptyIterators.unfilteredRow(cfs.metadata,new BufferDecoratedKey(mid,ByteBufferUtil.bytes("inconceivable!")),false));
  validator.complete();
  Token min=tree.partitioner().getMinimumToken();
  assertNotNull(tree.hash(new Range<>(min,min)));
  MessageOut message=outgoingMessageSink.get(TEST_TIMEOUT,TimeUnit.SECONDS);
  assertEquals(MessagingService.Verb.REPAIR_MESSAGE,message.verb);
  RepairMessage m=(RepairMessage)message.payload;
  assertEquals(RepairMessage.Type.VALIDATION_COMPLETE,m.messageType);
  assertEquals(desc,m.desc);
  assertTrue(((ValidationComplete)m).success());
  assertNotNull(((ValidationComplete)m).trees);
}
