{
  Range<Token> range=new Range<>(partitioner.getMinimumToken(),partitioner.getRandomToken());
  final RepairJobDesc desc=new RepairJobDesc(UUID.randomUUID(),UUID.randomUUID(),keyspace,columnFamily,range);
  final ListenableFuture<MessageOut> outgoingMessageSink=registerOutgoingMessageSink();
  InetAddress remote=InetAddress.getByName("127.0.0.2");
  Validator validator=new Validator(desc,remote,0);
  validator.fail();
  MessageOut message=outgoingMessageSink.get(TEST_TIMEOUT,TimeUnit.SECONDS);
  assertEquals(MessagingService.Verb.REPAIR_MESSAGE,message.verb);
  RepairMessage m=(RepairMessage)message.payload;
  assertEquals(RepairMessage.Type.VALIDATION_COMPLETE,m.messageType);
  assertEquals(desc,m.desc);
  assertFalse(((ValidationComplete)m).success);
  assertNull(((ValidationComplete)m).tree);
}
