{
  ResultSet rs=client.getSession().execute(bind(statementIndex));
  int[] valueIndex=new int[rs.getColumnDefinitions().size()];
{
    int i=0;
    for (    ColumnDefinitions.Definition definition : rs.getColumnDefinitions())     valueIndex[i++]=spec.partitionGenerator.indexOf(definition.getName());
  }
  List<Object[]> prev1=new ArrayList<>();
  List<Object[]> prev2=new ArrayList<>();
  rowCount=0;
  Iterator<com.datastax.driver.core.Row> results=rs.iterator();
  if (!statements[statementIndex].inclusiveStart && iter.hasNext())   iter.next();
  while (iter.hasNext()) {
    Row expectedRow=iter.next();
    if (!statements[statementIndex].inclusiveEnd && !iter.hasNext())     break;
    if (!results.hasNext())     return false;
    rowCount++;
    com.datastax.driver.core.Row actualRow=results.next();
    Object[] vs1=new Object[actualRow.getColumnDefinitions().size()];
    Object[] vs2=vs1.clone();
    for (int i=0; i < actualRow.getColumnDefinitions().size(); i++) {
      Object expectedValue=expectedRow.get(valueIndex[i]);
      Object actualValue=spec.partitionGenerator.convert(valueIndex[i],actualRow.getBytesUnsafe(i));
      vs1[i]=expectedValue;
      vs2[i]=actualValue;
      if (!expectedValue.equals(actualValue))       return false;
    }
    prev1.add(vs1);
    prev2.add(vs2);
  }
  partitionCount=Math.min(1,rowCount);
  if (!rs.isExhausted())   return false;
  return true;
}
