{
  ColumnFamilyStore cfs=MockSchema.newCFS();
  View initialView=fakeView(0,5,cfs);
  View cur=initialView;
  List<SSTableReader> readers=ImmutableList.copyOf(initialView.sstables);
  Assert.assertTrue(View.permitCompacting(readers).apply(cur));
  Assert.assertTrue(View.permitCompacting(ImmutableList.copyOf(concat(readers,readers))).apply(cur));
  testFailure(View.updateCompacting(emptySet(),concat(readers.subList(0,1),readers.subList(0,1))),cur);
  cur=View.updateCompacting(emptySet(),readers.subList(0,2)).apply(cur);
  Assert.assertTrue(View.permitCompacting(readers.subList(2,5)).apply(cur));
  Assert.assertFalse(View.permitCompacting(readers.subList(0,2)).apply(cur));
  Assert.assertFalse(View.permitCompacting(readers.subList(0,1)).apply(cur));
  Assert.assertFalse(View.permitCompacting(readers.subList(1,2)).apply(cur));
  Assert.assertTrue(readers.subList(2,5).containsAll(copyOf(cur.getUncompacting(readers))));
  Assert.assertEquals(3,copyOf(cur.getUncompacting(readers)).size());
  Assert.assertTrue(ImmutableSet.copyOf(cur.sstables(SSTableSet.NONCOMPACTING)).containsAll(readers.subList(2,5)));
  Assert.assertEquals(3,ImmutableSet.copyOf(cur.sstables(SSTableSet.NONCOMPACTING)).size());
  testFailure(View.updateCompacting(emptySet(),readers.subList(0,1)),cur);
  testFailure(View.updateCompacting(emptySet(),readers.subList(1,2)),cur);
  testFailure(View.updateCompacting(copyOf(readers.subList(0,1)),readers.subList(1,2)),cur);
  SSTableReader r0=MockSchema.sstable(0,cfs), r1=MockSchema.sstable(1,cfs), r2=MockSchema.sstable(2,cfs);
  testFailure(View.updateCompacting(emptySet(),of(r2)),cur);
  cur=View.updateLiveSet(copyOf(readers.subList(1,3)),of(r1,r2)).apply(cur);
  Assert.assertSame(readers.get(0),cur.sstablesMap.get(r0));
  Assert.assertSame(r1,cur.sstablesMap.get(r1));
  Assert.assertSame(r2,cur.sstablesMap.get(r2));
  testFailure(View.updateCompacting(emptySet(),readers.subList(2,3)),cur);
  Assert.assertSame(readers.get(1),Iterables.getFirst(Iterables.filter(cur.compacting,Predicates.equalTo(r1)),null));
  cur=View.updateCompacting(copyOf(readers.subList(0,1)),emptySet()).apply(cur);
  Assert.assertTrue(View.permitCompacting(concat(readers.subList(0,1),of(r2),readers.subList(3,5))).apply(cur));
  Assert.assertFalse(View.permitCompacting(readers.subList(1,2)).apply(cur));
  testFailure(View.updateCompacting(emptySet(),readers.subList(1,2)),cur);
  testFailure(View.updateCompacting(copyOf(readers.subList(0,2)),emptySet()),cur);
  Assert.assertTrue(copyOf(concat(readers.subList(0,1),readers.subList(2,5))).containsAll(copyOf(cur.getUncompacting(readers))));
  Assert.assertEquals(4,copyOf(cur.getUncompacting(readers)).size());
  Set<SSTableReader> nonCompacting=ImmutableSet.copyOf(cur.sstables(SSTableSet.NONCOMPACTING));
  Assert.assertTrue(nonCompacting.containsAll(readers.subList(2,5)));
  Assert.assertTrue(nonCompacting.containsAll(readers.subList(0,1)));
  Assert.assertEquals(4,nonCompacting.size());
}
