{
  this.sstable=sstable;
  this.finishColumn=finishColumn;
  this.comparator=sstable.metadata.comparator;
  try {
    if (input == null) {
      this.file=sstable.getFileDataInput(rowEntry.position);
      this.needsClosing=true;
    }
 else {
      this.file=input;
      input.seek(rowEntry.position);
      this.needsClosing=false;
    }
    ByteBufferUtil.skipShortLength(file);
    SSTableReader.readRowSize(file,sstable.descriptor);
    emptyColumnFamily=ColumnFamily.create(sstable.metadata);
    Descriptor.Version version=sstable.descriptor.version;
    if (!version.hasPromotedIndexes) {
      IndexHelper.skipSSTableBloomFilter(file,version);
      IndexHelper.skipIndex(file);
    }
    emptyColumnFamily.delete(DeletionInfo.serializer().deserializeFromSSTable(file,version));
    atomSerializer=emptyColumnFamily.getOnDiskSerializer();
    columns=file.readInt();
    mark=file.mark();
  }
 catch (  IOException e) {
    sstable.markSuspect();
    throw new CorruptSSTableException(e,sstable.getFilename());
  }
}
