{
  Keyspace keyspace=Keyspace.open("Keyspace1");
  ColumnFamilyStore cfs=keyspace.getColumnFamilyStore("Standard1");
  RowMutation rm;
  DecoratedKey dk=Util.dk("key1");
  rm=new RowMutation(keyspace.getName(),dk.key);
  rm.add(cfs.name,ByteBufferUtil.bytes("Column1"),ByteBufferUtil.bytes("asdf"),0);
  rm.apply();
  cfs.forceBlockingFlush();
  rm=new RowMutation(keyspace.getName(),dk.key);
  rm.delete(cfs.name,10);
  rm.apply();
  rm=new RowMutation(keyspace.getName(),Util.dk("key2").key);
  rm.add(cfs.name,ByteBufferUtil.bytes("Column1"),ByteBufferUtil.bytes("zxcv"),20);
  rm.apply();
  cfs.forceBlockingFlush();
  rm=new RowMutation(keyspace.getName(),dk.key);
  rm.add(cfs.name,ByteBufferUtil.bytes("Column1"),ByteBufferUtil.bytes("foobar"),30);
  rm.apply();
  cfs.forceBlockingFlush();
  QueryFilter filter=QueryFilter.getNamesFilter(dk,cfs.name,ByteBufferUtil.bytes("Column1"),System.currentTimeMillis());
  CollationController controller=new CollationController(cfs,filter,Integer.MIN_VALUE);
  controller.getTopLevelColumns();
  assertEquals(1,controller.getSstablesIterated());
  filter=QueryFilter.getIdentityFilter(dk,cfs.name,System.currentTimeMillis());
  controller=new CollationController(cfs,filter,Integer.MIN_VALUE);
  controller.getTopLevelColumns();
  assertEquals(2,controller.getSstablesIterated());
}
