{
  if (raw instanceof ColumnIdentifier) {
    CFDefinition.Name name=cfDef.get((ColumnIdentifier)raw);
    if (name == null)     throw new InvalidRequestException(String.format("Undefined name %s in selection clause",raw));
    if (metadata != null)     metadata.add(name);
    return new SimpleSelector(name.toString(),addAndGetIndex(name,names),name.type);
  }
 else   if (raw instanceof RawSelector.WritetimeOrTTL) {
    RawSelector.WritetimeOrTTL tot=(RawSelector.WritetimeOrTTL)raw;
    CFDefinition.Name name=cfDef.get(tot.id);
    if (name == null)     throw new InvalidRequestException(String.format("Undefined name %s in selection clause",tot.id));
    if (name.kind != CFDefinition.Name.Kind.COLUMN_METADATA && name.kind != CFDefinition.Name.Kind.VALUE_ALIAS)     throw new InvalidRequestException(String.format("Cannot use selection function %s on PRIMARY KEY part %s",tot.isWritetime ? "writeTime" : "ttl",name));
    if (name.type.isCollection())     throw new InvalidRequestException(String.format("Cannot use selection function %s on collections",tot.isWritetime ? "writeTime" : "ttl"));
    if (metadata != null)     metadata.add(makeWritetimeOrTTLSpec(cfDef,tot));
    return new WritetimeOrTTLSelector(name.toString(),addAndGetIndex(name,names),tot.isWritetime);
  }
 else {
    RawSelector.WithFunction withFun=(RawSelector.WithFunction)raw;
    List<Selector> args=new ArrayList<Selector>(withFun.args.size());
    for (    RawSelector rawArg : withFun.args)     args.add(makeSelector(cfDef,rawArg,names,null));
    AbstractType<?> returnType=Functions.getReturnType(withFun.functionName,cfDef.cfm.ksName,cfDef.cfm.cfName);
    if (returnType == null)     throw new InvalidRequestException(String.format("Unknown function '%s'",withFun.functionName));
    ColumnSpecification spec=makeFunctionSpec(cfDef,withFun,returnType);
    Function fun=Functions.get(withFun.functionName,args,spec);
    if (metadata != null)     metadata.add(spec);
    return new FunctionSelector(fun,args);
  }
}
