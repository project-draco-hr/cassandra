{
  if (raw.selectable instanceof ColumnIdentifier) {
    ColumnDefinition def=cfm.getColumnDefinition((ColumnIdentifier)raw.selectable);
    if (def == null)     throw new InvalidRequestException(String.format("Undefined name %s in selection clause",raw.selectable));
    if (metadata != null)     metadata.add(raw.alias == null ? def : makeAliasSpec(cfm,def.type,raw.alias));
    return new SimpleSelector(def.name.toString(),addAndGetIndex(def,defs),def.type);
  }
 else   if (raw.selectable instanceof Selectable.WritetimeOrTTL) {
    Selectable.WritetimeOrTTL tot=(Selectable.WritetimeOrTTL)raw.selectable;
    ColumnDefinition def=cfm.getColumnDefinition(tot.id);
    if (def == null)     throw new InvalidRequestException(String.format("Undefined name %s in selection clause",tot.id));
    if (def.isPrimaryKeyColumn())     throw new InvalidRequestException(String.format("Cannot use selection function %s on PRIMARY KEY part %s",tot.isWritetime ? "writeTime" : "ttl",def.name));
    if (def.type.isCollection())     throw new InvalidRequestException(String.format("Cannot use selection function %s on collections",tot.isWritetime ? "writeTime" : "ttl"));
    if (metadata != null)     metadata.add(makeWritetimeOrTTLSpec(cfm,tot,raw.alias));
    return new WritetimeOrTTLSelector(def.name.toString(),addAndGetIndex(def,defs),tot.isWritetime);
  }
 else   if (raw.selectable instanceof Selectable.WithFieldSelection) {
    Selectable.WithFieldSelection withField=(Selectable.WithFieldSelection)raw.selectable;
    Selector selected=makeSelector(cfm,new RawSelector(withField.selected,null),defs,null);
    AbstractType<?> type=selected.getType();
    if (!(type instanceof UserType))     throw new InvalidRequestException(String.format("Invalid field selection: %s of type %s is not a user type",withField.selected,type.asCQL3Type()));
    UserType ut=(UserType)type;
    for (int i=0; i < ut.size(); i++) {
      if (!ut.fieldName(i).equals(withField.field.bytes))       continue;
      if (metadata != null)       metadata.add(makeFieldSelectSpec(cfm,withField,ut.fieldType(i),raw.alias));
      return new FieldSelector(ut,i,selected);
    }
    throw new InvalidRequestException(String.format("%s of type %s has no field %s",withField.selected,type.asCQL3Type(),withField.field));
  }
 else {
    Selectable.WithFunction withFun=(Selectable.WithFunction)raw.selectable;
    List<Selector> args=new ArrayList<>(withFun.args.size());
    for (    Selectable rawArg : withFun.args)     args.add(makeSelector(cfm,new RawSelector(rawArg,null),defs,null));
    Function fun=Functions.get(cfm.ksName,withFun.functionName,args,cfm.ksName,cfm.cfName);
    if (fun == null)     throw new InvalidRequestException(String.format("Unknown function '%s'",withFun.functionName));
    if (metadata != null)     metadata.add(makeFunctionSpec(cfm,withFun,fun.returnType(),raw.alias));
    return new FunctionSelector(fun,args);
  }
}
