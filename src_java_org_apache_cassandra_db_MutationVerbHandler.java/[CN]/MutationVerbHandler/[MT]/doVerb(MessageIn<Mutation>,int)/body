{
  byte[] from=message.parameters.get(Mutation.FORWARD_FROM);
  InetAddress replyTo;
  if (from == null) {
    replyTo=message.from;
    byte[] forwardBytes=message.parameters.get(Mutation.FORWARD_TO);
    if (forwardBytes != null)     forwardToLocalNodes(message.payload,message.verb,forwardBytes,message.from);
  }
 else {
    replyTo=InetAddress.getByAddress(from);
  }
  try {
    if (message.version < MessagingService.VERSION_30 && LegacyBatchlogMigrator.isLegacyBatchlogMutation(message.payload))     LegacyBatchlogMigrator.handleLegacyMutation(message.payload);
 else     message.payload.apply();
    Tracing.trace("Enqueuing response to {}",replyTo);
    MessagingService.instance().sendReply(WriteResponse.createMessage(),id,replyTo);
  }
 catch (  WriteTimeoutException wto) {
    Tracing.trace("Payload application resulted in WriteTimeout, not replying");
  }
}
