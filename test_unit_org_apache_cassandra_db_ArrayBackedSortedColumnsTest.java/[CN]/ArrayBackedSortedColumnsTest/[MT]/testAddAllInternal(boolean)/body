{
  ISortedColumns map=ArrayBackedSortedColumns.factory().create(BytesType.instance,reversed);
  ISortedColumns map2=ArrayBackedSortedColumns.factory().create(BytesType.instance,reversed);
  int[] values1=new int[]{1,3,5,6};
  int[] values2=new int[]{2,4,5,6};
  for (int i=0; i < values1.length; ++i)   map.addColumn(new Column(ByteBufferUtil.bytes(values1[reversed ? values1.length - 1 - i : i])),HeapAllocator.instance);
  for (int i=0; i < values2.length; ++i)   map2.addColumn(new Column(ByteBufferUtil.bytes(values2[reversed ? values2.length - 1 - i : i])),HeapAllocator.instance);
  map2.addAll(map,HeapAllocator.instance,new Function<IColumn,IColumn>(){
    public IColumn apply(    IColumn c){
      return c;
    }
  }
);
  Iterator<IColumn> iter=map2.iterator();
  assertEquals("1st column",1,iter.next().name().getInt(0));
  assertEquals("2nd column",2,iter.next().name().getInt(0));
  assertEquals("3rd column",3,iter.next().name().getInt(0));
  assertEquals("4st column",4,iter.next().name().getInt(0));
  assertEquals("5st column",5,iter.next().name().getInt(0));
  assertEquals("6st column",6,iter.next().name().getInt(0));
}
