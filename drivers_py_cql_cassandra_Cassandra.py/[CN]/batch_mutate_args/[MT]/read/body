def read(self, iprot):
    if ((iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated) and isinstance(iprot.trans, TTransport.CReadableTransport) and (self.thrift_spec is not None) and (fastbinary is not None)):
        fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
        return
    iprot.readStructBegin()
    while True:
        (fname, ftype, fid) = iprot.readFieldBegin()
        if (ftype == TType.STOP):
            break
        if (fid == 1):
            if (ftype == TType.MAP):
                self.mutation_map = {}
                (_ktype194, _vtype195, _size193) = iprot.readMapBegin()
                for _i197 in xrange(_size193):
                    _key198 = iprot.readString()
                    _val199 = {}
                    (_ktype201, _vtype202, _size200) = iprot.readMapBegin()
                    for _i204 in xrange(_size200):
                        _key205 = iprot.readString()
                        _val206 = []
                        (_etype210, _size207) = iprot.readListBegin()
                        for _i211 in xrange(_size207):
                            _elem212 = Mutation()
                            _elem212.read(iprot)
                            _val206.append(_elem212)
                        iprot.readListEnd()
                        _val199[_key205] = _val206
                    iprot.readMapEnd()
                    self.mutation_map[_key198] = _val199
                iprot.readMapEnd()
            else:
                iprot.skip(ftype)
        elif (fid == 2):
            if (ftype == TType.I32):
                self.consistency_level = iprot.readI32()
            else:
                iprot.skip(ftype)
        else:
            iprot.skip(ftype)
        iprot.readFieldEnd()
    iprot.readStructEnd()
