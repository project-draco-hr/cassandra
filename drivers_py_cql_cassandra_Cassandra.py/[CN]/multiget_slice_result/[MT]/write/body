def write(self, oprot):
    if ((oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated) and (self.thrift_spec is not None) and (fastbinary is not None)):
        oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
        return
    oprot.writeStructBegin('multiget_slice_result')
    if (self.success != None):
        oprot.writeFieldBegin('success', TType.MAP, 0)
        oprot.writeMapBegin(TType.STRING, TType.LIST, len(self.success))
        for (kiter115, viter116) in self.success.items():
            oprot.writeString(kiter115)
            oprot.writeListBegin(TType.STRUCT, len(viter116))
            for iter117 in viter116:
                iter117.write(oprot)
            oprot.writeListEnd()
        oprot.writeMapEnd()
        oprot.writeFieldEnd()
    if (self.ire != None):
        oprot.writeFieldBegin('ire', TType.STRUCT, 1)
        self.ire.write(oprot)
        oprot.writeFieldEnd()
    if (self.ue != None):
        oprot.writeFieldBegin('ue', TType.STRUCT, 2)
        self.ue.write(oprot)
        oprot.writeFieldEnd()
    if (self.te != None):
        oprot.writeFieldBegin('te', TType.STRUCT, 3)
        self.te.write(oprot)
        oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

    def validate(self):
        return
