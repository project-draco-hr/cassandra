def read(self, iprot):
    if ((iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated) and isinstance(iprot.trans, TTransport.CReadableTransport) and (self.thrift_spec is not None) and (fastbinary is not None)):
        fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
        return
    iprot.readStructBegin()
    while True:
        (fname, ftype, fid) = iprot.readFieldBegin()
        if (ftype == TType.STOP):
            break
        if (fid == 1):
            if (ftype == TType.MAP):
                self.update_map = {}
                (_ktype174, _vtype175, _size173) = iprot.readMapBegin()
                for _i177 in xrange(_size173):
                    _key178 = iprot.readString()
                    _val179 = {}
                    (_ktype181, _vtype182, _size180) = iprot.readMapBegin()
                    for _i184 in xrange(_size180):
                        _key185 = iprot.readString()
                        _val186 = []
                        (_etype190, _size187) = iprot.readListBegin()
                        for _i191 in xrange(_size187):
                            _elem192 = CounterMutation()
                            _elem192.read(iprot)
                            _val186.append(_elem192)
                        iprot.readListEnd()
                        _val179[_key185] = _val186
                    iprot.readMapEnd()
                    self.update_map[_key178] = _val179
                iprot.readMapEnd()
            else:
                iprot.skip(ftype)
        elif (fid == 2):
            if (ftype == TType.I32):
                self.consistency_level = iprot.readI32()
            else:
                iprot.skip(ftype)
        else:
            iprot.skip(ftype)
        iprot.readFieldEnd()
    iprot.readStructEnd()
