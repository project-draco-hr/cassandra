{
  Map<String,Object> valueMap=new HashMap<>();
  valueMap.put(ITEM_NAMES[0],streamState.planId.toString());
  valueMap.put(ITEM_NAMES[1],streamState.description);
  CompositeData[] sessions=new CompositeData[streamState.sessions.size()];
  Lists.newArrayList(Iterables.transform(streamState.sessions,new Function<SessionInfo,CompositeData>(){
    public CompositeData apply(    SessionInfo input){
      return SessionInfoCompositeData.toCompositeData(streamState.planId,input);
    }
  }
)).toArray(sessions);
  valueMap.put(ITEM_NAMES[2],sessions);
  long currentRxBytes=0;
  long totalRxBytes=0;
  long currentTxBytes=0;
  long totalTxBytes=0;
  for (  SessionInfo sessInfo : streamState.sessions) {
    currentRxBytes+=sessInfo.getTotalSizeReceived();
    totalRxBytes+=sessInfo.getTotalSizeToReceive();
    currentTxBytes+=sessInfo.getTotalSizeSent();
    totalTxBytes+=sessInfo.getTotalSizeToSend();
  }
  double rxPercentage=(totalRxBytes == 0 ? 100L : currentRxBytes * 100L / totalRxBytes);
  double txPercentage=(totalTxBytes == 0 ? 100L : currentTxBytes * 100L / totalTxBytes);
  valueMap.put(ITEM_NAMES[3],currentRxBytes);
  valueMap.put(ITEM_NAMES[4],totalRxBytes);
  valueMap.put(ITEM_NAMES[5],rxPercentage);
  valueMap.put(ITEM_NAMES[6],currentTxBytes);
  valueMap.put(ITEM_NAMES[7],totalTxBytes);
  valueMap.put(ITEM_NAMES[8],txPercentage);
  try {
    return new CompositeDataSupport(COMPOSITE_TYPE,valueMap);
  }
 catch (  OpenDataException e) {
    throw Throwables.propagate(e);
  }
}
