{
  BufferedReader bufReader=new BufferedReader(new InputStreamReader(new FileInputStream(filepath)),16 * 1024 * 1024);
  String line=null;
  String delimiter_=new String(",");
  RowMutationMessage rmInbox=null;
  RowMutationMessage rmOutbox=null;
  ColumnFamily cfInbox=null;
  ColumnFamily cfOutbox=null;
  String firstuser=null;
  String nextuser=null;
  while ((line=bufReader.readLine()) != null) {
    StringTokenizer st=new StringTokenizer(line,delimiter_);
    int i=0;
    String threadId=null;
    int lastUpdated=0;
    int isDeleted=0;
    int folder=0;
    String user=null;
    String subject=null;
    String body=null;
    while (st.hasMoreElements()) {
switch (i) {
case 0:
        user=(String)st.nextElement();
      if (!isNumeric(user))       continue;
    break;
case 1:
  folder=Integer.parseInt((String)st.nextElement());
break;
case 2:
threadId=(String)st.nextElement();
break;
case 3:
lastUpdated=Integer.parseInt((String)st.nextElement());
break;
case 4:
isDeleted=Integer.parseInt((String)st.nextElement());
break;
case 5:
st.nextElement();
break;
case 6:
st.nextElement();
break;
case 7:
subject=(String)st.nextElement();
break;
case 8:
body=(String)st.nextElement();
break;
default :
st.nextElement();
break;
}
++i;
}
String key=null;
if (folder == 0) {
key=user;
}
 else {
key=user;
}
List<column_t> columns=null;
firstuser=key;
try {
Thread.sleep(1000 / requestsPerSecond_,1000 % requestsPerSecond_);
if (subject == null) subject="";
if (body == null) body="";
List<String> tokenList=tokenize(subject + " " + body);
for (String token : tokenList) {
long t=System.currentTimeMillis();
columns=peerstorageClient_.get_slice(tablename_,key,"MailboxThreadList" + (columnFamilyHack_ % divideby_) + ":"+ token,0,10);
totalTime_=totalTime_ + (System.currentTimeMillis() - t);
numReqs_++;
logger_.debug("Numreqs:" + numReqs_ + " Average: "+ totalTime_ / numReqs_ + "   Time taken for thrift..." + (System.currentTimeMillis() - t));
if (columns == null) {
logger_.debug(" TOKEN: " + token + "  ERROR No row for this key .....: "+ line);
Thread.sleep(1000 / requestsPerSecond_,1000 % requestsPerSecond_);
errorCount_++;
}
 else {
if (columns.size() == 0) {
logger_.debug("ERROR ColumnFamil map is missing.....: " + threadId + "   key:"+ key+ " TOKEN: "+ token+ "    record:"+ line);
System.out.println("ERROR ColumnFamil map is missing.....: " + threadId + "   key:"+ key+ " TOKEN: "+ token+ "    record:"+ line);
errorCount_++;
continue;
}
 else {
boolean found=false;
for (column_t column : columns) {
if (column.columnName.equalsIgnoreCase(threadId)) {
found=true;
break;
}
}
if (!found) {
logger_.debug("ERROR column is missing.....: " + threadId + "   key:"+ key+ " TOKEN: "+ token+ "    record:"+ line);
System.out.println("ERROR column is missing.....: " + threadId + "   key:"+ key+ " TOKEN: "+ token+ "    record:"+ line);
errorCount_++;
}
}
}
}
queryCount_++;
}
 catch (Exception e) {
e.printStackTrace();
}
}
}
