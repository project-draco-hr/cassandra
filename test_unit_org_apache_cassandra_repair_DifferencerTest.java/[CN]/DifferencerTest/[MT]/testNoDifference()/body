{
  final InetAddress ep1=InetAddress.getByName("127.0.0.1");
  final InetAddress ep2=InetAddress.getByName("127.0.0.1");
  SinkManager.add(new IMessageSink(){
    @SuppressWarnings("unchecked") public MessageOut handleMessage(    MessageOut message,    int id,    InetAddress to){
      if (message.verb == MessagingService.Verb.REPAIR_MESSAGE) {
        RepairMessage m=(RepairMessage)message.payload;
        assertEquals(RepairMessage.Type.SYNC_COMPLETE,m.messageType);
        assertEquals(new NodePair(ep1,ep2),((SyncComplete)m).nodes);
      }
      return null;
    }
    public MessageIn handleMessage(    MessageIn message,    int id,    InetAddress to){
      return null;
    }
  }
);
  Range<Token> range=new Range<>(partirioner.getMinimumToken(),partirioner.getRandomToken());
  RepairJobDesc desc=new RepairJobDesc(UUID.randomUUID(),"Keyspace1","Standard1",range);
  MerkleTree tree1=createInitialTree(desc);
  MerkleTree tree2=createInitialTree(desc);
  TreeResponse r1=new TreeResponse(ep1,tree1);
  TreeResponse r2=new TreeResponse(ep2,tree2);
  Differencer diff=new Differencer(desc,r1,r2);
  diff.run();
  assertTrue(diff.differences.isEmpty());
}
