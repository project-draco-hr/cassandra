def test_get_slice_simple(self):
    'performing a slice of simple columns'
    self.__set_keyspace('Keyspace1')
    columns = list()
    mutations = list()
    for i in range(6):
        columns.append(new_column(i))
    for column in columns:
        mutation = {'column_or_supercolumn': {'column': column, }, }
        mutations.append(mutation)
    mutation_params = dict()
    map_entry = {'key': 'key1', 'mutations': {'Standard1': mutations, }, }
    mutation_params['mutation_map'] = [map_entry]
    mutation_params['consistency_level'] = 'ONE'
    self.client.request('batch_mutate', mutation_params)
    slice_params = dict()
    slice_params['key'] = 'key1'
    slice_params['column_parent'] = {'column_family': 'Standard1', }
    slice_params['predicate'] = {'column_names': list(), }
    slice_params['predicate']['column_names'].append(columns[0]['name'])
    slice_params['predicate']['column_names'].append(columns[4]['name'])
    slice_params['consistency_level'] = 'ONE'
    coscs = self.client.request('get_slice', slice_params)
    for cosc in coscs:
        assert_cosc(cosc)
    assert_columns_match(coscs[0]['column'], columns[0])
    assert_columns_match(coscs[1]['column'], columns[4])
    slice_range = dict()
    slice_range['start'] = columns[2]['name']
    slice_range['finish'] = columns[5]['name']
    slice_range['reversed'] = False
    slice_range['count'] = 1000
    slice_params['predicate'] = {'slice_range': slice_range, }
    coscs = self.client.request('get_slice', slice_params)
    for cosc in coscs:
        assert_cosc(cosc)
    assert (len(coscs) == 4), ('expected 4 results, got %d' % len(coscs))
    assert_columns_match(coscs[0]['column'], columns[2])
    assert_columns_match(coscs[3]['column'], columns[5])
