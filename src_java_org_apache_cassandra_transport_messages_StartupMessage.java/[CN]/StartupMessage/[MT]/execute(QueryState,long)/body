{
  String cqlVersion=options.get(CQL_VERSION);
  if (cqlVersion == null)   throw new ProtocolException("Missing value CQL_VERSION in STARTUP message");
  try {
    if (new CassandraVersion(cqlVersion).compareTo(new CassandraVersion("2.99.0")) < 0)     throw new ProtocolException(String.format("CQL version %s is not supported by the binary protocol (supported version are >= 3.0.0)",cqlVersion));
  }
 catch (  IllegalArgumentException e) {
    throw new ProtocolException(e.getMessage());
  }
  if (options.containsKey(COMPRESSION)) {
    String compression=options.get(COMPRESSION).toLowerCase();
    if (compression.equals("snappy")) {
      if (FrameCompressor.SnappyCompressor.instance == null)       throw new ProtocolException("This instance does not support Snappy compression");
      connection.setCompressor(FrameCompressor.SnappyCompressor.instance);
    }
 else     if (compression.equals("lz4")) {
      connection.setCompressor(FrameCompressor.LZ4Compressor.instance);
    }
 else {
      throw new ProtocolException(String.format("Unknown compression algorithm: %s",compression));
    }
  }
  if (DatabaseDescriptor.getAuthenticator().requireAuthentication())   return new AuthenticateMessage(DatabaseDescriptor.getAuthenticator().getClass().getName());
 else   return new ReadyMessage();
}
