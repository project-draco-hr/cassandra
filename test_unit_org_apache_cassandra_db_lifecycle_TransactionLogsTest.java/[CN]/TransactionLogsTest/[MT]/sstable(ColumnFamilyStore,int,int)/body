{
  Directories dir=new Directories(cfs.metadata);
  Descriptor descriptor=new Descriptor(dir.getDirectoryForNewSSTables(),cfs.keyspace.getName(),cfs.getColumnFamilyName(),generation);
  Set<Component> components=ImmutableSet.of(Component.DATA,Component.PRIMARY_INDEX,Component.FILTER,Component.TOC);
  for (  Component component : components) {
    File file=new File(descriptor.filenameFor(component));
    file.createNewFile();
    try (RandomAccessFile raf=new RandomAccessFile(file,"rw")){
      raf.setLength(size);
    }
   }
  SegmentedFile dFile=new BufferedSegmentedFile(new ChannelProxy(new File(descriptor.filenameFor(Component.DATA))),RandomAccessReader.DEFAULT_BUFFER_SIZE,0);
  SegmentedFile iFile=new BufferedSegmentedFile(new ChannelProxy(new File(descriptor.filenameFor(Component.PRIMARY_INDEX))),RandomAccessReader.DEFAULT_BUFFER_SIZE,0);
  SerializationHeader header=SerializationHeader.make(cfs.metadata,Collections.EMPTY_LIST);
  StatsMetadata metadata=(StatsMetadata)new MetadataCollector(cfs.metadata.comparator).finalizeMetadata(cfs.metadata.partitioner.getClass().getCanonicalName(),0.01f,-1,header).get(MetadataType.STATS);
  SSTableReader reader=SSTableReader.internalOpen(descriptor,components,cfs.metadata,dFile,iFile,MockSchema.indexSummary.sharedCopy(),new AlwaysPresentFilter(),1L,metadata,SSTableReader.OpenReason.NORMAL,header);
  reader.first=reader.last=MockSchema.readerBounds(generation);
  return reader;
}
