{
  final int keyEnd=BTree.getBranchKeyEnd(node);
  final Object[] nextNode=(Object[])node[keyEnd + i];
  final Object[] rightNeighbour=(Object[])node[keyEnd + i + 1];
  final boolean leaves=BTree.isLeaf(nextNode);
  final int nextKeyEnd=BTree.getKeyEnd(nextNode);
  final Object[] newChild=leaves ? null : (Object[])rightNeighbour[BTree.getChildStart(rightNeighbour)];
  final Object[] newNextNode=copyWithKeyAndChildInserted(nextNode,nextKeyEnd,node[i],BTree.getChildCount(nextNode),newChild);
  node[i]=rightNeighbour[0];
  node[keyEnd + i + 1]=copyWithKeyAndChildRemoved(rightNeighbour,0,0,true);
  BTree.getSizeMap(node)[i]+=leaves ? 1 : 1 + BTree.size((Object[])newNextNode[BTree.getChildEnd(newNextNode) - 1]);
  return newNextNode;
}
