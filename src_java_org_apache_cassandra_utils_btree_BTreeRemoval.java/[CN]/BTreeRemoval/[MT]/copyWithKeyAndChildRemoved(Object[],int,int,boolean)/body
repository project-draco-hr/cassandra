{
  final boolean leaf=BTree.isLeaf(node);
  final Object[] newNode;
  if (leaf) {
    final int keyEnd=BTree.getKeyEnd(node);
    newNode=new Object[keyEnd - ((keyEnd & 1) == 1 ? 0 : 1)];
  }
 else {
    newNode=new Object[node.length - 2];
  }
  int offset=copyKeys(node,newNode,0,keyIndex);
  if (!leaf) {
    offset=copyChildren(node,newNode,offset,childIndex);
    final int[] nodeSizeMap=BTree.getSizeMap(node);
    final int[] newNodeSizeMap=new int[nodeSizeMap.length - 1];
    int pos=0;
    final int sizeToRemove=BTree.size((Object[])node[BTree.getChildStart(node) + childIndex]) + 1;
    for (int i=0; i < nodeSizeMap.length; ++i)     if (i != childIndex)     newNodeSizeMap[pos++]=nodeSizeMap[i] - ((substractSize && i > childIndex) ? sizeToRemove : 0);
    newNode[offset]=newNodeSizeMap;
  }
  return newNode;
}
