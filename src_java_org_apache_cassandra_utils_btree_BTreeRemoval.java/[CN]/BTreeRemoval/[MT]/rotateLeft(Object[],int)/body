{
  final int keyEnd=BTree.getBranchKeyEnd(node);
  final Object[] nextNode=(Object[])node[keyEnd + i];
  final Object[] leftNeighbour=(Object[])node[keyEnd + i - 1];
  final int leftNeighbourEndKey=BTree.getKeyEnd(leftNeighbour);
  final boolean leaves=BTree.isLeaf(nextNode);
  final Object[] newChild=leaves ? null : (Object[])leftNeighbour[BTree.getChildEnd(leftNeighbour) - 1];
  final Object[] newNextNode=copyWithKeyAndChildInserted(nextNode,0,node[i - 1],0,newChild);
  node[i - 1]=leftNeighbour[leftNeighbourEndKey - 1];
  node[keyEnd + i - 1]=copyWithKeyAndChildRemoved(leftNeighbour,leftNeighbourEndKey - 1,leftNeighbourEndKey,true);
  BTree.getSizeMap(node)[i - 1]-=leaves ? 1 : 1 + BTree.getSizeMap(newNextNode)[0];
  return newNextNode;
}
