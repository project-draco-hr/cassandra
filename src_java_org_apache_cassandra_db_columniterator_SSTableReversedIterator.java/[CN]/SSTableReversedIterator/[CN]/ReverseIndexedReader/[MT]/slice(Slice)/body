{
  if (currentIndexIdx < 0)   return Collections.emptyIterator();
  final List<IndexHelper.IndexInfo> indexes=indexEntry.columnsIndex();
  final int startIdx=IndexHelper.indexFor(slice.end(),indexes,sstable.metadata.comparator,true,currentIndexIdx);
  if (startIdx < 0)   return Collections.emptyIterator();
  int lastIdx=IndexHelper.indexFor(slice.start(),indexes,sstable.metadata.comparator,true,startIdx);
  if (lastIdx >= 0 && metadata().comparator.compare(indexes.get(lastIdx).lastName,slice.start()) < 0)   ++lastIdx;
  final int endIdx=lastIdx;
  prepareBlock(startIdx,slice.start(),slice.end());
  return new AbstractIterator<Unfiltered>(){
    private Iterator<Unfiltered> currentBlockIterator=partition.unfilteredIterator(columns,Slices.with(metadata().comparator,slice),true);
    protected Unfiltered computeNext(){
      try {
        if (currentBlockIterator.hasNext())         return currentBlockIterator.next();
        --currentIndexIdx;
        if (currentIndexIdx < 0 || currentIndexIdx < endIdx)         return endOfData();
        prepareBlock(currentIndexIdx,slice.start(),null);
        currentBlockIterator=partition.unfilteredIterator(columns,Slices.with(metadata().comparator,slice),true);
        return computeNext();
      }
 catch (      IOException e) {
        try {
          close();
        }
 catch (        IOException suppressed) {
          e.addSuppressed(suppressed);
        }
        sstable.markSuspect();
        throw new CorruptSSTableException(e,file.getPath());
      }
    }
  }
;
}
