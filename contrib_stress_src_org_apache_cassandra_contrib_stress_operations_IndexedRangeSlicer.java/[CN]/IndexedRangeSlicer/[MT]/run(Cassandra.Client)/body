{
  String format="%0" + session.getTotalKeysLength() + "d";
  SlicePredicate predicate=new SlicePredicate().setSlice_range(new SliceRange(ByteBuffer.wrap(new byte[]{}),ByteBuffer.wrap(new byte[]{}),false,session.getColumnsPerKey()));
  List<String> values=super.generateValues();
  ColumnParent parent=new ColumnParent("Standard1");
  int expectedPerValue=session.getNumKeys() / values.size();
  ByteBuffer columnName=ByteBuffer.wrap("C1".getBytes());
  int received=0;
  String startOffset="0";
  ByteBuffer value=ByteBuffer.wrap(values.get(index % values.size()).getBytes());
  IndexExpression expression=new IndexExpression(columnName,IndexOperator.EQ,value);
  while (received < expectedPerValue) {
    IndexClause clause=new IndexClause(Arrays.asList(expression),ByteBuffer.wrap(startOffset.getBytes()),session.getKeysPerCall());
    List<KeySlice> results=null;
    long start=System.currentTimeMillis();
    boolean success=false;
    String exceptionMessage=null;
    for (int t=0; t < session.getRetryTimes(); t++) {
      if (success)       break;
      try {
        results=client.get_indexed_slices(parent,clause,predicate,session.getConsistencyLevel());
        success=(results.size() != 0);
      }
 catch (      Exception e) {
        exceptionMessage=getExceptionMessage(e);
        success=false;
      }
    }
    if (!success) {
      error(String.format("Operation [%d] retried %d times - error on calling get_indexed_slices for offset %s %s%n",index,session.getRetryTimes(),startOffset,(exceptionMessage == null) ? "" : "(" + exceptionMessage + ")"));
    }
    received+=results.size();
    startOffset=String.format(format,(1 + getMaxKey(results)));
    session.operations.getAndIncrement();
    session.keys.getAndAdd(results.size());
    session.latency.getAndAdd(System.currentTimeMillis() - start);
  }
}
