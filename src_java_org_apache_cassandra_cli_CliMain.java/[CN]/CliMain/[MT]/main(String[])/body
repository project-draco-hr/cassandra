{
  CliOptions cliOptions=new CliOptions();
  cliOptions.processArgs(sessionState,args);
  if (sessionState.hostName != null) {
    try {
      connect(sessionState.hostName,sessionState.thriftPort);
    }
 catch (    RuntimeException e) {
      sessionState.err.println(e.getMessage());
      System.exit(-1);
    }
  }
  if (cliClient == null) {
    cliClient=new CliClient(sessionState,null);
  }
  if (sessionState.inFileMode()) {
    FileReader fileReader;
    try {
      fileReader=new FileReader(sessionState.filename);
    }
 catch (    IOException e) {
      sessionState.err.println(e.getMessage());
      return;
    }
    evaluateFileStatements(new BufferedReader(fileReader));
    return;
  }
  ConsoleReader reader=new ConsoleReader();
  if (!sessionState.batch) {
    reader.addCompletor(completer);
    reader.setBellEnabled(false);
    String historyFile=System.getProperty("user.home") + File.separator + HISTORYFILE;
    try {
      History history=new History(new File(historyFile));
      reader.setHistory(history);
    }
 catch (    IOException exp) {
      sessionState.err.printf("Unable to open %s for writing %n",historyFile);
    }
  }
 else {
    sessionState.out.close();
  }
  printBanner();
  String prompt;
  String line="";
  String currentStatement="";
  boolean inCompoundStatement=false;
  while (line != null) {
    prompt=(inCompoundStatement) ? "\t" : getPrompt(cliClient);
    line=reader.readLine(prompt).trim();
    if (line.isEmpty())     continue;
    currentStatement+=line;
    if (line.endsWith(";")) {
      processStatement(currentStatement);
      currentStatement="";
      inCompoundStatement=false;
    }
 else {
      currentStatement+=" ";
      inCompoundStatement=true;
    }
  }
}
