{
  TSocket socket=new TSocket(server,port);
  if (transport_ != null)   transport_.close();
  if (css_.framed) {
    transport_=new TFramedTransport(socket);
  }
 else {
    transport_=socket;
  }
  TBinaryProtocol binaryProtocol=new TBinaryProtocol(transport_,false,false);
  Cassandra.Client cassandraClient=new Cassandra.Client(binaryProtocol);
  try {
    transport_.open();
  }
 catch (  Exception e) {
    System.err.println("Exception " + e.getMessage());
    e.printStackTrace();
  }
  thriftClient_=cassandraClient;
  cliClient_=new CliClient(css_,thriftClient_);
  try {
    for (    String keyspace : thriftClient_.get_string_list_property("keyspaces")) {
      if (keyspace.equals(SYSTEM_TABLE))       continue;
      for (      String cf : cliClient_.getCFMetaData(keyspace).keySet()) {
        for (        String cmd : completer_.getKeyspaceCommands())         completer_.addCandidateString(String.format("%s %s.%s",cmd,keyspace,cf));
      }
    }
  }
 catch (  Exception e) {
  }
  css_.out.printf("Connected to %s/%d\n",server,port);
}
