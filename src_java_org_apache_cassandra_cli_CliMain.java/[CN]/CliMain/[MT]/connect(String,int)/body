{
  TSocket socket=new TSocket(server,port);
  if (transport_ != null)   transport_.close();
  if (css_.framed) {
    transport_=new TFramedTransport(socket);
  }
 else {
    transport_=socket;
  }
  TBinaryProtocol binaryProtocol=new TBinaryProtocol(transport_,false,false);
  Cassandra.Client cassandraClient=new Cassandra.Client(binaryProtocol);
  try {
    transport_.open();
  }
 catch (  Exception e) {
    css_.err.format("Exception connecting to %s/%d - %s\n",server,port,e.getMessage());
    if (css_.debug)     e.printStackTrace();
    return;
  }
  thriftClient_=cassandraClient;
  cliClient_=new CliClient(css_,thriftClient_);
  Map<String,String> credentials=new HashMap<String,String>();
  credentials.put(SimpleAuthenticator.USERNAME_KEY,css_.username);
  credentials.put(SimpleAuthenticator.PASSWORD_KEY,css_.password);
  AuthenticationRequest authRequest=new AuthenticationRequest(credentials);
  try {
    thriftClient_.login(css_.keyspace,authRequest);
  }
 catch (  AuthenticationException e) {
    css_.err.println("Exception during authentication to the cassandra node, " + "verify you are using correct credentials.");
    return;
  }
catch (  AuthorizationException e) {
    css_.err.println("You are not authorized to use keyspace: " + css_.keyspace);
    return;
  }
catch (  TException e) {
    if (css_.debug)     e.printStackTrace();
    css_.err.println("Login failure. Did you specify 'keyspace', 'username' and 'password'?");
    return;
  }
  String clusterName;
  try {
    clusterName=thriftClient_.get_string_property("cluster name");
  }
 catch (  Exception e) {
    css_.err.println("Exception retrieving information about the cassandra node, check you have connected to the thrift port.");
    if (css_.debug)     e.printStackTrace();
    return;
  }
  try {
    for (    String keyspace : thriftClient_.get_string_list_property("keyspaces")) {
      if (keyspace.equals(SYSTEM_TABLE))       continue;
      for (      String cf : cliClient_.getCFMetaData(keyspace).keySet()) {
        for (        String cmd : completer_.getKeyspaceCommands())         completer_.addCandidateString(String.format("%s %s.%s",cmd,keyspace,cf));
      }
    }
  }
 catch (  Exception e) {
    if (css_.debug)     e.printStackTrace();
    return;
  }
  css_.out.printf("Connected to: \"%s\" on %s/%d%n",clusterName,server,port);
}
