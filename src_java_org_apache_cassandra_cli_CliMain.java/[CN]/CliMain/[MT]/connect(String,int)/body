{
  TSocket socket=new TSocket(server,port);
  if (transport != null)   transport.close();
  if (sessionState.framed) {
    transport=new TFramedTransport(socket);
  }
 else {
    transport=socket;
  }
  TBinaryProtocol binaryProtocol=new TBinaryProtocol(transport,true,true);
  Cassandra.Client cassandraClient=new Cassandra.Client(binaryProtocol);
  try {
    transport.open();
  }
 catch (  Exception e) {
    if (sessionState.debug)     e.printStackTrace();
    String error=(e.getCause() == null) ? e.getMessage() : e.getCause().getMessage();
    throw new RuntimeException("Exception connecting to " + server + "/"+ port+ ". Reason: "+ error+ ".");
  }
  thriftClient=cassandraClient;
  cliClient=new CliClient(sessionState,thriftClient);
  if ((sessionState.username != null) && (sessionState.password != null)) {
    Map<String,String> credentials=new HashMap<String,String>();
    credentials.put(IAuthenticator.USERNAME_KEY,sessionState.username);
    credentials.put(IAuthenticator.PASSWORD_KEY,sessionState.password);
    AuthenticationRequest authRequest=new AuthenticationRequest(credentials);
    try {
      thriftClient.login(authRequest);
      cliClient.setUsername(sessionState.username);
    }
 catch (    AuthenticationException e) {
      thriftClient=null;
      sessionState.err.println("Exception during authentication to the cassandra node, " + "Verify the keyspace exists, and that you are using the correct credentials.");
      return;
    }
catch (    AuthorizationException e) {
      thriftClient=null;
      sessionState.err.println("You are not authorized to use keyspace: " + sessionState.keyspace);
      return;
    }
catch (    TException e) {
      thriftClient=null;
      sessionState.err.println("Login failure. Did you specify 'keyspace', 'username' and 'password'?");
      return;
    }
  }
  if (sessionState.keyspace != null) {
    try {
      sessionState.keyspace=CliCompiler.getKeySpace(sessionState.keyspace,thriftClient.describe_keyspaces());
      ;
      thriftClient.set_keyspace(sessionState.keyspace);
      cliClient.setKeySpace(sessionState.keyspace);
      updateCompletor(CliUtils.getCfNamesByKeySpace(cliClient.getKSMetaData(sessionState.keyspace)));
    }
 catch (    InvalidRequestException e) {
      sessionState.err.println("Keyspace " + sessionState.keyspace + " not found");
      return;
    }
catch (    TException e) {
      sessionState.err.println("Did you specify 'keyspace'?");
      return;
    }
catch (    NotFoundException e) {
      sessionState.err.println("Keyspace " + sessionState.keyspace + " not found");
      return;
    }
  }
  String clusterName;
  try {
    clusterName=thriftClient.describe_cluster_name();
  }
 catch (  Exception e) {
    sessionState.err.println("Exception retrieving information about the cassandra node, check you have connected to the thrift port.");
    if (sessionState.debug)     e.printStackTrace();
    return;
  }
  sessionState.out.printf("Connected to: \"%s\" on %s/%d%n",clusterName,server,port);
}
