{
  return new Selectors(){
    private final List<Selector> selectors=factories.newInstances();
    public void reset(){
      for (int i=0, m=selectors.size(); i < m; i++) {
        selectors.get(i).reset();
      }
    }
    public boolean isAggregate(){
      return factories.containsOnlyAggregateFunctions();
    }
    public List<ByteBuffer> getOutputRow() throws InvalidRequestException {
      List<ByteBuffer> outputRow=new ArrayList<>(selectors.size());
      for (int i=0, m=selectors.size(); i < m; i++) {
        outputRow.add(selectors.get(i).getOutput());
      }
      return outputRow;
    }
    public void addInputRow(    ResultSetBuilder rs) throws InvalidRequestException {
      for (int i=0, m=selectors.size(); i < m; i++) {
        selectors.get(i).addInput(rs);
      }
    }
  }
;
}
