{
  int replicas=DatabaseDescriptor.getReplicationFactor(table);
  ArrayList<InetAddress> endpoints=new ArrayList<InetAddress>(replicas);
  List<Token> tokens=metadata.sortedTokens();
  if (tokens.isEmpty())   return endpoints;
  Iterator<Token> iter=TokenMetadata.ringIterator(tokens,token);
  Token primaryToken=iter.next();
  endpoints.add(metadata.getEndPoint(primaryToken));
  boolean bDataCenter=false;
  boolean bOtherRack=false;
  while (endpoints.size() < replicas && iter.hasNext()) {
    try {
      Token t=iter.next();
      if (!((EndPointSnitch)snitch_).isInSameDataCenter(metadata.getEndPoint(primaryToken),metadata.getEndPoint(t))) {
        if (!bDataCenter) {
          endpoints.add(metadata.getEndPoint(t));
          bDataCenter=true;
        }
        continue;
      }
      if (!((EndPointSnitch)snitch_).isOnSameRack(metadata.getEndPoint(primaryToken),metadata.getEndPoint(t)) && ((EndPointSnitch)snitch_).isInSameDataCenter(metadata.getEndPoint(primaryToken),metadata.getEndPoint(t))) {
        if (!bOtherRack) {
          endpoints.add(metadata.getEndPoint(t));
          bOtherRack=true;
        }
      }
    }
 catch (    UnknownHostException e) {
      throw new RuntimeException(e);
    }
  }
  if (endpoints.size() < replicas) {
    iter=TokenMetadata.ringIterator(tokens,token);
    while (endpoints.size() < replicas && iter.hasNext()) {
      Token t=iter.next();
      if (!endpoints.contains(metadata.getEndPoint(t)))       endpoints.add(metadata.getEndPoint(t));
    }
  }
  return endpoints;
}
