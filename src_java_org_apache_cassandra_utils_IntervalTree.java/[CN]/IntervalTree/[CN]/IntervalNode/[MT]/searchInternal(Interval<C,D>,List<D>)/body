{
  if (center.compareTo(searchInterval.min) < 0) {
    int i=Interval.<C,D>maxOrdering().binarySearchAsymmetric(intersectsRight,searchInterval.min,Op.CEIL);
    if (i == intersectsRight.size() && high.compareTo(searchInterval.min) < 0)     return;
    while (i < intersectsRight.size())     results.add(intersectsRight.get(i++).data);
    if (right != null)     right.searchInternal(searchInterval,results);
  }
 else   if (center.compareTo(searchInterval.max) > 0) {
    int j=Interval.<C,D>minOrdering().binarySearchAsymmetric(intersectsLeft,searchInterval.max,Op.HIGHER);
    if (j == 0 && low.compareTo(searchInterval.max) > 0)     return;
    for (int i=0; i < j; i++)     results.add(intersectsLeft.get(i).data);
    if (left != null)     left.searchInternal(searchInterval,results);
  }
 else {
    for (    Interval<C,D> interval : intersectsLeft)     results.add(interval.data);
    if (left != null)     left.searchInternal(searchInterval,results);
    if (right != null)     right.searchInternal(searchInterval,results);
  }
}
