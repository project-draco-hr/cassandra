{
  CommandLine cmd=null;
  try {
    cmd=processArguments(args);
  }
 catch (  MissingArgumentException e) {
    System.err.println(e.getMessage());
    System.exit(1);
  }
  if (cmd.getArgList().size() < 1) {
    System.err.println("Missing sub-command argument.");
    printShuffleHelp();
    System.exit(1);
  }
  String subCommand=(String)(cmd.getArgList()).get(0);
  String hostName=(cmd.getOptionValue("host") != null) ? cmd.getOptionValue("host") : DEFAULT_HOST;
  String port=(cmd.getOptionValue("port") != null) ? cmd.getOptionValue("port") : Integer.toString(DEFAULT_JMX_PORT);
  String thriftHost=(cmd.getOptionValue("thrift-host") != null) ? cmd.getOptionValue("thrift-host") : hostName;
  String thriftPort=(cmd.getOptionValue("thrift-port") != null) ? cmd.getOptionValue("thrift-port") : "9160";
  String onlyDc=cmd.getOptionValue("only-dc");
  boolean thriftFramed=cmd.hasOption("thrift-framed") ? true : false;
  boolean andEnable=cmd.hasOption("and-enable") ? true : false;
  int portNum=-1, thriftPortNum=-1;
  if (port != null) {
    try {
      portNum=Integer.parseInt(port);
    }
 catch (    NumberFormatException ferr) {
      System.err.printf("%s is not a valid JMX port number.%n",port);
      System.exit(1);
    }
  }
 else   portNum=DEFAULT_JMX_PORT;
  if (thriftPort != null) {
    try {
      thriftPortNum=Integer.parseInt(thriftPort);
    }
 catch (    NumberFormatException ferr) {
      System.err.printf("%s is not a valid port number.%n",thriftPort);
      System.exit(1);
    }
  }
 else   thriftPortNum=9160;
  Shuffle shuffler=new Shuffle(hostName,portNum,thriftHost,thriftPortNum,thriftFramed,null,null);
  try {
    if (subCommand.equals("create"))     shuffler.shuffle(andEnable,onlyDc);
 else     if (subCommand.equals("ls"))     shuffler.ls();
 else     if (subCommand.startsWith("en"))     shuffler.enable();
 else     if (subCommand.startsWith("in"))     shuffler.disable();
 else     if (subCommand.equals("clear"))     shuffler.clear();
 else {
      System.err.println("Unknown subcommand: " + subCommand);
      printShuffleHelp();
      System.exit(1);
    }
  }
 catch (  ShuffleError err) {
    shuffler.writeln(err);
    System.exit(1);
  }
 finally {
    shuffler.close();
  }
  System.exit(0);
}
