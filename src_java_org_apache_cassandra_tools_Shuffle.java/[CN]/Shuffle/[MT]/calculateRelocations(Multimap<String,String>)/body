{
  Multimap<String,String> relocations=HashMultimap.create();
  Set<String> endpoints=new HashSet<String>(endpointMap.keySet());
  Map<String,Integer> endpointToNumTokens=new HashMap<String,Integer>(endpoints.size());
  Map<String,Iterator<String>> iterMap=new HashMap<String,Iterator<String>>(endpoints.size());
  for (  String endpoint : endpoints) {
    try {
      endpointToNumTokens.put(endpoint,ssProxy.getTokens(endpoint).size());
    }
 catch (    UnknownHostException e) {
      throw new RuntimeException("What that...?",e);
    }
    iterMap.put(endpoint,endpointMap.get(endpoint).iterator());
  }
  int epsToComplete=endpoints.size();
  Set<String> endpointsCompleted=new HashSet<String>();
  outer:   while (true) {
    endpoints.removeAll(endpointsCompleted);
    for (    String endpoint : endpoints) {
      boolean choiceMade=false;
      if (!iterMap.get(endpoint).hasNext()) {
        endpointsCompleted.add(endpoint);
        continue;
      }
      String token=iterMap.get(endpoint).next();
      List<String> subSet=new ArrayList<String>(endpoints);
      subSet.remove(endpoint);
      Collections.shuffle(subSet,rand);
      for (      String choice : subSet) {
        if (relocations.get(choice).size() < endpointToNumTokens.get(choice)) {
          relocations.put(choice,token);
          choiceMade=true;
          break;
        }
      }
      if (!choiceMade)       relocations.put(endpoint,token);
    }
    if (endpointsCompleted.size() == epsToComplete)     break outer;
  }
  return relocations;
}
