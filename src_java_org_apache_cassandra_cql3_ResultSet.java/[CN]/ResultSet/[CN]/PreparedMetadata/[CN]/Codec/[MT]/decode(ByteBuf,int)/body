{
  int iflags=body.readInt();
  int columnCount=body.readInt();
  EnumSet<Flag> flags=Flag.deserialize(iflags);
  short[] partitionKeyBindIndexes=null;
  if (version >= Server.VERSION_4) {
    int numPKNames=body.readInt();
    if (numPKNames > 0) {
      partitionKeyBindIndexes=new short[numPKNames];
      for (int i=0; i < numPKNames; i++)       partitionKeyBindIndexes[i]=body.readShort();
    }
  }
  boolean globalTablesSpec=flags.contains(Flag.GLOBAL_TABLES_SPEC);
  String globalKsName=null;
  String globalCfName=null;
  if (globalTablesSpec) {
    globalKsName=CBUtil.readString(body);
    globalCfName=CBUtil.readString(body);
  }
  List<ColumnSpecification> names=new ArrayList<>(columnCount);
  for (int i=0; i < columnCount; i++) {
    String ksName=globalTablesSpec ? globalKsName : CBUtil.readString(body);
    String cfName=globalTablesSpec ? globalCfName : CBUtil.readString(body);
    ColumnIdentifier colName=new ColumnIdentifier(CBUtil.readString(body),true);
    AbstractType type=DataType.toType(DataType.codec.decodeOne(body,version));
    names.add(new ColumnSpecification(ksName,cfName,colName,type));
  }
  return new PreparedMetadata(flags,names,partitionKeyBindIndexes);
}
