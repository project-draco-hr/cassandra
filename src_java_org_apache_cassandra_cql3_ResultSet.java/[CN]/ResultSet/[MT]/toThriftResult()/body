{
  String UTF8="UTF8Type";
  CqlMetadata schema=new CqlMetadata(new HashMap<ByteBuffer,String>(),new HashMap<ByteBuffer,String>(),UTF8,UTF8);
  for (  ColumnSpecification name : metadata.names) {
    ByteBuffer colName=ByteBufferUtil.bytes(name.toString());
    schema.name_types.put(colName,UTF8);
    schema.value_types.put(colName,TypeParser.getShortName(name.type));
  }
  List<CqlRow> cqlRows=new ArrayList<CqlRow>(rows.size());
  for (  List<ByteBuffer> row : rows) {
    List<Column> thriftCols=new ArrayList<Column>(metadata.names.size());
    for (int i=0; i < metadata.names.size(); i++) {
      Column col=new Column(ByteBufferUtil.bytes(metadata.names.get(i).toString()));
      if (row.get(i) != null && metadata.names.get(i).type.isCollection())       col.setValue(ByteBufferUtil.bytes(FBUtilities.json(metadata.names.get(i).type.compose(row.get(i)))));
 else       col.setValue(row.get(i));
      thriftCols.add(col);
    }
    cqlRows.add(new CqlRow(ByteBufferUtil.EMPTY_BYTE_BUFFER,thriftCols));
  }
  CqlResult res=new CqlResult(CqlResultType.ROWS);
  res.setRows(cqlRows).setSchema(schema);
  return res;
}
