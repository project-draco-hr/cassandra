{
  Class<?> jReturnType=javaReturnType();
  Class<?>[] paramTypes=javaParamTypes();
  String className;
  String methodName;
  int i=body.indexOf('#');
  if (i != -1) {
    methodName=body.substring(i + 1);
    className=body.substring(0,i);
  }
 else {
    methodName=name.name;
    className=body;
  }
  try {
    Class<?> cls=Class.forName(className,false,Thread.currentThread().getContextClassLoader());
    Method method=cls.getMethod(methodName,paramTypes);
    if (!Modifier.isStatic(method.getModifiers()))     throw new InvalidRequestException("Method " + className + '.'+ methodName+ '('+ Arrays.toString(paramTypes)+ ") is not static");
    if (!jReturnType.isAssignableFrom(method.getReturnType())) {
      throw new InvalidRequestException("Method " + className + '.'+ methodName+ '('+ Arrays.toString(paramTypes)+ ") "+ "has incompatible return type "+ method.getReturnType()+ " (not assignable to "+ jReturnType+ ')');
    }
    return method;
  }
 catch (  ClassNotFoundException e) {
    throw new InvalidRequestException("Class " + className + " does not exist");
  }
catch (  NoSuchMethodException e) {
    throw new InvalidRequestException("Method " + className + '.'+ methodName+ '('+ Arrays.toString(paramTypes)+ ") does not exist");
  }
}
