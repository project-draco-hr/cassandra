{
  Class<?> jReturnType=javaType(returnType);
  Class<?>[] paramTypes=javaParamTypes(argTypes);
  String className;
  String methodName;
  int i=body.indexOf('#');
  if (i != -1) {
    methodName=body.substring(i + 1);
    className=body.substring(0,i);
  }
 else {
    methodName=name.name;
    className=body;
  }
  try {
    Class<?> cls=Class.forName(className,false,Thread.currentThread().getContextClassLoader());
    MethodHandles.Lookup handles=MethodHandles.lookup();
    MethodType methodType=MethodType.methodType(jReturnType,paramTypes);
    MethodHandle handle=handles.findStatic(cls,methodName,methodType);
    return handle;
  }
 catch (  ClassNotFoundException e) {
    throw new InvalidRequestException("Class " + className + " does not exist");
  }
catch (  NoSuchMethodException e) {
    throw new InvalidRequestException("Method 'public static " + jReturnType.getName() + ' '+ className+ '.'+ methodName+ '('+ Arrays.toString(paramTypes)+ ")' does not exist - check for static, argument types and return type");
  }
catch (  IllegalAccessException e) {
    throw new InvalidRequestException("Method " + className + '.'+ methodName+ '('+ Arrays.toString(paramTypes)+ ") is not accessible");
  }
}
