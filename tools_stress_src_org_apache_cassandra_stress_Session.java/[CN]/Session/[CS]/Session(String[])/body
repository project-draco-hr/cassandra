{
  float STDev=0.1f;
  CommandLineParser parser=new PosixParser();
  try {
    CommandLine cmd=parser.parse(availableOptions,arguments);
    if (cmd.getArgs().length > 0) {
      System.err.println("Application does not allow arbitrary arguments: " + StringUtils.join(cmd.getArgList(),", "));
      System.exit(1);
    }
    if (cmd.hasOption("h"))     throw new IllegalArgumentException("help");
    if (cmd.hasOption("n"))     numKeys=Integer.parseInt(cmd.getOptionValue("n"));
    if (cmd.hasOption("F"))     numDifferentKeys=Integer.parseInt(cmd.getOptionValue("F"));
 else     numDifferentKeys=numKeys;
    if (cmd.hasOption("N"))     skipKeys=Float.parseFloat(cmd.getOptionValue("N"));
    if (cmd.hasOption("t"))     threads=Integer.parseInt(cmd.getOptionValue("t"));
    if (cmd.hasOption("c"))     columns=Integer.parseInt(cmd.getOptionValue("c"));
    if (cmd.hasOption("S"))     columnSize=Integer.parseInt(cmd.getOptionValue("S"));
    if (cmd.hasOption("C"))     cardinality=Integer.parseInt(cmd.getOptionValue("C"));
    if (cmd.hasOption("d"))     nodes=cmd.getOptionValue("d").split(",");
    if (cmd.hasOption("D")) {
      try {
        String node;
        List<String> tmpNodes=new ArrayList<String>();
        BufferedReader in=new BufferedReader(new InputStreamReader(new FileInputStream(cmd.getOptionValue("D"))));
        try {
          while ((node=in.readLine()) != null) {
            if (node.length() > 0)             tmpNodes.add(node);
          }
          nodes=tmpNodes.toArray(new String[tmpNodes.size()]);
        }
  finally {
          in.close();
        }
      }
 catch (      IOException ioe) {
        throw new RuntimeException(ioe);
      }
    }
    if (cmd.hasOption("s"))     STDev=Float.parseFloat(cmd.getOptionValue("s"));
    if (cmd.hasOption("r"))     random=true;
    outFileName=(cmd.hasOption("f")) ? cmd.getOptionValue("f") : null;
    if (cmd.hasOption("p"))     port=Integer.parseInt(cmd.getOptionValue("p"));
    if (cmd.hasOption("o"))     operation=Stress.Operations.valueOf(cmd.getOptionValue("o").toUpperCase());
    if (cmd.hasOption("u"))     superColumns=Integer.parseInt(cmd.getOptionValue("u"));
    if (cmd.hasOption("y"))     columnFamilyType=ColumnFamilyType.valueOf(cmd.getOptionValue("y"));
    if (cmd.hasOption("K")) {
      retryTimes=Integer.valueOf(cmd.getOptionValue("K"));
      if (retryTimes <= 0) {
        throw new RuntimeException("--keep-trying option value should be > 0");
      }
    }
    if (cmd.hasOption("k")) {
      retryTimes=1;
      ignoreErrors=true;
    }
    if (cmd.hasOption("i"))     progressInterval=Integer.parseInt(cmd.getOptionValue("i"));
    if (cmd.hasOption("g"))     keysPerCall=Integer.parseInt(cmd.getOptionValue("g"));
    if (cmd.hasOption("th"))     maxOpsPerSecond=Double.parseDouble(cmd.getOptionValue("th"));
    if (cmd.hasOption("e"))     consistencyLevel=ConsistencyLevel.valueOf(cmd.getOptionValue("e").toUpperCase());
    if (cmd.hasOption("x"))     indexType=IndexType.valueOf(cmd.getOptionValue("x").toUpperCase());
    if (cmd.hasOption("R"))     replicationStrategy=cmd.getOptionValue("R");
    if (cmd.hasOption("l"))     replicationStrategyOptions.put("replication_factor",String.valueOf(Integer.parseInt(cmd.getOptionValue("l"))));
 else     if (replicationStrategy.endsWith("SimpleStrategy"))     replicationStrategyOptions.put("replication_factor","1");
    if (cmd.hasOption("L")) {
      enable_cql=true;
      cqlVersion="2.0.0";
    }
    if (cmd.hasOption("L3")) {
      enable_cql=true;
      cqlVersion="3.0.0";
    }
    if (cmd.hasOption("b")) {
      if (!(enable_cql && cqlVersion.startsWith("3")))       throw new IllegalArgumentException("Cannot use binary protocol without -L3");
      use_native_protocol=true;
    }
    if (cmd.hasOption("P")) {
      if (!enable_cql) {
        System.err.println("-P/--use-prepared-statements is only applicable with CQL (-L/--enable-cql)");
        System.exit(-1);
      }
      use_prepared=true;
    }
    if (cmd.hasOption("O")) {
      String[] pairs=StringUtils.split(cmd.getOptionValue("O"),',');
      for (      String pair : pairs) {
        String[] keyAndValue=StringUtils.split(pair,':');
        if (keyAndValue.length != 2)         throw new RuntimeException("Invalid --strategy-properties value.");
        replicationStrategyOptions.put(keyAndValue[0],keyAndValue[1]);
      }
    }
    if (cmd.hasOption("W"))     replicateOnWrite=false;
    if (cmd.hasOption("I"))     compression=cmd.getOptionValue("I");
    averageSizeValues=cmd.hasOption("V");
    try {
      sendToDaemon=cmd.hasOption("send-to") ? InetAddress.getByName(cmd.getOptionValue("send-to")) : null;
    }
 catch (    UnknownHostException e) {
      throw new RuntimeException(e);
    }
    if (cmd.hasOption("Q")) {
      AbstractType comparator=TypeParser.parse(DEFAULT_COMPARATOR);
      String[] names=StringUtils.split(cmd.getOptionValue("Q"),",");
      columnNames=new ArrayList<ByteBuffer>(names.length);
      for (      String columnName : names)       columnNames.add(comparator.fromString(columnName));
    }
 else {
      columnNames=null;
    }
    if (cmd.hasOption("Z")) {
      compactionStrategy=cmd.getOptionValue("Z");
      try {
        CFMetaData.createCompactionStrategy(compactionStrategy);
      }
 catch (      ConfigurationException e) {
        System.err.println(e.getMessage());
        System.exit(1);
      }
    }
    if (cmd.hasOption("U")) {
      AbstractType parsed=null;
      try {
        parsed=TypeParser.parse(cmd.getOptionValue("U"));
      }
 catch (      ConfigurationException e) {
        System.err.println(e.getMessage());
        System.exit(1);
      }
      comparator=cmd.getOptionValue("U");
      timeUUIDComparator=parsed instanceof TimeUUIDType;
      if (!(parsed instanceof TimeUUIDType || parsed instanceof AsciiType || parsed instanceof UTF8Type)) {
        System.err.println("Currently supported types are: TimeUUIDType, AsciiType, UTF8Type.");
        System.exit(1);
      }
    }
 else {
      comparator=null;
      timeUUIDComparator=false;
    }
    if (cmd.hasOption("ns")) {
      captureStatistics=false;
    }
    if (cmd.hasOption(SSL_TRUSTSTORE))     encOptions.truststore=cmd.getOptionValue(SSL_TRUSTSTORE);
    if (cmd.hasOption(SSL_TRUSTSTORE_PW))     encOptions.truststore_password=cmd.getOptionValue(SSL_TRUSTSTORE_PW);
    if (cmd.hasOption(SSL_PROTOCOL))     encOptions.protocol=cmd.getOptionValue(SSL_PROTOCOL);
    if (cmd.hasOption(SSL_ALGORITHM))     encOptions.algorithm=cmd.getOptionValue(SSL_ALGORITHM);
    if (cmd.hasOption(SSL_STORE_TYPE))     encOptions.store_type=cmd.getOptionValue(SSL_STORE_TYPE);
    if (cmd.hasOption(SSL_CIPHER_SUITES))     encOptions.cipher_suites=cmd.getOptionValue(SSL_CIPHER_SUITES).split(",");
    if (cmd.hasOption("tf")) {
      transportFactory=validateAndSetTransportFactory(cmd.getOptionValue("tf"));
      configureTransportFactory(transportFactory,encOptions);
    }
    if (cmd.hasOption("un"))     username=cmd.getOptionValue("un");
    if (cmd.hasOption("pw"))     password=cmd.getOptionValue("pw");
  }
 catch (  ParseException e) {
    throw new IllegalArgumentException(e.getMessage(),e);
  }
catch (  ConfigurationException e) {
    throw new IllegalStateException(e.getMessage(),e);
  }
  mean=numDifferentKeys / 2;
  sigma=numDifferentKeys * STDev;
}
