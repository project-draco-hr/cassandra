{
  KsDef keyspace=new KsDef();
  CfDef standardCfDef=new CfDef("Keyspace1","Standard1");
  standardCfDef.setComparator_type(DEFAULT_COMPARATOR).setDefault_validation_class(DEFAULT_VALIDATOR).setCompression(compression);
  if (indexType != null) {
    ColumnDef standardColumn=new ColumnDef(ByteBufferUtil.bytes("C1"),"BytesType");
    standardColumn.setIndex_type(indexType).setIndex_name("Idx1");
    standardCfDef.setColumn_metadata(Arrays.asList(standardColumn));
  }
  CfDef superCfDef=new CfDef("Keyspace1","Super1").setColumn_type("Super");
  superCfDef.setComparator_type(DEFAULT_COMPARATOR).setSubcomparator_type(DEFAULT_COMPARATOR).setDefault_validation_class(DEFAULT_VALIDATOR).setCompression(compression);
  CfDef counterCfDef=new CfDef("Keyspace1","Counter1").setDefault_validation_class("CounterColumnType").setReplicate_on_write(replicateOnWrite).setCompression(compression);
  CfDef counterSuperCfDef=new CfDef("Keyspace1","SuperCounter1").setDefault_validation_class("CounterColumnType").setReplicate_on_write(replicateOnWrite).setColumn_type("Super").setCompression(compression);
  keyspace.setName("Keyspace1");
  keyspace.setStrategy_class(replicationStrategy);
  if (!replicationStrategyOptions.isEmpty()) {
    keyspace.setStrategy_options(replicationStrategyOptions);
  }
  keyspace.setCf_defs(new ArrayList<CfDef>(Arrays.asList(standardCfDef,superCfDef,counterCfDef,counterSuperCfDef)));
  Cassandra.Client client=getClient(false);
  try {
    client.system_add_keyspace(keyspace);
    System.out.println(String.format("Created keyspaces. Sleeping %ss for propagation.",nodes.length));
    Thread.sleep(nodes.length * 1000);
  }
 catch (  InvalidRequestException e) {
    System.err.println("Unable to create stress keyspace: " + e.getWhy());
  }
catch (  Exception e) {
    System.err.println(e.getMessage());
  }
}
