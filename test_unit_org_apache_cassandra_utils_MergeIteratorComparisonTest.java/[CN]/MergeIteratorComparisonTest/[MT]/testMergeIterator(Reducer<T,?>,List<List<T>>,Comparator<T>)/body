{
{
    IMergeIterator<T,?> tested=MergeIterator.get(closeableIterators(lists),comparator,reducer);
    IMergeIterator<T,?> base=new MergeIteratorPQ<>(closeableIterators(lists),comparator,reducer);
    Object[] basearr=Iterators.toArray(base,Object.class);
    Assert.assertArrayEquals(basearr,Iterators.toArray(tested,Object.class));
    if (!BENCHMARK)     return;
  }
  CountingComparator<T> cmp, cmpb;
  cmp=new CountingComparator<>(comparator);
  cmpb=new CountingComparator<>(comparator);
  System.out.println();
  for (int i=0; i < 10; ++i) {
    benchmarkIterator(MergeIterator.get(closeableIterators(lists),cmp,reducer),cmp);
    benchmarkIterator(new MergeIteratorPQ<>(closeableIterators(lists),cmpb,reducer),cmpb);
  }
  System.out.format("MI: %.2f\n",cmp.count / (double)cmpb.count);
}
