{
  Composite start=invert ? slice.finish : slice.start;
  Composite finish=invert ? slice.start : slice.finish;
  int lowerBound=0, upperBound=size;
  if (iter != null) {
    if (invert)     upperBound=iter.previousSliceEnd;
 else     lowerBound=iter.previousSliceEnd;
  }
  if (!start.isEmpty()) {
    lowerBound=binarySearch(lowerBound,upperBound,start,internalComparator());
    if (lowerBound < 0)     lowerBound=-lowerBound - 1;
  }
  if (!finish.isEmpty()) {
    upperBound=binarySearch(lowerBound,upperBound,finish,internalComparator());
    upperBound=upperBound < 0 ? -upperBound - 1 : upperBound + 1;
  }
  if (iter != null)   iter.previousSliceEnd=invert ? lowerBound : upperBound;
  return invert ? new BackwardsCellIterator(lowerBound,upperBound) : new ForwardsCellIterator(lowerBound,upperBound);
}
