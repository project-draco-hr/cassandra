{
  String keyspace=in.readUTF();
  String columnFamily=in.readUTF();
  long timestamp=in.readLong();
  AbstractBounds<RowPosition> keyRange=AbstractBounds.serializer.deserialize(in,version).toRowBounds();
  CFMetaData metadata=Schema.instance.getCFMetaData(keyspace,columnFamily);
  SliceQueryFilter predicate=metadata.comparator.sliceQueryFilterSerializer().deserialize(in,version);
  Composite start=metadata.comparator.serializer().deserialize(in);
  Composite stop=metadata.comparator.serializer().deserialize(in);
  int filterCount=in.readInt();
  List<IndexExpression> rowFilter=new ArrayList<IndexExpression>(filterCount);
  for (int i=0; i < filterCount; i++) {
    IndexExpression expr=new IndexExpression(ByteBufferUtil.readWithShortLength(in),IndexExpression.Operator.findByOrdinal(in.readInt()),ByteBufferUtil.readWithShortLength(in));
    rowFilter.add(expr);
  }
  int limit=in.readInt();
  return new PagedRangeCommand(keyspace,columnFamily,timestamp,keyRange,predicate,start,stop,rowFilter,limit);
}
