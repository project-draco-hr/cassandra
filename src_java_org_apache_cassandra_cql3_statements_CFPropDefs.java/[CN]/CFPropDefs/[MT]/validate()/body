{
  if (compactionStrategyClass != null)   return;
  validate(keywords,obsoleteKeywords);
  Map<String,String> compactionOptions=getCompactionOptions();
  if (!compactionOptions.isEmpty()) {
    String strategy=compactionOptions.get(COMPACTION_STRATEGY_CLASS_KEY);
    if (strategy == null)     throw new ConfigurationException("Missing sub-option '" + COMPACTION_STRATEGY_CLASS_KEY + "' for the '"+ KW_COMPACTION+ "' option.");
    compactionStrategyClass=CFMetaData.createCompactionStrategy(strategy);
    compactionOptions.remove(COMPACTION_STRATEGY_CLASS_KEY);
    CFMetaData.validateCompactionOptions(compactionStrategyClass,compactionOptions);
  }
  Map<String,String> compressionOptions=getCompressionOptions();
  if (!compressionOptions.isEmpty()) {
    if (CompressionParameters.isEnabled(compressionOptions) && !CompressionParameters.containsSstableCompressionClass(compressionOptions)) {
      throw new ConfigurationException("Missing sub-option '" + CompressionParameters.CLASS + "' for the '"+ KW_COMPRESSION+ "' option.");
    }
    CompressionParameters compressionParameters=CompressionParameters.fromMap(compressionOptions);
    compressionParameters.validate();
  }
  validateMinimumInt(KW_DEFAULT_TIME_TO_LIVE,0,CFMetaData.DEFAULT_DEFAULT_TIME_TO_LIVE);
  Integer minIndexInterval=getInt(KW_MIN_INDEX_INTERVAL,null);
  Integer maxIndexInterval=getInt(KW_MAX_INDEX_INTERVAL,null);
  if (minIndexInterval != null && minIndexInterval < 1)   throw new ConfigurationException(KW_MIN_INDEX_INTERVAL + " must be greater than 0, but was " + minIndexInterval);
  if (maxIndexInterval != null && minIndexInterval != null && maxIndexInterval < minIndexInterval)   throw new ConfigurationException(KW_MAX_INDEX_INTERVAL + " must be greater than " + KW_MIN_INDEX_INTERVAL+ ", but was "+ maxIndexInterval);
  SpeculativeRetry.fromString(getString(KW_SPECULATIVE_RETRY,SpeculativeRetry.RetryType.NONE.name()));
}
