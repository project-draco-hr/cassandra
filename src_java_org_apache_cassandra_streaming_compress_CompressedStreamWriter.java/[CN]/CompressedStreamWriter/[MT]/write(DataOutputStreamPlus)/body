{
  long totalSize=totalSize();
  RandomAccessReader file=sstable.openDataReader();
  final FileChannel fc=file.getChannel();
  long progress=0L;
  List<Pair<Long,Long>> sections=getTransferSections(compressionInfo.chunks);
  try {
    for (    final Pair<Long,Long> section : sections) {
      long length=section.right - section.left;
      long bytesTransferred=0;
      while (bytesTransferred < length) {
        final long bytesTransferredFinal=bytesTransferred;
        final int toTransfer=(int)Math.min(CHUNK_SIZE,length - bytesTransferred);
        limiter.acquire(toTransfer);
        long lastWrite=out.applyToChannel(new Function<WritableByteChannel,Long>(){
          public Long apply(          WritableByteChannel wbc){
            try {
              return fc.transferTo(section.left + bytesTransferredFinal,toTransfer,wbc);
            }
 catch (            IOException e) {
              throw new FSWriteError(e,sstable.getFilename());
            }
          }
        }
);
        bytesTransferred+=lastWrite;
        progress+=lastWrite;
        session.progress(sstable.descriptor,ProgressInfo.Direction.OUT,progress,totalSize);
      }
    }
  }
  finally {
    FileUtils.closeQuietly(file);
  }
}
