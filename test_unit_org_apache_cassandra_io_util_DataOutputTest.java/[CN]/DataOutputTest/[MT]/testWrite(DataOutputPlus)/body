{
  final ByteArrayOutputStream bos=new ByteArrayOutputStream();
  final DataOutput canon=new DataOutputStream(bos);
  Random rnd=ThreadLocalRandom.current();
  int size=50;
  byte[] bytes=new byte[size];
  rnd.nextBytes(bytes);
  ByteBufferUtil.writeWithLength(bytes,test);
  ByteBufferUtil.writeWithLength(bytes,canon);
  bytes=new byte[size];
  rnd.nextBytes(bytes);
  ByteBufferUtil.writeWithLength(wrap(bytes,false),test);
  ByteBufferUtil.writeWithLength(bytes,canon);
  bytes=new byte[size];
  rnd.nextBytes(bytes);
  ByteBufferUtil.writeWithLength(wrap(bytes,true),test);
  ByteBufferUtil.writeWithLength(bytes,canon);
  bytes=new byte[size];
  rnd.nextBytes(bytes);
  ByteBufferUtil.writeWithShortLength(bytes,test);
  ByteBufferUtil.writeWithShortLength(bytes,canon);
  bytes=new byte[size];
  rnd.nextBytes(bytes);
  ByteBufferUtil.writeWithShortLength(wrap(bytes,false),test);
  ByteBufferUtil.writeWithShortLength(bytes,canon);
  bytes=new byte[size];
  rnd.nextBytes(bytes);
  ByteBufferUtil.writeWithShortLength(wrap(bytes,true),test);
  ByteBufferUtil.writeWithShortLength(bytes,canon);
{
    long v=rnd.nextLong();
    test.writeLong(v);
    canon.writeLong(v);
  }
{
    int v=rnd.nextInt();
    test.writeInt(v);
    canon.writeInt(v);
  }
{
    short v=(short)rnd.nextInt();
    test.writeShort(v);
    canon.writeShort(v);
  }
{
    byte v=(byte)rnd.nextInt();
    test.write(v);
    canon.write(v);
  }
{
    double v=rnd.nextDouble();
    test.writeDouble(v);
    canon.writeDouble(v);
  }
{
    float v=(float)rnd.nextDouble();
    test.writeFloat(v);
    canon.writeFloat(v);
  }
  return new DataInputStream(new ByteArrayInputStream(bos.toByteArray()));
}
