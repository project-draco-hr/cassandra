{
  TOKEN_SCALE=new BigInteger("16");
  Range<Token> full=new Range<>(tok(-1),tok(-1));
  Iterator<TreeRange> ranges;
  MerkleTrees mts2=new MerkleTrees(partitioner);
  mts2.addMerkleTree(Integer.MAX_VALUE,fullRange());
  mts.split(tok(8));
  mts.split(tok(4));
  mts.split(tok(12));
  mts.split(tok(6));
  mts.split(tok(10));
  ranges=mts.invalids();
  ranges.next().addAll(new HIterator(2,4));
  ranges.next().addAll(new HIterator(6));
  ranges.next().addAll(new HIterator(8));
  ranges.next().addAll(new HIterator(new int[0]));
  ranges.next().addAll(new HIterator(12));
  ranges.next().addAll(new HIterator(14,-1));
  mts2.split(tok(8));
  mts2.split(tok(4));
  mts2.split(tok(12));
  mts2.split(tok(2));
  mts2.split(tok(10));
  mts2.split(tok(9));
  mts2.split(tok(11));
  ranges=mts2.invalids();
  ranges.next().addAll(new HIterator(2));
  ranges.next().addAll(new HIterator(4));
  ranges.next().addAll(new HIterator(6,8));
  ranges.next().addAll(new HIterator(new int[0]));
  ranges.next().addAll(new HIterator(new int[0]));
  ranges.next().addAll(new HIterator(new int[0]));
  ranges.next().addAll(new HIterator(12));
  ranges.next().addAll(new HIterator(14,-1));
  byte[] mthash=mts.hash(full);
  byte[] mt2hash=mts2.hash(full);
  assertHashEquals("Tree hashes did not match: " + mts + " && "+ mts2,mthash,mt2hash);
}
