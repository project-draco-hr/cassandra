{
  EstimatedHistogram rowSizes=EstimatedHistogram.serializer.deserialize(in);
  EstimatedHistogram columnCounts=EstimatedHistogram.serializer.deserialize(in);
  ReplayPosition replayPosition=ReplayPosition.serializer.deserialize(in);
  long minTimestamp=in.readLong();
  long maxTimestamp=in.readLong();
  int minLocalDeletionTime=version.storeRows() ? in.readInt() : Integer.MAX_VALUE;
  int maxLocalDeletionTime=in.readInt();
  int minTTL=version.storeRows() ? in.readInt() : 0;
  int maxTTL=version.storeRows() ? in.readInt() : Integer.MAX_VALUE;
  double compressionRatio=in.readDouble();
  StreamingHistogram tombstoneHistogram=StreamingHistogram.serializer.deserialize(in);
  int sstableLevel=in.readInt();
  long repairedAt=0;
  if (version.hasRepairedAt())   repairedAt=in.readLong();
  int colCount=in.readInt();
  List<ByteBuffer> minClusteringValues=new ArrayList<>(colCount);
  for (int i=0; i < colCount; i++)   minClusteringValues.add(ByteBufferUtil.readWithShortLength(in));
  colCount=in.readInt();
  List<ByteBuffer> maxClusteringValues=new ArrayList<>(colCount);
  for (int i=0; i < colCount; i++)   maxClusteringValues.add(ByteBufferUtil.readWithShortLength(in));
  boolean hasLegacyCounterShards=true;
  if (version.tracksLegacyCounterShards())   hasLegacyCounterShards=in.readBoolean();
  long totalColumnsSet=version.storeRows() ? in.readLong() : -1L;
  long totalRows=version.storeRows() ? in.readLong() : -1L;
  return new StatsMetadata(rowSizes,columnCounts,replayPosition,minTimestamp,maxTimestamp,minLocalDeletionTime,maxLocalDeletionTime,minTTL,maxTTL,compressionRatio,tombstoneHistogram,sstableLevel,minClusteringValues,maxClusteringValues,hasLegacyCounterShards,repairedAt,totalColumnsSet,totalRows);
}
