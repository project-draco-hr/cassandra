{
  EstimatedHistogram rowSizes=EstimatedHistogram.serializer.deserialize(in);
  EstimatedHistogram columnCounts=EstimatedHistogram.serializer.deserialize(in);
  ReplayPosition commitLogLowerBound=ReplayPosition.NONE, commitLogUpperBound;
  commitLogUpperBound=ReplayPosition.serializer.deserialize(in);
  long minTimestamp=in.readLong();
  long maxTimestamp=in.readLong();
  int maxLocalDeletionTime=in.readInt();
  double compressionRatio=in.readDouble();
  StreamingHistogram tombstoneHistogram=StreamingHistogram.serializer.deserialize(in);
  int sstableLevel=in.readInt();
  long repairedAt=0;
  if (version.hasRepairedAt())   repairedAt=in.readLong();
  int colCount=in.readInt();
  List<ByteBuffer> minColumnNames=new ArrayList<>(colCount);
  for (int i=0; i < colCount; i++)   minColumnNames.add(ByteBufferUtil.readWithShortLength(in));
  colCount=in.readInt();
  List<ByteBuffer> maxColumnNames=new ArrayList<>(colCount);
  for (int i=0; i < colCount; i++)   maxColumnNames.add(ByteBufferUtil.readWithShortLength(in));
  boolean hasLegacyCounterShards=true;
  if (version.tracksLegacyCounterShards())   hasLegacyCounterShards=in.readBoolean();
  if (version.hasCommitLogLowerBound())   commitLogLowerBound=ReplayPosition.serializer.deserialize(in);
  return new StatsMetadata(rowSizes,columnCounts,commitLogLowerBound,commitLogUpperBound,minTimestamp,maxTimestamp,maxLocalDeletionTime,compressionRatio,tombstoneHistogram,sstableLevel,minColumnNames,maxColumnNames,hasLegacyCounterShards,repairedAt);
}
