{
  EstimatedHistogram.serializer.serialize(component.estimatedPartitionSize,out);
  EstimatedHistogram.serializer.serialize(component.estimatedColumnCount,out);
  CommitLogPosition.serializer.serialize(component.commitLogIntervals.upperBound().orElse(CommitLogPosition.NONE),out);
  out.writeLong(component.minTimestamp);
  out.writeLong(component.maxTimestamp);
  if (version.storeRows())   out.writeInt(component.minLocalDeletionTime);
  out.writeInt(component.maxLocalDeletionTime);
  if (version.storeRows()) {
    out.writeInt(component.minTTL);
    out.writeInt(component.maxTTL);
  }
  out.writeDouble(component.compressionRatio);
  StreamingHistogram.serializer.serialize(component.estimatedTombstoneDropTime,out);
  out.writeInt(component.sstableLevel);
  out.writeLong(component.repairedAt);
  out.writeInt(component.minClusteringValues.size());
  for (  ByteBuffer value : component.minClusteringValues)   ByteBufferUtil.writeWithShortLength(value,out);
  out.writeInt(component.maxClusteringValues.size());
  for (  ByteBuffer value : component.maxClusteringValues)   ByteBufferUtil.writeWithShortLength(value,out);
  out.writeBoolean(component.hasLegacyCounterShards);
  if (version.storeRows()) {
    out.writeLong(component.totalColumnsSet);
    out.writeLong(component.totalRows);
  }
  if (version.hasCommitLogLowerBound())   CommitLogPosition.serializer.serialize(component.commitLogIntervals.lowerBound().orElse(CommitLogPosition.NONE),out);
  if (version.hasCommitLogIntervals())   commitLogPositionSetSerializer.serialize(component.commitLogIntervals,out);
}
