{
  final Map<InetAddress,NodeData> nodeDataMap=new HashMap<>();
  if (topologyConfig.topology == null) {
    throw new ConfigurationException("Topology configuration file is missing the topology section");
  }
  for (  final Datacenter datacenter : topologyConfig.topology) {
    if (datacenter.dc_name == null) {
      throw new ConfigurationException("Topology configuration file is missing a data center name for some data center");
    }
    for (    final Rack rack : datacenter.racks) {
      if (rack.rack_name == null) {
        throw new ConfigurationException(String.format("Topology configuration file is missing a rack name for some rack under data center '%s'",datacenter.dc_name));
      }
      for (      final Node node : rack.nodes) {
        if (node.broadcast_address == null) {
          throw new ConfigurationException(String.format("Topology configuration file is missing a broadcast address for some node under data center '%s' rack '%s'",datacenter.dc_name,rack.rack_name));
        }
        final InetAddress endpoint=InetAddresses.forString(node.broadcast_address);
        final InetAddress dcLocalAddress=node.dc_local_address == null ? null : InetAddresses.forString(node.dc_local_address);
        final NodeData nodeData=new NodeData();
        nodeData.datacenter=datacenter.dc_name;
        nodeData.rack=rack.rack_name;
        nodeData.dcLocalAddress=dcLocalAddress;
        if (nodeDataMap.put(endpoint,nodeData) != null) {
          throw new ConfigurationException(String.format("IP address '%s' appears more than once in the topology configuration file",endpoint));
        }
        if (dcLocalAddress != null && nodeDataMap.put(dcLocalAddress,nodeData) != null) {
          throw new ConfigurationException(String.format("IP address '%s' appears more than once in the topology configuration file",dcLocalAddress));
        }
      }
    }
  }
  final NodeData localNodeData=nodeDataMap.get(FBUtilities.getBroadcastAddress());
  if (localNodeData == null) {
    throw new ConfigurationException("Topology configuration missing information for the local node");
  }
  final NodeData defaultNodeData=new NodeData();
  if (topologyConfig.default_dc_name == null) {
    throw new ConfigurationException("default_dc_name must be specified");
  }
  if (topologyConfig.default_rack_name == null) {
    throw new ConfigurationException("default_rack_name must be specified");
  }
  defaultNodeData.datacenter=topologyConfig.default_dc_name;
  defaultNodeData.rack=topologyConfig.default_rack_name;
  if (isUpdate && !livenessCheck(nodeDataMap,defaultNodeData))   return;
  this.nodeDataMap=nodeDataMap;
  this.localNodeData=localNodeData;
  this.defaultNodeData=defaultNodeData;
  maybeSetApplicationState();
  if (logger.isDebugEnabled()) {
    logger.debug("Built topology map from config file: localNodeData={}, nodeDataMap={}",localNodeData,nodeDataMap);
  }
  if (gossiperInitialized) {
    StorageService.instance.gossipSnitchInfo();
  }
  if (isUpdate && StorageService.instance != null)   StorageService.instance.updateTopology();
}
