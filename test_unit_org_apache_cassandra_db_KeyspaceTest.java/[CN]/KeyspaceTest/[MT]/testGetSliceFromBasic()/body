{
  final Keyspace keyspace=Keyspace.open(KEYSPACE1);
  final ColumnFamilyStore cfStore=keyspace.getColumnFamilyStore("Standard1");
  final DecoratedKey ROW=Util.dk("row1");
  ColumnFamily cf=ArrayBackedSortedColumns.factory.create(KEYSPACE1,"Standard1");
  cf.addColumn(column("col1","val1",1L));
  cf.addColumn(column("col3","val3",1L));
  cf.addColumn(column("col4","val4",1L));
  cf.addColumn(column("col5","val5",1L));
  cf.addColumn(column("col7","val7",1L));
  cf.addColumn(column("col9","val9",1L));
  Mutation rm=new Mutation(KEYSPACE1,ROW.getKey(),cf);
  rm.applyUnsafe();
  rm=new Mutation(KEYSPACE1,ROW.getKey());
  rm.delete("Standard1",cellname("col4"),2L);
  rm.applyUnsafe();
  Runnable verify=new WrappedRunnable(){
    public void runMayThrow() throws Exception {
      ColumnFamily cf;
      cf=cfStore.getColumnFamily(ROW,cellname("col5"),Composites.EMPTY,false,2,System.currentTimeMillis());
      assertColumns(cf,"col5","col7");
      cf=cfStore.getColumnFamily(ROW,cellname("col4"),Composites.EMPTY,false,2,System.currentTimeMillis());
      assertColumns(cf,"col4","col5","col7");
      assertColumns(ColumnFamilyStore.removeDeleted(cf,Integer.MAX_VALUE),"col5","col7");
      cf=cfStore.getColumnFamily(ROW,cellname("col5"),Composites.EMPTY,true,2,System.currentTimeMillis());
      assertColumns(cf,"col3","col4","col5");
      cf=cfStore.getColumnFamily(ROW,cellname("col6"),Composites.EMPTY,true,2,System.currentTimeMillis());
      assertColumns(cf,"col3","col4","col5");
      cf=cfStore.getColumnFamily(ROW,Composites.EMPTY,Composites.EMPTY,true,2,System.currentTimeMillis());
      assertColumns(cf,"col7","col9");
      cf=cfStore.getColumnFamily(ROW,cellname("col95"),Composites.EMPTY,false,2,System.currentTimeMillis());
      assertColumns(cf);
      cf=cfStore.getColumnFamily(ROW,cellname("col0"),Composites.EMPTY,true,2,System.currentTimeMillis());
      assertColumns(cf);
    }
  }
;
  reTest(keyspace.getColumnFamilyStore("Standard1"),verify);
}
