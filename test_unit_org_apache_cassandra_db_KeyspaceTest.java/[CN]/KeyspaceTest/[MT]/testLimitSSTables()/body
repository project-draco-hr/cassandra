{
  String tableName=createTable("CREATE TABLE %s (a text, b int, c int, PRIMARY KEY (a, b))");
  final ColumnFamilyStore cfs=Keyspace.open(KEYSPACE).getColumnFamilyStore(tableName);
  cfs.disableAutoCompaction();
  for (int j=0; j < 10; j++) {
    for (int i=1000 + (j * 100); i < 1000 + ((j + 1) * 100); i++)     execute("INSERT INTO %s (a, b, c) VALUES (?, ?, ?) USING TIMESTAMP ?","0",i,i,(long)i);
    cfs.forceBlockingFlush();
  }
  ((ClearableHistogram)cfs.metric.sstablesPerReadHistogram.cf).clear();
  SinglePartitionReadCommand command=singlePartitionSlice(cfs,"0",slices(cfs,null,1499,false),1000);
  int[] expectedValues=new int[500];
  for (int i=0; i < 500; i++)   expectedValues[i]=i + 1000;
  assertRowsInResult(cfs,command,expectedValues);
  assertEquals(5,cfs.metric.sstablesPerReadHistogram.cf.getSnapshot().getMax(),0.1);
  ((ClearableHistogram)cfs.metric.sstablesPerReadHistogram.cf).clear();
  command=singlePartitionSlice(cfs,"0",slices(cfs,1500,2000,false),1000);
  for (int i=0; i < 500; i++)   expectedValues[i]=i + 1500;
  assertRowsInResult(cfs,command,expectedValues);
  assertEquals(5,cfs.metric.sstablesPerReadHistogram.cf.getSnapshot().getMax(),0.1);
  ((ClearableHistogram)cfs.metric.sstablesPerReadHistogram.cf).clear();
  command=singlePartitionSlice(cfs,"0",slices(cfs,1500,2000,true),1000);
  for (int i=0; i < 500; i++)   expectedValues[i]=1999 - i;
  assertRowsInResult(cfs,command,expectedValues);
}
