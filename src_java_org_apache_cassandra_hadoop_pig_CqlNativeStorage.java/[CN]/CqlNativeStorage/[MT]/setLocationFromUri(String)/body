{
  try {
    if (!location.startsWith("cql://"))     throw new Exception("Bad scheme: " + location);
    String[] urlParts=location.split("\\?");
    if (urlParts.length > 1) {
      Map<String,String> urlQuery=getQueryMap(urlParts[1]);
      if (urlQuery.containsKey("page_size"))       pageSize=Integer.parseInt(urlQuery.get("page_size"));
      if (urlQuery.containsKey("output_query"))       outputQuery=urlQuery.get("output_query");
      if (urlQuery.containsKey("split_size"))       splitSize=Integer.parseInt(urlQuery.get("split_size"));
      if (urlQuery.containsKey("partitioner"))       partitionerClass=urlQuery.get("partitioner");
      if (urlQuery.containsKey("use_secondary"))       usePartitionFilter=Boolean.parseBoolean(urlQuery.get("use_secondary"));
      if (urlQuery.containsKey("init_address"))       initHostAddress=urlQuery.get("init_address");
      if (urlQuery.containsKey("native_port"))       nativePort=urlQuery.get("native_port");
      if (urlQuery.containsKey("core_conns"))       nativeCoreConnections=urlQuery.get("core_conns");
      if (urlQuery.containsKey("max_conns"))       nativeMaxConnections=urlQuery.get("max_conns");
      if (urlQuery.containsKey("max_simult_reqs"))       nativeMaxSimultReqs=urlQuery.get("max_simult_reqs");
      if (urlQuery.containsKey("native_timeout"))       nativeConnectionTimeout=urlQuery.get("native_timeout");
      if (urlQuery.containsKey("native_read_timeout"))       nativeReadConnectionTimeout=urlQuery.get("native_read_timeout");
      if (urlQuery.containsKey("rec_buff_size"))       nativeReceiveBufferSize=urlQuery.get("rec_buff_size");
      if (urlQuery.containsKey("send_buff_size"))       nativeSendBufferSize=urlQuery.get("send_buff_size");
      if (urlQuery.containsKey("solinger"))       nativeSolinger=urlQuery.get("solinger");
      if (urlQuery.containsKey("tcp_nodelay"))       nativeTcpNodelay=urlQuery.get("tcp_nodelay");
      if (urlQuery.containsKey("reuse_address"))       nativeReuseAddress=urlQuery.get("reuse_address");
      if (urlQuery.containsKey("keep_alive"))       nativeKeepAlive=urlQuery.get("keep_alive");
      if (urlQuery.containsKey("auth_provider"))       nativeAuthProvider=urlQuery.get("auth_provider");
      if (urlQuery.containsKey("trust_store_path"))       nativeSSLTruststorePath=urlQuery.get("trust_store_path");
      if (urlQuery.containsKey("key_store_path"))       nativeSSLKeystorePath=urlQuery.get("key_store_path");
      if (urlQuery.containsKey("trust_store_password"))       nativeSSLTruststorePassword=urlQuery.get("trust_store_password");
      if (urlQuery.containsKey("key_store_password"))       nativeSSLKeystorePassword=urlQuery.get("key_store_password");
      if (urlQuery.containsKey("cipher_suites"))       nativeSSLCipherSuites=urlQuery.get("cipher_suites");
      if (urlQuery.containsKey("input_cql"))       inputCql=urlQuery.get("input_cql");
      if (urlQuery.containsKey("columns"))       columns=urlQuery.get("columns");
      if (urlQuery.containsKey("where_clause"))       whereClause=urlQuery.get("where_clause");
      if (urlQuery.containsKey("rpc_port"))       rpcPort=urlQuery.get("rpc_port");
    }
    String[] parts=urlParts[0].split("/+");
    String[] credentialsAndKeyspace=parts[1].split("@");
    if (credentialsAndKeyspace.length > 1) {
      String[] credentials=credentialsAndKeyspace[0].split(":");
      username=credentials[0];
      password=credentials[1];
      keyspace=credentialsAndKeyspace[1];
    }
 else {
      keyspace=parts[1];
    }
    column_family=parts[2];
  }
 catch (  Exception e) {
    throw new IOException("Expected 'cql://[username:password@]<keyspace>/<columnfamily>" + "[?[page_size=<size>][&columns=<col1,col2>][&output_query=<prepared_statement>]" + "[&where_clause=<clause>][&split_size=<size>][&partitioner=<partitioner>][&use_secondary=true|false]"+ "[&init_address=<host>][&native_port=<native_port>][&core_conns=<core_conns>]"+ "[&max_conns=<max_conns>][&min_simult_reqs=<min_simult_reqs>][&max_simult_reqs=<max_simult_reqs>]"+ "[&native_timeout=<native_timeout>][&native_read_timeout=<native_read_timeout>][&rec_buff_size=<rec_buff_size>]"+ "[&send_buff_size=<send_buff_size>][&solinger=<solinger>][&tcp_nodelay=<tcp_nodelay>][&reuse_address=<reuse_address>]"+ "[&keep_alive=<keep_alive>][&auth_provider=<auth_provider>][&trust_store_path=<trust_store_path>]"+ "[&key_store_path=<key_store_path>][&trust_store_password=<trust_store_password>]"+ "[&key_store_password=<key_store_password>][&cipher_suites=<cipher_suites>][&input_cql=<input_cql>]"+ "[columns=<columns>][where_clause=<where_clause>]]': "+ e.getMessage());
  }
}
