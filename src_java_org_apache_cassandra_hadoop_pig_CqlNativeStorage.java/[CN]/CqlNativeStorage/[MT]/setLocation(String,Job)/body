{
  conf=job.getConfiguration();
  setLocationFromUri(location);
  if (username != null && password != null) {
    ConfigHelper.setInputKeyspaceUserNameAndPassword(conf,username,password);
    CqlConfigHelper.setUserNameAndPassword(conf,username,password);
  }
  if (splitSize > 0)   ConfigHelper.setInputSplitSize(conf,splitSize);
  if (partitionerClass != null)   ConfigHelper.setInputPartitioner(conf,partitionerClass);
  if (initHostAddress != null)   ConfigHelper.setInputInitialAddress(conf,initHostAddress);
  if (rpcPort != null)   ConfigHelper.setInputRpcPort(conf,rpcPort);
  if (nativePort != null)   CqlConfigHelper.setInputNativePort(conf,nativePort);
  if (nativeCoreConnections != null)   CqlConfigHelper.setInputCoreConnections(conf,nativeCoreConnections);
  if (nativeMaxConnections != null)   CqlConfigHelper.setInputMaxConnections(conf,nativeMaxConnections);
  if (nativeMinSimultReqs != null)   CqlConfigHelper.setInputMinSimultReqPerConnections(conf,nativeMinSimultReqs);
  if (nativeMaxSimultReqs != null)   CqlConfigHelper.setInputMaxSimultReqPerConnections(conf,nativeMaxSimultReqs);
  if (nativeConnectionTimeout != null)   CqlConfigHelper.setInputNativeConnectionTimeout(conf,nativeConnectionTimeout);
  if (nativeReadConnectionTimeout != null)   CqlConfigHelper.setInputNativeReadConnectionTimeout(conf,nativeReadConnectionTimeout);
  if (nativeReceiveBufferSize != null)   CqlConfigHelper.setInputNativeReceiveBufferSize(conf,nativeReceiveBufferSize);
  if (nativeSendBufferSize != null)   CqlConfigHelper.setInputNativeSendBufferSize(conf,nativeSendBufferSize);
  if (nativeSolinger != null)   CqlConfigHelper.setInputNativeSolinger(conf,nativeSolinger);
  if (nativeTcpNodelay != null)   CqlConfigHelper.setInputNativeTcpNodelay(conf,nativeTcpNodelay);
  if (nativeReuseAddress != null)   CqlConfigHelper.setInputNativeReuseAddress(conf,nativeReuseAddress);
  if (nativeKeepAlive != null)   CqlConfigHelper.setInputNativeKeepAlive(conf,nativeKeepAlive);
  if (nativeAuthProvider != null)   CqlConfigHelper.setInputNativeAuthProvider(conf,nativeAuthProvider);
  if (nativeSSLTruststorePath != null)   CqlConfigHelper.setInputNativeSSLTruststorePath(conf,nativeSSLTruststorePath);
  if (nativeSSLKeystorePath != null)   CqlConfigHelper.setInputNativeSSLKeystorePath(conf,nativeSSLKeystorePath);
  if (nativeSSLTruststorePassword != null)   CqlConfigHelper.setInputNativeSSLTruststorePassword(conf,nativeSSLTruststorePassword);
  if (nativeSSLKeystorePassword != null)   CqlConfigHelper.setInputNativeSSLKeystorePassword(conf,nativeSSLKeystorePassword);
  if (nativeSSLCipherSuites != null)   CqlConfigHelper.setInputNativeSSLCipherSuites(conf,nativeSSLCipherSuites);
  ConfigHelper.setInputColumnFamily(conf,keyspace,column_family);
  setConnectionInformation();
  CqlConfigHelper.setInputCQLPageRowSize(conf,String.valueOf(pageSize));
  CqlConfigHelper.setInputCql(conf,inputCql);
  if (System.getenv(PIG_INPUT_SPLIT_SIZE) != null) {
    try {
      ConfigHelper.setInputSplitSize(conf,Integer.parseInt(System.getenv(PIG_INPUT_SPLIT_SIZE)));
    }
 catch (    NumberFormatException e) {
      throw new IOException("PIG_INPUT_SPLIT_SIZE is not a number",e);
    }
  }
  if (ConfigHelper.getInputInitialAddress(conf) == null)   throw new IOException("PIG_INPUT_INITIAL_ADDRESS or PIG_INITIAL_ADDRESS environment variable not set");
  if (ConfigHelper.getInputPartitioner(conf) == null)   throw new IOException("PIG_INPUT_PARTITIONER or PIG_PARTITIONER environment variable not set");
  if (loadSignature == null)   loadSignature=location;
  initSchema(loadSignature);
}
