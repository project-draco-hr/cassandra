{
  Keyspace keyspace=Keyspace.open(KEYSPACE1);
  ColumnFamilyStore cfs=keyspace.getColumnFamilyStore("Standard2");
  cfs.disableAutoCompaction();
  for (int i=1; i < 5; i++) {
    DecoratedKey key=Util.dk(String.valueOf(i));
    Mutation rm=new Mutation(KEYSPACE1,key.getKey());
    rm.add("Standard2",Util.cellname(String.valueOf(i)),ByteBufferUtil.EMPTY_BYTE_BUFFER,i);
    rm.apply();
    if (i % 2 == 0)     cfs.forceBlockingFlush();
  }
  Collection<SSTableReader> toCompact=cfs.getSSTables();
  assertEquals(2,toCompact.size());
  for (int i=1; i < 5; i++) {
    DecoratedKey key=Util.dk(String.valueOf(i));
    Mutation rm=new Mutation(KEYSPACE1,key.getKey());
    rm.add("Standard2",Util.cellname(String.valueOf(i)),ByteBufferUtil.EMPTY_BYTE_BUFFER,i);
    rm.apply();
  }
  cfs.forceBlockingFlush();
  SSTableReader tmpSSTable=null;
  for (  SSTableReader sstable : cfs.getSSTables())   if (!toCompact.contains(sstable))   tmpSSTable=sstable;
  assertNotNull(tmpSSTable);
  Util.compact(cfs,toCompact);
  assertEquals(2,cfs.getSSTables().size());
  cfs.markObsolete(Collections.singleton(tmpSSTable),OperationType.UNKNOWN);
  assertEquals(1,cfs.getSSTables().size());
  assertEquals(4,Util.getRangeSlice(cfs).size());
}
