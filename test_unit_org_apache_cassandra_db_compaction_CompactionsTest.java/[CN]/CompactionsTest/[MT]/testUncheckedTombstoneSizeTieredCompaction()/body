{
  Keyspace keyspace=Keyspace.open(KEYSPACE1);
  ColumnFamilyStore store=keyspace.getColumnFamilyStore(CF_STANDARD1);
  store.clearUnsafe();
  store.metadata.gcGraceSeconds(1);
  store.metadata.compactionStrategyOptions.put("tombstone_compaction_interval","1");
  store.metadata.compactionStrategyOptions.put("unchecked_tombstone_compaction","false");
  store.reload();
  store.setCompactionStrategyClass(SizeTieredCompactionStrategy.class.getName());
  store.disableAutoCompaction();
  populate(KEYSPACE1,CF_STANDARD1,0,9,3);
  store.forceBlockingFlush();
  long timestamp2=populate(KEYSPACE1,CF_STANDARD1,10,19,3);
  store.forceBlockingFlush();
  assertEquals(2,store.getSSTables().size());
  Iterator<SSTableReader> it=store.getSSTables().iterator();
  long originalSize1=it.next().uncompressedLength();
  long originalSize2=it.next().uncompressedLength();
  TimeUnit.SECONDS.sleep(5);
  store.enableAutoCompaction();
  FBUtilities.waitOnFutures(CompactionManager.instance.submitBackground(store));
  do {
    TimeUnit.SECONDS.sleep(1);
  }
 while (CompactionManager.instance.getPendingTasks() > 0 || CompactionManager.instance.getActiveCompactions() > 0);
  assertEquals(2,store.getSSTables().size());
  it=store.getSSTables().iterator();
  long newSize1=it.next().uncompressedLength();
  long newSize2=it.next().uncompressedLength();
  assertEquals("candidate sstable should not be tombstone-compacted because its key range overlap with other sstable",originalSize1,newSize1);
  assertEquals("candidate sstable should not be tombstone-compacted because its key range overlap with other sstable",originalSize2,newSize2);
  store.metadata.compactionStrategyOptions.put("unchecked_tombstone_compaction","true");
  store.reload();
  FBUtilities.waitOnFutures(CompactionManager.instance.submitBackground(store));
  do {
    TimeUnit.SECONDS.sleep(1);
  }
 while (CompactionManager.instance.getPendingTasks() > 0 || CompactionManager.instance.getActiveCompactions() > 0);
  assertEquals(2,store.getSSTables().size());
  it=store.getSSTables().iterator();
  newSize1=it.next().uncompressedLength();
  newSize2=it.next().uncompressedLength();
  assertTrue("should be less than " + originalSize1 + ", but was "+ newSize1,newSize1 < originalSize1);
  assertTrue("should be less than " + originalSize2 + ", but was "+ newSize2,newSize2 < originalSize2);
  assertMaxTimestamp(store,timestamp2);
}
