{
  return new AbstractUnfilteredPartitionIterator(){
    private int idx;
    public boolean isForThrift(){
      return true;
    }
    public CFMetaData metadata(){
      return metadata;
    }
    public boolean hasNext(){
      return idx < partitions.size();
    }
    public UnfilteredRowIterator next(){
      ImmutableBTreePartition partition=partitions.get(idx++);
      ClusteringIndexFilter filter=command.clusteringIndexFilter(partition.partitionKey());
      if (!command.metadata().isCompound())       return filter.filter(partition.sliceableUnfilteredIterator(command.columnFilter(),filter.isReversed()));
      return partition.unfilteredIterator(command.columnFilter(),Slices.ALL,filter.isReversed());
    }
  }
;
}
