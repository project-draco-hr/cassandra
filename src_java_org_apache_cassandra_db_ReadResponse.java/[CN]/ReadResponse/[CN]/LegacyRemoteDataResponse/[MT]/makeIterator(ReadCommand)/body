{
  boolean skipFirst=false;
  boolean skipLast=false;
  if (!partitions.isEmpty() && command instanceof PartitionRangeReadCommand) {
    AbstractBounds<PartitionPosition> keyRange=((PartitionRangeReadCommand)command).dataRange().keyRange();
    boolean isExcludingBounds=keyRange instanceof ExcludingBounds;
    skipFirst=isExcludingBounds && !keyRange.contains(partitions.get(0).partitionKey());
    skipLast=(isExcludingBounds || keyRange instanceof IncludingExcludingBounds) && !keyRange.contains(partitions.get(partitions.size() - 1).partitionKey());
  }
  final List<ImmutableBTreePartition> toReturn;
  if (skipFirst || skipLast) {
    toReturn=partitions.size() == 1 ? Collections.emptyList() : partitions.subList(skipFirst ? 1 : 0,skipLast ? partitions.size() - 1 : partitions.size());
  }
 else {
    toReturn=partitions;
  }
  return new AbstractUnfilteredPartitionIterator(){
    private int idx;
    public boolean isForThrift(){
      return true;
    }
    public CFMetaData metadata(){
      return command.metadata();
    }
    public boolean hasNext(){
      return idx < toReturn.size();
    }
    public UnfilteredRowIterator next(){
      ImmutableBTreePartition partition=toReturn.get(idx++);
      ClusteringIndexFilter filter=command.clusteringIndexFilter(partition.partitionKey());
      UnfilteredRowIterator iterator=partition.unfilteredIterator(command.columnFilter(),filter.getSlices(command.metadata()),filter.isReversed());
      if (command.isForThrift())       return ThriftResultsMerger.maybeWrap(iterator,command.nowInSec());
 else       return iterator;
    }
  }
;
}
