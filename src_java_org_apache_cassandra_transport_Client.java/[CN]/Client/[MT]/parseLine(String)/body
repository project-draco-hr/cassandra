{
  Splitter splitter=Splitter.on(' ').trimResults().omitEmptyStrings();
  Iterator<String> iter=splitter.split(line).iterator();
  if (!iter.hasNext())   return null;
  String msgType=iter.next().toUpperCase();
  if (msgType.equals("STARTUP")) {
    EnumMap<StartupMessage.Option,Object> options=new EnumMap<StartupMessage.Option,Object>(StartupMessage.Option.class);
    while (iter.hasNext()) {
      String next=iter.next();
      if (next.toLowerCase().equals("snappy")) {
        options.put(StartupMessage.Option.COMPRESSION,"snappy");
        connection.setCompressor(FrameCompressor.SnappyCompressor.instance);
      }
    }
    return new StartupMessage("3.0.0",options);
  }
 else   if (msgType.equals("QUERY")) {
    String query=line.substring(6);
    return new QueryMessage(query);
  }
 else   if (msgType.equals("PREPARE")) {
    String query=line.substring(8);
    return new PrepareMessage(query);
  }
 else   if (msgType.equals("EXECUTE")) {
    try {
      int id=Integer.parseInt(iter.next());
      List<ByteBuffer> values=new ArrayList<ByteBuffer>();
      while (iter.hasNext()) {
        String next=iter.next();
        ByteBuffer bb;
        try {
          int v=Integer.parseInt(next);
          bb=Int32Type.instance.decompose(v);
        }
 catch (        NumberFormatException e) {
          bb=UTF8Type.instance.decompose(next);
        }
        values.add(bb);
      }
      return new ExecuteMessage(id,values);
    }
 catch (    Exception e) {
      return null;
    }
  }
 else   if (msgType.equals("OPTIONS")) {
    return new OptionsMessage();
  }
 else   if (msgType.equals("CREDENTIALS")) {
    CredentialsMessage msg=new CredentialsMessage();
    while (iter.hasNext()) {
      String next=iter.next();
      String[] kv=next.split("=");
      if (kv.length != 2)       return null;
      msg.credentials.put(kv[0],kv[1]);
    }
    return msg;
  }
  return null;
}
