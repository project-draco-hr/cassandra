{
  Splitter splitter=Splitter.on(' ').trimResults().omitEmptyStrings();
  Iterator<String> iter=splitter.split(line).iterator();
  if (!iter.hasNext())   return null;
  String msgType=iter.next().toUpperCase();
  if (msgType.equals("STARTUP")) {
    Map<String,String> options=new HashMap<String,String>();
    options.put(StartupMessage.CQL_VERSION,"3.0.0");
    while (iter.hasNext()) {
      String next=iter.next();
      if (next.toLowerCase().equals("snappy")) {
        options.put(StartupMessage.COMPRESSION,"snappy");
        connection.setCompressor(FrameCompressor.SnappyCompressor.instance);
      }
    }
    return new StartupMessage(options);
  }
 else   if (msgType.equals("QUERY")) {
    line=line.substring(6);
    String query=line;
    int pageSize=-1;
    if (line.matches(".+ !\\d+$")) {
      int idx=line.lastIndexOf('!');
      query=line.substring(0,idx - 1);
      try {
        pageSize=Integer.parseInt(line.substring(idx + 1,line.length()));
      }
 catch (      NumberFormatException e) {
        return null;
      }
    }
    return new QueryMessage(query,QueryOptions.create(ConsistencyLevel.ONE,Collections.<ByteBuffer>emptyList(),false,pageSize,null,null));
  }
 else   if (msgType.equals("PREPARE")) {
    String query=line.substring(8);
    return new PrepareMessage(query);
  }
 else   if (msgType.equals("EXECUTE")) {
    try {
      byte[] id=Hex.hexToBytes(iter.next());
      List<ByteBuffer> values=new ArrayList<ByteBuffer>();
      while (iter.hasNext()) {
        String next=iter.next();
        ByteBuffer bb;
        try {
          int v=Integer.parseInt(next);
          bb=Int32Type.instance.decompose(v);
        }
 catch (        NumberFormatException e) {
          bb=UTF8Type.instance.decompose(next);
        }
        values.add(bb);
      }
      return new ExecuteMessage(MD5Digest.wrap(id),QueryOptions.forInternalCalls(ConsistencyLevel.ONE,values));
    }
 catch (    Exception e) {
      return null;
    }
  }
 else   if (msgType.equals("OPTIONS")) {
    return new OptionsMessage();
  }
 else   if (msgType.equals("CREDENTIALS")) {
    System.err.println("[WARN] CREDENTIALS command is deprecated, use AUTHENTICATE instead");
    CredentialsMessage msg=new CredentialsMessage();
    msg.credentials.putAll(readCredentials(iter));
    return msg;
  }
 else   if (msgType.equals("AUTHENTICATE")) {
    Map<String,String> credentials=readCredentials(iter);
    if (!credentials.containsKey(IAuthenticator.USERNAME_KEY) || !credentials.containsKey(IAuthenticator.PASSWORD_KEY)) {
      System.err.println("[ERROR] Authentication requires both 'username' and 'password'");
      return null;
    }
    return new AuthResponse(encodeCredentialsForSasl(credentials));
  }
 else   if (msgType.equals("REGISTER")) {
    String type=line.substring(9).toUpperCase();
    try {
      return new RegisterMessage(Collections.singletonList(Enum.valueOf(Event.Type.class,type)));
    }
 catch (    IllegalArgumentException e) {
      System.err.println("[ERROR] Unknown event type: " + type);
      return null;
    }
  }
  return null;
}
