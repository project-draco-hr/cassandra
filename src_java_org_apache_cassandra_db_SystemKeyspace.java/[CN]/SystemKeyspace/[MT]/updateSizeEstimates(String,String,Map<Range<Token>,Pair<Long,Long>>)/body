{
  long timestamp=FBUtilities.timestampMicros();
  DecoratedKey key=decorate(UTF8Type.instance.decompose(keyspace));
  PartitionUpdate update=new PartitionUpdate(SizeEstimates,key,SizeEstimates.partitionColumns(),estimates.size());
  Mutation mutation=new Mutation(update);
  int nowInSec=FBUtilities.nowInSeconds();
  update.addRangeTombstone(Slice.make(SizeEstimates.comparator,table),new SimpleDeletionTime(timestamp - 1,nowInSec));
  for (  Map.Entry<Range<Token>,Pair<Long,Long>> entry : estimates.entrySet()) {
    Range<Token> range=entry.getKey();
    Pair<Long,Long> values=entry.getValue();
    new RowUpdateBuilder(SizeEstimates,timestamp,mutation).clustering(table,range.left.toString(),range.right.toString()).add("partitions_count",values.left).add("mean_partition_size",values.right).build();
  }
  mutation.apply();
}
