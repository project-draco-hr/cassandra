{
  long timestamp=FBUtilities.timestampMicros();
  PartitionUpdate update=new PartitionUpdate(SizeEstimates,UTF8Type.instance.decompose(keyspace),SizeEstimates.partitionColumns(),estimates.size());
  Mutation mutation=new Mutation(update);
  int nowInSec=FBUtilities.nowInSeconds();
  update.add(new RangeTombstone(Slice.make(SizeEstimates.comparator,table),new DeletionTime(timestamp - 1,nowInSec)));
  for (  Map.Entry<Range<Token>,Pair<Long,Long>> entry : estimates.entrySet()) {
    Range<Token> range=entry.getKey();
    Pair<Long,Long> values=entry.getValue();
    update.add(Rows.simpleBuilder(SizeEstimates,table,range.left.toString(),range.right.toString()).timestamp(timestamp).add("partitions_count",values.left).add("mean_partition_size",values.right).build());
  }
  mutation.apply();
}
