{
  int childCount=ast.getChildCount();
  assert(childCount == 2);
  CommonTree columnFamilySpec=(CommonTree)ast.getChild(0);
  assert(columnFamilySpec.getType() == CqlParser.A_COLUMN_ACCESS);
  CFMetaData cfMetaData=getColumnFamilyInfo(columnFamilySpec);
  ConstantOperand rowKey=new ConstantOperand(getRowKey(columnFamilySpec));
  int dimensionCnt=numColumnDimensions(columnFamilySpec);
  CommonTree valueNode=(CommonTree)(ast.getChild(1));
  Plan plan=null;
  if ("Super".equals(cfMetaData.columnType)) {
    if (dimensionCnt == 2) {
      OperandDef value=getSimpleExpr(valueNode);
      ConstantOperand superColumnKey=new ConstantOperand(getColumn(columnFamilySpec,0));
      ConstantOperand columnKey=new ConstantOperand(getColumn(columnFamilySpec,1));
      plan=new SetUniqueKey(cfMetaData,rowKey,superColumnKey,columnKey,value);
    }
 else     if (dimensionCnt == 1) {
      ColumnMapExpr columnMapExpr=getColumnMapExpr(valueNode);
      ConstantOperand superColumnKey=new ConstantOperand(getColumn(columnFamilySpec,0));
      plan=new SetColumnMap(cfMetaData,rowKey,superColumnKey,columnMapExpr);
    }
 else {
      logger_.assertLog(dimensionCnt == 0,"invalid dimensionCnt: " + dimensionCnt);
      SuperColumnMapExpr superColumnMapExpr=getSuperColumnMapExpr(valueNode);
      plan=new SetSuperColumnMap(cfMetaData,rowKey,superColumnMapExpr);
    }
  }
 else {
    if (dimensionCnt == 1) {
      OperandDef value=getSimpleExpr(valueNode);
      ConstantOperand columnKey=new ConstantOperand(getColumn(columnFamilySpec,0));
      plan=new SetUniqueKey(cfMetaData,rowKey,columnKey,value);
    }
 else {
      logger_.assertLog(dimensionCnt == 0,"invalid dimensionCnt: " + dimensionCnt);
      ColumnMapExpr columnMapExpr=getColumnMapExpr(valueNode);
      plan=new SetColumnMap(cfMetaData,rowKey,columnMapExpr);
    }
  }
  return plan;
}
