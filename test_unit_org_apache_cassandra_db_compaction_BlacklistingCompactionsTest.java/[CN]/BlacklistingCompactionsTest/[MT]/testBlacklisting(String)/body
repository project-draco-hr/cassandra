{
  Keyspace keyspace=Keyspace.open(KEYSPACE1);
  final ColumnFamilyStore cfs=keyspace.getColumnFamilyStore(tableName);
  final int ROWS_PER_SSTABLE=10;
  final int SSTABLES=cfs.metadata.params.minIndexInterval * 2 / ROWS_PER_SSTABLE;
  final int SSTABLES_TO_CORRUPT=8;
  assertTrue(String.format("Not enough sstables (%d), expected at least %d sstables to corrupt",SSTABLES,SSTABLES_TO_CORRUPT),SSTABLES > SSTABLES_TO_CORRUPT);
  cfs.disableAutoCompaction();
  long maxTimestampExpected=Long.MIN_VALUE;
  Set<DecoratedKey> inserted=new HashSet<>();
  for (int j=0; j < SSTABLES; j++) {
    for (int i=0; i < ROWS_PER_SSTABLE; i++) {
      DecoratedKey key=Util.dk(String.valueOf(i));
      long timestamp=j * ROWS_PER_SSTABLE + i;
      new RowUpdateBuilder(cfs.metadata,timestamp,key.getKey()).clustering(Long.valueOf(i)).add("val",Long.valueOf(i)).build().applyUnsafe();
      maxTimestampExpected=Math.max(timestamp,maxTimestampExpected);
      inserted.add(key);
    }
    cfs.forceBlockingFlush();
    CompactionsTest.assertMaxTimestamp(cfs,maxTimestampExpected);
    assertEquals(inserted.toString(),inserted.size(),Util.getAll(Util.cmd(cfs).build()).size());
  }
  Collection<SSTableReader> sstables=cfs.getLiveSSTables();
  int currentSSTable=0;
  for (  SSTableReader sstable : sstables) {
    if (currentSSTable + 1 > SSTABLES_TO_CORRUPT)     break;
    RandomAccessFile raf=null;
    try {
      int corruptionSize=100;
      raf=new RandomAccessFile(sstable.getFilename(),"rw");
      assertNotNull(raf);
      assertTrue(raf.length() > corruptionSize);
      long pos=random.nextInt((int)(raf.length() - corruptionSize));
      logger.info("Corrupting sstable {} [{}] at pos {} / {}",currentSSTable,sstable.getFilename(),pos,raf.length());
      raf.seek(pos);
      byte[] corruption=new byte[corruptionSize];
      random.nextBytes(corruption);
      raf.write(corruption);
    }
  finally {
      FileUtils.closeQuietly(raf);
    }
    currentSSTable++;
  }
  int failures=0;
  for (int i=0; i < sstables.size(); i++) {
    try {
      cfs.forceMajorCompaction();
    }
 catch (    Exception e) {
      failures++;
      continue;
    }
    break;
  }
  cfs.truncateBlocking();
  assertEquals(SSTABLES_TO_CORRUPT,failures);
}
