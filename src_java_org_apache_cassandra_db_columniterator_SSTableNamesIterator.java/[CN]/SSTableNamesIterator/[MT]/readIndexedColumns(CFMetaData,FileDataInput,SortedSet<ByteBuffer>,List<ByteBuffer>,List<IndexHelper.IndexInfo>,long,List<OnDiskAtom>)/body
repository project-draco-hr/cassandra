{
  AbstractType<?> comparator=metadata.comparator;
  SortedSet<IndexHelper.IndexInfo> ranges=new TreeSet<IndexHelper.IndexInfo>(IndexHelper.getComparator(comparator,false));
  for (  ByteBuffer name : filteredColumnNames) {
    int index=IndexHelper.indexFor(name,indexList,comparator,false);
    if (index == indexList.size())     continue;
    IndexHelper.IndexInfo indexInfo=indexList.get(index);
    if (comparator.compare(name,indexInfo.firstName) < 0)     continue;
    ranges.add(indexInfo);
  }
  if (ranges.isEmpty())   return;
  for (  IndexHelper.IndexInfo indexInfo : ranges) {
    long positionToSeek=basePosition + indexInfo.offset;
    if (file == null)     file=createFileDataInput(positionToSeek);
    OnDiskAtom.Serializer atomSerializer=cf.getOnDiskSerializer();
    file.seek(positionToSeek);
    FileMark mark=file.mark();
    while (file.bytesPastMark(mark) < indexInfo.width) {
      OnDiskAtom column=atomSerializer.deserializeFromSSTable(file,sstable.descriptor.version);
      if (!(column instanceof IColumn) || columnNames.contains(column.name()))       result.add(column);
    }
  }
}
