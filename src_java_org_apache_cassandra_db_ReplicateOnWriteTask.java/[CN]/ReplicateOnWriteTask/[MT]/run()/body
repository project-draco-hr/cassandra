{
  List<ReadCommand> readCommands=new LinkedList<ReadCommand>();
  for (  ColumnFamily columnFamily : mutation.getColumnFamilies()) {
    if (!columnFamily.metadata().getReplicateOnWrite())     continue;
    if (!columnFamily.isSuper()) {
      QueryPath queryPath=new QueryPath(columnFamily.metadata().cfName);
      ReadCommand readCommand=new SliceByNamesReadCommand(mutation.getTable(),mutation.key(),queryPath,columnFamily.getColumnNames());
      readCommands.add(readCommand);
      continue;
    }
    for (    IColumn superColumn : columnFamily.getSortedColumns()) {
      QueryPath queryPath=new QueryPath(columnFamily.metadata().cfName,superColumn.name());
      Collection<IColumn> subColumns=superColumn.getSubColumns();
      Collection<ByteBuffer> subColNames=new HashSet<ByteBuffer>(subColumns.size());
      for (      IColumn subCol : subColumns) {
        subColNames.add(subCol.name());
      }
      ReadCommand readCommand=new SliceByNamesReadCommand(mutation.getTable(),mutation.key(),queryPath,subColNames);
      readCommands.add(readCommand);
    }
  }
  if (0 == readCommands.size())   return;
  try {
    List<InetAddress> foreignReplicas=StorageService.instance.getLiveNaturalEndpoints(mutation.getTable(),mutation.key());
    foreignReplicas.remove(FBUtilities.getLocalAddress());
    RowMutation repairRowMutation=new RowMutation(mutation.getTable(),mutation.key());
    for (    ReadCommand readCommand : readCommands) {
      Table table=Table.open(readCommand.table);
      Row row=readCommand.getRow(table);
      AbstractType defaultValidator=row.cf.metadata().getDefaultValidator();
      if (defaultValidator.isCommutative()) {
        for (        InetAddress foreignNode : foreignReplicas) {
          ((AbstractCommutativeType)defaultValidator).cleanContext(row.cf,foreignNode);
        }
      }
      repairRowMutation.add(row.cf);
    }
    for (    InetAddress foreignReplica : foreignReplicas) {
      RowMutationMessage repairMessage=new RowMutationMessage(repairRowMutation);
      Message message=repairMessage.makeRowMutationMessage(StorageService.Verb.REPLICATE_ON_WRITE);
      MessagingService.instance.sendOneWay(message,foreignReplica);
    }
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
}
