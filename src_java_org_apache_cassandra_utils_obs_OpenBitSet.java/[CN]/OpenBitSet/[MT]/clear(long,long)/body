{
  if (endIndex <= startIndex)   return;
  int startWord=(int)(startIndex >> 6);
  if (startWord >= wlen)   return;
  int endWord=(int)((endIndex - 1) >> 6);
  long startmask=-1L << startIndex;
  long endmask=-1L >>> -endIndex;
  startmask=~startmask;
  endmask=~endmask;
  if (startWord == endWord) {
    bits[startWord / PAGE_SIZE][startWord % PAGE_SIZE]&=(startmask | endmask);
    return;
  }
  bits[startWord / PAGE_SIZE][startWord % PAGE_SIZE]&=startmask;
  int middle=Math.min(wlen,endWord);
  if (startWord / PAGE_SIZE == middle / PAGE_SIZE) {
    Arrays.fill(bits[startWord / PAGE_SIZE],(startWord + 1) % PAGE_SIZE,middle % PAGE_SIZE,0L);
  }
 else {
    while (++startWord < middle)     bits[startWord / PAGE_SIZE][startWord % PAGE_SIZE]=0L;
  }
  if (endWord < wlen) {
    bits[endWord / PAGE_SIZE][endWord % PAGE_SIZE]&=endmask;
  }
}
