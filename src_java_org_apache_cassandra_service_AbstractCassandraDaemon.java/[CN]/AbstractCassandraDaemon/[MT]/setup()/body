{
  logger.info("Heap size: {}/{}",Runtime.getRuntime().totalMemory(),Runtime.getRuntime().maxMemory());
  logger.info("Classpath: {}",System.getProperty("java.class.path"));
  CLibrary.tryMlockall();
  listenPort=DatabaseDescriptor.getRpcPort();
  listenAddr=DatabaseDescriptor.getRpcAddress();
  if (listenAddr == null)   listenAddr=FBUtilities.getLocalAddress();
  Thread.setDefaultUncaughtExceptionHandler(new Thread.UncaughtExceptionHandler(){
    public void uncaughtException(    Thread t,    Throwable e){
      logger.error("Fatal exception in thread " + t,e);
      if (e instanceof OutOfMemoryError) {
        System.exit(100);
      }
    }
  }
);
  for (  CFMetaData cfm : DatabaseDescriptor.getTableMetaData(Table.SYSTEM_TABLE).values())   ColumnFamilyStore.scrubDataDirectories(Table.SYSTEM_TABLE,cfm.cfName);
  try {
    SystemTable.checkHealth();
  }
 catch (  ConfigurationException e) {
    logger.error("Fatal exception during initialization",e);
    System.exit(100);
  }
  try {
    DatabaseDescriptor.loadSchemas();
  }
 catch (  IOException e) {
    logger.error("Fatal exception during initialization",e);
    System.exit(100);
  }
  for (  String table : DatabaseDescriptor.getTables()) {
    for (    CFMetaData cfm : DatabaseDescriptor.getTableMetaData(table).values()) {
      ColumnFamilyStore.scrubDataDirectories(table,cfm.cfName);
    }
  }
  for (  String table : DatabaseDescriptor.getTables()) {
    if (logger.isDebugEnabled())     logger.debug("opening keyspace " + table);
    Table.open(table);
  }
  try {
    GCInspector.instance.start();
  }
 catch (  Throwable t) {
    logger.warn("Unable to start GCInspector (currently only supported on the Sun JVM)");
  }
  CommitLog.recover();
  CompactionManager.instance.checkAllColumnFamilies();
  UUID currentMigration=DatabaseDescriptor.getDefsVersion();
  UUID lastMigration=Migration.getLastMigrationId();
  if ((lastMigration != null) && (lastMigration.timestamp() > currentMigration.timestamp())) {
    Gossiper.instance.maybeInitializeLocalState(SystemTable.incrementAndGetGeneration());
    MigrationManager.applyMigrations(currentMigration,lastMigration);
  }
  SystemTable.purgeIncompatibleHints();
  StorageService.instance.registerDaemon(this);
  try {
    StorageService.instance.initServer();
  }
 catch (  ConfigurationException e) {
    logger.error("Fatal configuration error",e);
    System.err.println(e.getMessage() + "\nFatal configuration error; unable to start server.  See log for stacktrace.");
    System.exit(1);
  }
  Mx4jTool.maybeLoad();
}
