{
  logger.debug("reading file from {}, repairedAt = {}, level = {}",session.peer,repairedAt,sstableLevel);
  long totalSize=totalSize();
  Pair<String,String> kscf=Schema.instance.getCF(cfId);
  if (kscf == null) {
    throw new IOException("CF " + cfId + " was dropped during streaming");
  }
  ColumnFamilyStore cfs=Keyspace.open(kscf.left).getColumnFamilyStore(kscf.right);
  SSTableWriter writer=createWriter(cfs,totalSize,repairedAt,format);
  DataInputStream dis=new DataInputStream(new LZFInputStream(Channels.newInputStream(channel)));
  BytesReadTracker in=new BytesReadTracker(dis);
  StreamDeserializer deserializer=new StreamDeserializer(cfs.metadata,in,inputVersion,header.toHeader(cfs.metadata));
  try {
    while (in.getBytesRead() < totalSize) {
      writePartition(deserializer,writer,cfs);
      session.progress(desc,ProgressInfo.Direction.IN,in.getBytesRead(),totalSize);
    }
    return writer;
  }
 catch (  Throwable e) {
    writer.abort();
    drain(dis,in.getBytesRead());
    if (e instanceof IOException)     throw (IOException)e;
 else     throw Throwables.propagate(e);
  }
}
