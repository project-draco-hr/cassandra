{
  Set<InetAddress> endpoints=new HashSet<>();
  Range searchRange=new Range(token,token);
  NavigableMap<Range<Token>,List<InetAddress>> ascendingTailMap=ascendingMap.tailMap(searchRange,true);
  NavigableMap<Range<Token>,List<InetAddress>> descendingTailMap=descendingMap.tailMap(searchRange,false);
  if (ascendingTailMap.size() < descendingTailMap.size()) {
    addIntersections(endpoints,ascendingTailMap,descendingTailMap);
  }
 else {
    addIntersections(endpoints,descendingTailMap,ascendingTailMap);
  }
  ascendingTailMap=ascendingMapForWrapAround.tailMap(searchRange,true);
  descendingTailMap=descendingMapForWrapAround.tailMap(searchRange,false);
  for (  Map.Entry<Range<Token>,List<InetAddress>> entry : ascendingTailMap.entrySet()) {
    endpoints.addAll(entry.getValue());
  }
  for (  Map.Entry<Range<Token>,List<InetAddress>> entry : descendingTailMap.entrySet()) {
    endpoints.addAll(entry.getValue());
  }
  return endpoints;
}
