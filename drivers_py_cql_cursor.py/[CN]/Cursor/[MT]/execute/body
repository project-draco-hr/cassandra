def execute(self, cql_query, params={}):
    self.__checksock()
    try:
        prepared_q = self.prepare(cql_query, params)
    except KeyError as e:
        raise cql.ProgrammingError(('Unmatched named substitution: ' + ('%s not given for %s' % (e, cql_query))))
    if (self.compression == 'GZIP'):
        compressed_q = zlib.compress(prepared_q)
    else:
        compressed_q = prepared_q
    request_compression = getattr(Compression, self.compression)
    try:
        client = self.parent_connection.client
        response = client.execute_cql_query(compressed_q, request_compression)
    except InvalidRequestException as ire:
        raise cql.ProgrammingError(('Bad Request: %s' % ire.why))
    except SchemaDisagreementException as sde:
        raise cql.IntegrityError('Schema versions disagree, (try again later).')
    except TApplicationException as tapp:
        raise cql.InternalError('Internal application error')
    if (response.type == CqlResultType.ROWS):
        self.result = ResultSet(response.rows, self._query_ks, self._query_cf, self.decoder)
        self.rs_idx = 0
        self.rowcount = len(self.result)
        self.description = self.result.description
    if (response.type == CqlResultType.INT):
        self.result = [(response.num,)]
        self.rs_idx = 0
        self.rowcount = 1
        self.description = (None, None, None, None, None, None, None)
    return True
