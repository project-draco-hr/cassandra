{
  clientInfo=new Properties();
  url=PROTOCOL + createSubName(props);
  try {
    String host=props.getProperty(TAG_SERVER_NAME);
    int port=Integer.parseInt(props.getProperty(TAG_PORT_NUMBER));
    String keyspace=props.getProperty(TAG_DATABASE_NAME);
    username=props.getProperty(TAG_USER);
    String password=props.getProperty(TAG_PASSWORD);
    TSocket socket=new TSocket(host,port);
    transport=new TFramedTransport(socket);
    TProtocol protocol=new TBinaryProtocol(transport);
    client=new Cassandra.Client(protocol);
    socket.open();
    decoder=new ColumnDecoder(client.describe_keyspaces());
    if (username != null) {
      Map<String,String> credentials=new HashMap<String,String>();
      credentials.put("username",username);
      if (password != null)       credentials.put("password",password);
      AuthenticationRequest areq=new AuthenticationRequest(credentials);
      client.login(areq);
    }
    logger.info("Connected to {}:{}",host,port);
    if (keyspace != null) {
      execute("USE " + keyspace);
    }
  }
 catch (  SchemaDisagreementException e) {
    throw new SQLRecoverableException(SCHEMA_MISMATCH);
  }
catch (  InvalidRequestException e) {
    throw new SQLSyntaxErrorException(e);
  }
catch (  UnavailableException e) {
    throw new SQLNonTransientConnectionException(e);
  }
catch (  TimedOutException e) {
    throw new SQLTransientConnectionException(e);
  }
catch (  TException e) {
    throw new SQLNonTransientConnectionException(e);
  }
catch (  AuthenticationException e) {
    throw new SQLInvalidAuthorizationSpecException(e);
  }
catch (  AuthorizationException e) {
    throw new SQLInvalidAuthorizationSpecException(e);
  }
}
