{
  List<SSTableReader> newsstables=null;
  int nowInSec=FBUtilities.nowInSeconds();
  try (CompactionController controller=new CompactionController(cfs,txn.originals(),cfs.gcBefore(FBUtilities.nowInSeconds()))){
    try (SSTableRewriter rewriter=new SSTableRewriter(cfs,txn,1000,false);AbstractCompactionStrategy.ScannerList scanners=cfs.getCompactionStrategyManager().getScanners(txn.originals());CompactionIterator ci=new CompactionIterator(txn.opType(),scanners.scanners,controller,nowInSec,txn.opId())){
      long lastCheckObsoletion=System.nanoTime();
      File directory=txn.originals().iterator().next().descriptor.directory;
      Descriptor desc=Descriptor.fromFilename(cfs.getSSTablePath(directory));
      CFMetaData metadata=Schema.instance.getCFMetaData(desc);
      rewriter.switchWriter(SSTableWriter.create(metadata,desc,0,0,0,DatabaseDescriptor.getPartitioner(),SerializationHeader.make(cfs.metadata,txn.originals()),txn));
      while (ci.hasNext()) {
        rewriter.append(ci.next());
        if (System.nanoTime() - lastCheckObsoletion > TimeUnit.MINUTES.toNanos(1L)) {
          controller.maybeRefreshOverlaps();
          lastCheckObsoletion=System.nanoTime();
        }
      }
      if (!fail)       newsstables=rewriter.finish();
 else       rewriter.abort();
    }
   }
   assertTrue(fail || newsstables != null);
  if (newsstables != null) {
    Assert.assertEquals(1,newsstables.size());
    return newsstables.iterator().next();
  }
  return null;
}
