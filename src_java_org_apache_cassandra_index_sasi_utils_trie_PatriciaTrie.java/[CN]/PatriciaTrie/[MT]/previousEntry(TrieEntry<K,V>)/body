{
  if (start.predecessor == null)   throw new IllegalArgumentException("must have come from somewhere!");
  if (start.predecessor.right == start) {
    return isValidUplink(start.predecessor.left,start.predecessor) ? start.predecessor.left : followRight(start.predecessor.left);
  }
  TrieEntry<K,V> node=start.predecessor;
  while (node.parent != null && node == node.parent.left) {
    node=node.parent;
  }
  if (node.parent == null)   return null;
  if (isValidUplink(node.parent.left,node.parent)) {
    if (node.parent.left == root) {
      return root.isEmpty() ? null : root;
    }
 else {
      return node.parent.left;
    }
  }
 else {
    return followRight(node.parent.left);
  }
}
