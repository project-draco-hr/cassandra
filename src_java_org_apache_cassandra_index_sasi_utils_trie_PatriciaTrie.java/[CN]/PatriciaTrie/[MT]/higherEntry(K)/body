{
  int lengthInBits=lengthInBits(key);
  if (lengthInBits == 0) {
    if (!root.isEmpty()) {
      return size() > 1 ? nextEntry(root) : null;
    }
 else {
      return firstEntry();
    }
  }
  TrieEntry<K,V> found=getNearestEntryForKey(key);
  if (compareKeys(key,found.key))   return nextEntry(found);
  int bitIndex=bitIndex(key,found.key);
  if (Tries.isValidBitIndex(bitIndex)) {
    return replaceCeil(key,bitIndex);
  }
 else   if (Tries.isNullBitKey(bitIndex)) {
    if (!root.isEmpty()) {
      return firstEntry();
    }
 else     if (size() > 1) {
      return nextEntry(firstEntry());
    }
 else {
      return null;
    }
  }
 else   if (Tries.isEqualBitKey(bitIndex)) {
    return nextEntry(found);
  }
  throw new IllegalStateException("invalid lookup: " + key);
}
