{
  ReadCommand readMessageDigestOnly=command.copy();
  readMessageDigestOnly.setDigestQuery(true);
  Row row=null;
  Message message=command.makeReadMessage();
  Message messageDigestOnly=readMessageDigestOnly.makeReadMessage();
  IResponseResolver<Row> readResponseResolver=new ReadResponseResolver();
  QuorumResponseHandler<Row> quorumResponseHandler=new QuorumResponseHandler<Row>(DatabaseDescriptor.getReplicationFactor(),readResponseResolver);
  EndPoint dataPoint=StorageService.instance().findSuitableEndPoint(command.key);
  List<EndPoint> endpointList=new ArrayList<EndPoint>(Arrays.asList(StorageService.instance().getNStorageEndPoint(command.key)));
  endpointList.remove(dataPoint);
  EndPoint[] endPoints=new EndPoint[endpointList.size() + 1];
  Message messages[]=new Message[endpointList.size() + 1];
  endPoints[0]=dataPoint;
  messages[0]=message;
  for (int i=1; i < endPoints.length; i++) {
    endPoints[i]=endpointList.get(i - 1);
    messages[i]=messageDigestOnly;
  }
  logger_.debug("strongread reading " + command + " from "+ StringUtils.join(endPoints,", "));
  try {
    MessagingService.getMessagingInstance().sendRR(messages,endPoints,quorumResponseHandler);
    long startTime2=System.currentTimeMillis();
    row=quorumResponseHandler.get();
    logger_.debug("quorumResponseHandler: " + (System.currentTimeMillis() - startTime2) + " ms.");
  }
 catch (  DigestMismatchException ex) {
    if (DatabaseDescriptor.getConsistencyCheck()) {
      IResponseResolver<Row> readResponseResolverRepair=new ReadResponseResolver();
      QuorumResponseHandler<Row> quorumResponseHandlerRepair=new QuorumResponseHandler<Row>(DatabaseDescriptor.getReplicationFactor(),readResponseResolverRepair);
      command.setDigestQuery(false);
      logger_.info("DigestMismatchException: " + command.key);
      Message messageRepair=command.makeReadMessage();
      MessagingService.getMessagingInstance().sendRR(messageRepair,endPoints,quorumResponseHandlerRepair);
      try {
        row=quorumResponseHandlerRepair.get();
      }
 catch (      DigestMismatchException e) {
        throw new RuntimeException(e);
      }
    }
  }
  return row;
}
