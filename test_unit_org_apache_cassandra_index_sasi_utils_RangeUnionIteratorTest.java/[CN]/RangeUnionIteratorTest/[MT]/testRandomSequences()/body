{
  ThreadLocalRandom random=ThreadLocalRandom.current();
  long[][] values=new long[random.nextInt(1,20)][];
  int numTests=random.nextInt(10,20);
  for (int tests=0; tests < numTests; tests++) {
    RangeUnionIterator.Builder<Long,Token> builder=RangeUnionIterator.builder();
    int totalCount=0;
    for (int i=0; i < values.length; i++) {
      long[] part=new long[random.nextInt(1,500)];
      for (int j=0; j < part.length; j++)       part[j]=random.nextLong();
      Arrays.sort(part);
      values[i]=part;
      builder.add(new LongIterator(part));
      totalCount+=part.length;
    }
    long[] totalOrdering=new long[totalCount];
    int index=0;
    for (    long[] part : values) {
      for (      long value : part)       totalOrdering[index++]=value;
    }
    Arrays.sort(totalOrdering);
    int count=0;
    RangeIterator<Long,Token> tokens=builder.build();
    Assert.assertNotNull(tokens);
    while (tokens.hasNext())     Assert.assertEquals(totalOrdering[count++],(long)tokens.next().get());
    Assert.assertEquals(totalCount,count);
  }
}
