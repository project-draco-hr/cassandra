def test_get_range_slice(self):
    for key in ['key1', 'key2', 'key3', 'key4', 'key5']:
        for cname in ['col1', 'col2', 'col3', 'col4', 'col5']:
            client.insert('Keyspace1', key, ColumnPath('Standard1', column=cname), ('v-' + cname), 0, ConsistencyLevel.ONE)
    cp = ColumnParent('Standard1')
    result = client.get_range_slice('Keyspace1', cp, SlicePredicate(column_names=['col1', 'col3']), 'key2', 'key4', 5, ConsistencyLevel.ONE)
    assert (len(result) == 3)
    assert (result[0].columns[0].column.name == 'col1')
    assert (result[0].columns[1].column.name == 'col3')
    result = client.get_range_slice('Keyspace1', cp, SlicePredicate(column_names=['col1', 'col3']), 'key2', 'key4', 1, ConsistencyLevel.ONE)
    assert (len(result) == 1)
    result = client.get_range_slice('Keyspace1', cp, SlicePredicate(slice_range=SliceRange(start='col2', finish='col4', reversed=False, count=5)), 'key1', 'key2', 5, ConsistencyLevel.ONE)
    assert (len(result) == 2)
    assert (result[0].key == 'key1')
    assert (result[1].key == 'key2')
    assert (len(result[0].columns) == 3)
    assert (result[0].columns[0].column.name == 'col2')
    assert (result[0].columns[2].column.name == 'col4')
    result = client.get_range_slice('Keyspace1', cp, SlicePredicate(slice_range=SliceRange(start='col2', finish='col4', reversed=False, count=2)), 'key1', 'key2', 5, ConsistencyLevel.ONE)
    assert (len(result[0].columns) == 2)
    result = client.get_range_slice('Keyspace1', cp, SlicePredicate(slice_range=SliceRange(start='col4', finish='col2', reversed=True, count=5)), 'key1', 'key2', 5, ConsistencyLevel.ONE)
    assert (result[0].columns[0].column.name == 'col2')
    assert (result[0].columns[2].column.name == 'col4')
    result = client.get_range_slice('Keyspace1', cp, SlicePredicate(slice_range=SliceRange(start='col2', finish='col4', reversed=False, count=5)), 'key1', 'key2', 1, ConsistencyLevel.ONE)
    assert (len(result) == 1)
