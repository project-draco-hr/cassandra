{
  Table table=cfs.getTable();
  logger.info("AntiCompacting [" + StringUtils.join(sstables,",") + "]");
  long expectedRangeFileSize=cfs.getExpectedCompactedFileSize(sstables) / 2;
  String compactionFileLocation=table.getDataFileLocation(expectedRangeFileSize);
  if (compactionFileLocation == null) {
    throw new UnsupportedOperationException("disk full");
  }
  List<SSTableReader> results=new ArrayList<SSTableReader>();
  long startTime=System.currentTimeMillis();
  long totalkeysWritten=0;
  int expectedBloomFilterSize=Math.max(SSTableReader.indexInterval(),(int)(SSTableReader.getApproximateKeyCount(sstables) / 2));
  if (logger.isDebugEnabled())   logger.debug("Expected bloom filter size : " + expectedBloomFilterSize);
  SSTableWriter writer=null;
  CompactionIterator ci=new AntiCompactionIterator(sstables,ranges,getDefaultGCBefore(),cfs.isCompleteSSTables(sstables));
  Iterator<CompactionIterator.CompactedRow> nni=new FilterIterator(ci,PredicateUtils.notNullPredicate());
  executor.beginCompaction(cfs,ci);
  try {
    if (!nni.hasNext()) {
      return results;
    }
    while (nni.hasNext()) {
      CompactionIterator.CompactedRow row=nni.next();
      if (writer == null) {
        FileUtils.createDirectory(compactionFileLocation);
        String newFilename=new File(cfs.getTempSSTablePath(compactionFileLocation)).getAbsolutePath();
        writer=new SSTableWriter(newFilename,expectedBloomFilterSize,StorageService.getPartitioner());
      }
      writer.append(row.key,row.buffer);
      totalkeysWritten++;
    }
  }
  finally {
    ci.close();
  }
  if (writer != null) {
    results.add(writer.closeAndOpenReader(DatabaseDescriptor.getKeysCachedFraction(table.name,cfs.getColumnFamilyName()),target != null));
    String format="AntiCompacted to %s.  %d/%d bytes for %d keys.  Time: %dms.";
    long dTime=System.currentTimeMillis() - startTime;
    logger.info(String.format(format,writer.getFilename(),SSTable.getTotalBytes(sstables),results.get(0).length(),totalkeysWritten,dTime));
  }
  return results;
}
