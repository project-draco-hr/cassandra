{
  Table table=cfs.getTable();
  if (DatabaseDescriptor.isSnapshotBeforeCompaction())   table.snapshot("compact-" + cfs.columnFamily_);
  logger.info("Compacting [" + StringUtils.join(sstables,",") + "]");
  String compactionFileLocation=table.getDataFileLocation(cfs.getExpectedCompactedFileSize(sstables));
  List<SSTableReader> smallerSSTables=new ArrayList<SSTableReader>(sstables);
  while (compactionFileLocation == null && smallerSSTables.size() > 1) {
    logger.warn("insufficient space to compact all requested files " + StringUtils.join(smallerSSTables,", "));
    smallerSSTables.remove(cfs.getMaxSizeFile(smallerSSTables));
    compactionFileLocation=table.getDataFileLocation(cfs.getExpectedCompactedFileSize(smallerSSTables));
  }
  if (compactionFileLocation == null) {
    logger.error("insufficient space to compact even the two smallest files, aborting");
    return 0;
  }
  sstables=smallerSSTables;
  boolean major=cfs.isCompleteSSTables(sstables);
  long startTime=System.currentTimeMillis();
  long totalkeysWritten=0;
  int expectedBloomFilterSize=Math.max(SSTableReader.indexInterval(),(int)SSTableReader.getApproximateKeyCount(sstables));
  if (logger.isDebugEnabled())   logger.debug("Expected bloom filter size : " + expectedBloomFilterSize);
  SSTableWriter writer;
  CompactionIterator ci=new CompactionIterator(sstables,gcBefore,major);
  Iterator<CompactionIterator.CompactedRow> nni=new FilterIterator(ci,PredicateUtils.notNullPredicate());
  executor.beginCompaction(cfs,ci);
  try {
    if (!nni.hasNext()) {
      cfs.markCompacted(sstables);
      return 0;
    }
    String newFilename=new File(cfs.getTempSSTablePath(compactionFileLocation)).getAbsolutePath();
    writer=new SSTableWriter(newFilename,expectedBloomFilterSize,StorageService.getPartitioner());
    AntiEntropyService.IValidator validator=AntiEntropyService.instance.getValidator(table.name,cfs.getColumnFamilyName(),null,major);
    validator.prepare();
    while (nni.hasNext()) {
      CompactionIterator.CompactedRow row=nni.next();
      long prevpos=writer.getFilePointer();
      writer.append(row.key,row.buffer);
      validator.add(row);
      totalkeysWritten++;
      long rowsize=writer.getFilePointer() - prevpos;
      if (rowsize > DatabaseDescriptor.getRowWarningThreshold())       logger.warn("Large row " + row.key.key + " in "+ cfs.getColumnFamilyName()+ " "+ rowsize+ " bytes");
      cfs.addToCompactedRowStats(rowsize);
    }
    validator.complete();
  }
  finally {
    ci.close();
  }
  SSTableReader ssTable=writer.closeAndOpenReader(getMaxDataAge(sstables));
  cfs.replaceCompactedSSTables(sstables,Arrays.asList(ssTable));
  submitMinorIfNeeded(cfs);
  String format="Compacted to %s.  %d/%d bytes for %d keys.  Time: %dms.";
  long dTime=System.currentTimeMillis() - startTime;
  logger.info(String.format(format,writer.getFilename(),SSTable.getTotalBytes(sstables),ssTable.length(),totalkeysWritten,dTime));
  return sstables.size();
}
