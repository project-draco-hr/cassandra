{
  PrintStream out=System.out;
  Option optGcgs=new Option(null,GCGS_KEY,true,"The " + GCGS_KEY + " to use when calculating droppable tombstones");
  Options options=new Options();
  options.addOption(optGcgs);
  CommandLine cmd=null;
  CommandLineParser parser=new PosixParser();
  try {
    cmd=parser.parse(options,args);
  }
 catch (  ParseException e) {
    printHelp(options,out);
  }
  if (cmd.getArgs().length == 0) {
    printHelp(options,out);
  }
  int gcgs=Integer.parseInt(cmd.getOptionValue(GCGS_KEY,"0"));
  Util.initDatabaseDescriptor();
  for (  String fname : cmd.getArgs()) {
    if (new File(fname).exists()) {
      Descriptor descriptor=Descriptor.fromFilename(fname);
      Map<MetadataType,MetadataComponent> metadata=descriptor.getMetadataSerializer().deserialize(descriptor,EnumSet.allOf(MetadataType.class));
      ValidationMetadata validation=(ValidationMetadata)metadata.get(MetadataType.VALIDATION);
      StatsMetadata stats=(StatsMetadata)metadata.get(MetadataType.STATS);
      CompactionMetadata compaction=(CompactionMetadata)metadata.get(MetadataType.COMPACTION);
      out.printf("SSTable: %s%n",descriptor);
      if (validation != null) {
        out.printf("Partitioner: %s%n",validation.partitioner);
        out.printf("Bloom Filter FP chance: %f%n",validation.bloomFilterFPChance);
      }
      if (stats != null) {
        out.printf("Minimum timestamp: %s%n",stats.minTimestamp);
        out.printf("Maximum timestamp: %s%n",stats.maxTimestamp);
        out.printf("SSTable max local deletion time: %s%n",stats.maxLocalDeletionTime);
        out.printf("Compression ratio: %s%n",stats.compressionRatio);
        out.printf("Estimated droppable tombstones: %s%n",stats.getEstimatedDroppableTombstoneRatio((int)(System.currentTimeMillis() / 1000) - gcgs));
        out.printf("SSTable Level: %d%n",stats.sstableLevel);
        out.printf("Repaired at: %d%n",stats.repairedAt);
        out.printf("Replay positions covered: %s\n",stats.commitLogIntervals);
        out.println("Estimated tombstone drop times:");
        for (        Map.Entry<Double,Long> entry : stats.estimatedTombstoneDropTime.getAsMap().entrySet()) {
          out.printf("%-10s:%10s%n",entry.getKey().intValue(),entry.getValue());
        }
        printHistograms(stats,out);
      }
      if (compaction != null) {
        out.printf("Estimated cardinality: %s%n",compaction.cardinalityEstimator.cardinality());
      }
    }
 else {
      out.println("No such file: " + fname);
    }
  }
}
