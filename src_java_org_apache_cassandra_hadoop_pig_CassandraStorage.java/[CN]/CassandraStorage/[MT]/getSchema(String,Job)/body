{
  setLocation(location,job);
  CfInfo cfInfo=getCfInfo(loadSignature);
  CfDef cfDef=cfInfo.cfDef;
  if (cfDef.column_type.equals("Super"))   return null;
  ResourceSchema schema=new ResourceSchema();
  Map<MarshallerType,AbstractType> marshallers=getDefaultMarshallers(cfDef);
  Map<ByteBuffer,AbstractType> validators=getValidatorMap(cfDef);
  ResourceFieldSchema keyFieldSchema=new ResourceFieldSchema();
  keyFieldSchema.setName("key");
  keyFieldSchema.setType(getPigType(marshallers.get(MarshallerType.KEY_VALIDATOR)));
  ResourceSchema bagSchema=new ResourceSchema();
  ResourceFieldSchema bagField=new ResourceFieldSchema();
  bagField.setType(DataType.BAG);
  bagField.setName("columns");
  ResourceSchema bagTupleSchema=new ResourceSchema();
  ResourceFieldSchema bagTupleField=new ResourceFieldSchema();
  bagTupleField.setType(DataType.TUPLE);
  ResourceFieldSchema bagcolSchema=new ResourceFieldSchema();
  ResourceFieldSchema bagvalSchema=new ResourceFieldSchema();
  bagcolSchema.setName("name");
  bagvalSchema.setName("value");
  bagcolSchema.setType(getPigType(marshallers.get(MarshallerType.COMPARATOR)));
  bagvalSchema.setType(getPigType(marshallers.get(MarshallerType.DEFAULT_VALIDATOR)));
  bagTupleSchema.setFields(new ResourceFieldSchema[]{bagcolSchema,bagvalSchema});
  bagTupleField.setSchema(bagTupleSchema);
  bagSchema.setFields(new ResourceFieldSchema[]{bagTupleField});
  bagField.setSchema(bagSchema);
  List<ResourceFieldSchema> allSchemaFields=new ArrayList<ResourceFieldSchema>();
  allSchemaFields.add(keyFieldSchema);
  if (!widerows && (cfInfo.compactCqlTable || !cfInfo.cql3Table)) {
    for (    ColumnDef cdef : cfDef.column_metadata) {
      ResourceSchema innerTupleSchema=new ResourceSchema();
      ResourceFieldSchema innerTupleField=new ResourceFieldSchema();
      innerTupleField.setType(DataType.TUPLE);
      innerTupleField.setSchema(innerTupleSchema);
      innerTupleField.setName(new String(cdef.getName()));
      ResourceFieldSchema idxColSchema=new ResourceFieldSchema();
      idxColSchema.setName("name");
      idxColSchema.setType(getPigType(marshallers.get(MarshallerType.COMPARATOR)));
      ResourceFieldSchema valSchema=new ResourceFieldSchema();
      AbstractType validator=validators.get(cdef.name);
      if (validator == null)       validator=marshallers.get(MarshallerType.DEFAULT_VALIDATOR);
      valSchema.setName("value");
      valSchema.setType(getPigType(validator));
      innerTupleSchema.setFields(new ResourceFieldSchema[]{idxColSchema,valSchema});
      allSchemaFields.add(innerTupleField);
    }
  }
  allSchemaFields.add(bagField);
  if (usePartitionFilter) {
    for (    ColumnDef cdef : getIndexes()) {
      ResourceFieldSchema idxSchema=new ResourceFieldSchema();
      idxSchema.setName("index_" + new String(cdef.getName()));
      AbstractType validator=validators.get(cdef.name);
      if (validator == null)       validator=marshallers.get(MarshallerType.DEFAULT_VALIDATOR);
      idxSchema.setType(getPigType(validator));
      allSchemaFields.add(idxSchema);
    }
  }
  schema.setFields(allSchemaFields.toArray(new ResourceFieldSchema[allSchemaFields.size()]));
  return schema;
}
