{
  try {
    if (!location.startsWith("cassandra://"))     throw new Exception("Bad scheme.");
    String[] urlParts=location.split("\\?");
    if (urlParts.length > 1) {
      Map<String,String> urlQuery=getQueryMap(urlParts[1]);
      AbstractType comparator=BytesType.instance;
      if (urlQuery.containsKey("comparator"))       comparator=TypeParser.parse(urlQuery.get("comparator"));
      if (urlQuery.containsKey("slice_start"))       slice_start=comparator.fromString(urlQuery.get("slice_start"));
      if (urlQuery.containsKey("slice_end"))       slice_end=comparator.fromString(urlQuery.get("slice_end"));
      if (urlQuery.containsKey("reversed"))       slice_reverse=Boolean.parseBoolean(urlQuery.get("reversed"));
      if (urlQuery.containsKey("limit"))       limit=Integer.parseInt(urlQuery.get("limit"));
    }
    String[] parts=urlParts[0].split("/+");
    keyspace=parts[1];
    column_family=parts[2];
  }
 catch (  Exception e) {
    throw new IOException("Expected 'cassandra://<keyspace>/<columnfamily>[?slice_start=<start>&slice_end=<end>[&reversed=true][&limit=1]]': " + e.getMessage());
  }
}
