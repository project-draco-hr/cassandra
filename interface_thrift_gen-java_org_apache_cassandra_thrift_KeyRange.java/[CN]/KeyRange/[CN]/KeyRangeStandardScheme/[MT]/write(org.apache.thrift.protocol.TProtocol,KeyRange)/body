{
  struct.validate();
  oprot.writeStructBegin(STRUCT_DESC);
  if (struct.start_key != null) {
    if (struct.isSetStart_key()) {
      oprot.writeFieldBegin(START_KEY_FIELD_DESC);
      oprot.writeBinary(struct.start_key);
      oprot.writeFieldEnd();
    }
  }
  if (struct.end_key != null) {
    if (struct.isSetEnd_key()) {
      oprot.writeFieldBegin(END_KEY_FIELD_DESC);
      oprot.writeBinary(struct.end_key);
      oprot.writeFieldEnd();
    }
  }
  if (struct.start_token != null) {
    if (struct.isSetStart_token()) {
      oprot.writeFieldBegin(START_TOKEN_FIELD_DESC);
      oprot.writeString(struct.start_token);
      oprot.writeFieldEnd();
    }
  }
  if (struct.end_token != null) {
    if (struct.isSetEnd_token()) {
      oprot.writeFieldBegin(END_TOKEN_FIELD_DESC);
      oprot.writeString(struct.end_token);
      oprot.writeFieldEnd();
    }
  }
  oprot.writeFieldBegin(COUNT_FIELD_DESC);
  oprot.writeI32(struct.count);
  oprot.writeFieldEnd();
  if (struct.row_filter != null) {
    if (struct.isSetRow_filter()) {
      oprot.writeFieldBegin(ROW_FILTER_FIELD_DESC);
{
        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT,struct.row_filter.size()));
        for (        IndexExpression _iter35 : struct.row_filter) {
          _iter35.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
  }
  oprot.writeFieldStop();
  oprot.writeStructEnd();
}
