{
  byte[] bytes=message.getMessageBody();
  FastByteArrayInputStream buffer=new FastByteArrayInputStream(bytes);
  try {
    DataInputStream is=new DataInputStream(buffer);
    final CounterMutation cm=CounterMutation.serializer().deserialize(is,message.getVersion());
    if (logger.isDebugEnabled())     logger.debug("Applying forwarded " + cm);
    String localDataCenter=DatabaseDescriptor.getEndpointSnitch().getDatacenter(FBUtilities.getBroadcastAddress());
    StorageProxy.applyCounterMutationOnLeader(cm,localDataCenter,new Runnable(){
      public void run(){
        try {
          WriteResponse response=new WriteResponse(cm.getTable(),cm.key(),true);
          Message responseMessage=WriteResponse.makeWriteResponseMessage(message,response);
          MessagingService.instance().sendReply(responseMessage,id,message.getFrom());
        }
 catch (        IOException e) {
          logger.error("Error writing response to counter mutation",e);
        }
      }
    }
);
  }
 catch (  UnavailableException e) {
  }
catch (  TimeoutException e) {
  }
catch (  IOException e) {
    logger.error("Error in counter mutation",e);
  }
}
