{
  this.factory=new ThreadPoolMetricNameFactory("ThreadPools",path,poolName);
  activeTasks=Metrics.register(factory.createMetricName("ActiveTasks"),new Gauge<Integer>(){
    public Integer getValue(){
      return executor.getActiveCount();
    }
  }
);
  pendingTasks=Metrics.register(factory.createMetricName("PendingTasks"),new Gauge<Long>(){
    public Long getValue(){
      return executor.getPendingTasks();
    }
  }
);
  totalBlocked=Metrics.counter(factory.createMetricName("TotalBlockedTasks"));
  currentBlocked=Metrics.counter(factory.createMetricName("CurrentlyBlockedTasks"));
  completedTasks=Metrics.register(factory.createMetricName("CompletedTasks"),new Gauge<Long>(){
    public Long getValue(){
      return executor.getCompletedTasks();
    }
  }
);
  maxPoolSize=Metrics.register(factory.createMetricName("MaxPoolSize"),new Gauge<Integer>(){
    public Integer getValue(){
      return executor.maxWorkers;
    }
  }
);
}
