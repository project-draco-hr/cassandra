{
  rowCacheSize=DEFAULT_ROW_CACHE_SIZE;
  keyCacheSize=DEFAULT_KEY_CACHE_SIZE;
  rowCacheKeysToSave=DEFAULT_ROW_CACHE_KEYS_TO_SAVE;
  readRepairChance=DEFAULT_READ_REPAIR_CHANCE;
  replicateOnWrite=DEFAULT_REPLICATE_ON_WRITE;
  gcGraceSeconds=DEFAULT_GC_GRACE_SECONDS;
  minCompactionThreshold=DEFAULT_MIN_COMPACTION_THRESHOLD;
  maxCompactionThreshold=DEFAULT_MAX_COMPACTION_THRESHOLD;
  memtableThroughputInMb=DEFAULT_MEMTABLE_THROUGHPUT_IN_MB;
  memtableOperationsInMillions=DEFAULT_MEMTABLE_OPERATIONS_IN_MILLIONS;
  mergeShardsChance=DEFAULT_MERGE_SHARDS_CHANCE;
  compression=DEFAULT_COMPRESSION;
  try {
    rowCacheProvider=FBUtilities.newCacheProvider(DEFAULT_ROW_CACHE_PROVIDER);
  }
 catch (  ConfigurationException e) {
    throw new AssertionError(e);
  }
  defaultValidator=BytesType.instance;
  keyValidator=BytesType.instance;
  comment="";
  keyAlias=null;
  column_metadata=new HashMap<ByteBuffer,ColumnDefinition>();
  try {
    compactionStrategyClass=(Class<? extends AbstractCompactionStrategy>)Class.forName(DEFAULT_COMPACTION_STRATEGY_CLASS);
  }
 catch (  Exception e) {
    throw new RuntimeException("Could not create Compaction Strategy of type " + DEFAULT_COMPACTION_STRATEGY_CLASS,e);
  }
  compactionStrategyOptions=new HashMap<String,String>();
}
