{
  try {
    String ksName=result.getString("keyspace_name");
    String cfName=result.getString("columnfamily_name");
    AbstractType<?> rawComparator=TypeParser.parse(result.getString("comparator"));
    AbstractType<?> subComparator=result.has("subcomparator") ? TypeParser.parse(result.getString("subcomparator")) : null;
    ColumnFamilyType cfType=ColumnFamilyType.valueOf(result.getString("type"));
    AbstractType<?> fullRawComparator=makeRawAbstractType(rawComparator,subComparator);
    List<ColumnDefinition> columnDefs=ColumnDefinition.fromSchema(serializedColumnDefinitions,ksName,cfName,fullRawComparator,cfType == ColumnFamilyType.Super);
    boolean isDense=result.has("is_dense") ? result.getBoolean("is_dense") : calculateIsDense(fullRawComparator,columnDefs);
    CellNameType comparator=CellNames.fromAbstractType(fullRawComparator,isDense);
    UUID cfId=result.has("cf_id") ? result.getUUID("cf_id") : generateLegacyCfId(ksName,cfName);
    CFMetaData cfm=new CFMetaData(ksName,cfName,cfType,comparator,cfId);
    cfm.isDense(isDense);
    cfm.readRepairChance(result.getDouble("read_repair_chance"));
    cfm.dcLocalReadRepairChance(result.getDouble("local_read_repair_chance"));
    cfm.gcGraceSeconds(result.getInt("gc_grace_seconds"));
    cfm.defaultValidator(TypeParser.parse(result.getString("default_validator")));
    cfm.keyValidator(TypeParser.parse(result.getString("key_validator")));
    cfm.minCompactionThreshold(result.getInt("min_compaction_threshold"));
    cfm.maxCompactionThreshold(result.getInt("max_compaction_threshold"));
    if (result.has("comment"))     cfm.comment(result.getString("comment"));
    if (result.has("memtable_flush_period_in_ms"))     cfm.memtableFlushPeriod(result.getInt("memtable_flush_period_in_ms"));
    cfm.caching(CachingOptions.fromString(result.getString("caching")));
    if (result.has("default_time_to_live"))     cfm.defaultTimeToLive(result.getInt("default_time_to_live"));
    if (result.has("speculative_retry"))     cfm.speculativeRetry(SpeculativeRetry.fromString(result.getString("speculative_retry")));
    cfm.compactionStrategyClass(createCompactionStrategy(result.getString("compaction_strategy_class")));
    cfm.compressionParameters(CompressionParameters.create(fromJsonMap(result.getString("compression_parameters"))));
    cfm.compactionStrategyOptions(fromJsonMap(result.getString("compaction_strategy_options")));
    if (result.has("min_index_interval"))     cfm.minIndexInterval(result.getInt("min_index_interval"));
 else     if (result.has("index_interval"))     cfm.minIndexInterval(result.getInt("index_interval"));
    if (result.has("max_index_interval"))     cfm.maxIndexInterval(result.getInt("max_index_interval"));
    if (result.has("bloom_filter_fp_chance"))     cfm.bloomFilterFpChance(result.getDouble("bloom_filter_fp_chance"));
 else     cfm.bloomFilterFpChance(cfm.getBloomFilterFpChance());
    if (result.has("key_aliases"))     cfm.addColumnMetadataFromAliases(aliasesFromStrings(fromJsonList(result.getString("key_aliases"))),cfm.keyValidator,ColumnDefinition.Kind.PARTITION_KEY);
    if (result.has("column_aliases"))     cfm.addColumnMetadataFromAliases(aliasesFromStrings(fromJsonList(result.getString("column_aliases"))),cfm.comparator.asAbstractType(),ColumnDefinition.Kind.CLUSTERING_COLUMN);
    if (result.has("value_alias"))     cfm.addColumnMetadataFromAliases(Collections.singletonList(result.getBytes("value_alias")),cfm.defaultValidator,ColumnDefinition.Kind.COMPACT_VALUE);
    if (result.has("dropped_columns"))     cfm.droppedColumns(convertDroppedColumns(result.getMap("dropped_columns",UTF8Type.instance,LongType.instance)));
    for (    ColumnDefinition cd : columnDefs)     cfm.addOrReplaceColumnDefinition(cd);
    return cfm.rebuild();
  }
 catch (  SyntaxException|ConfigurationException e) {
    throw new RuntimeException(e);
  }
}
