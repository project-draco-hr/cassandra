{
  this.comparator=new ClusteringComparator(extractTypes(clusteringColumns));
  Map<ByteBuffer,ColumnDefinition> newColumnMetadata=new HashMap<>();
  for (  ColumnDefinition def : partitionKeyColumns)   newColumnMetadata.put(def.name.bytes,def);
  for (  ColumnDefinition def : clusteringColumns) {
    newColumnMetadata.put(def.name.bytes,def);
    def.type.checkComparable();
  }
  for (  ColumnDefinition def : partitionColumns)   newColumnMetadata.put(def.name.bytes,def);
  this.columnMetadata=newColumnMetadata;
  List<AbstractType<?>> keyTypes=extractTypes(partitionKeyColumns);
  this.keyValidator=keyTypes.size() == 1 ? keyTypes.get(0) : CompositeType.getInstance(keyTypes);
  if (isCompactTable())   this.compactValueColumn=CompactTables.getCompactValueColumn(partitionColumns,isSuper());
}
