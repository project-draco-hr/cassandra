{
  logger.debug("applying {} to {}",cfm,this);
  validateCompatility(cfm);
  partitionKeyColumns=cfm.partitionKeyColumns;
  clusteringColumns=cfm.clusteringColumns;
  boolean hasColumnChange=!partitionColumns.equals(cfm.partitionColumns);
  partitionColumns=cfm.partitionColumns;
  rebuild();
  comment=Strings.nullToEmpty(cfm.comment);
  readRepairChance=cfm.readRepairChance;
  dcLocalReadRepairChance=cfm.dcLocalReadRepairChance;
  gcGraceSeconds=cfm.gcGraceSeconds;
  keyValidator=cfm.keyValidator;
  minCompactionThreshold=cfm.minCompactionThreshold;
  maxCompactionThreshold=cfm.maxCompactionThreshold;
  bloomFilterFpChance=cfm.getBloomFilterFpChance();
  caching=cfm.caching;
  minIndexInterval=cfm.minIndexInterval;
  maxIndexInterval=cfm.maxIndexInterval;
  memtableFlushPeriod=cfm.memtableFlushPeriod;
  defaultTimeToLive=cfm.defaultTimeToLive;
  speculativeRetry=cfm.speculativeRetry;
  if (!cfm.droppedColumns.isEmpty())   droppedColumns=cfm.droppedColumns;
  compactionStrategyClass=cfm.compactionStrategyClass;
  compactionStrategyOptions=cfm.compactionStrategyOptions;
  compressionParameters=cfm.compressionParameters;
  triggers=cfm.triggers;
  logger.debug("application result is {}",this);
  return hasColumnChange;
}
