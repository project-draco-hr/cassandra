{
  logger.debug("applying {} to {}",cfm,this);
  validateCompatility(cfm);
  comparator=cfm.comparator;
  comment=Strings.nullToEmpty(cfm.comment);
  readRepairChance=cfm.readRepairChance;
  dcLocalReadRepairChance=cfm.dcLocalReadRepairChance;
  gcGraceSeconds=cfm.gcGraceSeconds;
  defaultValidator=cfm.defaultValidator;
  keyValidator=cfm.keyValidator;
  minCompactionThreshold=cfm.minCompactionThreshold;
  maxCompactionThreshold=cfm.maxCompactionThreshold;
  bloomFilterFpChance=cfm.bloomFilterFpChance;
  caching=cfm.caching;
  minIndexInterval=cfm.minIndexInterval;
  maxIndexInterval=cfm.maxIndexInterval;
  memtableFlushPeriod=cfm.memtableFlushPeriod;
  defaultTimeToLive=cfm.defaultTimeToLive;
  speculativeRetry=cfm.speculativeRetry;
  if (!cfm.droppedColumns.isEmpty())   droppedColumns=cfm.droppedColumns;
  MapDifference<ByteBuffer,ColumnDefinition> columnDiff=Maps.difference(columnMetadata,cfm.columnMetadata);
  for (  ColumnDefinition cd : columnDiff.entriesOnlyOnLeft().values())   removeColumnDefinition(cd);
  for (  ColumnDefinition cd : columnDiff.entriesOnlyOnRight().values())   addColumnDefinition(cd);
  for (  ByteBuffer name : columnDiff.entriesDiffering().keySet()) {
    ColumnDefinition oldDef=columnMetadata.get(name);
    ColumnDefinition def=cfm.columnMetadata.get(name);
    addOrReplaceColumnDefinition(oldDef.apply(def));
  }
  compactionStrategyClass=cfm.compactionStrategyClass;
  compactionStrategyOptions=cfm.compactionStrategyOptions;
  compressionParameters=cfm.compressionParameters;
  triggers=cfm.triggers;
  rebuild();
  logger.debug("application result is {}",this);
}
