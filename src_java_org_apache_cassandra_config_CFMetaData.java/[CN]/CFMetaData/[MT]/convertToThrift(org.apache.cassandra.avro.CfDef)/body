{
  org.apache.cassandra.thrift.CfDef newDef=new org.apache.cassandra.thrift.CfDef(def.keyspace.toString(),def.name.toString());
  newDef.setColumn_type(def.column_type.toString());
  newDef.setComment(def.comment.toString());
  newDef.setComparator_type(stringOrNull(def.comparator_type));
  newDef.setDefault_validation_class(stringOrNull(def.default_validation_class));
  newDef.setGc_grace_seconds(def.gc_grace_seconds);
  newDef.setId(def.id);
  newDef.setKey_cache_save_period_in_seconds(def.key_cache_save_period_in_seconds);
  newDef.setKey_cache_size(def.key_cache_size);
  newDef.setKeyspace(def.keyspace.toString());
  newDef.setMax_compaction_threshold(def.max_compaction_threshold);
  newDef.setMemtable_flush_after_mins(def.memtable_flush_after_mins);
  newDef.setMemtable_operations_in_millions(def.memtable_operations_in_millions);
  newDef.setMemtable_throughput_in_mb(def.memtable_throughput_in_mb);
  newDef.setMin_compaction_threshold(def.min_compaction_threshold);
  newDef.setName(def.name.toString());
  newDef.setRead_repair_chance(def.read_repair_chance);
  newDef.setRow_cache_save_period_in_seconds(def.row_cache_save_period_in_seconds);
  newDef.setRow_cache_size(def.row_cache_size);
  newDef.setSubcomparator_type(stringOrNull(def.subcomparator_type));
  List<org.apache.cassandra.thrift.ColumnDef> columnMeta=new ArrayList<org.apache.cassandra.thrift.ColumnDef>();
  for (  org.apache.cassandra.avro.ColumnDef cdef : def.column_metadata) {
    org.apache.cassandra.thrift.ColumnDef tdef=new org.apache.cassandra.thrift.ColumnDef(cdef.name,stringOrNull(cdef.validation_class));
    tdef.setIndex_name(stringOrNull(cdef.index_name));
    if (cdef.index_type != null)     tdef.setIndex_type(org.apache.cassandra.thrift.IndexType.valueOf(cdef.index_type.name()));
    columnMeta.add(tdef);
  }
  newDef.setColumn_metadata(columnMeta);
  return newDef;
}
