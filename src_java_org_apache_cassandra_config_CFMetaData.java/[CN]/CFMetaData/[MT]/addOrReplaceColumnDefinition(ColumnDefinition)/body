{
switch (def.kind) {
case PARTITION_KEY:
    partitionKeyColumns.set(def.position(),def);
  List<AbstractType<?>> keyTypes=extractTypes(partitionKeyColumns);
keyValidator=keyTypes.size() == 1 ? keyTypes.get(0) : CompositeType.getInstance(keyTypes);
break;
case CLUSTERING_COLUMN:
clusteringColumns.set(def.position(),def);
comparator=new ClusteringComparator(extractTypes(clusteringColumns));
break;
case REGULAR:
case STATIC:
PartitionColumns.Builder builder=PartitionColumns.builder();
for (ColumnDefinition column : partitionColumns) if (!column.name.equals(def.name)) builder.add(column);
builder.add(def);
partitionColumns=builder.build();
if (isDense) this.compactValueColumn=def;
break;
}
this.columnMetadata.put(def.name.bytes,def);
return this;
}
