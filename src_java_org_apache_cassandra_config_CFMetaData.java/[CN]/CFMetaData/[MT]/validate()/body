{
  rebuild();
  if (!isNameValid(ksName))   throw new ConfigurationException(String.format("Keyspace name must not be empty, more than %s characters long, or contain non-alphanumeric-underscore characters (got \"%s\")",Schema.NAME_LENGTH,ksName));
  if (!isNameValid(cfName))   throw new ConfigurationException(String.format("ColumnFamily name must not be empty, more than %s characters long, or contain non-alphanumeric-underscore characters (got \"%s\")",Schema.NAME_LENGTH,cfName));
  params.validate();
  for (int i=0; i < comparator.size(); i++) {
    if (comparator.subtype(i) instanceof CounterColumnType)     throw new ConfigurationException("CounterColumnType is not a valid comparator");
  }
  if (keyValidator instanceof CounterColumnType)   throw new ConfigurationException("CounterColumnType is not a valid key validator");
  if (isCounter()) {
    for (    ColumnDefinition def : partitionColumns())     if (!(def.type instanceof CounterColumnType) && !CompactTables.isSuperColumnMapColumn(def))     throw new ConfigurationException("Cannot add a non counter column (" + def.name + ") in a counter column family");
  }
 else {
    for (    ColumnDefinition def : allColumns())     if (def.type instanceof CounterColumnType)     throw new ConfigurationException("Cannot add a counter column (" + def.name + ") in a non counter column family");
  }
  if (!indexes.isEmpty() && isSuper())   throw new ConfigurationException("Secondary indexes are not supported on super column families");
  KeyspaceMetadata ksm=Schema.instance.getKSMetaData(ksName);
  Set<String> indexNames=ksm == null ? new HashSet<>() : ksm.existingIndexNames(cfName);
  for (  IndexMetadata index : indexes) {
    if (indexNames.contains(index.name))     throw new ConfigurationException("Duplicate index name " + index.name);
    indexNames.add(index.name);
    index.validate();
  }
  return this;
}
