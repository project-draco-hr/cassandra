{
  rebuild();
  if (!isNameValid(ksName))   throw new ConfigurationException(String.format("Keyspace name must not be empty, more than %s characters long, or contain non-alphanumeric-underscore characters (got \"%s\")",Schema.NAME_LENGTH,ksName));
  if (!isNameValid(cfName))   throw new ConfigurationException(String.format("ColumnFamily name must not be empty, more than %s characters long, or contain non-alphanumeric-underscore characters (got \"%s\")",Schema.NAME_LENGTH,cfName));
  params.validate();
  for (int i=0; i < comparator.size(); i++) {
    if (comparator.subtype(i) instanceof CounterColumnType)     throw new ConfigurationException("CounterColumnType is not a valid comparator");
  }
  if (keyValidator instanceof CounterColumnType)   throw new ConfigurationException("CounterColumnType is not a valid key validator");
  if (isCounter()) {
    for (    ColumnDefinition def : partitionColumns())     if (!(def.type instanceof CounterColumnType) && !CompactTables.isSuperColumnMapColumn(def))     throw new ConfigurationException("Cannot add a non counter column (" + def.name + ") in a counter column family");
  }
 else {
    for (    ColumnDefinition def : allColumns())     if (def.type instanceof CounterColumnType)     throw new ConfigurationException("Cannot add a counter column (" + def.name + ") in a non counter column family");
  }
  Set<String> indexNames=existingIndexNames(cfName);
  for (  ColumnDefinition c : allColumns()) {
    if (c.getIndexType() == null) {
      if (c.getIndexName() != null)       throw new ConfigurationException("Index name cannot be set without index type");
    }
 else {
      if (isSuper())       throw new ConfigurationException("Secondary indexes are not supported on super column families");
      if (!isIndexNameValid(c.getIndexName()))       throw new ConfigurationException("Illegal index name " + c.getIndexName());
      if (indexNames.contains(c.getIndexName()))       throw new ConfigurationException("Duplicate index name " + c.getIndexName());
      indexNames.add(c.getIndexName());
      if (c.getIndexType() == IndexType.CUSTOM) {
        if (c.getIndexOptions() == null || !c.hasIndexOption(SecondaryIndex.CUSTOM_INDEX_OPTION_NAME))         throw new ConfigurationException("Required index option missing: " + SecondaryIndex.CUSTOM_INDEX_OPTION_NAME);
      }
      SecondaryIndex.createInstance(null,c);
    }
  }
  return this;
}
