{
  logger.debug("applying {} to {}",cfm,this);
  validateCompatility(cfm);
  comparator=cfm.comparator;
  comment=enforceCommentNotNull(cfm.comment);
  readRepairChance=cfm.readRepairChance;
  dcLocalReadRepairChance=cfm.dcLocalReadRepairChance;
  replicateOnWrite=cfm.replicateOnWrite;
  gcGraceSeconds=cfm.gcGraceSeconds;
  defaultValidator=cfm.defaultValidator;
  keyValidator=cfm.keyValidator;
  minCompactionThreshold=cfm.minCompactionThreshold;
  maxCompactionThreshold=cfm.maxCompactionThreshold;
  bloomFilterFpChance=cfm.bloomFilterFpChance;
  memtableFlushPeriod=cfm.memtableFlushPeriod;
  caching=cfm.caching;
  defaultTimeToLive=cfm.defaultTimeToLive;
  indexInterval=cfm.indexInterval;
  speculativeRetry=cfm.speculativeRetry;
  populateIoCacheOnFlush=cfm.populateIoCacheOnFlush;
  if (!cfm.droppedColumns.isEmpty())   droppedColumns=cfm.droppedColumns;
  MapDifference<ByteBuffer,ColumnDefinition> columnDiff=Maps.difference(column_metadata,cfm.column_metadata);
  for (  ColumnDefinition cd : columnDiff.entriesOnlyOnLeft().values())   column_metadata.remove(cd.name);
  for (  ColumnDefinition cd : columnDiff.entriesOnlyOnRight().values())   column_metadata.put(cd.name,cd);
  for (  ByteBuffer name : columnDiff.entriesDiffering().keySet()) {
    ColumnDefinition oldDef=column_metadata.get(name);
    ColumnDefinition def=cfm.column_metadata.get(name);
    oldDef.apply(def,getColumnDefinitionComparator(oldDef));
  }
  compactionStrategyClass=cfm.compactionStrategyClass;
  compactionStrategyOptions=cfm.compactionStrategyOptions;
  compressionParameters=cfm.compressionParameters;
  triggers=cfm.triggers;
  isDense(cfm.isDense);
  rebuild();
  logger.debug("application result is {}",this);
}
