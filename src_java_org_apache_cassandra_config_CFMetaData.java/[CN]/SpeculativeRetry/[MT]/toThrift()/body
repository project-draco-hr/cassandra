{
  org.apache.cassandra.thrift.CfDef def=new org.apache.cassandra.thrift.CfDef(ksName,cfName);
  def.setColumn_type(cfType.name());
  if (isSuper()) {
    def.setComparator_type(comparator.subtype(0).toString());
    def.setSubcomparator_type(comparator.subtype(1).toString());
  }
 else {
    def.setComparator_type(comparator.toString());
  }
  def.setComment(enforceCommentNotNull(comment));
  def.setRead_repair_chance(readRepairChance);
  def.setDclocal_read_repair_chance(dcLocalReadRepairChance);
  def.setPopulate_io_cache_on_flush(populateIoCacheOnFlush);
  def.setGc_grace_seconds(gcGraceSeconds);
  def.setDefault_validation_class(defaultValidator == null ? null : defaultValidator.toString());
  def.setKey_validation_class(keyValidator.toString());
  def.setMin_compaction_threshold(minCompactionThreshold);
  def.setMax_compaction_threshold(maxCompactionThreshold);
  if (partitionKeyColumns.size() == 1)   def.setKey_alias(partitionKeyColumns.get(0).name.bytes);
  def.setColumn_metadata(ColumnDefinition.toThrift(columnMetadata));
  def.setCompaction_strategy(compactionStrategyClass.getName());
  def.setCompaction_strategy_options(new HashMap<>(compactionStrategyOptions));
  def.setCompression_options(compressionParameters.asThriftOptions());
  if (bloomFilterFpChance != null)   def.setBloom_filter_fp_chance(bloomFilterFpChance);
  def.setIndex_interval(indexInterval);
  def.setMemtable_flush_period_in_ms(memtableFlushPeriod);
  def.setCaching(caching.toString());
  def.setDefault_time_to_live(defaultTimeToLive);
  def.setSpeculative_retry(speculativeRetry.toString());
  def.setTriggers(TriggerDefinition.toThrift(triggers));
  return def;
}
