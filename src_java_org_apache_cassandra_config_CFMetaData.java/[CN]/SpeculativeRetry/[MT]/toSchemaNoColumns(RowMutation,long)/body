{
  ColumnFamily cf=rm.addOrGet(SystemTable.SCHEMA_COLUMNFAMILIES_CF);
  int ldt=(int)(System.currentTimeMillis() / 1000);
  Integer oldId=Schema.instance.convertNewCfId(cfId);
  if (oldId != null)   cf.addColumn(Column.create(oldId,timestamp,cfName,"id"));
  cf.addColumn(Column.create(cfType.toString(),timestamp,cfName,"type"));
  if (isSuper()) {
    CompositeType ct=(CompositeType)comparator;
    cf.addColumn(Column.create(ct.types.get(0).toString(),timestamp,cfName,"comparator"));
    cf.addColumn(Column.create(ct.types.get(1).toString(),timestamp,cfName,"subcomparator"));
  }
 else {
    cf.addColumn(Column.create(comparator.toString(),timestamp,cfName,"comparator"));
  }
  cf.addColumn(comment == null ? DeletedColumn.create(ldt,timestamp,cfName,"comment") : Column.create(comment,timestamp,cfName,"comment"));
  cf.addColumn(Column.create(readRepairChance,timestamp,cfName,"read_repair_chance"));
  cf.addColumn(Column.create(dcLocalReadRepairChance,timestamp,cfName,"local_read_repair_chance"));
  cf.addColumn(Column.create(replicateOnWrite,timestamp,cfName,"replicate_on_write"));
  cf.addColumn(Column.create(populateIoCacheOnFlush,timestamp,cfName,"populate_io_cache_on_flush"));
  cf.addColumn(Column.create(gcGraceSeconds,timestamp,cfName,"gc_grace_seconds"));
  cf.addColumn(Column.create(defaultValidator.toString(),timestamp,cfName,"default_validator"));
  cf.addColumn(Column.create(keyValidator.toString(),timestamp,cfName,"key_validator"));
  cf.addColumn(Column.create(minCompactionThreshold,timestamp,cfName,"min_compaction_threshold"));
  cf.addColumn(Column.create(maxCompactionThreshold,timestamp,cfName,"max_compaction_threshold"));
  cf.addColumn(bloomFilterFpChance == null ? DeletedColumn.create(ldt,timestamp,cfName,"bloomFilterFpChance") : Column.create(bloomFilterFpChance,timestamp,cfName,"bloom_filter_fp_chance"));
  cf.addColumn(Column.create(memtableFlushPeriod,timestamp,cfName,"memtable_flush_period_in_ms"));
  cf.addColumn(Column.create(caching.toString(),timestamp,cfName,"caching"));
  cf.addColumn(Column.create(defaultTimeToLive,timestamp,cfName,"default_time_to_live"));
  cf.addColumn(Column.create(compactionStrategyClass.getName(),timestamp,cfName,"compaction_strategy_class"));
  cf.addColumn(Column.create(json(compressionParameters.asThriftOptions()),timestamp,cfName,"compression_parameters"));
  cf.addColumn(Column.create(json(compactionStrategyOptions),timestamp,cfName,"compaction_strategy_options"));
  cf.addColumn(Column.create(indexInterval,timestamp,cfName,"index_interval"));
  cf.addColumn(Column.create(speculativeRetry.toString(),timestamp,cfName,"speculative_retry"));
  for (  Map.Entry<ByteBuffer,Long> entry : droppedColumns.entrySet())   cf.addColumn(new Column(makeDroppedColumnName(entry.getKey()),LongType.instance.decompose(entry.getValue()),timestamp));
  cf.addColumn(Column.create(aliasesToJson(partitionKeyColumns),timestamp,cfName,"key_aliases"));
  cf.addColumn(Column.create(aliasesToJson(clusteringKeyColumns),timestamp,cfName,"column_aliases"));
  cf.addColumn(compactValueColumn == null ? DeletedColumn.create(ldt,timestamp,cfName,"value_alias") : Column.create(compactValueColumn.name,timestamp,cfName,"value_alias"));
}
