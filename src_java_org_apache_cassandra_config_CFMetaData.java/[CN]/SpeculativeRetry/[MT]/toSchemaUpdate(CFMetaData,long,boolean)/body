{
  RowMutation rm=new RowMutation(Keyspace.SYSTEM_KS,SystemKeyspace.getSchemaKSKey(ksName));
  newState.toSchemaNoColumnsNoTriggers(rm,modificationTimestamp);
  MapDifference<ByteBuffer,ColumnDefinition> columnDiff=Maps.difference(column_metadata,newState.column_metadata);
  for (  ColumnDefinition cd : columnDiff.entriesOnlyOnLeft().values()) {
    if (fromThrift && cd.type != ColumnDefinition.Type.REGULAR)     continue;
    cd.deleteFromSchema(rm,cfName,getColumnDefinitionComparator(cd),modificationTimestamp);
  }
  for (  ColumnDefinition cd : columnDiff.entriesOnlyOnRight().values())   cd.toSchema(rm,cfName,getColumnDefinitionComparator(cd),modificationTimestamp);
  for (  ByteBuffer name : columnDiff.entriesDiffering().keySet()) {
    ColumnDefinition cd=newState.getColumnDefinition(name);
    cd.toSchema(rm,cfName,getColumnDefinitionComparator(cd),modificationTimestamp);
  }
  MapDifference<String,TriggerDefinition> triggerDiff=Maps.difference(triggers,newState.triggers);
  for (  TriggerDefinition td : triggerDiff.entriesOnlyOnLeft().values())   td.deleteFromSchema(rm,cfName,modificationTimestamp);
  for (  TriggerDefinition td : triggerDiff.entriesOnlyOnRight().values())   td.toSchema(rm,cfName,modificationTimestamp);
  return rm;
}
