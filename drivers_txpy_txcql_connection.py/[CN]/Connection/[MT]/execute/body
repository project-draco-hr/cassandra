def execute(self, query, *args, **kwargs):
    '\n        Execute a CQL query on a remote node.\n        \n        Params:\n        * query .........: CQL query string.\n        * args ..........: Query parameters.\n        * compression ...: Query compression type (optional).\n        '

    def _error(err):
        if isinstance(err, InvalidRequestException):
            raise CQLException(('Bad Request: %s' % err.why))
        elif isinstance(err, TApplicationException):
            raise CQLException('Internal application error')
        elif isinstance(err, SchemaDisagreementException):
            raise CQLException('schema versions disagree, (try again later).')
        else:
            raise CQLException(err)

    def _success(response):
        if (response.type == CqlResultType.ROWS):
            return RowsProxy(response.rows, self.keyspace, self.column_family, self.decoder)
        if (response.type == CqlResultType.INT):
            return response.num
        return None
    if kwargs.has_key('compression'):
        compress = kwargs.get('compression').upper()
    else:
        compress = DEFAULT_COMPRESSION
    compressed_query = connection.compress_query(self.prepare(query, *args), compress)
    request_compression = getattr(Compression, compress)
    d = self.client.execute_cql_query(compressed_query, request_compression)
    d.addCallbacks(_success, _error)
    return d
