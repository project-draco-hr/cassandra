{
  if (!CliMain.isConnected())   return;
  int childCount=ast.getChildCount();
  String tableName, username=null, password=null;
  assert(childCount > 0);
  tableName=ast.getChild(0).getText();
  if (childCount == 3) {
    username=ast.getChild(1).getText();
    password=ast.getChild(2).getText();
  }
  if (tableName == null) {
    css_.out.println("Keyspace argument required");
    return;
  }
  try {
    AuthenticationRequest authRequest;
    Map<String,String> credentials=new HashMap<String,String>();
    thriftClient_.set_keyspace(tableName);
    if (username != null && password != null) {
      password=password.replace("\'","");
      credentials.put(SimpleAuthenticator.USERNAME_KEY,username);
      credentials.put(SimpleAuthenticator.PASSWORD_KEY,password);
      authRequest=new AuthenticationRequest(credentials);
      thriftClient_.login(authRequest);
    }
    keySpace=tableName;
    this.username=username != null ? username : "default";
    if (!(keyspacesMap.containsKey(keySpace))) {
      keyspacesMap.put(keySpace,thriftClient_.describe_keyspace(keySpace));
    }
    Set<String> cfnames=new HashSet<String>();
    KsDef ksd=keyspacesMap.get(keySpace);
    for (    CfDef cfd : ksd.cf_defs) {
      cfnames.add(cfd.name);
    }
    CliMain.updateCompletor(cfnames);
    css_.out.println("Authenticated to keyspace: " + keySpace);
  }
 catch (  AuthenticationException e) {
    css_.err.println("Exception during authentication to the cassandra node: " + "verify keyspace exists, and you are using correct credentials.");
  }
catch (  AuthorizationException e) {
    css_.err.println("You are not authorized to use keyspace: " + tableName);
  }
catch (  InvalidRequestException e) {
    css_.err.println(tableName + " does not exist.");
  }
catch (  NotFoundException e) {
    css_.err.println(tableName + " does not exist.");
  }
catch (  TException e) {
    if (css_.debug)     e.printStackTrace();
    css_.err.println("Login failure. Did you specify 'keyspace', 'username' and 'password'?");
  }
}
