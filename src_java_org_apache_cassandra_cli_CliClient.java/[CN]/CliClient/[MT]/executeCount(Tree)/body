{
  if (!CliMain.isConnected() || !hasKeySpace())   return;
  Tree columnFamilySpec=statement.getChild(0);
  String key=CliCompiler.getKey(columnFamilySpec);
  String columnFamily=CliCompiler.getColumnFamily(columnFamilySpec);
  int columnSpecCnt=CliCompiler.numColumnSpecifiers(columnFamilySpec);
  ColumnParent colParent=new ColumnParent(columnFamily).setSuper_column((ByteBuffer)null);
  if (columnSpecCnt != 0) {
    byte[] superColumn=CliCompiler.getColumn(columnFamilySpec,0).getBytes(Charsets.UTF_8);
    colParent=new ColumnParent(columnFamily).setSuper_column(superColumn);
  }
  SliceRange range=new SliceRange(FBUtilities.EMPTY_BYTE_BUFFER,FBUtilities.EMPTY_BYTE_BUFFER,false,Integer.MAX_VALUE);
  SlicePredicate predicate=new SlicePredicate().setColumn_names(null).setSlice_range(range);
  int count=thriftClient.get_count(ByteBuffer.wrap(key.getBytes(Charsets.UTF_8)),colParent,predicate,ConsistencyLevel.ONE);
  sessionState.out.printf("%d columns\n",count);
}
