{
  output.append("create column family ").append(CliUtils.escapeSQLString(cfDef.name));
  writeAttr(output,true,"column_type",cfDef.column_type);
  writeAttr(output,false,"comparator",normaliseType(cfDef.comparator_type,"org.apache.cassandra.db.marshal"));
  if (cfDef.column_type.equals("Super"))   writeAttr(output,false,"subcomparator",normaliseType(cfDef.subcomparator_type,"org.apache.cassandra.db.marshal"));
  if (!StringUtils.isEmpty(cfDef.default_validation_class))   writeAttr(output,false,"default_validation_class",normaliseType(cfDef.default_validation_class,"org.apache.cassandra.db.marshal"));
  writeAttr(output,false,"key_validation_class",normaliseType(cfDef.key_validation_class,"org.apache.cassandra.db.marshal"));
  writeAttr(output,false,"read_repair_chance",cfDef.read_repair_chance);
  writeAttr(output,false,"dclocal_read_repair_chance",cfDef.dclocal_read_repair_chance);
  writeAttr(output,false,"populate_io_cache_on_flush",cfDef.populate_io_cache_on_flush);
  writeAttr(output,false,"gc_grace",cfDef.gc_grace_seconds);
  writeAttr(output,false,"min_compaction_threshold",cfDef.min_compaction_threshold);
  writeAttr(output,false,"max_compaction_threshold",cfDef.max_compaction_threshold);
  writeAttr(output,false,"replicate_on_write",cfDef.replicate_on_write);
  writeAttr(output,false,"compaction_strategy",cfDef.compaction_strategy);
  writeAttr(output,false,"caching",cfDef.caching);
  if (cfDef.isSetBloom_filter_fp_chance())   writeAttr(output,false,"bloom_filter_fp_chance",cfDef.bloom_filter_fp_chance);
  if (!cfDef.compaction_strategy_options.isEmpty()) {
    StringBuilder cOptions=new StringBuilder();
    cOptions.append("{");
    Map<String,String> options=cfDef.compaction_strategy_options;
    int i=0, size=options.size();
    for (    Map.Entry<String,String> entry : options.entrySet()) {
      cOptions.append(CliUtils.quote(entry.getKey())).append(" : ").append(CliUtils.quote(entry.getValue()));
      if (i != size - 1)       cOptions.append(", ");
      i++;
    }
    cOptions.append("}");
    writeAttrRaw(output,false,"compaction_strategy_options",cOptions.toString());
  }
  if (!StringUtils.isEmpty(cfDef.comment))   writeAttr(output,false,"comment",cfDef.comment);
  if (!cfDef.column_metadata.isEmpty()) {
    output.append(NEWLINE).append(TAB).append("and column_metadata = [");
    boolean first=true;
    for (    ColumnDef colDef : cfDef.column_metadata) {
      if (!first)       output.append(",");
      first=false;
      showColumnMeta(output,cfDef,colDef);
    }
    output.append("]");
  }
  if (cfDef.compression_options != null && !cfDef.compression_options.isEmpty()) {
    StringBuilder compOptions=new StringBuilder();
    compOptions.append("{");
    int i=0, size=cfDef.compression_options.size();
    for (    Map.Entry<String,String> entry : cfDef.compression_options.entrySet()) {
      compOptions.append(CliUtils.quote(entry.getKey())).append(" : ").append(CliUtils.quote(entry.getValue()));
      if (i != size - 1)       compOptions.append(", ");
      i++;
    }
    compOptions.append("}");
    writeAttrRaw(output,false,"compression_options",compOptions.toString());
  }
  output.append(";");
  output.append(NEWLINE);
  output.append(NEWLINE);
}
