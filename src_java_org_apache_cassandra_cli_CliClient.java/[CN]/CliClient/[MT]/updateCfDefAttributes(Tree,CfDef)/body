{
  CfDef cfDef=new CfDef(cfDefToUpdate);
  for (int i=1; i < statement.getChildCount(); i+=2) {
    String currentArgument=statement.getChild(i).getText().toUpperCase();
    ColumnFamilyArgument mArgument=ColumnFamilyArgument.valueOf(currentArgument);
    String mValue=statement.getChild(i + 1).getText();
switch (mArgument) {
case COLUMN_TYPE:
      cfDef.setColumn_type(CliUtils.unescapeSQLString(mValue));
    break;
case COMPARATOR:
  cfDef.setComparator_type(CliUtils.unescapeSQLString(mValue));
break;
case SUBCOMPARATOR:
cfDef.setSubcomparator_type(CliUtils.unescapeSQLString(mValue));
break;
case COMMENT:
cfDef.setComment(CliUtils.unescapeSQLString(mValue));
break;
case READ_REPAIR_CHANCE:
double chance=Double.parseDouble(mValue);
if (chance < 0 || chance > 1) throw new RuntimeException("Error: read_repair_chance must be between 0 and 1.");
cfDef.setRead_repair_chance(chance);
break;
case DCLOCAL_READ_REPAIR_CHANCE:
double localChance=Double.parseDouble(mValue);
if (localChance < 0 || localChance > 1) throw new RuntimeException("Error: dclocal_read_repair_chance must be between 0 and 1.");
cfDef.setDclocal_read_repair_chance(localChance);
break;
case GC_GRACE:
cfDef.setGc_grace_seconds(Integer.parseInt(mValue));
break;
case COLUMN_METADATA:
Tree arrayOfMetaAttributes=statement.getChild(i + 1);
if (!arrayOfMetaAttributes.getText().equals("ARRAY")) throw new RuntimeException("'column_metadata' format - [{ k:v, k:v, ..}, { ... }, ...]");
cfDef.setColumn_metadata(getCFColumnMetaFromTree(cfDef,arrayOfMetaAttributes));
break;
case MEMTABLE_OPERATIONS:
break;
case MEMTABLE_THROUGHPUT:
break;
case DEFAULT_VALIDATION_CLASS:
cfDef.setDefault_validation_class(CliUtils.unescapeSQLString(mValue));
break;
case MIN_COMPACTION_THRESHOLD:
int threshold=Integer.parseInt(mValue);
if (threshold <= 0) throw new RuntimeException("Disabling compaction by setting min/max compaction thresholds to 0 has been deprecated, set compaction_strategy_options={'enabled':false} instead");
cfDef.setMin_compaction_threshold(threshold);
break;
case MAX_COMPACTION_THRESHOLD:
threshold=Integer.parseInt(mValue);
if (threshold <= 0) throw new RuntimeException("Disabling compaction by setting min/max compaction thresholds to 0 has been deprecated, set compaction_strategy_options={'enabled':false} instead");
cfDef.setMax_compaction_threshold(Integer.parseInt(mValue));
break;
case REPLICATE_ON_WRITE:
cfDef.setReplicate_on_write(Boolean.parseBoolean(mValue));
break;
case KEY_VALIDATION_CLASS:
cfDef.setKey_validation_class(CliUtils.unescapeSQLString(mValue));
break;
case COMPACTION_STRATEGY:
cfDef.setCompaction_strategy(CliUtils.unescapeSQLString(mValue));
break;
case COMPACTION_STRATEGY_OPTIONS:
cfDef.setCompaction_strategy_options(getStrategyOptionsFromTree(statement.getChild(i + 1)));
break;
case COMPRESSION_OPTIONS:
cfDef.setCompression_options(getStrategyOptionsFromTree(statement.getChild(i + 1)));
break;
case BLOOM_FILTER_FP_CHANCE:
cfDef.setBloom_filter_fp_chance(Double.parseDouble(mValue));
break;
case MEMTABLE_FLUSH_PERIOD_IN_MS:
cfDef.setMemtable_flush_period_in_ms(Integer.parseInt(mValue));
break;
case CACHING:
cfDef.setCaching(CliUtils.unescapeSQLString(mValue));
break;
case DEFAULT_TIME_TO_LIVE:
cfDef.setDefault_time_to_live(Integer.parseInt(mValue));
break;
case INDEX_INTERVAL:
cfDef.setIndex_interval(Integer.parseInt(mValue));
break;
case SPECULATIVE_RETRY:
cfDef.setSpeculative_retry(CliUtils.unescapeSQLString(mValue));
break;
case POPULATE_IO_CACHE_ON_FLUSH:
cfDef.setPopulate_io_cache_on_flush(Boolean.parseBoolean(mValue));
break;
default :
assert(false);
}
}
return cfDef;
}
