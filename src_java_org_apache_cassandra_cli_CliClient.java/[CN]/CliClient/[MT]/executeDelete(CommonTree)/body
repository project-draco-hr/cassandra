{
  if (!CliMain.isConnected() || !hasKeySpace())   return;
  int childCount=ast.getChildCount();
  assert(childCount == 1);
  CommonTree columnFamilySpec=(CommonTree)ast.getChild(0);
  assert(columnFamilySpec.getType() == CliParser.NODE_COLUMN_ACCESS);
  String key=CliCompiler.getKey(columnFamilySpec);
  String columnFamily=CliCompiler.getColumnFamily(columnFamilySpec);
  int columnSpecCnt=CliCompiler.numColumnSpecifiers(columnFamilySpec);
  byte[] superColumnName=null;
  byte[] columnName=null;
  boolean isSuper;
  List<String> cfnames=new ArrayList<String>();
  for (  CfDef cfd : keyspacesMap.get(keySpace).cf_defs) {
    cfnames.add(cfd.name);
  }
  int idx=cfnames.indexOf(columnFamily);
  if (idx == -1) {
    css_.out.println("No such column family: " + columnFamily);
    return;
  }
  isSuper=keyspacesMap.get(keySpace).cf_defs.get(idx).column_type.equals("Super");
  if ((columnSpecCnt < 0) || (columnSpecCnt > 2)) {
    css_.out.println("Invalid row, super column, or column specification.");
    return;
  }
  if (columnSpecCnt == 1) {
    if (isSuper)     superColumnName=CliCompiler.getColumn(columnFamilySpec,0).getBytes(Charsets.UTF_8);
 else     columnName=CliCompiler.getColumn(columnFamilySpec,0).getBytes(Charsets.UTF_8);
  }
 else   if (columnSpecCnt == 2) {
    superColumnName=CliCompiler.getColumn(columnFamilySpec,0).getBytes(Charsets.UTF_8);
    columnName=CliCompiler.getColumn(columnFamilySpec,1).getBytes(Charsets.UTF_8);
  }
  ColumnPath path=new ColumnPath(columnFamily);
  if (superColumnName != null)   path.setSuper_column(superColumnName);
  if (columnName != null)   path.setColumn(columnName);
  thriftClient_.remove(ByteBuffer.wrap(key.getBytes(Charsets.UTF_8)),path,FBUtilities.timestampMicros(),ConsistencyLevel.ONE);
  css_.out.println(String.format("%s removed.",(columnSpecCnt == 0) ? "row" : "column"));
}
