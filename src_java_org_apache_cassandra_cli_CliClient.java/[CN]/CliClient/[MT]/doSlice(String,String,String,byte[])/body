{
  SliceRange range=new SliceRange(ArrayUtils.EMPTY_BYTE_ARRAY,ArrayUtils.EMPTY_BYTE_ARRAY,true,1000000);
  List<ColumnOrSuperColumn> columns=thriftClient_.get_slice(key.getBytes(),new ColumnParent(columnFamily).setSuper_column(superColumnName),new SlicePredicate().setColumn_names(null).setSlice_range(range),ConsistencyLevel.ONE);
  int size=columns.size();
  for (  ColumnOrSuperColumn cosc : columns) {
    if (cosc.isSetSuper_column()) {
      SuperColumn superColumn=cosc.super_column;
      css_.out.printf("=> (super_column=%s,",formatSuperColumnName(keyspace,columnFamily,superColumn));
      for (      Column col : superColumn.getColumns())       css_.out.printf("\n     (column=%s, value=%s, timestamp=%d)",formatSubcolumnName(keyspace,columnFamily,col),new String(col.value,"UTF-8"),col.timestamp);
      css_.out.println(")");
    }
 else {
      Column column=cosc.column;
      css_.out.printf("=> (column=%s, value=%s, timestamp=%d)\n",formatColumnName(keyspace,columnFamily,column),new String(column.value,"UTF-8"),column.timestamp);
    }
  }
  css_.out.println("Returned " + size + " results.");
}
