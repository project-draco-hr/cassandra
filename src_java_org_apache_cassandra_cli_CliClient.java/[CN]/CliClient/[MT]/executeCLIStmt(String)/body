{
  CommonTree ast=CliCompiler.compileQuery(stmt);
switch (ast.getType()) {
case CliParser.NODE_EXIT:
    cleanupAndExit();
  break;
case CliParser.NODE_THRIFT_GET:
executeGet(ast);
break;
case CliParser.NODE_THRIFT_GET_WITH_CONDITIONS:
executeGetWithConditions(ast);
break;
case CliParser.NODE_HELP:
printCmdHelp(ast);
break;
case CliParser.NODE_THRIFT_SET:
executeSet(ast);
break;
case CliParser.NODE_THRIFT_DEL:
executeDelete(ast);
break;
case CliParser.NODE_THRIFT_COUNT:
executeCount(ast);
break;
case CliParser.NODE_ADD_KEYSPACE:
executeAddKeyspace(ast.getChild(0));
break;
case CliParser.NODE_ADD_COLUMN_FAMILY:
executeAddColumnFamily(ast.getChild(0));
break;
case CliParser.NODE_UPDATE_KEYSPACE:
executeUpdateKeyspace(ast.getChild(0));
break;
case CliParser.NODE_UPDATE_COLUMN_FAMILY:
executeUpdateColumnFamily(ast.getChild(0));
break;
case CliParser.NODE_DEL_COLUMN_FAMILY:
executeDelColumnFamily(ast);
break;
case CliParser.NODE_DEL_KEYSPACE:
executeDelKeyspace(ast);
break;
case CliParser.NODE_SHOW_CLUSTER_NAME:
executeShowClusterName();
break;
case CliParser.NODE_SHOW_VERSION:
executeShowVersion();
break;
case CliParser.NODE_SHOW_TABLES:
executeShowTables();
break;
case CliParser.NODE_DESCRIBE_TABLE:
executeDescribeTable(ast);
break;
case CliParser.NODE_USE_TABLE:
executeUseTable(ast);
break;
case CliParser.NODE_CONNECT:
executeConnect(ast);
break;
case CliParser.NODE_LIST:
executeList(ast);
break;
case CliParser.NODE_NO_OP:
break;
default :
css_.err.println("Invalid Statement (Type: " + ast.getType() + ")");
if (css_.batch) System.exit(2);
break;
}
}
