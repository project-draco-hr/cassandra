{
  if (!CliMain.isConnected() || !hasKeySpace())   return;
  long startTime=System.currentTimeMillis();
  String columnFamily=CliCompiler.getColumnFamily(statement,keyspacesMap.get(keySpace).cf_defs);
  String rawStartKey="";
  String rawEndKey="";
  int limitCount=Integer.MAX_VALUE;
  for (int i=1; i < statement.getChildCount(); i++) {
    Tree child=statement.getChild(i);
    if (child.getType() == CliParser.NODE_KEY_RANGE) {
      if (child.getChildCount() > 0) {
        rawStartKey=CliUtils.unescapeSQLString(child.getChild(0).getText());
        if (child.getChildCount() > 1)         rawEndKey=CliUtils.unescapeSQLString(child.getChild(1).getText());
      }
    }
 else {
      if (child.getChildCount() != 1) {
        sessionState.out.println("Invalid limit clause");
        return;
      }
      limitCount=Integer.parseInt(child.getChild(0).getText());
      if (limitCount <= 0) {
        sessionState.out.println("Invalid limit " + limitCount);
        return;
      }
    }
  }
  if (limitCount == Integer.MAX_VALUE) {
    limitCount=100;
    sessionState.out.println("Using default limit of 100");
  }
  CfDef columnFamilyDef=getCfDef(columnFamily);
  SlicePredicate predicate=new SlicePredicate();
  SliceRange sliceRange=new SliceRange();
  sliceRange.setStart(new byte[0]).setFinish(new byte[0]);
  sliceRange.setCount(Integer.MAX_VALUE);
  predicate.setSlice_range(sliceRange);
  KeyRange range=new KeyRange(limitCount);
  AbstractType<?> keyComparator=this.cfKeysComparators.get(columnFamily);
  ByteBuffer startKey=rawStartKey.isEmpty() ? ByteBufferUtil.EMPTY_BYTE_BUFFER : getBytesAccordingToType(rawStartKey,keyComparator);
  ByteBuffer endKey=rawEndKey.isEmpty() ? ByteBufferUtil.EMPTY_BYTE_BUFFER : getBytesAccordingToType(rawEndKey,keyComparator);
  range.setStart_key(startKey).setEnd_key(endKey);
  ColumnParent columnParent=new ColumnParent(columnFamily);
  List<KeySlice> keySlices=thriftClient.get_range_slices(columnParent,predicate,range,consistencyLevel);
  printSliceList(columnFamilyDef,keySlices);
  elapsedTime(startTime);
}
