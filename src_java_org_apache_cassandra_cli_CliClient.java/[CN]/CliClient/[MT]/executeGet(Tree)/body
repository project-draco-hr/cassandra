{
  if (!CliMain.isConnected() || !hasKeySpace())   return;
  Tree columnFamilySpec=statement.getChild(0);
  String key=CliCompiler.getKey(columnFamilySpec);
  String columnFamily=CliCompiler.getColumnFamily(columnFamilySpec);
  int columnSpecCnt=CliCompiler.numColumnSpecifiers(columnFamilySpec);
  CfDef cfDef=getCfDef(columnFamily);
  boolean isSuper=cfDef.comparator_type.equals("Super");
  byte[] superColumnName=null;
  ByteBuffer columnName;
  if (columnSpecCnt == 0) {
    doSlice(keySpace,key,columnFamily,superColumnName);
    return;
  }
 else   if (columnSpecCnt == 1) {
    if (isSuper) {
      superColumnName=columnNameAsByteArray(CliCompiler.getColumn(columnFamilySpec,0),cfDef);
      doSlice(keySpace,key,columnFamily,superColumnName);
      return;
    }
 else {
      columnName=columnNameAsBytes(CliCompiler.getColumn(columnFamilySpec,0),cfDef);
    }
  }
 else   if (columnSpecCnt == 2) {
    superColumnName=columnNameAsByteArray(CliCompiler.getColumn(columnFamilySpec,0),cfDef);
    columnName=subColumnNameAsBytes(CliCompiler.getColumn(columnFamilySpec,1),cfDef);
  }
 else {
    sessionState.out.println("Invalid row, super column, or column specification.");
    return;
  }
  AbstractType validator=getValidatorForValue(cfDef,TBaseHelper.byteBufferToByteArray(columnName));
  ColumnPath path=new ColumnPath(columnFamily);
  if (superColumnName != null)   path.setSuper_column(superColumnName);
  path.setColumn(columnName);
  Column column;
  try {
    column=thriftClient.get(ByteBuffer.wrap(key.getBytes(Charsets.UTF_8)),path,ConsistencyLevel.ONE).column;
  }
 catch (  NotFoundException e) {
    sessionState.out.println("Value was not found");
    return;
  }
  byte[] columnValue=column.getValue();
  String valueAsString;
  if (statement.getChildCount() == 2) {
    Tree typeTree=statement.getChild(1).getChild(0);
    String typeName=CliUtils.unescapeSQLString(typeTree.getText());
    AbstractType valueValidator=getFormatTypeForColumn(typeName);
    valueAsString=valueValidator.getString(ByteBuffer.wrap(columnValue));
    updateColumnMetaData(cfDef,columnName,valueValidator.getClass().getName());
  }
 else {
    valueAsString=(validator == null) ? new String(columnValue,Charsets.UTF_8) : validator.getString(ByteBuffer.wrap(columnValue));
  }
  sessionState.out.printf("=> (column=%s, value=%s, timestamp=%d)\n",formatColumnName(keySpace,columnFamily,column),valueAsString,column.timestamp);
}
