{
  if (!CliMain.isConnected() || !hasKeySpace())   return;
  int childCount=ast.getChildCount();
  assert(childCount == 1);
  CommonTree columnFamilySpec=(CommonTree)ast.getChild(0);
  assert(columnFamilySpec.getType() == CliParser.NODE_COLUMN_ACCESS);
  String key=CliCompiler.getKey(columnFamilySpec);
  String columnFamily=CliCompiler.getColumnFamily(columnFamilySpec);
  int columnSpecCnt=CliCompiler.numColumnSpecifiers(columnFamilySpec);
  ColumnParent colParent;
  if (columnSpecCnt == 0) {
    colParent=new ColumnParent(columnFamily).setSuper_column((ByteBuffer)null);
  }
 else {
    assert(columnSpecCnt == 1);
    colParent=new ColumnParent(columnFamily).setSuper_column(CliCompiler.getColumn(columnFamilySpec,0).getBytes("UTF-8"));
  }
  SliceRange range=new SliceRange(FBUtilities.EMPTY_BYTE_BUFFER,FBUtilities.EMPTY_BYTE_BUFFER,false,Integer.MAX_VALUE);
  SlicePredicate predicate=new SlicePredicate().setColumn_names(null).setSlice_range(range);
  int count=thriftClient_.get_count(ByteBuffer.wrap(key.getBytes("UTF-8")),colParent,predicate,ConsistencyLevel.ONE);
  css_.out.printf("%d columns\n",count);
}
