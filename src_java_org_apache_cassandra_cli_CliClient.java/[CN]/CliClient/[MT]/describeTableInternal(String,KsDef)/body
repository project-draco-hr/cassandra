{
  css_.out.println("Keyspace: " + tableName + ":");
  try {
    KsDef ks_def;
    ks_def=metadata == null ? thriftClient_.describe_keyspace(tableName) : metadata;
    css_.out.println("  Replication Factor: " + ks_def.replication_factor);
    css_.out.println("  Column Families:");
    for (    CfDef cf_def : ks_def.cf_defs) {
      css_.out.printf("    ColumnFamily: %s%s\n",cf_def.name,cf_def.column_type.equals("Super") ? " (Super)" : "");
      if (cf_def.comment != null && !cf_def.comment.isEmpty())       css_.out.printf("    \"%s\"\n",cf_def.comment);
      css_.out.printf("      Columns sorted by: %s%s\n",cf_def.comparator_type,cf_def.column_type.equals("Super") ? "/" + cf_def.subcomparator_type : "");
      if (cf_def.subcomparator_type != null)       css_.out.println("      Subcolumns sorted by: " + cf_def.comparator_type);
      css_.out.printf("      Row cache size / save period: %s/%s\n",cf_def.row_cache_size,cf_def.row_cache_save_period_in_seconds);
      css_.out.printf("      Key cache size / save period: %s/%s\n",cf_def.key_cache_size,cf_def.key_cache_save_period_in_seconds);
      css_.out.printf("      Memtable thresholds: %s/%s/%s\n",cf_def.memtable_operations_in_millions,cf_def.memtable_throughput_in_mb,cf_def.memtable_flush_after_mins);
      css_.out.printf("      GC grace seconds: %s\n",cf_def.gc_grace_seconds);
      css_.out.printf("      Compaction min/max thresholds: %s/%s\n",cf_def.min_compaction_threshold,cf_def.max_compaction_threshold);
      if (cf_def.getColumn_metadataSize() != 0) {
        String leftSpace="      ";
        String columnLeftSpace=leftSpace + "    ";
        AbstractType columnNameValidator=getFormatTypeForColumn(cf_def.comparator_type);
        css_.out.println(leftSpace + "Column Metadata:");
        for (        ColumnDef columnDef : cf_def.getColumn_metadata()) {
          String columnName=columnNameValidator.getString(columnDef.name);
          css_.out.println(leftSpace + "  Column Name: " + columnName);
          css_.out.println(columnLeftSpace + "Validation Class: " + columnDef.getValidation_class());
          if (columnDef.isSetIndex_name()) {
            css_.out.println(columnLeftSpace + "Index Name: " + columnDef.getIndex_name());
          }
          if (columnDef.isSetIndex_type()) {
            css_.out.println(columnLeftSpace + "Index Type: " + columnDef.getIndex_type().name());
          }
        }
      }
    }
  }
 catch (  InvalidRequestException e) {
    css_.out.println("Invalid request: " + e);
  }
catch (  NotFoundException e) {
    css_.out.println("Keyspace " + tableName + " could not be found.");
  }
}
