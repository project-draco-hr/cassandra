{
  if (!CliMain.isConnected())   return;
  int childCount=ast.getChildCount();
  assert(childCount == 1);
  CommonTree columnFamilySpec=(CommonTree)ast.getChild(0);
  assert(columnFamilySpec.getType() == CliParser.NODE_COLUMN_ACCESS);
  String tableName=CliCompiler.getTableName(columnFamilySpec);
  String key=CliCompiler.getKey(columnFamilySpec);
  String columnFamily=CliCompiler.getColumnFamily(columnFamilySpec);
  int columnSpecCnt=CliCompiler.numColumnSpecifiers(columnFamilySpec);
  if (columnSpecCnt == 0) {
    List<Column> columns=new ArrayList<Column>();
    columns=thriftClient_.get_slice(tableName,key,new ColumnParent(columnFamily,null),"","",true,0,1000000);
    int size=columns.size();
    for (Iterator<Column> colIter=columns.iterator(); colIter.hasNext(); ) {
      Column col=colIter.next();
      css_.out.printf("  (column=%s, value=%s; timestamp=%d)\n",col.column_name,col.value,col.timestamp);
    }
    css_.out.println("Returned " + size + " rows.");
  }
 else   if (columnSpecCnt == 1) {
    String columnName=CliCompiler.getColumn(columnFamilySpec,0);
    Column col=new Column();
    col=thriftClient_.get_column(tableName,key,new ColumnPath(columnFamily,null,columnName));
    css_.out.printf("==> (name=%s, value=%s; timestamp=%d)\n",col.column_name,col.value,col.timestamp);
  }
 else {
    assert(false);
  }
}
