{
  execute("INSERT INTO %s.multiple_clustering (a, b, c, d) VALUES (0, 0, 0, 0)");
  execute("INSERT INTO %s.multiple_clustering (a, b, c, d) VALUES (0, 0, 1, 0)");
  execute("INSERT INTO %s.multiple_clustering (a, b, c, d) VALUES (0, 0, 1, 1)");
  execute("INSERT INTO %s.multiple_clustering (a, b, c, d) VALUES (1, 0, 0, 0)");
  execute("INSERT INTO %s.multiple_clustering (a, b, c, d) VALUES (1, 0, 1, 0)");
  execute("INSERT INTO %s.multiple_clustering (a, b, c, d) VALUES (1, 0, 1, 1)");
  UntypedResultSet results=execute("SELECT * FROM %s.multiple_clustering WHERE a IN (0, 1) AND (b, c, d) IN ((0, 1, 0), (0, 1, 1))");
  assertEquals(4,results.size());
  checkRow(0,results,0,0,1,0);
  checkRow(1,results,0,0,1,1);
  checkRow(2,results,1,0,1,0);
  checkRow(3,results,1,0,1,1);
  results=execute("SELECT * FROM %s.multiple_clustering WHERE a IN (1, 0) AND (b, c, d) IN ((0, 1, 1), (0, 1, 0))");
  assertEquals(4,results.size());
  checkRow(0,results,1,0,1,0);
  checkRow(1,results,1,0,1,1);
  checkRow(2,results,0,0,1,0);
  checkRow(3,results,0,0,1,1);
  results=execute("SELECT * FROM %s.multiple_clustering WHERE a IN (0, 1) and (b, c) IN ((0, 1))");
  assertEquals(4,results.size());
  checkRow(0,results,0,0,1,0);
  checkRow(1,results,0,0,1,1);
  checkRow(2,results,1,0,1,0);
  checkRow(3,results,1,0,1,1);
  results=execute("SELECT * FROM %s.multiple_clustering WHERE a IN (0, 1) and (b) IN ((0))");
  assertEquals(6,results.size());
  checkRow(0,results,0,0,0,0);
  checkRow(1,results,0,0,1,0);
  checkRow(2,results,0,0,1,1);
  checkRow(3,results,1,0,0,0);
  checkRow(4,results,1,0,1,0);
  checkRow(5,results,1,0,1,1);
}
