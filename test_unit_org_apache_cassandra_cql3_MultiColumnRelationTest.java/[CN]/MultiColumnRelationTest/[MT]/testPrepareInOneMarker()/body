{
  execute("INSERT INTO %s.multiple_clustering (a, b, c, d) VALUES (0, 0, 0, 0)");
  execute("INSERT INTO %s.multiple_clustering (a, b, c, d) VALUES (0, 0, 1, 0)");
  execute("INSERT INTO %s.multiple_clustering (a, b, c, d) VALUES (0, 0, 1, 1)");
  UntypedResultSet results=executePrepared(prepare("SELECT * FROM %s.multiple_clustering WHERE a=0 AND (b, c, d) IN ?"),options(list(tuple(0,1,0),tuple(0,1,1))));
  assertEquals(2,results.size());
  checkRow(0,results,0,0,1,0);
  checkRow(1,results,0,0,1,1);
  results=executePrepared(prepare("SELECT * FROM %s.multiple_clustering WHERE a=0 AND (b, c, d) IN ?"),options(list(tuple(0,1,1),tuple(0,1,0))));
  assertEquals(2,results.size());
  checkRow(0,results,0,0,1,0);
  checkRow(1,results,0,0,1,1);
  results=executePrepared(prepare("SELECT * FROM %s.multiple_clustering WHERE a=0 AND (b, c, d) IN ?"),options(list()));
  assertTrue(results.isEmpty());
  results=executePrepared(prepare("SELECT * FROM %s.multiple_clustering WHERE a=0 and (b, c) IN ?"),options(list(tuple(0,1))));
  assertEquals(2,results.size());
  checkRow(0,results,0,0,1,0);
  checkRow(1,results,0,0,1,1);
  results=executePrepared(prepare("SELECT * FROM %s.multiple_clustering WHERE a=0 and (b) IN ?"),options(list(tuple(0))));
  assertEquals(3,results.size());
  checkRow(0,results,0,0,0,0);
  checkRow(1,results,0,0,1,0);
  checkRow(2,results,0,0,1,1);
  results=executePrepared(prepare("SELECT * FROM %s.multiple_clustering WHERE a=0 and (b) IN ?"),options(list()));
  assertTrue(results.isEmpty());
}
