{
  TokenMetadata tm=StorageService.instance.getTokenMetadata();
  Multimap<Range<Token>,InetAddress> pendingRanges=HashMultimap.create();
  Map<Token,InetAddress> bootstrapTokens=tm.getBootstrapTokens();
  Set<InetAddress> leavingEndpoints=tm.getLeavingEndpoints();
  if (bootstrapTokens.isEmpty() && leavingEndpoints.isEmpty() && tm.getMovingEndpoints().isEmpty()) {
    if (logger.isDebugEnabled())     logger.debug("No bootstrapping, leaving or moving nodes -> empty pending ranges for {}",table);
    tm.setPendingRanges(table,pendingRanges);
    return;
  }
  Multimap<InetAddress,Range<Token>> addressRanges=strategy.getAddressRanges();
  TokenMetadata allLeftMetadata=tm.cloneAfterAllLeft();
  Set<Range<Token>> affectedRanges=new HashSet<Range<Token>>();
  for (  InetAddress endpoint : leavingEndpoints)   affectedRanges.addAll(addressRanges.get(endpoint));
  for (  Range<Token> range : affectedRanges) {
    Set<InetAddress> currentEndpoints=ImmutableSet.copyOf(strategy.calculateNaturalEndpoints(range.right,tm));
    Set<InetAddress> newEndpoints=ImmutableSet.copyOf(strategy.calculateNaturalEndpoints(range.right,allLeftMetadata));
    pendingRanges.putAll(range,Sets.difference(newEndpoints,currentEndpoints));
  }
synchronized (bootstrapTokens) {
    bootstrapTokens=new LinkedHashMap<Token,InetAddress>(bootstrapTokens);
  }
  for (  Map.Entry<Token,InetAddress> entry : bootstrapTokens.entrySet()) {
    InetAddress endpoint=entry.getValue();
    allLeftMetadata.updateNormalToken(entry.getKey(),endpoint);
    for (    Range<Token> range : strategy.getAddressRanges(allLeftMetadata).get(endpoint))     pendingRanges.put(range,endpoint);
    allLeftMetadata.removeEndpoint(endpoint);
  }
  for (  Pair<Token,InetAddress> moving : tm.getMovingEndpoints()) {
    InetAddress endpoint=moving.right;
    allLeftMetadata.updateNormalToken(moving.left,endpoint);
    for (    Range<Token> range : strategy.getAddressRanges(allLeftMetadata).get(endpoint)) {
      pendingRanges.put(range,endpoint);
    }
    allLeftMetadata.removeEndpoint(endpoint);
  }
  tm.setPendingRanges(table,pendingRanges);
  if (logger.isDebugEnabled())   logger.debug("Pending ranges:\n" + (pendingRanges.isEmpty() ? "<empty>" : tm.printPendingRanges()));
}
