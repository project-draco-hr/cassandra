def create_cf_option_val_completer(ctxt, cass):
    exist_opts = ctxt.get_binding('cfopt')
    this_opt = exist_opts[(-1)]
    if (this_opt == 'compression_parameters:sstable_compression'):
        return map(escape_value, CqlRuleSet.available_compression_classes)
    if (this_opt == 'compaction_strategy_class'):
        return map(escape_value, CqlRuleSet.available_compaction_classes)
    if any(((this_opt == opt[0]) for opt in CqlRuleSet.obsolete_cf_options)):
        return ["'<obsolete_option>'"]
    if (this_opt in ('comparator', 'default_validation')):
        return cqltypes.cql_types
    if (this_opt == 'read_repair_chance'):
        return [Hint('<float_between_0_and_1>')]
    if (this_opt == 'replicate_on_write'):
        return [Hint('<yes_or_no>')]
    if (this_opt in ('min_compaction_threshold', 'max_compaction_threshold', 'gc_grace_seconds')):
        return [Hint('<integer>')]
    return [Hint('<option_value>')]
