{
  logger.info("initializing CipherFactory");
  ivLength=options.iv_length;
  try {
    secureRandom=SecureRandom.getInstance("SHA1PRNG");
    Class<KeyProvider> keyProviderClass=(Class<KeyProvider>)Class.forName(options.key_provider.class_name);
    Constructor ctor=keyProviderClass.getConstructor(TransparentDataEncryptionOptions.class);
    keyProvider=(KeyProvider)ctor.newInstance(options);
  }
 catch (  Exception e) {
    throw new RuntimeException("couldn't load cipher factory",e);
  }
  cache=CacheBuilder.newBuilder().maximumSize(64).concurrencyLevel(Runtime.getRuntime().availableProcessors()).removalListener(new RemovalListener<String,Key>(){
    public void onRemoval(    RemovalNotification<String,Key> notice){
      logger.info("key {} removed from cipher key cache",notice.getKey());
    }
  }
).build(new CacheLoader<String,Key>(){
    @Override public Key load(    String alias) throws Exception {
      logger.info("loading secret key for alias {}",alias);
      return keyProvider.getSecretKey(alias);
    }
  }
);
}
