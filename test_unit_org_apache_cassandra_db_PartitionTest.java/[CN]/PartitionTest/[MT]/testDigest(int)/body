{
  ColumnFamilyStore cfs=Keyspace.open(KEYSPACE1).getColumnFamilyStore(CF_TENCOL);
  try {
    RowUpdateBuilder builder=new RowUpdateBuilder(cfs.metadata,5,"key1").clustering("c").add("val","val1");
    for (int i=0; i < 10; i++)     builder.add("val" + i,"val" + i);
    builder.build().applyUnsafe();
    new RowUpdateBuilder(cfs.metadata,5,"key2").clustering("c").add("val","val2").build().applyUnsafe();
    ImmutableBTreePartition p1=Util.getOnlyPartitionUnfiltered(Util.cmd(cfs,"key1").build());
    ImmutableBTreePartition p2=Util.getOnlyPartitionUnfiltered(Util.cmd(cfs,"key2").build());
    MessageDigest digest1=MessageDigest.getInstance("MD5");
    MessageDigest digest2=MessageDigest.getInstance("MD5");
    UnfilteredRowIterators.digest(p1.unfilteredIterator(),digest1,version);
    UnfilteredRowIterators.digest(p2.unfilteredIterator(),digest2,version);
    assertFalse(Arrays.equals(digest1.digest(),digest2.digest()));
    p1=Util.getOnlyPartitionUnfiltered(Util.cmd(cfs,"key2").build());
    p2=Util.getOnlyPartitionUnfiltered(Util.cmd(cfs,"key2").build());
    digest1=MessageDigest.getInstance("MD5");
    digest2=MessageDigest.getInstance("MD5");
    UnfilteredRowIterators.digest(p1.unfilteredIterator(),digest1,version);
    UnfilteredRowIterators.digest(p2.unfilteredIterator(),digest2,version);
    assertTrue(Arrays.equals(digest1.digest(),digest2.digest()));
    p1=Util.getOnlyPartitionUnfiltered(Util.cmd(cfs,"key2").build());
    RowUpdateBuilder.deleteRow(cfs.metadata,6,"key2","c").applyUnsafe();
    p2=Util.getOnlyPartitionUnfiltered(Util.cmd(cfs,"key2").build());
    digest1=MessageDigest.getInstance("MD5");
    digest2=MessageDigest.getInstance("MD5");
    UnfilteredRowIterators.digest(p1.unfilteredIterator(),digest1,version);
    UnfilteredRowIterators.digest(p2.unfilteredIterator(),digest2,version);
    assertFalse(Arrays.equals(digest1.digest(),digest2.digest()));
  }
  finally {
    cfs.truncateBlocking();
  }
}
