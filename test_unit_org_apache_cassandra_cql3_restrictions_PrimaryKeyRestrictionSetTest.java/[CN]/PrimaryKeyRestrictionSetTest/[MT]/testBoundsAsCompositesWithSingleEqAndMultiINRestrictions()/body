{
  CFMetaData cfMetaData=newCFMetaData(4);
  ByteBuffer value1=ByteBufferUtil.bytes(1);
  ByteBuffer value2=ByteBufferUtil.bytes(2);
  ByteBuffer value3=ByteBufferUtil.bytes(3);
  ByteBuffer value4=ByteBufferUtil.bytes(4);
  ByteBuffer value5=ByteBufferUtil.bytes(5);
  Restriction singleEq=newSingleEq(cfMetaData,0,value1);
  Restriction multiIN=newMultiIN(cfMetaData,1,asList(value2,value3),asList(value4,value5));
  PrimaryKeyRestrictions restrictions=new PrimaryKeyRestrictionSet(cfMetaData.comparator);
  restrictions=restrictions.mergeWith(singleEq).mergeWith(multiIN);
  List<Composite> bounds=restrictions.boundsAsComposites(Bound.START,QueryOptions.DEFAULT);
  assertEquals(2,bounds.size());
  assertComposite(bounds.get(0),value1,value2,value3,EOC.START);
  assertComposite(bounds.get(1),value1,value4,value5,EOC.START);
  bounds=restrictions.boundsAsComposites(Bound.END,QueryOptions.DEFAULT);
  assertEquals(2,bounds.size());
  assertComposite(bounds.get(0),value1,value2,value3,EOC.END);
  assertComposite(bounds.get(1),value1,value4,value5,EOC.END);
  singleEq=newSingleEq(cfMetaData,0,value1);
  multiIN=newMultiIN(cfMetaData,1,asList(value2,value3));
  restrictions=new PrimaryKeyRestrictionSet(cfMetaData.comparator);
  restrictions=restrictions.mergeWith(multiIN).mergeWith(singleEq);
  bounds=restrictions.boundsAsComposites(Bound.START,QueryOptions.DEFAULT);
  assertEquals(1,bounds.size());
  assertComposite(bounds.get(0),value1,value2,value3,EOC.START);
  bounds=restrictions.boundsAsComposites(Bound.END,QueryOptions.DEFAULT);
  assertEquals(1,bounds.size());
  assertComposite(bounds.get(0),value1,value2,value3,EOC.END);
  singleEq=newSingleEq(cfMetaData,0,value1);
  Restriction singleEq2=newSingleEq(cfMetaData,1,value5);
  multiIN=newMultiIN(cfMetaData,2,asList(value2,value3),asList(value4,value5));
  restrictions=new PrimaryKeyRestrictionSet(cfMetaData.comparator);
  restrictions=restrictions.mergeWith(singleEq).mergeWith(multiIN).mergeWith(singleEq2);
  bounds=restrictions.boundsAsComposites(Bound.START,QueryOptions.DEFAULT);
  assertEquals(2,bounds.size());
  assertComposite(bounds.get(0),value1,value5,value2,value3,EOC.START);
  assertComposite(bounds.get(1),value1,value5,value4,value5,EOC.START);
  bounds=restrictions.boundsAsComposites(Bound.END,QueryOptions.DEFAULT);
  assertEquals(2,bounds.size());
  assertComposite(bounds.get(0),value1,value5,value2,value3,EOC.END);
  assertComposite(bounds.get(1),value1,value5,value4,value5,EOC.END);
}
