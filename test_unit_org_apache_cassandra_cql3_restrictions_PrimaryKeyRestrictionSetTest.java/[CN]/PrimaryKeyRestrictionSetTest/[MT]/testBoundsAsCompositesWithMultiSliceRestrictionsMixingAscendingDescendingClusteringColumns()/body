{
  CFMetaData cfMetaData=newCFMetaData(Sort.ASC,Sort.DESC,Sort.ASC,Sort.DESC);
  ByteBuffer value1=ByteBufferUtil.bytes(1);
  ByteBuffer value2=ByteBufferUtil.bytes(2);
  ByteBuffer value3=ByteBufferUtil.bytes(3);
  ByteBuffer value4=ByteBufferUtil.bytes(4);
  Restriction slice=newMultiSlice(cfMetaData,0,Bound.START,false,value1,value2,value3,value4);
  PrimaryKeyRestrictions restrictions=new PrimaryKeyRestrictionSet(cfMetaData.comparator);
  restrictions=restrictions.mergeWith(slice);
  List<Composite> bounds=restrictions.boundsAsComposites(cfMetaData,Bound.START,QueryOptions.DEFAULT);
  assertEquals(4,bounds.size());
  assertComposite(bounds.get(0),value1,EOC.START);
  assertComposite(bounds.get(1),value1,value2,value3,EOC.START);
  assertComposite(bounds.get(2),value1,value2,value3,EOC.END);
  assertComposite(bounds.get(3),value1,EOC.END);
  bounds=restrictions.boundsAsComposites(cfMetaData,Bound.END,QueryOptions.DEFAULT);
  assertEquals(4,bounds.size());
  assertComposite(bounds.get(0),value1,value2,EOC.START);
  assertComposite(bounds.get(1),value1,value2,value3,value4,EOC.START);
  assertComposite(bounds.get(2),value1,value2,EOC.END);
  assertEmptyComposite(bounds.get(3));
  Restriction eq=newSingleEq(cfMetaData,0,value1);
  slice=newMultiSlice(cfMetaData,1,Bound.START,false,value2,value3,value4);
  restrictions=new PrimaryKeyRestrictionSet(cfMetaData.comparator);
  restrictions=restrictions.mergeWith(slice);
  restrictions=restrictions.mergeWith(eq);
  bounds=restrictions.boundsAsComposites(cfMetaData,Bound.START,QueryOptions.DEFAULT);
  assertEquals(3,bounds.size());
  assertComposite(bounds.get(0),value1,EOC.START);
  assertComposite(bounds.get(1),value1,value2,value3,EOC.START);
  assertComposite(bounds.get(2),value1,value2,value3,EOC.END);
  bounds=restrictions.boundsAsComposites(cfMetaData,Bound.END,QueryOptions.DEFAULT);
  assertEquals(3,bounds.size());
  assertComposite(bounds.get(0),value1,value2,EOC.START);
  assertComposite(bounds.get(1),value1,value2,value3,value4,EOC.START);
  assertComposite(bounds.get(2),value1,value2,EOC.END);
  slice=newMultiSlice(cfMetaData,0,Bound.START,true,value1,value2);
  restrictions=new PrimaryKeyRestrictionSet(cfMetaData.comparator);
  restrictions=restrictions.mergeWith(slice);
  bounds=restrictions.boundsAsComposites(cfMetaData,Bound.START,QueryOptions.DEFAULT);
  assertEquals(2,bounds.size());
  assertComposite(bounds.get(0),value1,EOC.START);
  assertComposite(bounds.get(1),value1,EOC.END);
  bounds=restrictions.boundsAsComposites(cfMetaData,Bound.END,QueryOptions.DEFAULT);
  assertEquals(2,bounds.size());
  assertComposite(bounds.get(0),value1,value2,EOC.END);
  assertEmptyComposite(bounds.get(1));
  slice=newMultiSlice(cfMetaData,0,Bound.START,true,value1,value2,value3,value4);
  restrictions=new PrimaryKeyRestrictionSet(cfMetaData.comparator);
  restrictions=restrictions.mergeWith(slice);
  bounds=restrictions.boundsAsComposites(cfMetaData,Bound.START,QueryOptions.DEFAULT);
  assertEquals(4,bounds.size());
  assertComposite(bounds.get(0),value1,EOC.START);
  assertComposite(bounds.get(1),value1,value2,value3,EOC.START);
  assertComposite(bounds.get(2),value1,value2,value3,EOC.END);
  assertComposite(bounds.get(3),value1,EOC.END);
  bounds=restrictions.boundsAsComposites(cfMetaData,Bound.END,QueryOptions.DEFAULT);
  assertEquals(4,bounds.size());
  assertComposite(bounds.get(0),value1,value2,EOC.START);
  assertComposite(bounds.get(1),value1,value2,value3,value4,EOC.END);
  assertComposite(bounds.get(2),value1,value2,EOC.END);
  assertEmptyComposite(bounds.get(3));
  slice=newMultiSlice(cfMetaData,0,Bound.END,true,value1,value2,value3,value4);
  restrictions=new PrimaryKeyRestrictionSet(cfMetaData.comparator);
  restrictions=restrictions.mergeWith(slice);
  bounds=restrictions.boundsAsComposites(cfMetaData,Bound.START,QueryOptions.DEFAULT);
  assertEquals(4,bounds.size());
  assertEmptyComposite(bounds.get(0));
  assertComposite(bounds.get(1),value1,value2,EOC.START);
  assertComposite(bounds.get(2),value1,value2,value3,value4,EOC.NONE);
  assertComposite(bounds.get(3),value1,value2,EOC.END);
  bounds=restrictions.boundsAsComposites(cfMetaData,Bound.END,QueryOptions.DEFAULT);
  assertEquals(4,bounds.size());
  assertComposite(bounds.get(0),value1,EOC.START);
  assertComposite(bounds.get(1),value1,value2,value3,EOC.START);
  assertComposite(bounds.get(2),value1,value2,value3,EOC.END);
  assertComposite(bounds.get(3),value1,EOC.END);
  slice=newMultiSlice(cfMetaData,0,Bound.END,false,value1,value2,value3,value4);
  restrictions=new PrimaryKeyRestrictionSet(cfMetaData.comparator);
  restrictions=restrictions.mergeWith(slice);
  bounds=restrictions.boundsAsComposites(cfMetaData,Bound.START,QueryOptions.DEFAULT);
  assertEquals(4,bounds.size());
  assertEmptyComposite(bounds.get(0));
  assertComposite(bounds.get(1),value1,value2,EOC.START);
  assertComposite(bounds.get(2),value1,value2,value3,value4,EOC.END);
  assertComposite(bounds.get(3),value1,value2,EOC.END);
  bounds=restrictions.boundsAsComposites(cfMetaData,Bound.END,QueryOptions.DEFAULT);
  assertEquals(4,bounds.size());
  assertComposite(bounds.get(0),value1,EOC.START);
  assertComposite(bounds.get(1),value1,value2,value3,EOC.START);
  assertComposite(bounds.get(2),value1,value2,value3,EOC.END);
  assertComposite(bounds.get(3),value1,EOC.END);
  slice=newMultiSlice(cfMetaData,0,Bound.START,false,value1,value2,value3,value4);
  Restriction slice2=newMultiSlice(cfMetaData,0,Bound.END,false,value2,value3);
  restrictions=new PrimaryKeyRestrictionSet(cfMetaData.comparator);
  restrictions=restrictions.mergeWith(slice).mergeWith(slice2);
  bounds=restrictions.boundsAsComposites(cfMetaData,Bound.START,QueryOptions.DEFAULT);
  assertEquals(5,bounds.size());
  assertComposite(bounds.get(0),value1,EOC.START);
  assertComposite(bounds.get(1),value1,value2,value3,EOC.START);
  assertComposite(bounds.get(2),value1,value2,value3,EOC.END);
  assertComposite(bounds.get(3),value1,EOC.END);
  assertComposite(bounds.get(4),value2,value3,EOC.END);
  bounds=restrictions.boundsAsComposites(cfMetaData,Bound.END,QueryOptions.DEFAULT);
  assertEquals(5,bounds.size());
  assertComposite(bounds.get(0),value1,value2,EOC.START);
  assertComposite(bounds.get(1),value1,value2,value3,value4,EOC.START);
  assertComposite(bounds.get(2),value1,value2,EOC.END);
  assertComposite(bounds.get(3),value2,EOC.START);
  assertComposite(bounds.get(4),value2,EOC.END);
  slice=newMultiSlice(cfMetaData,0,Bound.START,true,value1,value2,value3,value4);
  slice2=newMultiSlice(cfMetaData,0,Bound.END,true,value4,value3,value2,value1);
  restrictions=new PrimaryKeyRestrictionSet(cfMetaData.comparator);
  restrictions=restrictions.mergeWith(slice).mergeWith(slice2);
  bounds=restrictions.boundsAsComposites(cfMetaData,Bound.START,QueryOptions.DEFAULT);
  assertEquals(7,bounds.size());
  assertComposite(bounds.get(0),value1,EOC.START);
  assertComposite(bounds.get(1),value1,value2,value3,EOC.START);
  assertComposite(bounds.get(2),value1,value2,value3,EOC.END);
  assertComposite(bounds.get(3),value1,EOC.END);
  assertComposite(bounds.get(4),value4,value3,EOC.START);
  assertComposite(bounds.get(5),value4,value3,value2,value1,EOC.NONE);
  assertComposite(bounds.get(6),value4,value3,EOC.END);
  bounds=restrictions.boundsAsComposites(cfMetaData,Bound.END,QueryOptions.DEFAULT);
  assertEquals(7,bounds.size());
  assertComposite(bounds.get(0),value1,value2,EOC.START);
  assertComposite(bounds.get(1),value1,value2,value3,value4,EOC.END);
  assertComposite(bounds.get(2),value1,value2,EOC.END);
  assertComposite(bounds.get(3),value4,EOC.START);
  assertComposite(bounds.get(4),value4,value3,value2,EOC.START);
  assertComposite(bounds.get(5),value4,value3,value2,EOC.END);
  assertComposite(bounds.get(6),value4,EOC.END);
}
