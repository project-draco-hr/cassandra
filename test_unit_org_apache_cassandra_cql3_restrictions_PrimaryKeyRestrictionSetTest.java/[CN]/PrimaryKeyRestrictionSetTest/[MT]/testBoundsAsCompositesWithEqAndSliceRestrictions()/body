{
  CFMetaData cfMetaData=newCFMetaData(Sort.ASC,Sort.ASC);
  ByteBuffer value1=ByteBufferUtil.bytes(1);
  ByteBuffer value2=ByteBufferUtil.bytes(2);
  ByteBuffer value3=ByteBufferUtil.bytes(3);
  Restriction eq=newSingleEq(cfMetaData,0,value3);
  Restriction slice=newSingleSlice(cfMetaData,1,Bound.START,false,value1);
  PrimaryKeyRestrictions restrictions=new PrimaryKeyRestrictionSet(cfMetaData.comparator);
  restrictions=restrictions.mergeWith(eq).mergeWith(slice);
  List<Composite> bounds=restrictions.boundsAsComposites(cfMetaData,Bound.START,QueryOptions.DEFAULT);
  assertEquals(1,bounds.size());
  assertComposite(bounds.get(0),value3,value1,EOC.END);
  bounds=restrictions.boundsAsComposites(cfMetaData,Bound.END,QueryOptions.DEFAULT);
  assertEquals(1,bounds.size());
  assertComposite(bounds.get(0),value3,EOC.END);
  slice=newSingleSlice(cfMetaData,1,Bound.START,true,value1);
  restrictions=new PrimaryKeyRestrictionSet(cfMetaData.comparator);
  restrictions=restrictions.mergeWith(eq).mergeWith(slice);
  bounds=restrictions.boundsAsComposites(cfMetaData,Bound.START,QueryOptions.DEFAULT);
  assertEquals(1,bounds.size());
  assertComposite(bounds.get(0),value3,value1,EOC.NONE);
  bounds=restrictions.boundsAsComposites(cfMetaData,Bound.END,QueryOptions.DEFAULT);
  assertEquals(1,bounds.size());
  assertComposite(bounds.get(0),value3,EOC.END);
  slice=newSingleSlice(cfMetaData,1,Bound.END,true,value1);
  restrictions=new PrimaryKeyRestrictionSet(cfMetaData.comparator);
  restrictions=restrictions.mergeWith(eq).mergeWith(slice);
  bounds=restrictions.boundsAsComposites(cfMetaData,Bound.START,QueryOptions.DEFAULT);
  assertEquals(1,bounds.size());
  assertComposite(bounds.get(0),value3,EOC.START);
  bounds=restrictions.boundsAsComposites(cfMetaData,Bound.END,QueryOptions.DEFAULT);
  assertEquals(1,bounds.size());
  assertComposite(bounds.get(0),value3,value1,EOC.END);
  slice=newSingleSlice(cfMetaData,1,Bound.END,false,value1);
  restrictions=new PrimaryKeyRestrictionSet(cfMetaData.comparator);
  restrictions=restrictions.mergeWith(eq).mergeWith(slice);
  bounds=restrictions.boundsAsComposites(cfMetaData,Bound.START,QueryOptions.DEFAULT);
  assertEquals(1,bounds.size());
  assertComposite(bounds.get(0),value3,EOC.START);
  bounds=restrictions.boundsAsComposites(cfMetaData,Bound.END,QueryOptions.DEFAULT);
  assertEquals(1,bounds.size());
  assertComposite(bounds.get(0),value3,value1,EOC.START);
  slice=newSingleSlice(cfMetaData,1,Bound.START,false,value1);
  Restriction slice2=newSingleSlice(cfMetaData,1,Bound.END,false,value2);
  restrictions=new PrimaryKeyRestrictionSet(cfMetaData.comparator);
  restrictions=restrictions.mergeWith(eq).mergeWith(slice).mergeWith(slice2);
  bounds=restrictions.boundsAsComposites(cfMetaData,Bound.START,QueryOptions.DEFAULT);
  assertEquals(1,bounds.size());
  assertComposite(bounds.get(0),value3,value1,EOC.END);
  bounds=restrictions.boundsAsComposites(cfMetaData,Bound.END,QueryOptions.DEFAULT);
  assertEquals(1,bounds.size());
  assertComposite(bounds.get(0),value3,value2,EOC.START);
  slice=newSingleSlice(cfMetaData,1,Bound.START,true,value1);
  slice2=newSingleSlice(cfMetaData,1,Bound.END,true,value2);
  restrictions=new PrimaryKeyRestrictionSet(cfMetaData.comparator);
  restrictions=restrictions.mergeWith(eq).mergeWith(slice).mergeWith(slice2);
  bounds=restrictions.boundsAsComposites(cfMetaData,Bound.START,QueryOptions.DEFAULT);
  assertEquals(1,bounds.size());
  assertComposite(bounds.get(0),value3,value1,EOC.NONE);
  bounds=restrictions.boundsAsComposites(cfMetaData,Bound.END,QueryOptions.DEFAULT);
  assertEquals(1,bounds.size());
  assertComposite(bounds.get(0),value3,value2,EOC.END);
}
