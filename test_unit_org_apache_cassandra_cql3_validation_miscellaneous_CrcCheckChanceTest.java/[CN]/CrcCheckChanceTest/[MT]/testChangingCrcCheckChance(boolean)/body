{
  if (newFormat)   createTable("CREATE TABLE %s (p text, c text, v text, s text static, PRIMARY KEY (p, c)) WITH compression = {'sstable_compression': 'LZ4Compressor'} AND crc_check_chance = 0.99;");
 else   createTable("CREATE TABLE %s (p text, c text, v text, s text static, PRIMARY KEY (p, c)) WITH compression = {'sstable_compression': 'LZ4Compressor', 'crc_check_chance' : 0.99}");
  execute("CREATE INDEX foo ON %s(v)");
  execute("INSERT INTO %s(p, c, v, s) values (?, ?, ?, ?)","p1","k1","v1","sv1");
  execute("INSERT INTO %s(p, c, v) values (?, ?, ?)","p1","k2","v2");
  execute("INSERT INTO %s(p, s) values (?, ?)","p2","sv2");
  ColumnFamilyStore cfs=Keyspace.open(CQLTester.KEYSPACE).getColumnFamilyStore(currentTable());
  ColumnFamilyStore indexCfs=cfs.indexManager.getAllIndexColumnFamilyStores().iterator().next();
  cfs.forceBlockingFlush();
  Assert.assertEquals(0.99,cfs.getCrcCheckChance());
  Assert.assertEquals(0.99,cfs.getLiveSSTables().iterator().next().getCrcCheckChance());
  Assert.assertEquals(0.99,indexCfs.getCrcCheckChance());
  Assert.assertEquals(0.99,indexCfs.getLiveSSTables().iterator().next().getCrcCheckChance());
  if (newFormat)   alterTable("ALTER TABLE %s WITH crc_check_chance = 0.99");
 else   alterTable("ALTER TABLE %s WITH compression = {'sstable_compression': 'LZ4Compressor', 'crc_check_chance': 0.99}");
  assertRows(execute("SELECT * FROM %s WHERE p=?","p1"),row("p1","k1","sv1","v1"),row("p1","k2","sv1","v2"));
  assertRows(execute("SELECT * FROM %s WHERE v=?","v1"),row("p1","k1","sv1","v1"));
  execute("INSERT INTO %s(p, c, v, s) values (?, ?, ?, ?)","p1","k1","v1","sv1");
  execute("INSERT INTO %s(p, c, v) values (?, ?, ?)","p1","k2","v2");
  execute("INSERT INTO %s(p, s) values (?, ?)","p2","sv2");
  cfs.forceBlockingFlush();
  execute("INSERT INTO %s(p, c, v, s) values (?, ?, ?, ?)","p1","k1","v1","sv1");
  execute("INSERT INTO %s(p, c, v) values (?, ?, ?)","p1","k2","v2");
  execute("INSERT INTO %s(p, s) values (?, ?)","p2","sv2");
  cfs.forceBlockingFlush();
  execute("INSERT INTO %s(p, c, v, s) values (?, ?, ?, ?)","p1","k1","v1","sv1");
  execute("INSERT INTO %s(p, c, v) values (?, ?, ?)","p1","k2","v2");
  execute("INSERT INTO %s(p, s) values (?, ?)","p2","sv2");
  cfs.forceBlockingFlush();
  cfs.forceMajorCompaction();
  cfs.setCrcCheckChance(0.01);
  Assert.assertEquals(0.01,cfs.getCrcCheckChance());
  Assert.assertEquals(0.01,cfs.getLiveSSTables().iterator().next().getCrcCheckChance());
  Assert.assertEquals(0.01,indexCfs.getCrcCheckChance());
  Assert.assertEquals(0.01,indexCfs.getLiveSSTables().iterator().next().getCrcCheckChance());
  assertRows(execute("SELECT * FROM %s WHERE p=?","p1"),row("p1","k1","sv1","v1"),row("p1","k2","sv1","v2"));
  assertRows(execute("SELECT * FROM %s WHERE v=?","v1"),row("p1","k1","sv1","v1"));
  if (newFormat)   alterTable("ALTER TABLE %s WITH crc_check_chance = 0.5");
 else   alterTable("ALTER TABLE %s WITH compression = {'sstable_compression': 'LZ4Compressor', 'crc_check_chance': 0.5}");
  Assert.assertEquals(0.5,cfs.metadata.params.crcCheckChance);
  Assert.assertEquals(0.01,cfs.getLiveSSTables().iterator().next().getCrcCheckChance());
  Assert.assertEquals(0.01,indexCfs.getCrcCheckChance());
  Assert.assertEquals(0.01,indexCfs.getLiveSSTables().iterator().next().getCrcCheckChance());
  cfs.setCrcCheckChance(0.03);
  Assert.assertEquals(0.03,cfs.getCrcCheckChance());
  Assert.assertEquals(0.03,cfs.getLiveSSTables().iterator().next().getCrcCheckChance());
  Assert.assertEquals(0.03,indexCfs.getCrcCheckChance());
  Assert.assertEquals(0.03,indexCfs.getLiveSSTables().iterator().next().getCrcCheckChance());
}
