{
  IAuthenticator authenticator=DatabaseDescriptor.getAuthenticator();
  if (authenticator.requireAuthentication() && !(authenticator instanceof ISaslAwareAuthenticator)) {
    logger.error("Not starting native transport as the configured IAuthenticator is not capable of SASL authentication");
    isRunning.compareAndSet(true,false);
    return;
  }
  eventExecutorGroup=new RequestThreadPoolExecutor();
  boolean hasEpoll=enableEpoll ? Epoll.isAvailable() : false;
  if (hasEpoll) {
    workerGroup=new EpollEventLoopGroup();
    logger.info("Netty using native Epoll event loop");
  }
 else {
    workerGroup=new NioEventLoopGroup();
    logger.info("Netty using Java NIO event loop");
  }
  ServerBootstrap bootstrap=new ServerBootstrap().group(workerGroup).channel(hasEpoll ? EpollServerSocketChannel.class : NioServerSocketChannel.class).childOption(ChannelOption.TCP_NODELAY,true).childOption(ChannelOption.SO_LINGER,0).childOption(ChannelOption.SO_KEEPALIVE,DatabaseDescriptor.getRpcKeepAlive()).childOption(ChannelOption.ALLOCATOR,CBUtil.allocator).childOption(ChannelOption.WRITE_BUFFER_HIGH_WATER_MARK,32 * 1024).childOption(ChannelOption.WRITE_BUFFER_LOW_WATER_MARK,8 * 1024);
  final EncryptionOptions.ClientEncryptionOptions clientEnc=DatabaseDescriptor.getClientEncryptionOptions();
  if (clientEnc.enabled) {
    if (clientEnc.optional) {
      logger.info("Enabling optionally encrypted CQL connections between client and server");
      bootstrap.childHandler(new OptionalSecureInitializer(this,clientEnc));
    }
 else {
      logger.info("Enabling encrypted CQL connections between client and server");
      bootstrap.childHandler(new SecureInitializer(this,clientEnc));
    }
  }
 else {
    bootstrap.childHandler(new Initializer(this));
  }
  logger.info("Using Netty Version: {}",Version.identify().entrySet());
  logger.info("Starting listening for CQL clients on {}...",socket);
  ChannelFuture bindFuture=bootstrap.bind(socket);
  if (!bindFuture.awaitUninterruptibly().isSuccess())   throw new IllegalStateException(String.format("Failed to bind port %d on %s.",socket.getPort(),socket.getAddress().getHostAddress()));
  connectionTracker.allChannels.add(bindFuture.channel());
  isRunning.set(true);
}
