{
  String type=notification.getType();
  if (type.equals(GarbageCollectionNotificationInfo.GARBAGE_COLLECTION_NOTIFICATION)) {
    CompositeData cd=(CompositeData)notification.getUserData();
    GarbageCollectionNotificationInfo info=GarbageCollectionNotificationInfo.from(cd);
    String gcName=info.getGcName();
    GcInfo gcInfo=info.getGcInfo();
    long duration=gcInfo.getDuration();
    GCState gcState=gcStates.get(gcName);
    if (gcState.assumeGCIsPartiallyConcurrent) {
      long previousTotal=gcState.lastGcTotalDuration;
      long total=gcState.gcBean.getCollectionTime();
      gcState.lastGcTotalDuration=total;
      duration=total - previousTotal;
    }
    StringBuilder sb=new StringBuilder();
    sb.append(info.getGcName()).append(" GC in ").append(duration).append("ms.  ");
    long bytes=0;
    Map<String,MemoryUsage> beforeMemoryUsage=gcInfo.getMemoryUsageBeforeGc();
    Map<String,MemoryUsage> afterMemoryUsage=gcInfo.getMemoryUsageAfterGc();
    for (    String key : gcState.keys(info)) {
      MemoryUsage before=beforeMemoryUsage.get(key);
      MemoryUsage after=afterMemoryUsage.get(key);
      if (after != null && after.getUsed() != before.getUsed()) {
        sb.append(key).append(": ").append(before.getUsed());
        sb.append(" -> ");
        sb.append(after.getUsed());
        if (!key.equals(gcState.keys[gcState.keys.length - 1]))         sb.append("; ");
        bytes+=before.getUsed() - after.getUsed();
      }
    }
    while (true) {
      State prev=state.get();
      if (state.compareAndSet(prev,new State(duration,bytes,prev)))       break;
    }
    String st=sb.toString();
    if (duration > MIN_LOG_DURATION)     logger.info(st);
 else     if (logger.isDebugEnabled())     logger.debug(st);
    if (duration > MIN_LOG_DURATION_TPSTATS)     StatusLogger.log();
    if (gcState.assumeGCIsOldGen)     TransactionLogs.rescheduleFailedDeletions();
  }
}
