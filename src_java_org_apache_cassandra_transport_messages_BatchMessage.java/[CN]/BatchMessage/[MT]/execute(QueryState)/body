{
  try {
    UUID tracingId=null;
    if (isTracingRequested()) {
      tracingId=UUIDGen.getTimeUUID();
      state.prepareTracingSession(tracingId);
    }
    if (state.traceNextQuery()) {
      state.createTracingSession();
      Tracing.instance.begin("Execute batch of CQL3 queries",Collections.<String,String>emptyMap());
    }
    QueryHandler handler=state.getClientState().getCQLQueryHandler();
    List<ModificationStatement> statements=new ArrayList<ModificationStatement>(queryOrIdList.size());
    boolean hasConditions=false;
    for (int i=0; i < queryOrIdList.size(); i++) {
      Object query=queryOrIdList.get(i);
      CQLStatement statement;
      if (query instanceof String) {
        statement=QueryProcessor.parseStatement((String)query,state);
      }
 else {
        statement=handler.getPrepared((MD5Digest)query);
        if (statement == null)         throw new PreparedQueryNotFoundException((MD5Digest)query);
      }
      List<ByteBuffer> queryValues=values.get(i);
      if (queryValues.size() != statement.getBoundTerms())       throw new InvalidRequestException(String.format("There were %d markers(?) in CQL but %d bound variables",statement.getBoundTerms(),queryValues.size()));
      if (!(statement instanceof ModificationStatement))       throw new InvalidRequestException("Invalid statement in batch: only UPDATE, INSERT and DELETE statements are allowed.");
      ModificationStatement mst=(ModificationStatement)statement;
      hasConditions|=mst.hasConditions();
      if (mst.isCounter()) {
        if (type != BatchStatement.Type.COUNTER)         throw new InvalidRequestException("Cannot include counter statement in a non-counter batch");
      }
 else {
        if (type == BatchStatement.Type.COUNTER)         throw new InvalidRequestException("Cannot include non-counter statement in a counter batch");
      }
      statements.add(mst);
    }
    BatchStatement batch=new BatchStatement(-1,type,statements,Attributes.none(),hasConditions);
    Message.Response response=handler.processBatch(batch,state,new BatchQueryOptions(consistency,values,queryOrIdList));
    if (tracingId != null)     response.setTracingId(tracingId);
    return response;
  }
 catch (  Exception e) {
    return ErrorMessage.fromException(e);
  }
 finally {
    Tracing.instance.stopSession();
  }
}
