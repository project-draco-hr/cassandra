{
  try {
    UUID tracingId=null;
    if (isTracingRequested()) {
      tracingId=UUIDGen.getTimeUUID();
      state.prepareTracingSession(tracingId);
    }
    if (state.traceNextQuery()) {
      state.createTracingSession();
      Tracing.instance.begin("Execute batch of CQL3 queries",state.getClientAddress(),Collections.<String,String>emptyMap());
    }
    QueryHandler handler=ClientState.getCQLQueryHandler();
    List<ParsedStatement.Prepared> prepared=new ArrayList<>(queryOrIdList.size());
    for (int i=0; i < queryOrIdList.size(); i++) {
      Object query=queryOrIdList.get(i);
      ParsedStatement.Prepared p;
      if (query instanceof String) {
        p=QueryProcessor.parseStatement((String)query,state);
      }
 else {
        p=handler.getPrepared((MD5Digest)query);
        if (p == null)         throw new PreparedQueryNotFoundException((MD5Digest)query);
      }
      List<ByteBuffer> queryValues=values.get(i);
      if (queryValues.size() != p.statement.getBoundTerms())       throw new InvalidRequestException(String.format("There were %d markers(?) in CQL but %d bound variables",p.statement.getBoundTerms(),queryValues.size()));
      prepared.add(p);
    }
    BatchQueryOptions batchOptions=BatchQueryOptions.withPerStatementVariables(options,values,queryOrIdList);
    List<ModificationStatement> statements=new ArrayList<>(prepared.size());
    for (int i=0; i < prepared.size(); i++) {
      ParsedStatement.Prepared p=prepared.get(i);
      batchOptions.forStatement(i).prepare(p.boundNames);
      if (!(p.statement instanceof ModificationStatement))       throw new InvalidRequestException("Invalid statement in batch: only UPDATE, INSERT and DELETE statements are allowed.");
      statements.add((ModificationStatement)p.statement);
    }
    BatchStatement batch=new BatchStatement(-1,batchType,statements,Attributes.none());
    Message.Response response=handler.processBatch(batch,state,batchOptions);
    if (tracingId != null)     response.setTracingId(tracingId);
    return response;
  }
 catch (  Exception e) {
    JVMStabilityInspector.inspectThrowable(e);
    return ErrorMessage.fromException(e);
  }
 finally {
    Tracing.instance.stopSession();
  }
}
