def test_batch_mutate(self):
    'batching addition/removal mutations'
    self.client.request('set_keyspace', {'keyspace': 'Keyspace1', })
    mutations = list()
    for i in range(3):
        cosc = {'column': new_column(i), }
        mutation = {'column_or_supercolumn': cosc, }
        mutations.append(mutation)
    map_entry = {'key': 'key1', 'mutations': {'Standard1': mutations, }, }
    params = dict()
    params['mutation_map'] = [map_entry]
    params['consistency_level'] = 'ONE'
    self.client.request('batch_mutate', params)
    for i in range(3):
        column = new_column(i)
        cosc = self.__get('key1', 'Standard1', None, column['name'])
        avro_utils.assert_cosc(cosc)
        avro_utils.assert_columns_match(cosc['column'], column)
    extra_column = new_column(3)
    remove_column = new_column(0)
    mutations = [{'column_or_supercolumn': {'column': extra_column, }, }]
    deletion = dict()
    deletion['timestamp'] = timestamp()
    deletion['predicate'] = {'column_names': [remove_column['name']], }
    mutations.append({'deletion': deletion, })
    map_entry = {'key': 'key1', 'mutations': {'Standard1': mutations, }, }
    params = dict()
    params['mutation_map'] = [map_entry]
    params['consistency_level'] = 'ONE'
    self.client.request('batch_mutate', params)
    avro_utils.assert_raises(AvroRemoteException, self.__get, 'key1', 'Standard1', None, remove_column['name'])
    cosc = self.__get('key1', 'Standard1', None, extra_column['name'])
    avro_utils.assert_cosc(cosc)
    avro_utils.assert_columns_match(cosc['column'], extra_column)
