def test_index_slice(self):
    self.client.request('set_keyspace', {'keyspace': 'Keyspace1', })
    cp = dict(column_family='Indexed1')
    self.client.request('insert', dict(key='key1', column_parent=cp, column=dict(name='birthdate', value=i64(1), timestamp=0), consistency_level='ONE'))
    self.client.request('insert', dict(key='key2', column_parent=cp, column=dict(name='birthdate', value=i64(2), timestamp=0), consistency_level='ONE'))
    self.client.request('insert', dict(key='key2', column_parent=cp, column=dict(name='b', value=i64(2), timestamp=0), consistency_level='ONE'))
    self.client.request('insert', dict(key='key3', column_parent=cp, column=dict(name='birthdate', value=i64(3), timestamp=0), consistency_level='ONE'))
    self.client.request('insert', dict(key='key3', column_parent=cp, column=dict(name='b', value=i64(3), timestamp=0), consistency_level='ONE'))
    sp = dict(slice_range=dict(start='', finish='', reversed=False, count=1000))
    clause = dict(expressions=[dict(column_name='birthdate', op='EQ', value=i64(1))], start_key='', count=100)
    result = self.client.request('get_indexed_slices', dict(column_parent=cp, index_clause=clause, column_predicate=sp, consistency_level='ONE'))
    assert (len(result) == 1), result
    assert (result[0]['key'] == 'key1')
    assert (len(result[0]['columns']) == 1), result[0]['columns']
    clause = dict(expressions=[dict(column_name='b', op='EQ', value=i64(1))], start_key='', count=100)
    avro_utils.assert_raises(AvroRemoteException, self.client.request, 'get_indexed_slices', dict(column_parent=cp, index_clause=clause, column_predicate=sp, consistency_level='ONE'))
    clause = dict(expressions=[dict(column_name='b', op='EQ', value=i64(3)), dict(column_name='birthdate', op='EQ', value=i64(3))], start_key='', count=100)
    result = self.client.request('get_indexed_slices', dict(column_parent=cp, index_clause=clause, column_predicate=sp, consistency_level='ONE'))
    assert (len(result) == 1), result
    assert (result[0]['key'] == 'key3')
    assert (len(result[0]['columns']) == 2), result[0]['columns']
