{
  Assert.assertNull(Schema.instance.getKSMetaData(EMPTYKEYSPACE));
  KSMetaData newKs=KSMetaData.testMetadata(EMPTYKEYSPACE,SimpleStrategy.class,KSMetaData.optsWithRF(5));
  MigrationManager.announceNewKeyspace(newKs);
  Assert.assertNotNull(Schema.instance.getKSMetaData(EMPTYKEYSPACE));
  CFMetaData newCf=addTestCF(EMPTYKEYSPACE,"AddedLater","A new CF to add to an empty KS");
  Assert.assertFalse(Schema.instance.getKSMetaData(newKs.name).cfMetaData().containsKey(newCf.cfName));
  MigrationManager.announceNewColumnFamily(newCf);
  Assert.assertTrue(Schema.instance.getKSMetaData(newKs.name).cfMetaData().containsKey(newCf.cfName));
  Assert.assertEquals(Schema.instance.getKSMetaData(newKs.name).cfMetaData().get(newCf.cfName),newCf);
  CellName col0=cellname("col0");
  DecoratedKey dk=Util.dk("key0");
  Mutation rm=new Mutation(newKs.name,dk.getKey());
  rm.add(newCf.cfName,col0,ByteBufferUtil.bytes("value0"),1L);
  rm.apply();
  ColumnFamilyStore store=Keyspace.open(newKs.name).getColumnFamilyStore(newCf.cfName);
  Assert.assertNotNull(store);
  store.forceBlockingFlush();
  ColumnFamily cfam=store.getColumnFamily(Util.namesQueryFilter(store,dk,col0));
  Assert.assertNotNull(cfam.getColumn(col0));
  Cell col=cfam.getColumn(col0);
  Assert.assertEquals(ByteBufferUtil.bytes("value0"),col.value());
}
