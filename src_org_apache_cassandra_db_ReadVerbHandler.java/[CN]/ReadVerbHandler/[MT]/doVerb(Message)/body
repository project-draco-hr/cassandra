{
  byte[] body=(byte[])message.getMessageBody()[0];
  ReadContext readCtx=tls_.get();
  if (readCtx == null) {
    readCtx=new ReadContext();
    tls_.set(readCtx);
  }
  readCtx.bufIn_.reset(body,body.length);
  try {
    ReadCommand readCommand=ReadCommand.serializer().deserialize(readCtx.bufIn_);
    Table table=Table.open(readCommand.table);
    Row row=null;
    long start=System.currentTimeMillis();
    if (readCommand.columnFamilyColumn == null)     row=table.get(readCommand.key);
 else {
      if (readCommand.columnNames.size() == 0) {
        if (readCommand.count > 0 && readCommand.start >= 0)         row=table.getRow(readCommand.key,readCommand.columnFamilyColumn,readCommand.start,readCommand.count);
 else         row=table.getRow(readCommand.key,readCommand.columnFamilyColumn);
      }
 else {
        row=table.getRow(readCommand.key,readCommand.columnFamilyColumn,readCommand.columnNames);
      }
    }
    logger_.info("getRow()  TIME: " + (System.currentTimeMillis() - start) + " ms.");
    start=System.currentTimeMillis();
    ReadResponseMessage readResponseMessage=null;
    if (readCommand.isDigestQuery()) {
      readResponseMessage=new ReadResponseMessage(table.getTableName(),row.digest());
    }
 else {
      readResponseMessage=new ReadResponseMessage(table.getTableName(),row);
    }
    readResponseMessage.setIsDigestQuery(readCommand.isDigestQuery());
    readCtx.bufOut_.reset();
    start=System.currentTimeMillis();
    ReadResponseMessage.serializer().serialize(readResponseMessage,readCtx.bufOut_);
    logger_.info("serialize  TIME: " + (System.currentTimeMillis() - start) + " ms.");
    byte[] bytes=new byte[readCtx.bufOut_.getLength()];
    start=System.currentTimeMillis();
    System.arraycopy(readCtx.bufOut_.getData(),0,bytes,0,bytes.length);
    logger_.info("copy  TIME: " + (System.currentTimeMillis() - start) + " ms.");
    Message response=message.getReply(StorageService.getLocalStorageEndPoint(),new Object[]{bytes});
    MessagingService.getMessagingInstance().sendOneWay(response,message.getFrom());
    logger_.info("ReadVerbHandler  TIME 2: " + (System.currentTimeMillis() - start) + " ms.");
    String repair=new String(message.getHeader(ReadCommand.DO_REPAIR));
    if (repair.equals(ReadCommand.DO_REPAIR))     doReadRepair(row,readCommand);
  }
 catch (  IOException ex) {
    logger_.info(LogUtil.throwableToString(ex));
  }
catch (  ColumnFamilyNotDefinedException ex) {
    logger_.info(LogUtil.throwableToString(ex));
  }
}
