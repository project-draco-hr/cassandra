{
  if (lastDeserializedBlock == nextIndexIdx) {
    if (reversed)     nextIndexIdx--;
 else     nextIndexIdx++;
  }
  lastDeserializedBlock=nextIndexIdx;
  if (lastDeserializedBlock < 0 || lastDeserializedBlock >= indexes.size())   return false;
  IndexInfo currentIndex=indexes.get(lastDeserializedBlock);
  long positionToSeek=columnsStart + currentIndex.offset;
  if (file == null)   file=originalInput == null ? sstable.getFileDataInput(positionToSeek) : originalInput;
  AtomDeserializer deserializer=emptyColumnFamily.metadata().getOnDiskDeserializer(file,sstable.descriptor.version);
  file.seek(positionToSeek);
  FileMark mark=file.mark();
  boolean inSlice=false;
  while (file.bytesPastMark(mark) < currentIndex.width || deserializer.hasUnprocessed()) {
    Composite start=currentStart();
    if (!inSlice && !start.isEmpty() && deserializer.compareNextTo(start) < 0) {
      if (reversed) {
        prefetched.addFirst(deserializer.readNext());
      }
 else {
        deserializer.skipNext();
      }
    }
 else {
      Composite finish=currentFinish();
      if (finish.isEmpty() || deserializer.compareNextTo(finish) <= 0) {
        inSlice=true;
        addColumn(deserializer.readNext());
      }
 else {
        if (reversed && prefetched.isEmpty())         break;
        if (!setNextSlice())         break;
        inSlice=false;
        if (nextIndexIdx != lastDeserializedBlock) {
          if (reversed)           prefetched.clear();
          break;
        }
        if (reversed)         break;
      }
    }
  }
  return true;
}
