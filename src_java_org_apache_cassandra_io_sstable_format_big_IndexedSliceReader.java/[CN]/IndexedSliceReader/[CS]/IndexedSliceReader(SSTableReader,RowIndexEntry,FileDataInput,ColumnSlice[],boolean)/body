{
  Tracing.trace("Seeking to partition indexed section in data file");
  this.sstable=sstable;
  this.originalInput=input;
  this.reversed=reversed;
  this.slices=slices;
  this.comparator=sstable.metadata.comparator;
  this.rangeTombstonesReversed=reversed ? new ArrayDeque<OnDiskAtom>() : null;
  try {
    this.indexes=indexEntry.columnsIndex();
    emptyColumnFamily=ArrayBackedSortedColumns.factory.create(sstable.metadata);
    if (indexes.isEmpty()) {
      setToRowStart(indexEntry,input);
      emptyColumnFamily.delete(DeletionTime.serializer.deserialize(file));
      fetcher=new SimpleBlockFetcher();
    }
 else {
      emptyColumnFamily.delete(indexEntry.deletionTime());
      fetcher=new IndexedBlockFetcher(indexEntry.position);
    }
  }
 catch (  IOException e) {
    sstable.markSuspect();
    throw new CorruptSSTableException(e,file.getPath());
  }
}
