{
  org.apache.thrift.protocol.TField field;
  iprot.readStructBegin();
  while (true) {
    field=iprot.readFieldBegin();
    if (field.type == org.apache.thrift.protocol.TType.STOP) {
      break;
    }
switch (field.id) {
case 1:
      if (field.type == org.apache.thrift.protocol.TType.STRING) {
        this.keyspace=iprot.readString();
      }
 else {
        org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);
      }
    break;
case 2:
  if (field.type == org.apache.thrift.protocol.TType.STRING) {
    this.name=iprot.readString();
  }
 else {
    org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);
  }
break;
case 3:
if (field.type == org.apache.thrift.protocol.TType.STRING) {
this.column_type=iprot.readString();
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);
}
break;
case 5:
if (field.type == org.apache.thrift.protocol.TType.STRING) {
this.comparator_type=iprot.readString();
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);
}
break;
case 6:
if (field.type == org.apache.thrift.protocol.TType.STRING) {
this.subcomparator_type=iprot.readString();
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);
}
break;
case 8:
if (field.type == org.apache.thrift.protocol.TType.STRING) {
this.comment=iprot.readString();
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);
}
break;
case 9:
if (field.type == org.apache.thrift.protocol.TType.DOUBLE) {
this.row_cache_size=iprot.readDouble();
setRow_cache_sizeIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);
}
break;
case 11:
if (field.type == org.apache.thrift.protocol.TType.DOUBLE) {
this.key_cache_size=iprot.readDouble();
setKey_cache_sizeIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);
}
break;
case 12:
if (field.type == org.apache.thrift.protocol.TType.DOUBLE) {
this.read_repair_chance=iprot.readDouble();
setRead_repair_chanceIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);
}
break;
case 13:
if (field.type == org.apache.thrift.protocol.TType.LIST) {
{
org.apache.thrift.protocol.TList _list42=iprot.readListBegin();
this.column_metadata=new ArrayList<ColumnDef>(_list42.size);
for (int _i43=0; _i43 < _list42.size; ++_i43) {
ColumnDef _elem44;
_elem44=new ColumnDef();
_elem44.read(iprot);
this.column_metadata.add(_elem44);
}
iprot.readListEnd();
}
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);
}
break;
case 14:
if (field.type == org.apache.thrift.protocol.TType.I32) {
this.gc_grace_seconds=iprot.readI32();
setGc_grace_secondsIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);
}
break;
case 15:
if (field.type == org.apache.thrift.protocol.TType.STRING) {
this.default_validation_class=iprot.readString();
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);
}
break;
case 16:
if (field.type == org.apache.thrift.protocol.TType.I32) {
this.id=iprot.readI32();
setIdIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);
}
break;
case 17:
if (field.type == org.apache.thrift.protocol.TType.I32) {
this.min_compaction_threshold=iprot.readI32();
setMin_compaction_thresholdIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);
}
break;
case 18:
if (field.type == org.apache.thrift.protocol.TType.I32) {
this.max_compaction_threshold=iprot.readI32();
setMax_compaction_thresholdIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);
}
break;
case 19:
if (field.type == org.apache.thrift.protocol.TType.I32) {
this.row_cache_save_period_in_seconds=iprot.readI32();
setRow_cache_save_period_in_secondsIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);
}
break;
case 20:
if (field.type == org.apache.thrift.protocol.TType.I32) {
this.key_cache_save_period_in_seconds=iprot.readI32();
setKey_cache_save_period_in_secondsIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);
}
break;
case 24:
if (field.type == org.apache.thrift.protocol.TType.BOOL) {
this.replicate_on_write=iprot.readBool();
setReplicate_on_writeIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);
}
break;
case 25:
if (field.type == org.apache.thrift.protocol.TType.DOUBLE) {
this.merge_shards_chance=iprot.readDouble();
setMerge_shards_chanceIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);
}
break;
case 26:
if (field.type == org.apache.thrift.protocol.TType.STRING) {
this.key_validation_class=iprot.readString();
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);
}
break;
case 27:
if (field.type == org.apache.thrift.protocol.TType.STRING) {
this.row_cache_provider=iprot.readString();
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);
}
break;
case 28:
if (field.type == org.apache.thrift.protocol.TType.STRING) {
this.key_alias=iprot.readBinary();
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);
}
break;
case 29:
if (field.type == org.apache.thrift.protocol.TType.STRING) {
this.compaction_strategy=iprot.readString();
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);
}
break;
case 30:
if (field.type == org.apache.thrift.protocol.TType.MAP) {
{
org.apache.thrift.protocol.TMap _map45=iprot.readMapBegin();
this.compaction_strategy_options=new HashMap<String,String>(2 * _map45.size);
for (int _i46=0; _i46 < _map45.size; ++_i46) {
String _key47;
String _val48;
_key47=iprot.readString();
_val48=iprot.readString();
this.compaction_strategy_options.put(_key47,_val48);
}
iprot.readMapEnd();
}
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);
}
break;
case 31:
if (field.type == org.apache.thrift.protocol.TType.I32) {
this.row_cache_keys_to_save=iprot.readI32();
setRow_cache_keys_to_saveIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);
}
break;
case 32:
if (field.type == org.apache.thrift.protocol.TType.MAP) {
{
org.apache.thrift.protocol.TMap _map49=iprot.readMapBegin();
this.compression_options=new HashMap<String,String>(2 * _map49.size);
for (int _i50=0; _i50 < _map49.size; ++_i50) {
String _key51;
String _val52;
_key51=iprot.readString();
_val52=iprot.readString();
this.compression_options.put(_key51,_val52);
}
iprot.readMapEnd();
}
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);
}
break;
default :
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);
}
iprot.readFieldEnd();
}
iprot.readStructEnd();
validate();
}
