{
  org.apache.thrift.protocol.TField field;
  iprot.readStructBegin();
  while (true) {
    field=iprot.readFieldBegin();
    if (field.type == org.apache.thrift.protocol.TType.STOP) {
      break;
    }
switch (field.id) {
case 1:
      if (field.type == org.apache.thrift.protocol.TType.STRING) {
        this.keyspace=iprot.readString();
      }
 else {
        org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);
      }
    break;
case 2:
  if (field.type == org.apache.thrift.protocol.TType.STRING) {
    this.name=iprot.readString();
  }
 else {
    org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);
  }
break;
case 3:
if (field.type == org.apache.thrift.protocol.TType.STRING) {
this.column_type=iprot.readString();
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);
}
break;
case 5:
if (field.type == org.apache.thrift.protocol.TType.STRING) {
this.comparator_type=iprot.readString();
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);
}
break;
case 6:
if (field.type == org.apache.thrift.protocol.TType.STRING) {
this.subcomparator_type=iprot.readString();
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);
}
break;
case 8:
if (field.type == org.apache.thrift.protocol.TType.STRING) {
this.comment=iprot.readString();
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);
}
break;
case 9:
if (field.type == org.apache.thrift.protocol.TType.DOUBLE) {
this.row_cache_size=iprot.readDouble();
setRow_cache_sizeIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);
}
break;
case 11:
if (field.type == org.apache.thrift.protocol.TType.DOUBLE) {
this.key_cache_size=iprot.readDouble();
setKey_cache_sizeIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);
}
break;
case 12:
if (field.type == org.apache.thrift.protocol.TType.DOUBLE) {
this.read_repair_chance=iprot.readDouble();
setRead_repair_chanceIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);
}
break;
case 13:
if (field.type == org.apache.thrift.protocol.TType.LIST) {
{
org.apache.thrift.protocol.TList _list29=iprot.readListBegin();
this.column_metadata=new ArrayList<ColumnDef>(_list29.size);
for (int _i30=0; _i30 < _list29.size; ++_i30) {
ColumnDef _elem31;
_elem31=new ColumnDef();
_elem31.read(iprot);
this.column_metadata.add(_elem31);
}
iprot.readListEnd();
}
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);
}
break;
case 14:
if (field.type == org.apache.thrift.protocol.TType.I32) {
this.gc_grace_seconds=iprot.readI32();
setGc_grace_secondsIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);
}
break;
case 15:
if (field.type == org.apache.thrift.protocol.TType.STRING) {
this.default_validation_class=iprot.readString();
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);
}
break;
case 16:
if (field.type == org.apache.thrift.protocol.TType.I32) {
this.id=iprot.readI32();
setIdIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);
}
break;
case 17:
if (field.type == org.apache.thrift.protocol.TType.I32) {
this.min_compaction_threshold=iprot.readI32();
setMin_compaction_thresholdIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);
}
break;
case 18:
if (field.type == org.apache.thrift.protocol.TType.I32) {
this.max_compaction_threshold=iprot.readI32();
setMax_compaction_thresholdIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);
}
break;
case 19:
if (field.type == org.apache.thrift.protocol.TType.I32) {
this.row_cache_save_period_in_seconds=iprot.readI32();
setRow_cache_save_period_in_secondsIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);
}
break;
case 20:
if (field.type == org.apache.thrift.protocol.TType.I32) {
this.key_cache_save_period_in_seconds=iprot.readI32();
setKey_cache_save_period_in_secondsIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);
}
break;
case 21:
if (field.type == org.apache.thrift.protocol.TType.I32) {
this.memtable_flush_after_mins=iprot.readI32();
setMemtable_flush_after_minsIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);
}
break;
case 22:
if (field.type == org.apache.thrift.protocol.TType.I32) {
this.memtable_throughput_in_mb=iprot.readI32();
setMemtable_throughput_in_mbIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);
}
break;
case 23:
if (field.type == org.apache.thrift.protocol.TType.DOUBLE) {
this.memtable_operations_in_millions=iprot.readDouble();
setMemtable_operations_in_millionsIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);
}
break;
case 24:
if (field.type == org.apache.thrift.protocol.TType.BOOL) {
this.replicate_on_write=iprot.readBool();
setReplicate_on_writeIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);
}
break;
case 25:
if (field.type == org.apache.thrift.protocol.TType.DOUBLE) {
this.merge_shards_chance=iprot.readDouble();
setMerge_shards_chanceIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);
}
break;
case 26:
if (field.type == org.apache.thrift.protocol.TType.STRING) {
this.key_validation_class=iprot.readString();
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);
}
break;
case 27:
if (field.type == org.apache.thrift.protocol.TType.STRING) {
this.row_cache_provider=iprot.readString();
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);
}
break;
case 28:
if (field.type == org.apache.thrift.protocol.TType.STRING) {
this.key_alias=iprot.readBinary();
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);
}
break;
case 29:
if (field.type == org.apache.thrift.protocol.TType.STRING) {
this.compaction_strategy=iprot.readString();
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);
}
break;
case 30:
if (field.type == org.apache.thrift.protocol.TType.MAP) {
{
org.apache.thrift.protocol.TMap _map32=iprot.readMapBegin();
this.compaction_strategy_options=new HashMap<String,String>(2 * _map32.size);
for (int _i33=0; _i33 < _map32.size; ++_i33) {
String _key34;
String _val35;
_key34=iprot.readString();
_val35=iprot.readString();
this.compaction_strategy_options.put(_key34,_val35);
}
iprot.readMapEnd();
}
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);
}
break;
default :
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);
}
iprot.readFieldEnd();
}
iprot.readStructEnd();
validate();
}
