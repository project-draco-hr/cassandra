{
  TField field;
  iprot.readStructBegin();
  while (true) {
    field=iprot.readFieldBegin();
    if (field.type == TType.STOP) {
      break;
    }
switch (field.id) {
case 1:
      if (field.type == TType.STRING) {
        this.keyspace=iprot.readString();
      }
 else {
        TProtocolUtil.skip(iprot,field.type);
      }
    break;
case 2:
  if (field.type == TType.STRING) {
    this.name=iprot.readString();
  }
 else {
    TProtocolUtil.skip(iprot,field.type);
  }
break;
case 3:
if (field.type == TType.STRING) {
this.column_type=iprot.readString();
}
 else {
TProtocolUtil.skip(iprot,field.type);
}
break;
case 4:
if (field.type == TType.STRING) {
this.clock_type=iprot.readString();
}
 else {
TProtocolUtil.skip(iprot,field.type);
}
break;
case 5:
if (field.type == TType.STRING) {
this.comparator_type=iprot.readString();
}
 else {
TProtocolUtil.skip(iprot,field.type);
}
break;
case 6:
if (field.type == TType.STRING) {
this.subcomparator_type=iprot.readString();
}
 else {
TProtocolUtil.skip(iprot,field.type);
}
break;
case 7:
if (field.type == TType.STRING) {
this.reconciler=iprot.readString();
}
 else {
TProtocolUtil.skip(iprot,field.type);
}
break;
case 8:
if (field.type == TType.STRING) {
this.comment=iprot.readString();
}
 else {
TProtocolUtil.skip(iprot,field.type);
}
break;
case 9:
if (field.type == TType.DOUBLE) {
this.row_cache_size=iprot.readDouble();
setRow_cache_sizeIsSet(true);
}
 else {
TProtocolUtil.skip(iprot,field.type);
}
break;
case 10:
if (field.type == TType.BOOL) {
this.preload_row_cache=iprot.readBool();
setPreload_row_cacheIsSet(true);
}
 else {
TProtocolUtil.skip(iprot,field.type);
}
break;
case 11:
if (field.type == TType.DOUBLE) {
this.key_cache_size=iprot.readDouble();
setKey_cache_sizeIsSet(true);
}
 else {
TProtocolUtil.skip(iprot,field.type);
}
break;
case 12:
if (field.type == TType.DOUBLE) {
this.read_repair_chance=iprot.readDouble();
setRead_repair_chanceIsSet(true);
}
 else {
TProtocolUtil.skip(iprot,field.type);
}
break;
case 13:
if (field.type == TType.LIST) {
{
TList _list29=iprot.readListBegin();
this.column_metadata=new ArrayList<ColumnDef>(_list29.size);
for (int _i30=0; _i30 < _list29.size; ++_i30) {
ColumnDef _elem31;
_elem31=new ColumnDef();
_elem31.read(iprot);
this.column_metadata.add(_elem31);
}
iprot.readListEnd();
}
}
 else {
TProtocolUtil.skip(iprot,field.type);
}
break;
case 14:
if (field.type == TType.I32) {
this.gc_grace_seconds=iprot.readI32();
setGc_grace_secondsIsSet(true);
}
 else {
TProtocolUtil.skip(iprot,field.type);
}
break;
default :
TProtocolUtil.skip(iprot,field.type);
}
iprot.readFieldEnd();
}
iprot.readStructEnd();
validate();
}
