{
  HashCodeBuilder builder=new HashCodeBuilder();
  boolean present_keyspace=true && (isSetKeyspace());
  builder.append(present_keyspace);
  if (present_keyspace)   builder.append(keyspace);
  boolean present_name=true && (isSetName());
  builder.append(present_name);
  if (present_name)   builder.append(name);
  boolean present_column_type=true && (isSetColumn_type());
  builder.append(present_column_type);
  if (present_column_type)   builder.append(column_type);
  boolean present_comparator_type=true && (isSetComparator_type());
  builder.append(present_comparator_type);
  if (present_comparator_type)   builder.append(comparator_type);
  boolean present_subcomparator_type=true && (isSetSubcomparator_type());
  builder.append(present_subcomparator_type);
  if (present_subcomparator_type)   builder.append(subcomparator_type);
  boolean present_comment=true && (isSetComment());
  builder.append(present_comment);
  if (present_comment)   builder.append(comment);
  boolean present_read_repair_chance=true && (isSetRead_repair_chance());
  builder.append(present_read_repair_chance);
  if (present_read_repair_chance)   builder.append(read_repair_chance);
  boolean present_column_metadata=true && (isSetColumn_metadata());
  builder.append(present_column_metadata);
  if (present_column_metadata)   builder.append(column_metadata);
  boolean present_gc_grace_seconds=true && (isSetGc_grace_seconds());
  builder.append(present_gc_grace_seconds);
  if (present_gc_grace_seconds)   builder.append(gc_grace_seconds);
  boolean present_default_validation_class=true && (isSetDefault_validation_class());
  builder.append(present_default_validation_class);
  if (present_default_validation_class)   builder.append(default_validation_class);
  boolean present_id=true && (isSetId());
  builder.append(present_id);
  if (present_id)   builder.append(id);
  boolean present_min_compaction_threshold=true && (isSetMin_compaction_threshold());
  builder.append(present_min_compaction_threshold);
  if (present_min_compaction_threshold)   builder.append(min_compaction_threshold);
  boolean present_max_compaction_threshold=true && (isSetMax_compaction_threshold());
  builder.append(present_max_compaction_threshold);
  if (present_max_compaction_threshold)   builder.append(max_compaction_threshold);
  boolean present_replicate_on_write=true && (isSetReplicate_on_write());
  builder.append(present_replicate_on_write);
  if (present_replicate_on_write)   builder.append(replicate_on_write);
  boolean present_merge_shards_chance=true && (isSetMerge_shards_chance());
  builder.append(present_merge_shards_chance);
  if (present_merge_shards_chance)   builder.append(merge_shards_chance);
  boolean present_key_validation_class=true && (isSetKey_validation_class());
  builder.append(present_key_validation_class);
  if (present_key_validation_class)   builder.append(key_validation_class);
  boolean present_key_alias=true && (isSetKey_alias());
  builder.append(present_key_alias);
  if (present_key_alias)   builder.append(key_alias);
  boolean present_compaction_strategy=true && (isSetCompaction_strategy());
  builder.append(present_compaction_strategy);
  if (present_compaction_strategy)   builder.append(compaction_strategy);
  boolean present_compaction_strategy_options=true && (isSetCompaction_strategy_options());
  builder.append(present_compaction_strategy_options);
  if (present_compaction_strategy_options)   builder.append(compaction_strategy_options);
  boolean present_compression_options=true && (isSetCompression_options());
  builder.append(present_compression_options);
  if (present_compression_options)   builder.append(compression_options);
  boolean present_bloom_filter_fp_chance=true && (isSetBloom_filter_fp_chance());
  builder.append(present_bloom_filter_fp_chance);
  if (present_bloom_filter_fp_chance)   builder.append(bloom_filter_fp_chance);
  return builder.toHashCode();
}
