{
switch (field) {
case KEYSPACE:
    return getKeyspace();
case NAME:
  return getName();
case COLUMN_TYPE:
return getColumn_type();
case COMPARATOR_TYPE:
return getComparator_type();
case SUBCOMPARATOR_TYPE:
return getSubcomparator_type();
case COMMENT:
return getComment();
case READ_REPAIR_CHANCE:
return Double.valueOf(getRead_repair_chance());
case COLUMN_METADATA:
return getColumn_metadata();
case GC_GRACE_SECONDS:
return Integer.valueOf(getGc_grace_seconds());
case DEFAULT_VALIDATION_CLASS:
return getDefault_validation_class();
case ID:
return Integer.valueOf(getId());
case MIN_COMPACTION_THRESHOLD:
return Integer.valueOf(getMin_compaction_threshold());
case MAX_COMPACTION_THRESHOLD:
return Integer.valueOf(getMax_compaction_threshold());
case KEY_VALIDATION_CLASS:
return getKey_validation_class();
case KEY_ALIAS:
return getKey_alias();
case COMPACTION_STRATEGY:
return getCompaction_strategy();
case COMPACTION_STRATEGY_OPTIONS:
return getCompaction_strategy_options();
case COMPRESSION_OPTIONS:
return getCompression_options();
case BLOOM_FILTER_FP_CHANCE:
return Double.valueOf(getBloom_filter_fp_chance());
case CACHING:
return getCaching();
case DCLOCAL_READ_REPAIR_CHANCE:
return Double.valueOf(getDclocal_read_repair_chance());
case MEMTABLE_FLUSH_PERIOD_IN_MS:
return Integer.valueOf(getMemtable_flush_period_in_ms());
case DEFAULT_TIME_TO_LIVE:
return Integer.valueOf(getDefault_time_to_live());
case SPECULATIVE_RETRY:
return getSpeculative_retry();
case TRIGGERS:
return getTriggers();
case CELLS_PER_ROW_TO_CACHE:
return getCells_per_row_to_cache();
case MIN_INDEX_INTERVAL:
return Integer.valueOf(getMin_index_interval());
case MAX_INDEX_INTERVAL:
return Integer.valueOf(getMax_index_interval());
case ROW_CACHE_SIZE:
return Double.valueOf(getRow_cache_size());
case KEY_CACHE_SIZE:
return Double.valueOf(getKey_cache_size());
case ROW_CACHE_SAVE_PERIOD_IN_SECONDS:
return Integer.valueOf(getRow_cache_save_period_in_seconds());
case KEY_CACHE_SAVE_PERIOD_IN_SECONDS:
return Integer.valueOf(getKey_cache_save_period_in_seconds());
case MEMTABLE_FLUSH_AFTER_MINS:
return Integer.valueOf(getMemtable_flush_after_mins());
case MEMTABLE_THROUGHPUT_IN_MB:
return Integer.valueOf(getMemtable_throughput_in_mb());
case MEMTABLE_OPERATIONS_IN_MILLIONS:
return Double.valueOf(getMemtable_operations_in_millions());
case REPLICATE_ON_WRITE:
return Boolean.valueOf(isReplicate_on_write());
case MERGE_SHARDS_CHANCE:
return Double.valueOf(getMerge_shards_chance());
case ROW_CACHE_PROVIDER:
return getRow_cache_provider();
case ROW_CACHE_KEYS_TO_SAVE:
return Integer.valueOf(getRow_cache_keys_to_save());
case POPULATE_IO_CACHE_ON_FLUSH:
return Boolean.valueOf(isPopulate_io_cache_on_flush());
case INDEX_INTERVAL:
return Integer.valueOf(getIndex_interval());
}
throw new IllegalStateException();
}
