{
  validate();
  oprot.writeStructBegin(STRUCT_DESC);
  if (this.keyspace != null) {
    oprot.writeFieldBegin(KEYSPACE_FIELD_DESC);
    oprot.writeString(this.keyspace);
    oprot.writeFieldEnd();
  }
  if (this.name != null) {
    oprot.writeFieldBegin(NAME_FIELD_DESC);
    oprot.writeString(this.name);
    oprot.writeFieldEnd();
  }
  if (this.column_type != null) {
    if (isSetColumn_type()) {
      oprot.writeFieldBegin(COLUMN_TYPE_FIELD_DESC);
      oprot.writeString(this.column_type);
      oprot.writeFieldEnd();
    }
  }
  if (this.comparator_type != null) {
    if (isSetComparator_type()) {
      oprot.writeFieldBegin(COMPARATOR_TYPE_FIELD_DESC);
      oprot.writeString(this.comparator_type);
      oprot.writeFieldEnd();
    }
  }
  if (this.subcomparator_type != null) {
    if (isSetSubcomparator_type()) {
      oprot.writeFieldBegin(SUBCOMPARATOR_TYPE_FIELD_DESC);
      oprot.writeString(this.subcomparator_type);
      oprot.writeFieldEnd();
    }
  }
  if (this.comment != null) {
    if (isSetComment()) {
      oprot.writeFieldBegin(COMMENT_FIELD_DESC);
      oprot.writeString(this.comment);
      oprot.writeFieldEnd();
    }
  }
  if (isSetRow_cache_size()) {
    oprot.writeFieldBegin(ROW_CACHE_SIZE_FIELD_DESC);
    oprot.writeDouble(this.row_cache_size);
    oprot.writeFieldEnd();
  }
  if (isSetKey_cache_size()) {
    oprot.writeFieldBegin(KEY_CACHE_SIZE_FIELD_DESC);
    oprot.writeDouble(this.key_cache_size);
    oprot.writeFieldEnd();
  }
  if (isSetRead_repair_chance()) {
    oprot.writeFieldBegin(READ_REPAIR_CHANCE_FIELD_DESC);
    oprot.writeDouble(this.read_repair_chance);
    oprot.writeFieldEnd();
  }
  if (this.column_metadata != null) {
    if (isSetColumn_metadata()) {
      oprot.writeFieldBegin(COLUMN_METADATA_FIELD_DESC);
{
        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT,this.column_metadata.size()));
        for (        ColumnDef _iter57 : this.column_metadata) {
          _iter57.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
  }
  if (isSetGc_grace_seconds()) {
    oprot.writeFieldBegin(GC_GRACE_SECONDS_FIELD_DESC);
    oprot.writeI32(this.gc_grace_seconds);
    oprot.writeFieldEnd();
  }
  if (this.default_validation_class != null) {
    if (isSetDefault_validation_class()) {
      oprot.writeFieldBegin(DEFAULT_VALIDATION_CLASS_FIELD_DESC);
      oprot.writeString(this.default_validation_class);
      oprot.writeFieldEnd();
    }
  }
  if (isSetId()) {
    oprot.writeFieldBegin(ID_FIELD_DESC);
    oprot.writeI32(this.id);
    oprot.writeFieldEnd();
  }
  if (isSetMin_compaction_threshold()) {
    oprot.writeFieldBegin(MIN_COMPACTION_THRESHOLD_FIELD_DESC);
    oprot.writeI32(this.min_compaction_threshold);
    oprot.writeFieldEnd();
  }
  if (isSetMax_compaction_threshold()) {
    oprot.writeFieldBegin(MAX_COMPACTION_THRESHOLD_FIELD_DESC);
    oprot.writeI32(this.max_compaction_threshold);
    oprot.writeFieldEnd();
  }
  if (isSetRow_cache_save_period_in_seconds()) {
    oprot.writeFieldBegin(ROW_CACHE_SAVE_PERIOD_IN_SECONDS_FIELD_DESC);
    oprot.writeI32(this.row_cache_save_period_in_seconds);
    oprot.writeFieldEnd();
  }
  if (isSetKey_cache_save_period_in_seconds()) {
    oprot.writeFieldBegin(KEY_CACHE_SAVE_PERIOD_IN_SECONDS_FIELD_DESC);
    oprot.writeI32(this.key_cache_save_period_in_seconds);
    oprot.writeFieldEnd();
  }
  if (isSetMemtable_flush_after_mins()) {
    oprot.writeFieldBegin(MEMTABLE_FLUSH_AFTER_MINS_FIELD_DESC);
    oprot.writeI32(this.memtable_flush_after_mins);
    oprot.writeFieldEnd();
  }
  if (isSetMemtable_throughput_in_mb()) {
    oprot.writeFieldBegin(MEMTABLE_THROUGHPUT_IN_MB_FIELD_DESC);
    oprot.writeI32(this.memtable_throughput_in_mb);
    oprot.writeFieldEnd();
  }
  if (isSetMemtable_operations_in_millions()) {
    oprot.writeFieldBegin(MEMTABLE_OPERATIONS_IN_MILLIONS_FIELD_DESC);
    oprot.writeDouble(this.memtable_operations_in_millions);
    oprot.writeFieldEnd();
  }
  if (isSetReplicate_on_write()) {
    oprot.writeFieldBegin(REPLICATE_ON_WRITE_FIELD_DESC);
    oprot.writeBool(this.replicate_on_write);
    oprot.writeFieldEnd();
  }
  if (isSetMerge_shards_chance()) {
    oprot.writeFieldBegin(MERGE_SHARDS_CHANCE_FIELD_DESC);
    oprot.writeDouble(this.merge_shards_chance);
    oprot.writeFieldEnd();
  }
  if (this.key_validation_class != null) {
    if (isSetKey_validation_class()) {
      oprot.writeFieldBegin(KEY_VALIDATION_CLASS_FIELD_DESC);
      oprot.writeString(this.key_validation_class);
      oprot.writeFieldEnd();
    }
  }
  if (this.row_cache_provider != null) {
    if (isSetRow_cache_provider()) {
      oprot.writeFieldBegin(ROW_CACHE_PROVIDER_FIELD_DESC);
      oprot.writeString(this.row_cache_provider);
      oprot.writeFieldEnd();
    }
  }
  if (this.key_alias != null) {
    if (isSetKey_alias()) {
      oprot.writeFieldBegin(KEY_ALIAS_FIELD_DESC);
      oprot.writeBinary(this.key_alias);
      oprot.writeFieldEnd();
    }
  }
  if (this.compaction_strategy != null) {
    if (isSetCompaction_strategy()) {
      oprot.writeFieldBegin(COMPACTION_STRATEGY_FIELD_DESC);
      oprot.writeString(this.compaction_strategy);
      oprot.writeFieldEnd();
    }
  }
  if (this.compaction_strategy_options != null) {
    if (isSetCompaction_strategy_options()) {
      oprot.writeFieldBegin(COMPACTION_STRATEGY_OPTIONS_FIELD_DESC);
{
        oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING,org.apache.thrift.protocol.TType.STRING,this.compaction_strategy_options.size()));
        for (        Map.Entry<String,String> _iter58 : this.compaction_strategy_options.entrySet()) {
          oprot.writeString(_iter58.getKey());
          oprot.writeString(_iter58.getValue());
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
  }
  if (isSetRow_cache_keys_to_save()) {
    oprot.writeFieldBegin(ROW_CACHE_KEYS_TO_SAVE_FIELD_DESC);
    oprot.writeI32(this.row_cache_keys_to_save);
    oprot.writeFieldEnd();
  }
  if (this.compression_options != null) {
    if (isSetCompression_options()) {
      oprot.writeFieldBegin(COMPRESSION_OPTIONS_FIELD_DESC);
{
        oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING,org.apache.thrift.protocol.TType.STRING,this.compression_options.size()));
        for (        Map.Entry<String,String> _iter59 : this.compression_options.entrySet()) {
          oprot.writeString(_iter59.getKey());
          oprot.writeString(_iter59.getValue());
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
  }
  if (isSetBloom_filter_fp_chance()) {
    oprot.writeFieldBegin(BLOOM_FILTER_FP_CHANCE_FIELD_DESC);
    oprot.writeDouble(this.bloom_filter_fp_chance);
    oprot.writeFieldEnd();
  }
  if (this.caching != null) {
    if (isSetCaching()) {
      oprot.writeFieldBegin(CACHING_FIELD_DESC);
      oprot.writeString(this.caching);
      oprot.writeFieldEnd();
    }
  }
  if (isSetDclocal_read_repair_chance()) {
    oprot.writeFieldBegin(DCLOCAL_READ_REPAIR_CHANCE_FIELD_DESC);
    oprot.writeDouble(this.dclocal_read_repair_chance);
    oprot.writeFieldEnd();
  }
  if (isSetPopulate_io_cache_on_flush()) {
    oprot.writeFieldBegin(POPULATE_IO_CACHE_ON_FLUSH_FIELD_DESC);
    oprot.writeBool(this.populate_io_cache_on_flush);
    oprot.writeFieldEnd();
  }
  oprot.writeFieldStop();
  oprot.writeStructEnd();
}
