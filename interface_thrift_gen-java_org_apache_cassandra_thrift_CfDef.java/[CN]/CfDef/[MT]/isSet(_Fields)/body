{
switch (field) {
case KEYSPACE:
    return isSetKeyspace();
case NAME:
  return isSetName();
case COLUMN_TYPE:
return isSetColumn_type();
case COMPARATOR_TYPE:
return isSetComparator_type();
case SUBCOMPARATOR_TYPE:
return isSetSubcomparator_type();
case COMMENT:
return isSetComment();
case ROW_CACHE_SIZE:
return isSetRow_cache_size();
case PRELOAD_ROW_CACHE:
return isSetPreload_row_cache();
case KEY_CACHE_SIZE:
return isSetKey_cache_size();
case READ_REPAIR_CHANCE:
return isSetRead_repair_chance();
case COLUMN_METADATA:
return isSetColumn_metadata();
case GC_GRACE_SECONDS:
return isSetGc_grace_seconds();
case DEFAULT_VALIDATION_CLASS:
return isSetDefault_validation_class();
case ID:
return isSetId();
case MIN_COMPACTION_THRESHOLD:
return isSetMin_compaction_threshold();
case MAX_COMPACTION_THRESHOLD:
return isSetMax_compaction_threshold();
case ROW_CACHE_SAVE_PERIOD_IN_SECONDS:
return isSetRow_cache_save_period_in_seconds();
case KEY_CACHE_SAVE_PERIOD_IN_SECONDS:
return isSetKey_cache_save_period_in_seconds();
case MEMTABLE_FLUSH_AFTER_MINS:
return isSetMemtable_flush_after_mins();
case MEMTABLE_THROUGHPUT_IN_MB:
return isSetMemtable_throughput_in_mb();
case MEMTABLE_OPERATIONS_IN_MILLIONS:
return isSetMemtable_operations_in_millions();
}
throw new IllegalStateException();
}
