{
  if (field == null) {
    throw new IllegalArgumentException();
  }
switch (field) {
case KEYSPACE:
    return isSetKeyspace();
case NAME:
  return isSetName();
case COLUMN_TYPE:
return isSetColumn_type();
case COMPARATOR_TYPE:
return isSetComparator_type();
case SUBCOMPARATOR_TYPE:
return isSetSubcomparator_type();
case COMMENT:
return isSetComment();
case READ_REPAIR_CHANCE:
return isSetRead_repair_chance();
case COLUMN_METADATA:
return isSetColumn_metadata();
case GC_GRACE_SECONDS:
return isSetGc_grace_seconds();
case DEFAULT_VALIDATION_CLASS:
return isSetDefault_validation_class();
case ID:
return isSetId();
case MIN_COMPACTION_THRESHOLD:
return isSetMin_compaction_threshold();
case MAX_COMPACTION_THRESHOLD:
return isSetMax_compaction_threshold();
case REPLICATE_ON_WRITE:
return isSetReplicate_on_write();
case KEY_VALIDATION_CLASS:
return isSetKey_validation_class();
case KEY_ALIAS:
return isSetKey_alias();
case COMPACTION_STRATEGY:
return isSetCompaction_strategy();
case COMPACTION_STRATEGY_OPTIONS:
return isSetCompaction_strategy_options();
case COMPRESSION_OPTIONS:
return isSetCompression_options();
case BLOOM_FILTER_FP_CHANCE:
return isSetBloom_filter_fp_chance();
case CACHING:
return isSetCaching();
case DCLOCAL_READ_REPAIR_CHANCE:
return isSetDclocal_read_repair_chance();
case POPULATE_IO_CACHE_ON_FLUSH:
return isSetPopulate_io_cache_on_flush();
case MEMTABLE_FLUSH_PERIOD_IN_MS:
return isSetMemtable_flush_period_in_ms();
case DEFAULT_TIME_TO_LIVE:
return isSetDefault_time_to_live();
case INDEX_INTERVAL:
return isSetIndex_interval();
case SPECULATIVE_RETRY:
return isSetSpeculative_retry();
case TRIGGERS:
return isSetTriggers();
case ROW_CACHE_SIZE:
return isSetRow_cache_size();
case KEY_CACHE_SIZE:
return isSetKey_cache_size();
case ROW_CACHE_SAVE_PERIOD_IN_SECONDS:
return isSetRow_cache_save_period_in_seconds();
case KEY_CACHE_SAVE_PERIOD_IN_SECONDS:
return isSetKey_cache_save_period_in_seconds();
case MEMTABLE_FLUSH_AFTER_MINS:
return isSetMemtable_flush_after_mins();
case MEMTABLE_THROUGHPUT_IN_MB:
return isSetMemtable_throughput_in_mb();
case MEMTABLE_OPERATIONS_IN_MILLIONS:
return isSetMemtable_operations_in_millions();
case MERGE_SHARDS_CHANCE:
return isSetMerge_shards_chance();
case ROW_CACHE_PROVIDER:
return isSetRow_cache_provider();
case ROW_CACHE_KEYS_TO_SAVE:
return isSetRow_cache_keys_to_save();
}
throw new IllegalStateException();
}
