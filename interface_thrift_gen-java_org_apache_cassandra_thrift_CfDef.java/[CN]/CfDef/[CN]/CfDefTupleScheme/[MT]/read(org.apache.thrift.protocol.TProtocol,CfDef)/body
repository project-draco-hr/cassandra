{
  TTupleProtocol iprot=(TTupleProtocol)prot;
  struct.keyspace=iprot.readString();
  struct.setKeyspaceIsSet(true);
  struct.name=iprot.readString();
  struct.setNameIsSet(true);
  BitSet incoming=iprot.readBitSet(36);
  if (incoming.get(0)) {
    struct.column_type=iprot.readString();
    struct.setColumn_typeIsSet(true);
  }
  if (incoming.get(1)) {
    struct.comparator_type=iprot.readString();
    struct.setComparator_typeIsSet(true);
  }
  if (incoming.get(2)) {
    struct.subcomparator_type=iprot.readString();
    struct.setSubcomparator_typeIsSet(true);
  }
  if (incoming.get(3)) {
    struct.comment=iprot.readString();
    struct.setCommentIsSet(true);
  }
  if (incoming.get(4)) {
    struct.read_repair_chance=iprot.readDouble();
    struct.setRead_repair_chanceIsSet(true);
  }
  if (incoming.get(5)) {
{
      org.apache.thrift.protocol.TList _list114=new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT,iprot.readI32());
      struct.column_metadata=new ArrayList<ColumnDef>(_list114.size);
      for (int _i115=0; _i115 < _list114.size; ++_i115) {
        ColumnDef _elem116;
        _elem116=new ColumnDef();
        _elem116.read(iprot);
        struct.column_metadata.add(_elem116);
      }
    }
    struct.setColumn_metadataIsSet(true);
  }
  if (incoming.get(6)) {
    struct.gc_grace_seconds=iprot.readI32();
    struct.setGc_grace_secondsIsSet(true);
  }
  if (incoming.get(7)) {
    struct.default_validation_class=iprot.readString();
    struct.setDefault_validation_classIsSet(true);
  }
  if (incoming.get(8)) {
    struct.id=iprot.readI32();
    struct.setIdIsSet(true);
  }
  if (incoming.get(9)) {
    struct.min_compaction_threshold=iprot.readI32();
    struct.setMin_compaction_thresholdIsSet(true);
  }
  if (incoming.get(10)) {
    struct.max_compaction_threshold=iprot.readI32();
    struct.setMax_compaction_thresholdIsSet(true);
  }
  if (incoming.get(11)) {
    struct.replicate_on_write=iprot.readBool();
    struct.setReplicate_on_writeIsSet(true);
  }
  if (incoming.get(12)) {
    struct.key_validation_class=iprot.readString();
    struct.setKey_validation_classIsSet(true);
  }
  if (incoming.get(13)) {
    struct.key_alias=iprot.readBinary();
    struct.setKey_aliasIsSet(true);
  }
  if (incoming.get(14)) {
    struct.compaction_strategy=iprot.readString();
    struct.setCompaction_strategyIsSet(true);
  }
  if (incoming.get(15)) {
{
      org.apache.thrift.protocol.TMap _map117=new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING,org.apache.thrift.protocol.TType.STRING,iprot.readI32());
      struct.compaction_strategy_options=new HashMap<String,String>(2 * _map117.size);
      for (int _i118=0; _i118 < _map117.size; ++_i118) {
        String _key119;
        String _val120;
        _key119=iprot.readString();
        _val120=iprot.readString();
        struct.compaction_strategy_options.put(_key119,_val120);
      }
    }
    struct.setCompaction_strategy_optionsIsSet(true);
  }
  if (incoming.get(16)) {
{
      org.apache.thrift.protocol.TMap _map121=new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING,org.apache.thrift.protocol.TType.STRING,iprot.readI32());
      struct.compression_options=new HashMap<String,String>(2 * _map121.size);
      for (int _i122=0; _i122 < _map121.size; ++_i122) {
        String _key123;
        String _val124;
        _key123=iprot.readString();
        _val124=iprot.readString();
        struct.compression_options.put(_key123,_val124);
      }
    }
    struct.setCompression_optionsIsSet(true);
  }
  if (incoming.get(17)) {
    struct.bloom_filter_fp_chance=iprot.readDouble();
    struct.setBloom_filter_fp_chanceIsSet(true);
  }
  if (incoming.get(18)) {
    struct.caching=iprot.readString();
    struct.setCachingIsSet(true);
  }
  if (incoming.get(19)) {
    struct.dclocal_read_repair_chance=iprot.readDouble();
    struct.setDclocal_read_repair_chanceIsSet(true);
  }
  if (incoming.get(20)) {
    struct.populate_io_cache_on_flush=iprot.readBool();
    struct.setPopulate_io_cache_on_flushIsSet(true);
  }
  if (incoming.get(21)) {
    struct.memtable_flush_period_in_ms=iprot.readI32();
    struct.setMemtable_flush_period_in_msIsSet(true);
  }
  if (incoming.get(22)) {
    struct.default_time_to_live=iprot.readI32();
    struct.setDefault_time_to_liveIsSet(true);
  }
  if (incoming.get(23)) {
    struct.index_interval=iprot.readI32();
    struct.setIndex_intervalIsSet(true);
  }
  if (incoming.get(24)) {
    struct.speculative_retry=iprot.readString();
    struct.setSpeculative_retryIsSet(true);
  }
  if (incoming.get(25)) {
{
      org.apache.thrift.protocol.TSet _set125=new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING,iprot.readI32());
      struct.trigger_class=new HashSet<String>(2 * _set125.size);
      for (int _i126=0; _i126 < _set125.size; ++_i126) {
        String _elem127;
        _elem127=iprot.readString();
        struct.trigger_class.add(_elem127);
      }
    }
    struct.setTrigger_classIsSet(true);
  }
  if (incoming.get(26)) {
    struct.row_cache_size=iprot.readDouble();
    struct.setRow_cache_sizeIsSet(true);
  }
  if (incoming.get(27)) {
    struct.key_cache_size=iprot.readDouble();
    struct.setKey_cache_sizeIsSet(true);
  }
  if (incoming.get(28)) {
    struct.row_cache_save_period_in_seconds=iprot.readI32();
    struct.setRow_cache_save_period_in_secondsIsSet(true);
  }
  if (incoming.get(29)) {
    struct.key_cache_save_period_in_seconds=iprot.readI32();
    struct.setKey_cache_save_period_in_secondsIsSet(true);
  }
  if (incoming.get(30)) {
    struct.memtable_flush_after_mins=iprot.readI32();
    struct.setMemtable_flush_after_minsIsSet(true);
  }
  if (incoming.get(31)) {
    struct.memtable_throughput_in_mb=iprot.readI32();
    struct.setMemtable_throughput_in_mbIsSet(true);
  }
  if (incoming.get(32)) {
    struct.memtable_operations_in_millions=iprot.readDouble();
    struct.setMemtable_operations_in_millionsIsSet(true);
  }
  if (incoming.get(33)) {
    struct.merge_shards_chance=iprot.readDouble();
    struct.setMerge_shards_chanceIsSet(true);
  }
  if (incoming.get(34)) {
    struct.row_cache_provider=iprot.readString();
    struct.setRow_cache_providerIsSet(true);
  }
  if (incoming.get(35)) {
    struct.row_cache_keys_to_save=iprot.readI32();
    struct.setRow_cache_keys_to_saveIsSet(true);
  }
}
