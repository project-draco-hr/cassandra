{
  TTupleProtocol oprot=(TTupleProtocol)prot;
  oprot.writeString(struct.keyspace);
  oprot.writeString(struct.name);
  BitSet optionals=new BitSet();
  if (struct.isSetColumn_type()) {
    optionals.set(0);
  }
  if (struct.isSetComparator_type()) {
    optionals.set(1);
  }
  if (struct.isSetSubcomparator_type()) {
    optionals.set(2);
  }
  if (struct.isSetComment()) {
    optionals.set(3);
  }
  if (struct.isSetRead_repair_chance()) {
    optionals.set(4);
  }
  if (struct.isSetColumn_metadata()) {
    optionals.set(5);
  }
  if (struct.isSetGc_grace_seconds()) {
    optionals.set(6);
  }
  if (struct.isSetDefault_validation_class()) {
    optionals.set(7);
  }
  if (struct.isSetId()) {
    optionals.set(8);
  }
  if (struct.isSetMin_compaction_threshold()) {
    optionals.set(9);
  }
  if (struct.isSetMax_compaction_threshold()) {
    optionals.set(10);
  }
  if (struct.isSetReplicate_on_write()) {
    optionals.set(11);
  }
  if (struct.isSetKey_validation_class()) {
    optionals.set(12);
  }
  if (struct.isSetKey_alias()) {
    optionals.set(13);
  }
  if (struct.isSetCompaction_strategy()) {
    optionals.set(14);
  }
  if (struct.isSetCompaction_strategy_options()) {
    optionals.set(15);
  }
  if (struct.isSetCompression_options()) {
    optionals.set(16);
  }
  if (struct.isSetBloom_filter_fp_chance()) {
    optionals.set(17);
  }
  if (struct.isSetCaching()) {
    optionals.set(18);
  }
  if (struct.isSetDclocal_read_repair_chance()) {
    optionals.set(19);
  }
  if (struct.isSetPopulate_io_cache_on_flush()) {
    optionals.set(20);
  }
  if (struct.isSetMemtable_flush_period_in_ms()) {
    optionals.set(21);
  }
  if (struct.isSetDefault_time_to_live()) {
    optionals.set(22);
  }
  if (struct.isSetIndex_interval()) {
    optionals.set(23);
  }
  if (struct.isSetSpeculative_retry()) {
    optionals.set(24);
  }
  if (struct.isSetTrigger_class()) {
    optionals.set(25);
  }
  if (struct.isSetRow_cache_size()) {
    optionals.set(26);
  }
  if (struct.isSetKey_cache_size()) {
    optionals.set(27);
  }
  if (struct.isSetRow_cache_save_period_in_seconds()) {
    optionals.set(28);
  }
  if (struct.isSetKey_cache_save_period_in_seconds()) {
    optionals.set(29);
  }
  if (struct.isSetMemtable_flush_after_mins()) {
    optionals.set(30);
  }
  if (struct.isSetMemtable_throughput_in_mb()) {
    optionals.set(31);
  }
  if (struct.isSetMemtable_operations_in_millions()) {
    optionals.set(32);
  }
  if (struct.isSetMerge_shards_chance()) {
    optionals.set(33);
  }
  if (struct.isSetRow_cache_provider()) {
    optionals.set(34);
  }
  if (struct.isSetRow_cache_keys_to_save()) {
    optionals.set(35);
  }
  oprot.writeBitSet(optionals,36);
  if (struct.isSetColumn_type()) {
    oprot.writeString(struct.column_type);
  }
  if (struct.isSetComparator_type()) {
    oprot.writeString(struct.comparator_type);
  }
  if (struct.isSetSubcomparator_type()) {
    oprot.writeString(struct.subcomparator_type);
  }
  if (struct.isSetComment()) {
    oprot.writeString(struct.comment);
  }
  if (struct.isSetRead_repair_chance()) {
    oprot.writeDouble(struct.read_repair_chance);
  }
  if (struct.isSetColumn_metadata()) {
{
      oprot.writeI32(struct.column_metadata.size());
      for (      ColumnDef _iter110 : struct.column_metadata) {
        _iter110.write(oprot);
      }
    }
  }
  if (struct.isSetGc_grace_seconds()) {
    oprot.writeI32(struct.gc_grace_seconds);
  }
  if (struct.isSetDefault_validation_class()) {
    oprot.writeString(struct.default_validation_class);
  }
  if (struct.isSetId()) {
    oprot.writeI32(struct.id);
  }
  if (struct.isSetMin_compaction_threshold()) {
    oprot.writeI32(struct.min_compaction_threshold);
  }
  if (struct.isSetMax_compaction_threshold()) {
    oprot.writeI32(struct.max_compaction_threshold);
  }
  if (struct.isSetReplicate_on_write()) {
    oprot.writeBool(struct.replicate_on_write);
  }
  if (struct.isSetKey_validation_class()) {
    oprot.writeString(struct.key_validation_class);
  }
  if (struct.isSetKey_alias()) {
    oprot.writeBinary(struct.key_alias);
  }
  if (struct.isSetCompaction_strategy()) {
    oprot.writeString(struct.compaction_strategy);
  }
  if (struct.isSetCompaction_strategy_options()) {
{
      oprot.writeI32(struct.compaction_strategy_options.size());
      for (      Map.Entry<String,String> _iter111 : struct.compaction_strategy_options.entrySet()) {
        oprot.writeString(_iter111.getKey());
        oprot.writeString(_iter111.getValue());
      }
    }
  }
  if (struct.isSetCompression_options()) {
{
      oprot.writeI32(struct.compression_options.size());
      for (      Map.Entry<String,String> _iter112 : struct.compression_options.entrySet()) {
        oprot.writeString(_iter112.getKey());
        oprot.writeString(_iter112.getValue());
      }
    }
  }
  if (struct.isSetBloom_filter_fp_chance()) {
    oprot.writeDouble(struct.bloom_filter_fp_chance);
  }
  if (struct.isSetCaching()) {
    oprot.writeString(struct.caching);
  }
  if (struct.isSetDclocal_read_repair_chance()) {
    oprot.writeDouble(struct.dclocal_read_repair_chance);
  }
  if (struct.isSetPopulate_io_cache_on_flush()) {
    oprot.writeBool(struct.populate_io_cache_on_flush);
  }
  if (struct.isSetMemtable_flush_period_in_ms()) {
    oprot.writeI32(struct.memtable_flush_period_in_ms);
  }
  if (struct.isSetDefault_time_to_live()) {
    oprot.writeI32(struct.default_time_to_live);
  }
  if (struct.isSetIndex_interval()) {
    oprot.writeI32(struct.index_interval);
  }
  if (struct.isSetSpeculative_retry()) {
    oprot.writeString(struct.speculative_retry);
  }
  if (struct.isSetTrigger_class()) {
{
      oprot.writeI32(struct.trigger_class.size());
      for (      String _iter113 : struct.trigger_class) {
        oprot.writeString(_iter113);
      }
    }
  }
  if (struct.isSetRow_cache_size()) {
    oprot.writeDouble(struct.row_cache_size);
  }
  if (struct.isSetKey_cache_size()) {
    oprot.writeDouble(struct.key_cache_size);
  }
  if (struct.isSetRow_cache_save_period_in_seconds()) {
    oprot.writeI32(struct.row_cache_save_period_in_seconds);
  }
  if (struct.isSetKey_cache_save_period_in_seconds()) {
    oprot.writeI32(struct.key_cache_save_period_in_seconds);
  }
  if (struct.isSetMemtable_flush_after_mins()) {
    oprot.writeI32(struct.memtable_flush_after_mins);
  }
  if (struct.isSetMemtable_throughput_in_mb()) {
    oprot.writeI32(struct.memtable_throughput_in_mb);
  }
  if (struct.isSetMemtable_operations_in_millions()) {
    oprot.writeDouble(struct.memtable_operations_in_millions);
  }
  if (struct.isSetMerge_shards_chance()) {
    oprot.writeDouble(struct.merge_shards_chance);
  }
  if (struct.isSetRow_cache_provider()) {
    oprot.writeString(struct.row_cache_provider);
  }
  if (struct.isSetRow_cache_keys_to_save()) {
    oprot.writeI32(struct.row_cache_keys_to_save);
  }
}
