{
  struct.validate();
  oprot.writeStructBegin(STRUCT_DESC);
  if (struct.keyspace != null) {
    oprot.writeFieldBegin(KEYSPACE_FIELD_DESC);
    oprot.writeString(struct.keyspace);
    oprot.writeFieldEnd();
  }
  if (struct.name != null) {
    oprot.writeFieldBegin(NAME_FIELD_DESC);
    oprot.writeString(struct.name);
    oprot.writeFieldEnd();
  }
  if (struct.column_type != null) {
    if (struct.isSetColumn_type()) {
      oprot.writeFieldBegin(COLUMN_TYPE_FIELD_DESC);
      oprot.writeString(struct.column_type);
      oprot.writeFieldEnd();
    }
  }
  if (struct.comparator_type != null) {
    if (struct.isSetComparator_type()) {
      oprot.writeFieldBegin(COMPARATOR_TYPE_FIELD_DESC);
      oprot.writeString(struct.comparator_type);
      oprot.writeFieldEnd();
    }
  }
  if (struct.subcomparator_type != null) {
    if (struct.isSetSubcomparator_type()) {
      oprot.writeFieldBegin(SUBCOMPARATOR_TYPE_FIELD_DESC);
      oprot.writeString(struct.subcomparator_type);
      oprot.writeFieldEnd();
    }
  }
  if (struct.comment != null) {
    if (struct.isSetComment()) {
      oprot.writeFieldBegin(COMMENT_FIELD_DESC);
      oprot.writeString(struct.comment);
      oprot.writeFieldEnd();
    }
  }
  if (struct.isSetRow_cache_size()) {
    oprot.writeFieldBegin(ROW_CACHE_SIZE_FIELD_DESC);
    oprot.writeDouble(struct.row_cache_size);
    oprot.writeFieldEnd();
  }
  if (struct.isSetKey_cache_size()) {
    oprot.writeFieldBegin(KEY_CACHE_SIZE_FIELD_DESC);
    oprot.writeDouble(struct.key_cache_size);
    oprot.writeFieldEnd();
  }
  if (struct.isSetRead_repair_chance()) {
    oprot.writeFieldBegin(READ_REPAIR_CHANCE_FIELD_DESC);
    oprot.writeDouble(struct.read_repair_chance);
    oprot.writeFieldEnd();
  }
  if (struct.column_metadata != null) {
    if (struct.isSetColumn_metadata()) {
      oprot.writeFieldBegin(COLUMN_METADATA_FIELD_DESC);
{
        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT,struct.column_metadata.size()));
        for (        ColumnDef _iter103 : struct.column_metadata) {
          _iter103.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
  }
  if (struct.isSetGc_grace_seconds()) {
    oprot.writeFieldBegin(GC_GRACE_SECONDS_FIELD_DESC);
    oprot.writeI32(struct.gc_grace_seconds);
    oprot.writeFieldEnd();
  }
  if (struct.default_validation_class != null) {
    if (struct.isSetDefault_validation_class()) {
      oprot.writeFieldBegin(DEFAULT_VALIDATION_CLASS_FIELD_DESC);
      oprot.writeString(struct.default_validation_class);
      oprot.writeFieldEnd();
    }
  }
  if (struct.isSetId()) {
    oprot.writeFieldBegin(ID_FIELD_DESC);
    oprot.writeI32(struct.id);
    oprot.writeFieldEnd();
  }
  if (struct.isSetMin_compaction_threshold()) {
    oprot.writeFieldBegin(MIN_COMPACTION_THRESHOLD_FIELD_DESC);
    oprot.writeI32(struct.min_compaction_threshold);
    oprot.writeFieldEnd();
  }
  if (struct.isSetMax_compaction_threshold()) {
    oprot.writeFieldBegin(MAX_COMPACTION_THRESHOLD_FIELD_DESC);
    oprot.writeI32(struct.max_compaction_threshold);
    oprot.writeFieldEnd();
  }
  if (struct.isSetRow_cache_save_period_in_seconds()) {
    oprot.writeFieldBegin(ROW_CACHE_SAVE_PERIOD_IN_SECONDS_FIELD_DESC);
    oprot.writeI32(struct.row_cache_save_period_in_seconds);
    oprot.writeFieldEnd();
  }
  if (struct.isSetKey_cache_save_period_in_seconds()) {
    oprot.writeFieldBegin(KEY_CACHE_SAVE_PERIOD_IN_SECONDS_FIELD_DESC);
    oprot.writeI32(struct.key_cache_save_period_in_seconds);
    oprot.writeFieldEnd();
  }
  if (struct.isSetMemtable_flush_after_mins()) {
    oprot.writeFieldBegin(MEMTABLE_FLUSH_AFTER_MINS_FIELD_DESC);
    oprot.writeI32(struct.memtable_flush_after_mins);
    oprot.writeFieldEnd();
  }
  if (struct.isSetMemtable_throughput_in_mb()) {
    oprot.writeFieldBegin(MEMTABLE_THROUGHPUT_IN_MB_FIELD_DESC);
    oprot.writeI32(struct.memtable_throughput_in_mb);
    oprot.writeFieldEnd();
  }
  if (struct.isSetMemtable_operations_in_millions()) {
    oprot.writeFieldBegin(MEMTABLE_OPERATIONS_IN_MILLIONS_FIELD_DESC);
    oprot.writeDouble(struct.memtable_operations_in_millions);
    oprot.writeFieldEnd();
  }
  if (struct.isSetReplicate_on_write()) {
    oprot.writeFieldBegin(REPLICATE_ON_WRITE_FIELD_DESC);
    oprot.writeBool(struct.replicate_on_write);
    oprot.writeFieldEnd();
  }
  if (struct.isSetMerge_shards_chance()) {
    oprot.writeFieldBegin(MERGE_SHARDS_CHANCE_FIELD_DESC);
    oprot.writeDouble(struct.merge_shards_chance);
    oprot.writeFieldEnd();
  }
  if (struct.key_validation_class != null) {
    if (struct.isSetKey_validation_class()) {
      oprot.writeFieldBegin(KEY_VALIDATION_CLASS_FIELD_DESC);
      oprot.writeString(struct.key_validation_class);
      oprot.writeFieldEnd();
    }
  }
  if (struct.row_cache_provider != null) {
    if (struct.isSetRow_cache_provider()) {
      oprot.writeFieldBegin(ROW_CACHE_PROVIDER_FIELD_DESC);
      oprot.writeString(struct.row_cache_provider);
      oprot.writeFieldEnd();
    }
  }
  if (struct.key_alias != null) {
    if (struct.isSetKey_alias()) {
      oprot.writeFieldBegin(KEY_ALIAS_FIELD_DESC);
      oprot.writeBinary(struct.key_alias);
      oprot.writeFieldEnd();
    }
  }
  if (struct.compaction_strategy != null) {
    if (struct.isSetCompaction_strategy()) {
      oprot.writeFieldBegin(COMPACTION_STRATEGY_FIELD_DESC);
      oprot.writeString(struct.compaction_strategy);
      oprot.writeFieldEnd();
    }
  }
  if (struct.compaction_strategy_options != null) {
    if (struct.isSetCompaction_strategy_options()) {
      oprot.writeFieldBegin(COMPACTION_STRATEGY_OPTIONS_FIELD_DESC);
{
        oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING,org.apache.thrift.protocol.TType.STRING,struct.compaction_strategy_options.size()));
        for (        Map.Entry<String,String> _iter104 : struct.compaction_strategy_options.entrySet()) {
          oprot.writeString(_iter104.getKey());
          oprot.writeString(_iter104.getValue());
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
  }
  if (struct.isSetRow_cache_keys_to_save()) {
    oprot.writeFieldBegin(ROW_CACHE_KEYS_TO_SAVE_FIELD_DESC);
    oprot.writeI32(struct.row_cache_keys_to_save);
    oprot.writeFieldEnd();
  }
  if (struct.compression_options != null) {
    if (struct.isSetCompression_options()) {
      oprot.writeFieldBegin(COMPRESSION_OPTIONS_FIELD_DESC);
{
        oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING,org.apache.thrift.protocol.TType.STRING,struct.compression_options.size()));
        for (        Map.Entry<String,String> _iter105 : struct.compression_options.entrySet()) {
          oprot.writeString(_iter105.getKey());
          oprot.writeString(_iter105.getValue());
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
  }
  if (struct.isSetBloom_filter_fp_chance()) {
    oprot.writeFieldBegin(BLOOM_FILTER_FP_CHANCE_FIELD_DESC);
    oprot.writeDouble(struct.bloom_filter_fp_chance);
    oprot.writeFieldEnd();
  }
  if (struct.caching != null) {
    if (struct.isSetCaching()) {
      oprot.writeFieldBegin(CACHING_FIELD_DESC);
      oprot.writeString(struct.caching);
      oprot.writeFieldEnd();
    }
  }
  if (struct.isSetDclocal_read_repair_chance()) {
    oprot.writeFieldBegin(DCLOCAL_READ_REPAIR_CHANCE_FIELD_DESC);
    oprot.writeDouble(struct.dclocal_read_repair_chance);
    oprot.writeFieldEnd();
  }
  if (struct.isSetPopulate_io_cache_on_flush()) {
    oprot.writeFieldBegin(POPULATE_IO_CACHE_ON_FLUSH_FIELD_DESC);
    oprot.writeBool(struct.populate_io_cache_on_flush);
    oprot.writeFieldEnd();
  }
  if (struct.isSetMemtable_flush_period_in_ms()) {
    oprot.writeFieldBegin(MEMTABLE_FLUSH_PERIOD_IN_MS_FIELD_DESC);
    oprot.writeI32(struct.memtable_flush_period_in_ms);
    oprot.writeFieldEnd();
  }
  if (struct.isSetDefault_time_to_live()) {
    oprot.writeFieldBegin(DEFAULT_TIME_TO_LIVE_FIELD_DESC);
    oprot.writeI32(struct.default_time_to_live);
    oprot.writeFieldEnd();
  }
  if (struct.isSetIndex_interval()) {
    oprot.writeFieldBegin(INDEX_INTERVAL_FIELD_DESC);
    oprot.writeI32(struct.index_interval);
    oprot.writeFieldEnd();
  }
  if (struct.speculative_retry != null) {
    if (struct.isSetSpeculative_retry()) {
      oprot.writeFieldBegin(SPECULATIVE_RETRY_FIELD_DESC);
      oprot.writeString(struct.speculative_retry);
      oprot.writeFieldEnd();
    }
  }
  oprot.writeFieldStop();
  oprot.writeStructEnd();
}
