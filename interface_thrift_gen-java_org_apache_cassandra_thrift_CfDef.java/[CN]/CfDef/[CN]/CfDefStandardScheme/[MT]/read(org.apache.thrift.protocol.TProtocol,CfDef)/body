{
  org.apache.thrift.protocol.TField schemeField;
  iprot.readStructBegin();
  while (true) {
    schemeField=iprot.readFieldBegin();
    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
      break;
    }
switch (schemeField.id) {
case 1:
      if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
        struct.keyspace=iprot.readString();
        struct.setKeyspaceIsSet(true);
      }
 else {
        org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
      }
    break;
case 2:
  if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
    struct.name=iprot.readString();
    struct.setNameIsSet(true);
  }
 else {
    org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
  }
break;
case 3:
if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
struct.column_type=iprot.readString();
struct.setColumn_typeIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 5:
if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
struct.comparator_type=iprot.readString();
struct.setComparator_typeIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 6:
if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
struct.subcomparator_type=iprot.readString();
struct.setSubcomparator_typeIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 8:
if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
struct.comment=iprot.readString();
struct.setCommentIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 12:
if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
struct.read_repair_chance=iprot.readDouble();
struct.setRead_repair_chanceIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 13:
if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
{
org.apache.thrift.protocol.TList _list92=iprot.readListBegin();
struct.column_metadata=new ArrayList<ColumnDef>(_list92.size);
for (int _i93=0; _i93 < _list92.size; ++_i93) {
ColumnDef _elem94;
_elem94=new ColumnDef();
_elem94.read(iprot);
struct.column_metadata.add(_elem94);
}
iprot.readListEnd();
}
struct.setColumn_metadataIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 14:
if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
struct.gc_grace_seconds=iprot.readI32();
struct.setGc_grace_secondsIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 15:
if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
struct.default_validation_class=iprot.readString();
struct.setDefault_validation_classIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 16:
if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
struct.id=iprot.readI32();
struct.setIdIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 17:
if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
struct.min_compaction_threshold=iprot.readI32();
struct.setMin_compaction_thresholdIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 18:
if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
struct.max_compaction_threshold=iprot.readI32();
struct.setMax_compaction_thresholdIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 24:
if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
struct.replicate_on_write=iprot.readBool();
struct.setReplicate_on_writeIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 26:
if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
struct.key_validation_class=iprot.readString();
struct.setKey_validation_classIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 28:
if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
struct.key_alias=iprot.readBinary();
struct.setKey_aliasIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 29:
if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
struct.compaction_strategy=iprot.readString();
struct.setCompaction_strategyIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 30:
if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
{
org.apache.thrift.protocol.TMap _map95=iprot.readMapBegin();
struct.compaction_strategy_options=new HashMap<String,String>(2 * _map95.size);
for (int _i96=0; _i96 < _map95.size; ++_i96) {
String _key97;
String _val98;
_key97=iprot.readString();
_val98=iprot.readString();
struct.compaction_strategy_options.put(_key97,_val98);
}
iprot.readMapEnd();
}
struct.setCompaction_strategy_optionsIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 32:
if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
{
org.apache.thrift.protocol.TMap _map99=iprot.readMapBegin();
struct.compression_options=new HashMap<String,String>(2 * _map99.size);
for (int _i100=0; _i100 < _map99.size; ++_i100) {
String _key101;
String _val102;
_key101=iprot.readString();
_val102=iprot.readString();
struct.compression_options.put(_key101,_val102);
}
iprot.readMapEnd();
}
struct.setCompression_optionsIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 33:
if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
struct.bloom_filter_fp_chance=iprot.readDouble();
struct.setBloom_filter_fp_chanceIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 34:
if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
struct.caching=iprot.readString();
struct.setCachingIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 37:
if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
struct.dclocal_read_repair_chance=iprot.readDouble();
struct.setDclocal_read_repair_chanceIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 38:
if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
struct.memtable_flush_period_in_ms=iprot.readI32();
struct.setMemtable_flush_period_in_msIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 39:
if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
struct.default_time_to_live=iprot.readI32();
struct.setDefault_time_to_liveIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 40:
if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
struct.index_interval=iprot.readI32();
struct.setIndex_intervalIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 9:
if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
struct.row_cache_size=iprot.readDouble();
struct.setRow_cache_sizeIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 11:
if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
struct.key_cache_size=iprot.readDouble();
struct.setKey_cache_sizeIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 19:
if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
struct.row_cache_save_period_in_seconds=iprot.readI32();
struct.setRow_cache_save_period_in_secondsIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 20:
if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
struct.key_cache_save_period_in_seconds=iprot.readI32();
struct.setKey_cache_save_period_in_secondsIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 21:
if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
struct.memtable_flush_after_mins=iprot.readI32();
struct.setMemtable_flush_after_minsIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 22:
if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
struct.memtable_throughput_in_mb=iprot.readI32();
struct.setMemtable_throughput_in_mbIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 23:
if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
struct.memtable_operations_in_millions=iprot.readDouble();
struct.setMemtable_operations_in_millionsIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 25:
if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
struct.merge_shards_chance=iprot.readDouble();
struct.setMerge_shards_chanceIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 27:
if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
struct.row_cache_provider=iprot.readString();
struct.setRow_cache_providerIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 31:
if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
struct.row_cache_keys_to_save=iprot.readI32();
struct.setRow_cache_keys_to_saveIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
default :
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
iprot.readFieldEnd();
}
iprot.readStructEnd();
struct.validate();
}
