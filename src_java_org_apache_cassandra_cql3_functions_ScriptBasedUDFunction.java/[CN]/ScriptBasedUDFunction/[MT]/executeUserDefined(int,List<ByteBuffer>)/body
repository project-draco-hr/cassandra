{
  Object[] params=new Object[argTypes.size()];
  for (int i=0; i < params.length; i++)   params[i]=compose(protocolVersion,i,parameters.get(i));
  ScriptContext scriptContext=new SimpleScriptContext();
  scriptContext.setAttribute("javax.script.filename",this.name.toString(),ScriptContext.ENGINE_SCOPE);
  Bindings bindings=scriptContext.getBindings(ScriptContext.ENGINE_SCOPE);
  for (int i=0; i < params.length; i++)   bindings.put(argNames.get(i).toString(),params[i]);
  Object result;
  try {
    result=script.eval(scriptContext);
  }
 catch (  ScriptException e) {
    throw new RuntimeException(e);
  }
  if (result == null)   return null;
  Class<?> javaReturnType=UDHelper.asJavaClass(returnCodec);
  Class<?> resultType=result.getClass();
  if (!javaReturnType.isAssignableFrom(resultType)) {
    if (result instanceof Number) {
      Number rNumber=(Number)result;
      if (javaReturnType == Integer.class)       result=rNumber.intValue();
 else       if (javaReturnType == Long.class)       result=rNumber.longValue();
 else       if (javaReturnType == Short.class)       result=rNumber.shortValue();
 else       if (javaReturnType == Byte.class)       result=rNumber.byteValue();
 else       if (javaReturnType == Float.class)       result=rNumber.floatValue();
 else       if (javaReturnType == Double.class)       result=rNumber.doubleValue();
 else       if (javaReturnType == BigInteger.class) {
        if (javaReturnType == Integer.class)         result=rNumber.intValue();
 else         if (javaReturnType == Short.class)         result=rNumber.shortValue();
 else         if (javaReturnType == Byte.class)         result=rNumber.byteValue();
 else         if (javaReturnType == Long.class)         result=rNumber.longValue();
 else         if (javaReturnType == Float.class)         result=rNumber.floatValue();
 else         if (javaReturnType == Double.class)         result=rNumber.doubleValue();
 else         if (javaReturnType == BigInteger.class) {
          if (rNumber instanceof BigDecimal)           result=((BigDecimal)rNumber).toBigInteger();
 else           if (rNumber instanceof Double || rNumber instanceof Float)           result=new BigDecimal(rNumber.toString()).toBigInteger();
 else           result=BigInteger.valueOf(rNumber.longValue());
        }
 else         if (javaReturnType == BigDecimal.class)         result=new BigDecimal(rNumber.toString());
      }
 else       if (javaReturnType == BigDecimal.class)       result=new BigDecimal(rNumber.toString());
    }
  }
  return decompose(protocolVersion,result);
}
