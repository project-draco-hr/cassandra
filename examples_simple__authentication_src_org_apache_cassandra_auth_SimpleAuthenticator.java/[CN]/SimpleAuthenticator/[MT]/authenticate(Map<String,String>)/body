{
  String pmode_plain=System.getProperty(PMODE_PROPERTY);
  PasswordMode mode=PasswordMode.PLAIN;
  if (pmode_plain != null) {
    try {
      mode=PasswordMode.valueOf(pmode_plain);
    }
 catch (    Exception e) {
      String mode_values="";
      for (      PasswordMode pm : PasswordMode.values())       mode_values+="'" + pm + "', ";
      mode_values+="or leave it unspecified.";
      throw new AuthenticationException("The requested password check mode '" + pmode_plain + "' is not a valid mode.  Possible values are "+ mode_values);
    }
  }
  String pfilename=System.getProperty(PASSWD_FILENAME_PROPERTY);
  String username=credentials.get(USERNAME_KEY);
  if (username == null)   throw new AuthenticationException("Authentication request was missing the required key '" + USERNAME_KEY + "'");
  String password=credentials.get(PASSWORD_KEY);
  if (password == null)   throw new AuthenticationException("Authentication request was missing the required key '" + PASSWORD_KEY + "'");
  boolean authenticated=false;
  InputStream in=null;
  try {
    in=new BufferedInputStream(new FileInputStream(pfilename));
    Properties props=new Properties();
    props.load(in);
    if (props.getProperty(username) == null)     throw new AuthenticationException(authenticationErrorMessage(mode,username));
switch (mode) {
case PLAIN:
      authenticated=password.equals(props.getProperty(username));
    break;
case MD5:
  authenticated=MessageDigest.isEqual(FBUtilities.threadLocalMD5Digest().digest(password.getBytes()),Hex.hexToBytes(props.getProperty(username)));
break;
default :
throw new RuntimeException("Unknown PasswordMode " + mode);
}
}
 catch (IOException e) {
throw new RuntimeException("Authentication table file given by property " + PASSWD_FILENAME_PROPERTY + " could not be opened: "+ e.getMessage());
}
catch (Exception e) {
throw new RuntimeException("Unexpected authentication problem",e);
}
 finally {
FileUtils.closeQuietly(in);
}
if (!authenticated) throw new AuthenticationException(authenticationErrorMessage(mode,username));
return new AuthenticatedUser(username);
}
