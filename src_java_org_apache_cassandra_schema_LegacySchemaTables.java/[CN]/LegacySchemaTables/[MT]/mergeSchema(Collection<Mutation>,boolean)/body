{
  Set<String> keyspaces=new HashSet<>(mutations.size());
  for (  Mutation mutation : mutations)   keyspaces.add(ByteBufferUtil.string(mutation.key().getKey()));
  Map<DecoratedKey,FilteredPartition> oldKeyspaces=readSchemaForKeyspaces(KEYSPACES,keyspaces);
  Map<DecoratedKey,FilteredPartition> oldColumnFamilies=readSchemaForKeyspaces(COLUMNFAMILIES,keyspaces);
  Map<DecoratedKey,FilteredPartition> oldTypes=readSchemaForKeyspaces(USERTYPES,keyspaces);
  Map<DecoratedKey,FilteredPartition> oldFunctions=readSchemaForKeyspaces(FUNCTIONS,keyspaces);
  Map<DecoratedKey,FilteredPartition> oldAggregates=readSchemaForKeyspaces(AGGREGATES,keyspaces);
  for (  Mutation mutation : mutations)   mutation.apply();
  if (doFlush)   flushSchemaTables();
  Map<DecoratedKey,FilteredPartition> newKeyspaces=readSchemaForKeyspaces(KEYSPACES,keyspaces);
  Map<DecoratedKey,FilteredPartition> newColumnFamilies=readSchemaForKeyspaces(COLUMNFAMILIES,keyspaces);
  Map<DecoratedKey,FilteredPartition> newTypes=readSchemaForKeyspaces(USERTYPES,keyspaces);
  Map<DecoratedKey,FilteredPartition> newFunctions=readSchemaForKeyspaces(FUNCTIONS,keyspaces);
  Map<DecoratedKey,FilteredPartition> newAggregates=readSchemaForKeyspaces(AGGREGATES,keyspaces);
  Set<String> keyspacesToDrop=mergeKeyspaces(oldKeyspaces,newKeyspaces);
  mergeTables(oldColumnFamilies,newColumnFamilies);
  mergeTypes(oldTypes,newTypes);
  mergeFunctions(oldFunctions,newFunctions);
  mergeAggregates(oldAggregates,newAggregates);
  for (  String keyspaceToDrop : keyspacesToDrop)   Schema.instance.dropKeyspace(keyspaceToDrop);
}
