{
  List<Row> created=new ArrayList<>();
  List<String> altered=new ArrayList<>();
  Set<String> dropped=new HashSet<>();
  MapDifference<DecoratedKey,ColumnFamily> diff=Maps.difference(before,after);
  for (  Map.Entry<DecoratedKey,ColumnFamily> entry : diff.entriesOnlyOnRight().entrySet())   if (entry.getValue().hasColumns())   created.add(new Row(entry.getKey(),entry.getValue()));
  for (  Map.Entry<DecoratedKey,MapDifference.ValueDifference<ColumnFamily>> entry : diff.entriesDiffering().entrySet()) {
    String keyspaceName=AsciiType.instance.compose(entry.getKey().getKey());
    ColumnFamily pre=entry.getValue().leftValue();
    ColumnFamily post=entry.getValue().rightValue();
    if (pre.hasColumns() && post.hasColumns())     altered.add(keyspaceName);
 else     if (pre.hasColumns())     dropped.add(keyspaceName);
 else     if (post.hasColumns())     created.add(new Row(entry.getKey(),post));
  }
  for (  Row row : created)   Schema.instance.addKeyspace(createKeyspaceFromSchemaPartition(row));
  for (  String name : altered)   Schema.instance.updateKeyspace(name);
  return dropped;
}
