{
  outputHandler.output("Upgrading " + sstable);
  AbstractCompactionIterable ci=new CompactionIterable(compactionType,strategy.getScanners(this.toUpgrade),controller);
  CloseableIterator<AbstractCompactedRow> iter=ci.iterator();
  Collection<SSTableReader> sstables=new ArrayList<SSTableReader>();
  Collection<SSTableWriter> writers=new ArrayList<SSTableWriter>();
  try {
    SSTableWriter writer=createCompactionWriter(sstable.getSSTableMetadata().repairedAt);
    writers.add(writer);
    while (iter.hasNext()) {
      AbstractCompactedRow row=iter.next();
      writer.append(row);
    }
    long maxAge=CompactionTask.getMaxDataAge(this.toUpgrade);
    for (    SSTableWriter completedWriter : writers)     sstables.add(completedWriter.closeAndOpenReader(maxAge));
    outputHandler.output("Upgrade of " + sstable + " complete.");
  }
 catch (  Throwable t) {
    for (    SSTableWriter writer : writers)     writer.abort();
    for (    SSTableReader sstable : sstables) {
      sstable.markObsolete();
      sstable.releaseReference();
    }
    throw Throwables.propagate(t);
  }
 finally {
    controller.close();
    try {
      iter.close();
    }
 catch (    IOException e) {
      throw new RuntimeException(e);
    }
  }
}
