{
  byte[] body=message.getMessageBody();
  ByteArrayInputStream bufIn=new ByteArrayInputStream(body);
  if (logger.isDebugEnabled())   logger.debug(String.format("StreamInitiateVerbeHandler.doVerb %s %s %s",message.getVerb(),message.getMessageId(),message.getMessageType()));
  try {
    StreamInitiateMessage biMsg=StreamInitiateMessage.serializer().deserialize(new DataInputStream(bufIn));
    PendingFile[] pendingFiles=biMsg.getStreamContext();
    if (pendingFiles.length == 0) {
      if (logger.isDebugEnabled())       logger.debug("no data needed from " + message.getFrom());
      if (StorageService.instance.isBootstrapMode())       StorageService.instance.removeBootstrapSource(message.getFrom(),new String(message.getHeader(StreamOut.TABLE_NAME)));
      return;
    }
    for (    Map.Entry<PendingFile,PendingFile> pendingFile : getContextMapping(pendingFiles).entrySet()) {
      PendingFile remoteFile=pendingFile.getKey();
      PendingFile localFile=pendingFile.getValue();
      FileStatus streamStatus=new FileStatus(remoteFile.getFilename(),remoteFile.getExpectedBytes());
      if (logger.isDebugEnabled())       logger.debug("Preparing to receive stream from " + message.getFrom() + ": "+ remoteFile+ " -> "+ localFile);
      addStreamContext(message.getFrom(),localFile,streamStatus);
    }
    StreamInManager.registerFileStatusHandler(message.getFrom(),new FileStatusHandler());
    if (logger.isDebugEnabled())     logger.debug("Sending a stream initiate done message ...");
    Message doneMessage=new Message(FBUtilities.getLocalAddress(),"",StorageService.Verb.STREAM_INITIATE_DONE,new byte[0]);
    MessagingService.instance.sendOneWay(doneMessage,message.getFrom());
  }
 catch (  IOException ex) {
    throw new IOError(ex);
  }
}
