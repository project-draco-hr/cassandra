{
  BufferedReader bufReader=new BufferedReader(new InputStreamReader(new FileInputStream(filepath)),16 * 1024 * 1024);
  String line=null;
  String delimiter_=new String(",");
  String firstuser=null;
  String nextuser=null;
  batch_mutation_super_t rmInbox=null;
  batch_mutation_super_t rmOutbox=null;
  while ((line=bufReader.readLine()) != null) {
    StringTokenizer st=new StringTokenizer(line,delimiter_);
    int i=0;
    String threadId=null;
    int lastUpdated=0;
    int isDeleted=0;
    int folder=0;
    int uid=0;
    String user=null;
    String subject=null;
    String body=null;
    String authors=null;
    String participants=null;
    while (st.hasMoreElements()) {
switch (i) {
case 0:
        user=(String)st.nextElement();
      if (!isNumeric(user))       continue;
    break;
case 1:
  folder=Integer.parseInt((String)st.nextElement());
break;
case 2:
threadId=(String)st.nextElement();
break;
case 3:
lastUpdated=Integer.parseInt((String)st.nextElement());
break;
case 4:
isDeleted=Integer.parseInt((String)st.nextElement());
break;
case 5:
authors=(String)st.nextElement();
break;
case 6:
participants=(String)st.nextElement();
break;
case 7:
subject=(String)st.nextElement();
break;
case 8:
body=(String)st.nextElement();
break;
default :
st.nextElement();
break;
}
++i;
}
nextuser=user;
if (firstuser == null || firstuser.compareTo(nextuser) != 0) {
firstuser=nextuser;
if (rmInbox != null && !rmInbox.cfmap.isEmpty()) {
fos_.write(rmInbox.key.getBytes());
fos_.write(System.getProperty("line.separator").getBytes());
counter_.incrementAndGet();
apply(rmInbox);
}
if (rmOutbox != null && !rmOutbox.cfmap.isEmpty()) {
fos_.write(rmOutbox.key.getBytes());
fos_.write(System.getProperty("line.separator").getBytes());
counter_.incrementAndGet();
apply(rmOutbox);
}
rmInbox=new batch_mutation_super_t();
rmInbox.table="Mailbox";
rmInbox.key=firstuser;
rmInbox.cfmap=new HashMap<String,List<superColumn_t>>();
rmOutbox=new batch_mutation_super_t();
rmOutbox.table="Mailbox";
rmOutbox.key=firstuser;
rmOutbox.cfmap=new HashMap<String,List<superColumn_t>>();
}
column_t columnData=new column_t();
columnData.columnName=threadId;
columnData.value=String.valueOf(isDeleted);
columnData.timestamp=lastUpdated;
if (folder == 0) {
List<superColumn_t> list=rmInbox.cfmap.get("MailboxUserList" + (columnFamilyHack_ % divideby_));
if (list == null) {
list=new ArrayList<superColumn_t>();
rmInbox.cfmap.put("MailboxUserList" + (columnFamilyHack_ % divideby_),list);
}
if (authors == null) authors="";
if (participants == null) participants="";
String[] authorList=getTokens(authors,":");
String[] partList=getTokens(participants,":");
String[] tokenList=null;
if (checkUser(user,authorList)) {
tokenList=partList;
}
 else {
tokenList=authorList;
}
for (String token : tokenList) {
superColumn_t superColumn=new superColumn_t();
superColumn.name=token;
superColumn.columns=new ArrayList<column_t>();
superColumn.columns.add(columnData);
list.add(superColumn);
}
}
 else {
List<superColumn_t> list=rmOutbox.cfmap.get("MailboxUserList" + (columnFamilyHack_ % divideby_));
if (list == null) {
list=new ArrayList<superColumn_t>();
rmOutbox.cfmap.put("MailboxUserList" + (columnFamilyHack_ % divideby_),list);
}
if (authors == null) authors="";
if (participants == null) participants="";
String[] authorList=getTokens(authors,":");
String[] partList=getTokens(participants,":");
String[] tokenList=null;
if (checkUser(user,authorList)) {
tokenList=partList;
}
 else {
tokenList=authorList;
}
for (String token : tokenList) {
superColumn_t superColumn=new superColumn_t();
superColumn.name=token;
superColumn.columns=new ArrayList<column_t>();
superColumn.columns.add(columnData);
list.add(superColumn);
}
}
}
if (firstuser != null) {
if (rmInbox != null && !rmInbox.cfmap.isEmpty()) {
fos_.write(rmInbox.key.getBytes());
fos_.write(System.getProperty("line.separator").getBytes());
counter_.incrementAndGet();
apply(rmInbox);
}
if (rmOutbox != null && !rmOutbox.cfmap.isEmpty()) {
fos_.write(rmOutbox.key.getBytes());
fos_.write(System.getProperty("line.separator").getBytes());
counter_.incrementAndGet();
apply(rmOutbox);
}
}
}
