{
  AntiEntropyService.Validator v0=new AntiEntropyService.Validator(Statics.req);
  IPartitioner part=new RandomPartitioner();
  MerkleTree mt=new MerkleTree(part,FULL_RANGE,MerkleTree.RECOMMENDED_DEPTH,Integer.MAX_VALUE);
  List<Token> tokens=new ArrayList<Token>();
  for (int i=0; i < 10; i++) {
    Token t=part.getRandomToken();
    tokens.add(t);
    mt.split(t);
  }
  AntiEntropyService.Validator v1=new AntiEntropyService.Validator(Statics.req,mt);
  DataOutputStream out=getOutput("service.TreeResponse.bin");
  AntiEntropyService.TreeResponseVerbHandler.SERIALIZER.serialize(v0,out,getVersion());
  AntiEntropyService.TreeResponseVerbHandler.SERIALIZER.serialize(v1,out,getVersion());
  Message.serializer().serialize(AntiEntropyService.TreeResponseVerbHandler.makeVerb(FBUtilities.getLocalAddress(),v0),out,getVersion());
  Message.serializer().serialize(AntiEntropyService.TreeResponseVerbHandler.makeVerb(FBUtilities.getLocalAddress(),v1),out,getVersion());
  out.close();
}
