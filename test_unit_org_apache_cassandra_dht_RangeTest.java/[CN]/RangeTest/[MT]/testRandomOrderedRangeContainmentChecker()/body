{
  Random r=new Random();
  for (int j=0; j < 1000; j++) {
    int numTokens=r.nextInt(300) + 1;
    List<Range<Token>> ranges=new ArrayList<>(numTokens);
    List<Token> tokens=new ArrayList<>(2 * numTokens);
    for (int i=0; i < 2 * numTokens; i++)     tokens.add(t(r.nextLong()));
    Collections.sort(tokens);
    for (int i=0; i < tokens.size(); i++) {
      ranges.add(new Range<>(tokens.get(i),tokens.get(i + 1)));
      i++;
    }
    List<Token> tokensToTest=new ArrayList<>();
    for (int i=0; i < 10000; i++)     tokensToTest.add(t(r.nextLong()));
    tokensToTest.add(t(Long.MAX_VALUE));
    tokensToTest.add(t(Long.MIN_VALUE));
    tokensToTest.add(t(Long.MAX_VALUE - 1));
    tokensToTest.add(t(Long.MIN_VALUE + 1));
    Collections.sort(tokensToTest);
    Range.OrderedRangeContainmentChecker checker=new Range.OrderedRangeContainmentChecker(ranges);
    for (    Token t : tokensToTest) {
      if (checker.contains(t) != Range.isInRanges(t,ranges))       fail(String.format("This should never flap! If it does, it is a bug (ranges = %s, token = %s)",Joiner.on(",").join(ranges),t));
    }
  }
}
