{
  final ColumnFamily columnFamily=cf == null ? ColumnFamily.create(getTableName(),filter.getColumnFamilyName()) : cf.cloneMeShallow();
  Collection<IColumn> rawColumns=(cf == null ? columnFamily : cf).getSortedColumns();
  Collection<IColumn> filteredColumns=filter.applyPredicate(rawColumns);
  final IColumn columns[]=filteredColumns.toArray(new IColumn[0]);
  if (filter.reversed)   ArrayUtils.reverse(columns);
  IColumn startIColumn;
  final boolean isStandard=DatabaseDescriptor.getColumnFamilyType(getTableName(),filter.getColumnFamilyName()).equals("Standard");
  if (isStandard)   startIColumn=new Column(filter.start);
 else   startIColumn=new SuperColumn(filter.start,null);
  Comparator<IColumn> comparator=filter.getColumnComparator(typeComparator);
  int index;
  if (filter.start.length == 0 && filter.reversed) {
    index=0;
  }
 else {
    index=Arrays.binarySearch(columns,startIColumn,comparator);
  }
  final int startIndex=index < 0 ? -(index + 1) : index;
  return new AbstractColumnIterator(){
    private int curIndex_=startIndex;
    public ColumnFamily getColumnFamily(){
      return columnFamily;
    }
    public boolean hasNext(){
      return curIndex_ < columns.length;
    }
    public IColumn next(){
      return isStandard ? columns[curIndex_++] : ((SuperColumn)columns[curIndex_++]).cloneMe();
    }
  }
;
}
