{
  if (!MemoryMeter.isInitialized()) {
    logger.warn("MemoryMeter uninitialized (jamm not specified as java agent); assuming liveRatio of 10.0.  Usually this means cassandra-env.sh disabled jamm because you are using a buggy JRE; upgrade to the Sun JRE instead");
    cfs.liveRatio=10.0;
    return;
  }
  if (!meteringInProgress.add(cfs)) {
    logger.debug("Metering already pending or active for {}; skipping liveRatio update",cfs);
    return;
  }
  Runnable runnable=new Runnable(){
    public void run(){
      try {
        activelyMeasuring=Memtable.this;
        long start=System.currentTimeMillis();
        long deepSize=meter.measure(columnFamilies);
        int objects=0;
        for (        Map.Entry<RowPosition,ColumnFamily> entry : columnFamilies.entrySet()) {
          deepSize+=meter.measureDeep(entry.getKey()) + meter.measureDeep(entry.getValue());
          objects+=entry.getValue().getColumnCount();
        }
        double newRatio=(double)deepSize / currentThroughput.get();
        if (newRatio < MIN_SANE_LIVE_RATIO) {
          logger.warn("setting live ratio to minimum of 1.0 instead of {}",newRatio);
          newRatio=MIN_SANE_LIVE_RATIO;
        }
        if (newRatio > MAX_SANE_LIVE_RATIO) {
          logger.warn("setting live ratio to maximum of 64 instead of {}",newRatio);
          newRatio=MAX_SANE_LIVE_RATIO;
        }
        cfs.liveRatio=Math.max(cfs.liveRatio,newRatio);
        logger.info("{} liveRatio is {} (just-counted was {}).  calculation took {}ms for {} columns",new Object[]{cfs,cfs.liveRatio,newRatio,System.currentTimeMillis() - start,objects});
        activelyMeasuring=null;
      }
  finally {
        meteringInProgress.remove(cfs);
      }
    }
  }
;
  meterExecutor.submit(runnable);
}
