{
  ColumnFamily cf=columnFamilies_.get(key);
  final ColumnFamily columnFamily;
  if (cf != null)   columnFamily=cf.cloneMeShallow();
 else   columnFamily=ColumnFamily.create(table_,cfName);
  final IColumn columns[]=(cf == null ? columnFamily : cf).getAllColumns().toArray(new IColumn[columnFamily.getAllColumns().size()]);
  if (!isAscending)   ArrayUtils.reverse(columns);
  IColumn startIColumn;
  if (DatabaseDescriptor.getColumnFamilyType(table_,cfName).equals("Standard"))   startIColumn=new Column(startColumn);
 else   startIColumn=new SuperColumn(startColumn);
  Comparator<IColumn> comparator=new Comparator<IColumn>(){
    public int compare(    IColumn column1,    IColumn column2){
      return column1.name().compareTo(column2.name());
    }
  }
;
  if (!isAscending) {
    comparator=new ReverseComparator(comparator);
  }
  int index=Arrays.binarySearch(columns,startIColumn,comparator);
  final int startIndex=index < 0 ? -(index + 1) : index;
  return new ColumnIterator(){
    private int curIndex_=startIndex;
    public ColumnFamily getColumnFamily(){
      return columnFamily;
    }
    public boolean hasNext(){
      return curIndex_ < columns.length;
    }
    public IColumn next(){
      return columns[curIndex_++];
    }
    public void close() throws IOException {
    }
    public void remove(){
      throw new UnsupportedOperationException();
    }
  }
;
}
