{
  this.cfs=cfs;
  this.initialComparator=cfs.metadata.comparator;
  this.cfs.scheduleFlush();
  if (previous != null) {
    liveRatio=previous.liveRatio;
    liveRatioComputedAt.set(previous.liveRatioComputedAt.get() / 4);
  }
  Callable<Set<Object>> provider=new Callable<Set<Object>>(){
    public Set<Object> call() throws Exception {
      Set<Object> set=Collections.newSetFromMap(new IdentityHashMap<Object,Boolean>());
      set.add(Memtable.this.cfs.metadata);
      return set;
    }
  }
;
  meter=new MemoryMeter().omitSharedBufferOverhead().withTrackerProvider(provider);
}
