{
  Table table=Table.open(command.table);
  List<InetAddress> allReplicas=StorageProxy.getLiveSortedEndpoints(table,command.key);
  CFMetaData metaData=Schema.instance.getCFMetaData(command.table,command.cfName);
  ReadRepairDecision rrDecision=metaData.newReadRepairDecision();
  if (rrDecision != ReadRepairDecision.NONE) {
    ReadRepairMetrics.attempted.mark();
  }
  List<InetAddress> queryTargets=consistency_level.filterForQuery(table,allReplicas,rrDecision);
  if (StorageService.instance.isClientMode()) {
    return new DefaultReadExecutor(null,command,consistency_level,allReplicas,queryTargets);
  }
  ColumnFamilyStore cfs=table.getColumnFamilyStore(command.cfName);
switch (metaData.getSpeculativeRetry().type) {
case ALWAYS:
    return new SpeculateAlwaysExecutor(cfs,command,consistency_level,allReplicas,queryTargets);
case PERCENTILE:
case CUSTOM:
  return queryTargets.size() < allReplicas.size() ? new SpeculativeReadExecutor(cfs,command,consistency_level,allReplicas,queryTargets) : new DefaultReadExecutor(cfs,command,consistency_level,allReplicas,queryTargets);
default :
return new DefaultReadExecutor(cfs,command,consistency_level,allReplicas,queryTargets);
}
}
