{
  RangeIterator.Builder<Long,Token> builder=RangeIntersectionIterator.builder(strategy);
  Assert.assertNull(builder.getMinimum());
  Assert.assertNull(builder.getMaximum());
  Assert.assertEquals(0L,builder.getTokenCount());
  Assert.assertEquals(0L,builder.rangeCount());
  builder.add(new LongIterator(new long[]{1L,2L,6L}));
  builder.add(new LongIterator(new long[]{4L,5L,6L}));
  builder.add(new LongIterator(new long[]{6L,8L,9L}));
  Assert.assertEquals(6L,(long)builder.getMinimum());
  Assert.assertEquals(6L,(long)builder.getMaximum());
  Assert.assertEquals(9L,builder.getTokenCount());
  Assert.assertEquals(3L,builder.rangeCount());
  Assert.assertFalse(builder.statistics.isDisjoint());
  Assert.assertEquals(1L,(long)builder.ranges.poll().getMinimum());
  Assert.assertEquals(4L,(long)builder.ranges.poll().getMinimum());
  Assert.assertEquals(6L,(long)builder.ranges.poll().getMinimum());
  builder.add(new LongIterator(new long[]{1L,2L,6L}));
  builder.add(new LongIterator(new long[]{4L,5L,6L}));
  builder.add(new LongIterator(new long[]{6L,8L,9L}));
  Assert.assertEquals(convert(6L),convert(builder.build()));
  builder=RangeIntersectionIterator.builder(strategy);
  builder.add(new LongIterator(new long[]{1L,5L,6L}));
  builder.add(new LongIterator(new long[]{3L,5L,6L}));
  RangeIterator<Long,Token> tokens=builder.build();
  Assert.assertEquals(convert(5L,6L),convert(tokens));
  FileUtils.closeQuietly(tokens);
  RangeIterator emptyTokens=RangeIntersectionIterator.builder(strategy).build();
  Assert.assertNull(emptyTokens);
  builder=RangeIntersectionIterator.builder(strategy);
  Assert.assertEquals(0L,builder.add((RangeIterator<Long,Token>)null).rangeCount());
  Assert.assertEquals(0L,builder.add((List<RangeIterator<Long,Token>>)null).getTokenCount());
  Assert.assertEquals(0L,builder.add(new LongIterator(new long[]{})).rangeCount());
  RangeIterator<Long,Token> single=new LongIterator(new long[]{1L,2L,3L});
  RangeIterator<Long,Token> range=RangeIntersectionIterator.<Long,Token>builder().add(single).build();
  Assert.assertEquals(range,single);
  builder=RangeIntersectionIterator.builder();
  builder.add(new LongIterator(new long[]{1L,2L,3L}));
  builder.add(new LongIterator(new long[]{4L,5L,6L}));
  Assert.assertTrue(builder.statistics.isDisjoint());
  RangeIterator<Long,Token> disjointIntersection=builder.build();
  Assert.assertNotNull(disjointIntersection);
  Assert.assertFalse(disjointIntersection.hasNext());
}
