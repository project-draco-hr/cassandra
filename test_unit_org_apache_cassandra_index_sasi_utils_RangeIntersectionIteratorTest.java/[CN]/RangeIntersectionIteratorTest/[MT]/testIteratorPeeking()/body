{
  RangeIterator.Builder<Long,Token> builder=RangeIntersectionIterator.builder();
  builder.add(new LongIterator(new long[]{10L}));
  long[] tokens=new long[150];
  for (int i=0; i < tokens.length; i++)   tokens[i]=i;
  builder.add(new LongIterator(tokens));
  RangeIterator<Long,Token> intersection=builder.build();
  Assert.assertNotNull(intersection);
  Assert.assertEquals(LookupIntersectionIterator.class,intersection.getClass());
  Assert.assertTrue(intersection.hasNext());
  Assert.assertEquals(convert(10L),convert(intersection));
  builder=RangeIntersectionIterator.builder();
  builder.add(new LongIterator(new long[]{1L,3L,5L,7L,9L}));
  builder.add(new LongIterator(new long[]{1L,2L,5L,6L}));
  intersection=builder.build();
  Assert.assertNotNull(intersection);
  Assert.assertEquals(BounceIntersectionIterator.class,intersection.getClass());
  Assert.assertTrue(intersection.hasNext());
  Assert.assertEquals(convert(1L,5L),convert(intersection));
}
