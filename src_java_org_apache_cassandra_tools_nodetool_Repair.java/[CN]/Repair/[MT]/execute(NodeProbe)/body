{
  List<String> keyspaces=parseOptionalKeyspace(args,probe,KeyspaceSet.NON_LOCAL_STRATEGY);
  String[] cfnames=parseOptionalTables(args);
  if (primaryRange && (!specificDataCenters.isEmpty() || !specificHosts.isEmpty()))   throw new RuntimeException("Primary range repair should be performed on all nodes in the cluster.");
  for (  String keyspace : keyspaces) {
    if ((args == null || args.isEmpty()) && ONLY_EXPLICITLY_REPAIRED.contains(keyspace))     continue;
    Map<String,String> options=new HashMap<>();
    RepairParallelism parallelismDegree=RepairParallelism.PARALLEL;
    if (sequential)     parallelismDegree=RepairParallelism.SEQUENTIAL;
 else     if (dcParallel)     parallelismDegree=RepairParallelism.DATACENTER_AWARE;
    options.put(RepairOption.PARALLELISM_KEY,parallelismDegree.getName());
    options.put(RepairOption.PRIMARY_RANGE_KEY,Boolean.toString(primaryRange));
    options.put(RepairOption.INCREMENTAL_KEY,Boolean.toString(!fullRepair));
    options.put(RepairOption.JOB_THREADS_KEY,Integer.toString(numJobThreads));
    options.put(RepairOption.TRACE_KEY,Boolean.toString(trace));
    options.put(RepairOption.COLUMNFAMILIES_KEY,StringUtils.join(cfnames,","));
    if (!startToken.isEmpty() || !endToken.isEmpty()) {
      options.put(RepairOption.RANGES_KEY,startToken + ":" + endToken);
    }
    if (localDC) {
      options.put(RepairOption.DATACENTERS_KEY,StringUtils.join(newArrayList(probe.getDataCenter()),","));
    }
 else {
      options.put(RepairOption.DATACENTERS_KEY,StringUtils.join(specificDataCenters,","));
    }
    options.put(RepairOption.HOSTS_KEY,StringUtils.join(specificHosts,","));
    try {
      probe.repairAsync(System.out,keyspace,options);
    }
 catch (    Exception e) {
      throw new RuntimeException("Error occurred during repair",e);
    }
  }
}
