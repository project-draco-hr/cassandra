'\n    CQL pygments lexer\n    ~~~~~~~~~~~~~~~~~~\n\n    Lexer for the Cassandra Query Language (CQL).\n\n    This is heavily inspired from the pygments SQL lexer (and the Postgres one in particular) but adapted to CQL\n    keywords and specificities.\n\n    TODO: This has been hacked quickly, but once it\'s more tested, we could submit it upstream.\n          In particular, we have alot of keywords whose meaning depends on the context and we could potentially improve\n          their handling. For instance, SET is a keyword, but also a type name (that\'s why currently we also consider\n          map and list as keywords, not types; we could disambiguate by looking if there is a \'<\' afterwards). Or things\n          like USERS, which can is used in some documentation example as a table name but is a keyword too (we could\n          only consider it a keyword if after LIST for instance). Similarly, type nanes are not reserved, so they and\n          are sometime used as column identifiers (also, timestamp is both a type and a keyword). I "think" we can\n          somewhat disambiguate through "states", but unclear how far it\'s worth going.\n\n          We could also add the predefined functions?\n'
import re
from pygments.lexer import Lexer, RegexLexer, do_insertions, bygroups, words
from pygments.token import Punctuation, Whitespace, Error, Text, Comment, Operator, Keyword, Name, String, Number, Generic, Literal
from pygments.lexers import get_lexer_by_name, ClassNotFound
from pygments.util import iteritems
__all__ = ['CQLLexer']
language_re = re.compile("\\s+LANGUAGE\\s+'?(\\w+)'?", re.IGNORECASE)
KEYWORDS = ('SELECT', 'FROM', 'AS', 'WHERE', 'AND', 'KEY', 'KEYS', 'ENTRIES', 'FULL', 'INSERT', 'UPDATE', 'WITH', 'LIMIT', 'PER', 'PARTITION', 'USING', 'USE', 'DISTINCT', 'COUNT', 'SET', 'BEGIN', 'UNLOGGED', 'BATCH', 'APPLY', 'TRUNCATE', 'DELETE', 'IN', 'CREATE', 'KEYSPACE', 'SCHEMA', 'KEYSPACES', 'COLUMNFAMILY', 'TABLE', 'MATERIALIZED', 'VIEW', 'INDEX', 'CUSTOM', 'ON', 'TO', 'DROP', 'PRIMARY', 'INTO', 'VALUES', 'TIMESTAMP', 'TTL', 'CAST', 'ALTER', 'RENAME', 'ADD', 'TYPE', 'COMPACT', 'STORAGE', 'ORDER', 'BY', 'ASC', 'DESC', 'ALLOW', 'FILTERING', 'IF', 'IS', 'CONTAINS', 'GRANT', 'ALL', 'PERMISSION', 'PERMISSIONS', 'OF', 'REVOKE', 'MODIFY', 'AUTHORIZE', 'DESCRIBE', 'EXECUTE', 'NORECURSIVE', 'MBEAN', 'MBEANS', 'USER', 'USERS', 'ROLE', 'ROLES', 'SUPERUSER', 'NOSUPERUSER', 'PASSWORD', 'LOGIN', 'NOLOGIN', 'OPTIONS', 'CLUSTERING', 'TOKEN', 'WRITETIME', 'NULL', 'NOT', 'EXISTS', 'MAP', 'LIST', 'NAN', 'INFINITY', 'TUPLE', 'TRIGGER', 'STATIC', 'FROZEN', 'FUNCTION', 'FUNCTIONS', 'AGGREGATE', 'SFUNC', 'STYPE', 'FINALFUNC', 'INITCOND', 'RETURNS', 'CALLED', 'INPUT', 'LANGUAGE', 'OR', 'REPLACE', 'JSON', 'LIKE')
DATATYPES = ('ASCII', 'BIGINT', 'BLOB', 'BOOLEAN', 'COUNTER', 'DATE', 'DECIMAL', 'DOUBLE', 'EMPTY', 'FLOAT', 'INET', 'INT', 'SMALLINT', 'TEXT', 'TIME', 'TIMESTAMP', 'TIMEUUID', 'TINYINT', 'UUID', 'VARCHAR', 'VARINT')
