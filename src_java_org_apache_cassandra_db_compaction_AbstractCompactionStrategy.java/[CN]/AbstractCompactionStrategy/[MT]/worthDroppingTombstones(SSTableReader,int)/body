{
  if (System.currentTimeMillis() < sstable.getCreationTimeFor(Component.DATA) + tombstoneCompactionInterval * 1000)   return false;
  double droppableRatio=sstable.getEstimatedDroppableTombstoneRatio(gcBefore);
  if (droppableRatio <= tombstoneThreshold)   return false;
  if (uncheckedTombstoneCompaction)   return true;
  Set<SSTableReader> overlaps=cfs.getOverlappingSSTables(Collections.singleton(sstable));
  if (overlaps.isEmpty()) {
    return true;
  }
 else   if (CompactionController.getFullyExpiredSSTables(cfs,Collections.singleton(sstable),overlaps,gcBefore).size() > 0) {
    return true;
  }
 else {
    if (sstable.getIndexSummarySize() < 2) {
      return false;
    }
    long keys=sstable.estimatedKeys();
    Set<Range<Token>> ranges=new HashSet<Range<Token>>(overlaps.size());
    for (    SSTableReader overlap : overlaps)     ranges.add(new Range<>(overlap.first.getToken(),overlap.last.getToken(),overlap.partitioner));
    long remainingKeys=keys - sstable.estimatedKeysForRanges(ranges);
    long columns=sstable.getEstimatedColumnCount().mean() * remainingKeys;
    double remainingColumnsRatio=((double)columns) / (sstable.getEstimatedColumnCount().count() * sstable.getEstimatedColumnCount().mean());
    return remainingColumnsRatio * droppableRatio > tombstoneThreshold;
  }
}
