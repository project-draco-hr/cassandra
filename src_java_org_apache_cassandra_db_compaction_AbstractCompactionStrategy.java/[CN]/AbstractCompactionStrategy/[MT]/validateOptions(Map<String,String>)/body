{
  String threshold=options.get(TOMBSTONE_THRESHOLD_OPTION);
  if (threshold != null) {
    try {
      float thresholdValue=Float.parseFloat(threshold);
      if (thresholdValue < 0) {
        throw new ConfigurationException(String.format("%s must be greater than 0, but was %f",TOMBSTONE_THRESHOLD_OPTION,thresholdValue));
      }
    }
 catch (    NumberFormatException e) {
      throw new ConfigurationException(String.format("%s is not a parsable int (base10) for %s",threshold,TOMBSTONE_THRESHOLD_OPTION),e);
    }
  }
  String interval=options.get(TOMBSTONE_COMPACTION_INTERVAL_OPTION);
  if (interval != null) {
    try {
      long tombstoneCompactionInterval=Long.parseLong(interval);
      if (tombstoneCompactionInterval < 0) {
        throw new ConfigurationException(String.format("%s must be greater than 0, but was %d",TOMBSTONE_COMPACTION_INTERVAL_OPTION,tombstoneCompactionInterval));
      }
    }
 catch (    NumberFormatException e) {
      throw new ConfigurationException(String.format("%s is not a parsable int (base10) for %s",interval,TOMBSTONE_COMPACTION_INTERVAL_OPTION),e);
    }
  }
  String unchecked=options.get(UNCHECKED_TOMBSTONE_COMPACTION_OPTION);
  if (unchecked != null) {
    if (!unchecked.equalsIgnoreCase("true") && !unchecked.equalsIgnoreCase("false"))     throw new ConfigurationException(String.format("'%s' should be either 'true' or 'false', not '%s'",UNCHECKED_TOMBSTONE_COMPACTION_OPTION,unchecked));
  }
  String logAll=options.get(LOG_ALL_OPTION);
  if (logAll != null) {
    if (!logAll.equalsIgnoreCase("true") && !logAll.equalsIgnoreCase("false")) {
      throw new ConfigurationException(String.format("'%s' should either be 'true' or 'false', not %s",LOG_ALL_OPTION,logAll));
    }
  }
  String compactionEnabled=options.get(COMPACTION_ENABLED);
  if (compactionEnabled != null) {
    if (!compactionEnabled.equalsIgnoreCase("true") && !compactionEnabled.equalsIgnoreCase("false")) {
      throw new ConfigurationException(String.format("enabled should either be 'true' or 'false', not %s",compactionEnabled));
    }
  }
  Map<String,String> uncheckedOptions=new HashMap<String,String>(options);
  uncheckedOptions.remove(TOMBSTONE_THRESHOLD_OPTION);
  uncheckedOptions.remove(TOMBSTONE_COMPACTION_INTERVAL_OPTION);
  uncheckedOptions.remove(UNCHECKED_TOMBSTONE_COMPACTION_OPTION);
  uncheckedOptions.remove(LOG_ALL_OPTION);
  uncheckedOptions.remove(COMPACTION_ENABLED);
  uncheckedOptions.remove(ONLY_PURGE_REPAIRED_TOMBSTONES);
  return uncheckedOptions;
}
