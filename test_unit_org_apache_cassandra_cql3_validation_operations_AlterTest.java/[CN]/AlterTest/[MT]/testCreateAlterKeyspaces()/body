{
  assertInvalidThrow(SyntaxException.class,"CREATE KEYSPACE ks1");
  assertInvalidThrow(ConfigurationException.class,"CREATE KEYSPACE ks1 WITH replication= { 'replication_factor' : 1 }");
  execute("CREATE KEYSPACE ks1 WITH replication={ 'class' : 'SimpleStrategy', 'replication_factor' : 1 }");
  execute("CREATE KEYSPACE ks2 WITH replication={ 'class' : 'SimpleStrategy', 'replication_factor' : 1 } AND durable_writes=false");
  assertRows(execute("SELECT keyspace_name, durable_writes FROM system_schema.keyspaces"),row("ks1",true),row(KEYSPACE,true),row(KEYSPACE_PER_TEST,true),row("ks2",false));
  execute("ALTER KEYSPACE ks1 WITH replication = { 'class' : 'NetworkTopologyStrategy', 'dc1' : 1 } AND durable_writes=False");
  execute("ALTER KEYSPACE ks2 WITH durable_writes=true");
  assertRows(execute("SELECT keyspace_name, durable_writes, replication FROM system_schema.keyspaces"),row("ks1",false,ImmutableMap.of("class","org.apache.cassandra.locator.NetworkTopologyStrategy","dc1","1")),row(KEYSPACE,true,ImmutableMap.of("class","org.apache.cassandra.locator.SimpleStrategy","replication_factor","1")),row(KEYSPACE_PER_TEST,true,ImmutableMap.of("class","org.apache.cassandra.locator.SimpleStrategy","replication_factor","1")),row("ks2",true,ImmutableMap.of("class","org.apache.cassandra.locator.SimpleStrategy","replication_factor","1")));
  execute("USE ks1");
  assertInvalidThrow(ConfigurationException.class,"CREATE TABLE cf1 (a int PRIMARY KEY, b int) WITH compaction = { 'min_threshold' : 4 }");
  execute("CREATE TABLE cf1 (a int PRIMARY KEY, b int) WITH compaction = { 'class' : 'SizeTieredCompactionStrategy', 'min_threshold' : 7 }");
  assertRows(execute("SELECT table_name, min_compaction_threshold FROM system_schema.tables WHERE keyspace_name='ks1'"),row("cf1",7));
  execute("DROP KEYSPACE ks1");
  execute("DROP KEYSPACE ks2");
}
