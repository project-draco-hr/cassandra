{
  org.apache.thrift.protocol.TField schemeField;
  iprot.readStructBegin();
  while (true) {
    schemeField=iprot.readFieldBegin();
    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
      break;
    }
switch (schemeField.id) {
case 1:
      if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
        struct.success=iprot.readBool();
        struct.setSuccessIsSet(true);
      }
 else {
        org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
      }
    break;
case 2:
  if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
{
      org.apache.thrift.protocol.TList _list48=iprot.readListBegin();
      struct.current_values=new ArrayList<Column>(_list48.size);
      for (int _i49=0; _i49 < _list48.size; ++_i49) {
        Column _elem50;
        _elem50=new Column();
        _elem50.read(iprot);
        struct.current_values.add(_elem50);
      }
      iprot.readListEnd();
    }
    struct.setCurrent_valuesIsSet(true);
  }
 else {
    org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
  }
break;
default :
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
iprot.readFieldEnd();
}
iprot.readStructEnd();
if (!struct.isSetSuccess()) {
throw new org.apache.thrift.protocol.TProtocolException("Required field 'success' was not found in serialized data! Struct: " + toString());
}
struct.validate();
}
