{
  ColumnFamilyStore store=prepareColumnFamilyStore();
  Set<SSTableReader> original=store.getUnrepairedSSTables();
  UUID prsId=UUID.randomUUID();
  ActiveRepairService.instance.registerParentRepairSession(prsId,FBUtilities.getBroadcastAddress(),Collections.singletonList(store),null,true,false);
  ActiveRepairService.ParentRepairSession prs=ActiveRepairService.instance.getParentRepairSession(prsId);
  prs.markSSTablesRepairing(store.metadata.cfId,prsId);
  Refs<SSTableReader> refs=prs.getActiveRepairedSSTableRefsForAntiCompaction(store.metadata.cfId,prsId);
  Set<SSTableReader> retrieved=Sets.newHashSet(refs.iterator());
  assertEquals(original,retrieved);
  refs.release();
  Set<SSTableReader> newLiveSet=new HashSet<>(original);
  Iterator<SSTableReader> it=newLiveSet.iterator();
  final SSTableReader removed=it.next();
  it.remove();
  store.getTracker().dropSSTables(new Predicate<SSTableReader>(){
    public boolean apply(    SSTableReader reader){
      return removed.equals(reader);
    }
  }
,OperationType.COMPACTION,null);
  refs=prs.getActiveRepairedSSTableRefsForAntiCompaction(store.metadata.cfId,prsId);
  retrieved=Sets.newHashSet(refs.iterator());
  assertEquals(newLiveSet,retrieved);
  assertFalse(retrieved.contains(removed));
  refs.release();
}
