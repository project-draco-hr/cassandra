{
  ColumnFamilyStore store=prepareColumnFamilyStore();
  UUID prsId=UUID.randomUUID();
  Set<SSTableReader> original=store.getUnrepairedSSTables();
  ActiveRepairService.instance.registerParentRepairSession(prsId,FBUtilities.getBroadcastAddress(),Collections.singletonList(store),Collections.singleton(new Range<>(store.partitioner.getMinimumToken(),store.partitioner.getMinimumToken())),true,true);
  ActiveRepairService.instance.getParentRepairSession(prsId).maybeSnapshot(store.metadata.cfId,prsId);
  UUID prsId2=UUID.randomUUID();
  ActiveRepairService.instance.registerParentRepairSession(prsId2,FBUtilities.getBroadcastAddress(),Collections.singletonList(store),Collections.singleton(new Range<>(store.partitioner.getMinimumToken(),store.partitioner.getMinimumToken())),true,true);
  createSSTables(store,2);
  ActiveRepairService.instance.getParentRepairSession(prsId).maybeSnapshot(store.metadata.cfId,prsId);
  try (Refs<SSTableReader> refs=ActiveRepairService.instance.getParentRepairSession(prsId).getActiveRepairedSSTableRefsForAntiCompaction(store.metadata.cfId,prsId)){
    assertEquals(original,Sets.newHashSet(refs.iterator()));
  }
   store.forceMajorCompaction();
  try (Refs<SSTableReader> refs=ActiveRepairService.instance.getParentRepairSession(prsId).getActiveRepairedSSTableRefsForAntiCompaction(store.metadata.cfId,prsId)){
    assertEquals(0,refs.size());
  }
 }
