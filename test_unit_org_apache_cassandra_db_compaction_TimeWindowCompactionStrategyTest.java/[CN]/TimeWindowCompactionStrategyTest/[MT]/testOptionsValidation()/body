{
  Map<String,String> options=new HashMap<>();
  options.put(TimeWindowCompactionStrategyOptions.COMPACTION_WINDOW_SIZE_KEY,"30");
  options.put(TimeWindowCompactionStrategyOptions.COMPACTION_WINDOW_UNIT_KEY,"MINUTES");
  Map<String,String> unvalidated=validateOptions(options);
  assertTrue(unvalidated.isEmpty());
  try {
    options.put(TimeWindowCompactionStrategyOptions.COMPACTION_WINDOW_SIZE_KEY,"0");
    validateOptions(options);
    fail(String.format("%s == 0 should be rejected",TimeWindowCompactionStrategyOptions.COMPACTION_WINDOW_SIZE_KEY));
  }
 catch (  ConfigurationException e) {
  }
  try {
    options.put(TimeWindowCompactionStrategyOptions.COMPACTION_WINDOW_SIZE_KEY,"-1337");
    validateOptions(options);
    fail(String.format("Negative %s should be rejected",TimeWindowCompactionStrategyOptions.COMPACTION_WINDOW_SIZE_KEY));
  }
 catch (  ConfigurationException e) {
    options.put(TimeWindowCompactionStrategyOptions.COMPACTION_WINDOW_SIZE_KEY,"1");
  }
  try {
    options.put(TimeWindowCompactionStrategyOptions.COMPACTION_WINDOW_UNIT_KEY,"MONTHS");
    validateOptions(options);
    fail(String.format("Invalid time units should be rejected",TimeWindowCompactionStrategyOptions.COMPACTION_WINDOW_UNIT_KEY));
  }
 catch (  ConfigurationException e) {
    options.put(TimeWindowCompactionStrategyOptions.COMPACTION_WINDOW_UNIT_KEY,"MINUTES");
  }
  options.put("bad_option","1.0");
  unvalidated=validateOptions(options);
  assertTrue(unvalidated.containsKey("bad_option"));
}
