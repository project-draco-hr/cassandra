{
  Keyspace keyspace=Keyspace.open(KEYSPACE1);
  ColumnFamilyStore cfs=keyspace.getColumnFamilyStore(CF_STANDARD1);
  cfs.truncateBlocking();
  cfs.disableAutoCompaction();
  ByteBuffer value=ByteBuffer.wrap(new byte[100]);
  DecoratedKey key=Util.dk(String.valueOf("expired"));
  new RowUpdateBuilder(cfs.metadata,System.currentTimeMillis(),1,key.getKey()).clustering("column").add("val",value).build().applyUnsafe();
  cfs.forceBlockingFlush();
  SSTableReader expiredSSTable=cfs.getLiveSSTables().iterator().next();
  Thread.sleep(10);
  key=Util.dk(String.valueOf("nonexpired"));
  new RowUpdateBuilder(cfs.metadata,System.currentTimeMillis(),key.getKey()).clustering("column").add("val",value).build().applyUnsafe();
  cfs.forceBlockingFlush();
  assertEquals(cfs.getLiveSSTables().size(),2);
  Map<String,String> options=new HashMap<>();
  options.put(TimeWindowCompactionStrategyOptions.COMPACTION_WINDOW_SIZE_KEY,"30");
  options.put(TimeWindowCompactionStrategyOptions.COMPACTION_WINDOW_UNIT_KEY,"SECONDS");
  options.put(TimeWindowCompactionStrategyOptions.TIMESTAMP_RESOLUTION_KEY,"MILLISECONDS");
  options.put(TimeWindowCompactionStrategyOptions.EXPIRED_SSTABLE_CHECK_FREQUENCY_SECONDS_KEY,"0");
  TimeWindowCompactionStrategy twcs=new TimeWindowCompactionStrategy(cfs,options);
  for (  SSTableReader sstable : cfs.getLiveSSTables())   twcs.addSSTable(sstable);
  twcs.startup();
  assertNull(twcs.getNextBackgroundTask((int)(System.currentTimeMillis() / 1000)));
  Thread.sleep(2000);
  AbstractCompactionTask t=twcs.getNextBackgroundTask((int)(System.currentTimeMillis() / 1000));
  assertNotNull(t);
  assertEquals(1,Iterables.size(t.transaction.originals()));
  SSTableReader sstable=t.transaction.originals().iterator().next();
  assertEquals(sstable,expiredSSTable);
  t.transaction.abort();
}
