{
  Keyspace keyspace=Keyspace.open(KEYSPACE1);
  ColumnFamilyStore cfs=keyspace.getColumnFamilyStore(CF_STANDARD1);
  cfs.truncateBlocking();
  cfs.disableAutoCompaction();
  ByteBuffer value=ByteBuffer.wrap(new byte[100]);
  Long tstamp=System.currentTimeMillis();
  Long tstamp2=tstamp - (2L * 3600L * 1000L);
  for (int r=0; r < 3; r++) {
    DecoratedKey key=Util.dk(String.valueOf(r));
    new RowUpdateBuilder(cfs.metadata,r,key.getKey()).clustering("column").add("val",value).build().applyUnsafe();
    cfs.forceBlockingFlush();
  }
  for (int r=3; r < 5; r++) {
    DecoratedKey key=Util.dk(String.valueOf(r));
    new RowUpdateBuilder(cfs.metadata,r,key.getKey()).clustering("column").add("val",value).build().applyUnsafe();
    cfs.forceBlockingFlush();
  }
  cfs.forceBlockingFlush();
  HashMultimap<Long,SSTableReader> buckets=HashMultimap.create();
  List<SSTableReader> sstrs=new ArrayList<>(cfs.getLiveSSTables());
  for (int i=0; i < 3; i++) {
    Pair<Long,Long> bounds=getWindowBoundsInMillis(TimeUnit.HOURS,1,tstamp);
    buckets.put(bounds.left,sstrs.get(i));
  }
  List<SSTableReader> newBucket=newestBucket(buckets,4,32,TimeUnit.HOURS,1,new SizeTieredCompactionStrategyOptions(),getWindowBoundsInMillis(TimeUnit.HOURS,1,System.currentTimeMillis()).left);
  assertTrue("incoming bucket should not be accepted when it has below the min threshold SSTables",newBucket.isEmpty());
  newBucket=newestBucket(buckets,2,32,TimeUnit.HOURS,1,new SizeTieredCompactionStrategyOptions(),getWindowBoundsInMillis(TimeUnit.HOURS,1,System.currentTimeMillis()).left);
  assertTrue("incoming bucket should be accepted when it is larger than the min threshold SSTables",!newBucket.isEmpty());
  for (int i=3; i < 5; i++) {
    Pair<Long,Long> bounds=getWindowBoundsInMillis(TimeUnit.HOURS,1,tstamp2);
    buckets.put(bounds.left,sstrs.get(i));
  }
  assertEquals("an sstable with a single value should have equal min/max timestamps",sstrs.get(0).getMinTimestamp(),sstrs.get(0).getMaxTimestamp());
  assertEquals("an sstable with a single value should have equal min/max timestamps",sstrs.get(1).getMinTimestamp(),sstrs.get(1).getMaxTimestamp());
  assertEquals("an sstable with a single value should have equal min/max timestamps",sstrs.get(2).getMinTimestamp(),sstrs.get(2).getMaxTimestamp());
  int numSSTables=40;
  for (int r=5; r < numSSTables; r++) {
    DecoratedKey key=Util.dk(String.valueOf(r));
    for (int i=0; i < r; i++) {
      new RowUpdateBuilder(cfs.metadata,tstamp + r,key.getKey()).clustering("column").add("val",value).build().applyUnsafe();
    }
    cfs.forceBlockingFlush();
  }
  sstrs=new ArrayList<>(cfs.getLiveSSTables());
  for (int i=0; i < 40; i++) {
    Pair<Long,Long> bounds=getWindowBoundsInMillis(TimeUnit.HOURS,1,sstrs.get(i).getMaxTimestamp());
    buckets.put(bounds.left,sstrs.get(i));
  }
  newBucket=newestBucket(buckets,4,32,TimeUnit.DAYS,1,new SizeTieredCompactionStrategyOptions(),getWindowBoundsInMillis(TimeUnit.HOURS,1,System.currentTimeMillis()).left);
  assertEquals("new bucket should be trimmed to max threshold of 32",newBucket.size(),32);
}
