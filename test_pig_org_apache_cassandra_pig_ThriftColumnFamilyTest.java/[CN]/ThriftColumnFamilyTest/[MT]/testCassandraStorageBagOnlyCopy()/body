{
  executeCliStatements(deleteCopyOfSomeAppTableData);
  pig.setBatchOn();
  pig.registerQuery("rows = LOAD 'cassandra://thriftKs/SomeApp?" + defaultParameters + "' USING CassandraStorage();");
  pig.registerQuery("other = FOREACH rows GENERATE key, columns;");
  pig.registerQuery("STORE other INTO 'cassandra://thriftKs/CopyOfSomeApp?" + defaultParameters + "' USING CassandraStorage();");
  pig.executeBatch();
  String value=null;
  try {
    value=getColumnValue("thriftKs","CopyOfSomeApp","name","qux","UTF8Type");
  }
 catch (  NotFoundException e) {
    Assert.assertTrue(true);
  }
  if (value != null)   Assert.fail();
  try {
    value=getColumnValue("thriftKs","CopyOfSomeApp","vote_type","qux","UTF8Type");
  }
 catch (  NotFoundException e) {
    Assert.assertTrue(true);
  }
  if (value != null)   Assert.fail();
  try {
    value=getColumnValue("thriftKs","CopyOfSomeApp","percent","qux","FloatType");
  }
 catch (  NotFoundException e) {
    Assert.assertTrue(true);
  }
  if (value != null)   Assert.fail();
  Assert.assertEquals("extra1",getColumnValue("thriftKs","CopyOfSomeApp","extra1","qux","UTF8Type"));
}
