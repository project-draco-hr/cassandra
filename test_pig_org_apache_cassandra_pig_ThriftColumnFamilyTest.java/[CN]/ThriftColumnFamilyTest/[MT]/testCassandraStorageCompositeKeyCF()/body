{
  pig.registerQuery("compokeys = load 'cassandra://thriftKs/CompoKey?" + defaultParameters + "' using CassandraStorage();");
  pig.registerQuery("compokeys = filter compokeys by key.$1 == 40;");
  Iterator<Tuple> it=pig.openIterator("compokeys");
  if (it.hasNext()) {
    Tuple t=it.next();
    Tuple key=(Tuple)t.get(0);
    Assert.assertEquals(key.get(0),"clock");
    Assert.assertEquals(key.get(1),40L);
    DataBag columns=(DataBag)t.get(1);
    Iterator<Tuple> iter=columns.iterator();
    if (iter.hasNext()) {
      Tuple t1=iter.next();
      Assert.assertEquals(t1.get(0),6L);
      Assert.assertEquals(t1.get(1),"coffee...");
    }
  }
  pig.setBatchOn();
  pig.registerQuery("compo_key_rows = LOAD 'cassandra://thriftKs/CompoKey?" + defaultParameters + "' using CassandraStorage();");
  pig.registerQuery("STORE compo_key_rows INTO 'cassandra://thriftKs/CompoKeyCopy?" + defaultParameters + "' using CassandraStorage();");
  pig.executeBatch();
  pig.registerQuery("compo_key_copy_rows = LOAD 'cassandra://thriftKs/CompoKeyCopy?" + defaultParameters + "' using CassandraStorage();");
  it=pig.openIterator("compo_key_copy_rows");
  int count=0;
  while (it.hasNext()) {
    Tuple t=it.next();
    count++;
    if (count == 1) {
      Tuple key=(Tuple)t.get(0);
      Assert.assertEquals(key.get(0),"clock");
      Assert.assertEquals(key.get(1),10L);
      DataBag columns=(DataBag)t.get(1);
      Iterator<Tuple> iter=columns.iterator();
      if (iter.hasNext()) {
        Tuple t1=iter.next();
        Assert.assertEquals(t1.get(0),1L);
        Assert.assertEquals(t1.get(1),"z");
      }
    }
 else     if (count == 2) {
      Tuple key=(Tuple)t.get(0);
      Assert.assertEquals(key.get(0),"clock");
      Assert.assertEquals(key.get(1),20L);
      DataBag columns=(DataBag)t.get(1);
      Iterator<Tuple> iter=columns.iterator();
      if (iter.hasNext()) {
        Tuple t1=iter.next();
        Assert.assertEquals(t1.get(0),1L);
        Assert.assertEquals(t1.get(1),"zzzz");
      }
    }
 else     if (count == 3) {
      Tuple key=(Tuple)t.get(0);
      Assert.assertEquals(key.get(0),"clock");
      Assert.assertEquals(key.get(1),30L);
      DataBag columns=(DataBag)t.get(1);
      Iterator<Tuple> iter=columns.iterator();
      if (iter.hasNext()) {
        Tuple t1=iter.next();
        Assert.assertEquals(t1.get(0),2L);
        Assert.assertEquals(t1.get(1),"daddy?");
      }
    }
 else     if (count == 4) {
      Tuple key=(Tuple)t.get(0);
      Assert.assertEquals(key.get(0),"clock");
      Assert.assertEquals(key.get(1),40L);
      DataBag columns=(DataBag)t.get(1);
      Iterator<Tuple> iter=columns.iterator();
      if (iter.hasNext()) {
        Tuple t1=iter.next();
        Assert.assertEquals(t1.get(0),6L);
        Assert.assertEquals(t1.get(1),"coffee...");
      }
    }
  }
  Assert.assertEquals(count,4);
}
