{
  executeCQLStatements(deleteCopyOfSomeAppTableData);
  pig.setBatchOn();
  pig.registerQuery("rows = LOAD 'cassandra://thrift_ks/some_app?" + defaultParameters + "' USING CassandraStorage();");
  pig.registerQuery("onecol = FOREACH rows GENERATE key, percent;");
  pig.registerQuery("STORE onecol INTO 'cassandra://thrift_ks/copy_of_some_app?" + defaultParameters + "' USING CassandraStorage();");
  pig.executeBatch();
  String value=null;
  try {
    value=getColumnValue("thrift_ks","copy_of_some_app","name","qux","UTF8Type");
  }
 catch (  NotFoundException e) {
    Assert.assertTrue(true);
  }
  if (value != null)   Assert.fail();
  try {
    value=getColumnValue("thrift_ks","copy_of_some_app","vote_type","qux","UTF8Type");
  }
 catch (  NotFoundException e) {
    Assert.assertTrue(true);
  }
  if (value != null)   Assert.fail();
  Assert.assertEquals("64.7",getColumnValue("thrift_ks","copy_of_some_app","percent","qux","FloatType"));
}
