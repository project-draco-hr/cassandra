{
  pig.registerQuery("rows = LOAD 'cassandra://thriftKs/SomeApp?" + defaultParameters + "' USING CassandraStorage();");
  Iterator<Tuple> it=pig.openIterator("rows");
  if (it.hasNext()) {
    Tuple t=it.next();
    String rowKey=t.get(0).toString();
    if ("qux".equals(rowKey)) {
      Tuple column=(Tuple)t.get(1);
      Assert.assertEquals(column.get(0),"atomic_weight");
      Assert.assertEquals(column.get(1),0.660161815846869d);
      column=(Tuple)t.get(3);
      Assert.assertEquals(column.get(0),"name");
      Assert.assertEquals(column.get(1),"User Qux");
      column=(Tuple)t.get(4);
      Assert.assertEquals(column.get(0),"percent");
      Assert.assertEquals(column.get(1),64.7f);
      column=(Tuple)t.get(5);
      Assert.assertEquals(column.get(0),"rating");
      Assert.assertEquals(column.get(1),2);
      column=(Tuple)t.get(6);
      Assert.assertEquals(column.get(0),"score");
      Assert.assertEquals(column.get(1),12000L);
      column=(Tuple)t.get(7);
      Assert.assertEquals(column.get(0),"vote_type");
      Assert.assertEquals(column.get(1),"dislike");
      DataBag columns=(DataBag)t.get(8);
      Iterator<Tuple> iter=columns.iterator();
      int i=0;
      while (iter.hasNext()) {
        i++;
        column=iter.next();
        Assert.assertEquals(column.get(0),"extra" + i);
      }
      Assert.assertEquals(7,columns.size());
    }
  }
}
