{
  pig.registerQuery(initialQuery);
  Iterator<Tuple> it=pig.openIterator("data");
  int count=0;
  while (it.hasNext()) {
    count++;
    Tuple t=it.next();
    if ("bar".equals(t.get(0))) {
      Assert.assertEquals(t.get(1),3.141592653589793d);
      Assert.assertEquals(t.get(3),"User Bar");
      Assert.assertEquals(t.get(4),35.0f);
      Assert.assertEquals(t.get(5),9);
      Assert.assertEquals(t.get(6),15000L);
      Assert.assertEquals(t.get(7),"like");
    }
 else     if ("baz".equals(t.get(0))) {
      Assert.assertEquals(t.get(1),1.61803399d);
      Assert.assertEquals(t.get(3),"User Baz");
      Assert.assertEquals(t.get(4),95.3f);
      Assert.assertEquals(t.get(5),3);
      Assert.assertEquals(t.get(6),512000L);
      Assert.assertEquals(t.get(7),"dislike");
    }
 else     if ("foo".equals(t.get(0))) {
      Assert.assertEquals(t.get(0),"foo");
      Assert.assertEquals(t.get(1),2.718281828459045d);
      Assert.assertEquals(t.get(3),"User Foo");
      Assert.assertEquals(t.get(4),85.0f);
      Assert.assertEquals(t.get(5),8);
      Assert.assertEquals(t.get(6),125000L);
      Assert.assertEquals(t.get(7),"like");
    }
 else     if ("qux".equals(t.get(0))) {
      Assert.assertEquals(t.get(0),"qux");
      Assert.assertEquals(t.get(1),0.660161815846869d);
      Assert.assertEquals(t.get(3),"User Qux");
      Assert.assertEquals(t.get(4),64.7f);
      Assert.assertEquals(t.get(5),2);
      Assert.assertEquals(t.get(6),12000L);
      Assert.assertEquals(t.get(7),"dislike");
    }
  }
  Assert.assertEquals(count,4);
}
