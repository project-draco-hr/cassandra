{
  pig.registerQuery("compokeys = load 'cql://thrift_ks/compo_key?" + defaultParameters + nativeParameters+ "&input_cql=select%20*%20from%20compo_key%20where%20token(key,column1)%20%3E%20%3F%20and%20token(key,column1)%20%3C%3D%20%3F' using CqlNativeStorage();");
  pig.registerQuery("compokeys = filter compokeys by column1 == 40;");
  Iterator<Tuple> it=pig.openIterator("compokeys");
  if (it.hasNext()) {
    Tuple t=it.next();
    Assert.assertEquals(t.get(0),"clock");
    Assert.assertEquals(t.get(1),40L);
    Assert.assertEquals(t.get(2),6L);
    Assert.assertEquals(t.get(3),"coffee...");
  }
  pig.setBatchOn();
  pig.registerQuery("compo_key_rows = LOAD 'cql://thrift_ks/compo_key?" + defaultParameters + nativeParameters+ "&input_cql=select%20*%20from%20compo_key%20where%20token(key,column1)%20%3E%20%3F%20and%20token(key,column1)%20%3C%3D%20%3F' using CqlNativeStorage();");
  pig.registerQuery("compo_key_rows = FOREACH compo_key_rows GENERATE TOTUPLE(TOTUPLE('key',key),TOTUPLE('column1',column1),TOTUPLE('column2',column2)),TOTUPLE(value);");
  pig.registerQuery("STORE compo_key_rows INTO 'cql://thrift_ks/compo_key_copy?" + defaultParameters + nativeParameters+ "&output_query=UPDATE+thrift_ks.compo_key_copy+set+value+%3D+%3F' using CqlNativeStorage();");
  pig.executeBatch();
  pig.registerQuery("compo_key_copy_rows = LOAD 'cql://thrift_ks/compo_key_copy?" + defaultParameters + nativeParameters+ "&input_cql=select%20*%20from%20compo_key_copy%20where%20token(key,column1)%20%3E%20%3F%20and%20token(key,column1)%20%3C%3D%20%3F' using CqlNativeStorage();");
  it=pig.openIterator("compo_key_copy_rows");
  int count=0;
  while (it.hasNext()) {
    Tuple t=it.next();
    count++;
    if ("clock".equals(t.get(0)) && (Long)t.get(1) == 10L) {
      Assert.assertEquals(t.get(2),1L);
      Assert.assertEquals(t.get(3),"z");
    }
 else     if ("clock".equals(t.get(0)) && (Long)t.get(1) == 40L) {
      Assert.assertEquals(t.get(2),6L);
      Assert.assertEquals(t.get(3),"coffee...");
    }
 else     if ("clock".equals(t.get(0)) && (Long)t.get(1) == 20L) {
      Assert.assertEquals(t.get(2),1L);
      Assert.assertEquals(t.get(3),"zzzz");
    }
 else     if ("clock".equals(t.get(0)) && (Long)t.get(1) == 30L) {
      Assert.assertEquals(t.get(2),2L);
      Assert.assertEquals(t.get(3),"daddy?");
    }
  }
  Assert.assertEquals(4,count);
}
