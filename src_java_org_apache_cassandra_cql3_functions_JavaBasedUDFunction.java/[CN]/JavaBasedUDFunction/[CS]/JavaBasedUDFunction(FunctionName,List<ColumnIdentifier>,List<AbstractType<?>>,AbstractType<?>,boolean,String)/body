{
  super(name,argNames,argTypes,UDHelper.driverTypes(argTypes),returnType,UDHelper.driverType(returnType),calledOnNullInput,"java",body);
  TypeToken<?>[] javaParamTypes=UDHelper.typeTokens(argCodecs,calledOnNullInput);
  TypeToken<?> javaReturnType=returnCodec.getJavaType();
  String pkgName=BASE_PACKAGE + '.' + generateClassName(name,'p');
  String clsName=generateClassName(name,'C');
  String executeInternalName=generateClassName(name,'x');
  StringBuilder javaSourceBuilder=new StringBuilder();
  int lineOffset=1;
  for (int i=0; i < javaSourceTemplate.length; i++) {
    String s=javaSourceTemplate[i];
    if ((i & 1) == 1) {
switch (s) {
case "package_name":
        s=pkgName;
      break;
case "class_name":
    s=clsName;
  break;
case "body":
lineOffset=countNewlines(javaSourceBuilder);
s=body;
break;
case "arguments":
s=generateArguments(javaParamTypes,argNames);
break;
case "argument_list":
s=generateArgumentList(javaParamTypes,argNames);
break;
case "return_type":
s=javaSourceName(javaReturnType);
break;
case "execute_internal_name":
s=executeInternalName;
break;
}
}
javaSourceBuilder.append(s);
}
String targetClassName=pkgName + '.' + clsName;
String javaSource=javaSourceBuilder.toString();
logger.trace("Compiling Java source UDF '{}' as class '{}' using source:\n{}",name,targetClassName,javaSource);
try {
EcjCompilationUnit compilationUnit=new EcjCompilationUnit(javaSource,targetClassName);
Compiler compiler=new Compiler(compilationUnit,errorHandlingPolicy,compilerOptions,compilationUnit,problemFactory);
compiler.compile(new ICompilationUnit[]{compilationUnit});
if (compilationUnit.problemList != null && !compilationUnit.problemList.isEmpty()) {
boolean fullSource=false;
StringBuilder problems=new StringBuilder();
for (IProblem problem : compilationUnit.problemList) {
long ln=problem.getSourceLineNumber() - lineOffset;
if (ln < 1L) {
if (problem.isError()) {
problems.append("GENERATED SOURCE ERROR: line ").append(problem.getSourceLineNumber()).append(" (in generated source): ").append(problem.getMessage()).append('\n');
fullSource=true;
}
}
 else {
problems.append("Line ").append(Long.toString(ln)).append(": ").append(problem.getMessage()).append('\n');
}
}
if (fullSource) throw new InvalidRequestException("Java source compilation failed:\n" + problems + "\n generated source:\n"+ javaSource);
 else throw new InvalidRequestException("Java source compilation failed:\n" + problems);
}
Set<String> errors=udfByteCodeVerifier.verify(targetClassLoader.classData(targetClassName));
String validDeclare="not allowed method declared: " + executeInternalName + '(';
String validCall="call to " + targetClassName.replace('.','/') + '.'+ executeInternalName+ "()";
for (Iterator<String> i=errors.iterator(); i.hasNext(); ) {
String error=i.next();
if (error.startsWith(validDeclare) || error.equals(validCall)) {
i.remove();
}
}
if (!errors.isEmpty()) throw new InvalidRequestException("Java UDF validation failed: " + errors);
Thread thread=Thread.currentThread();
ClassLoader orig=thread.getContextClassLoader();
try {
thread.setContextClassLoader(UDFunction.udfClassLoader);
Class cls=Class.forName(targetClassName,false,targetClassLoader);
int nonSyntheticMethodCount=0;
for (Method m : cls.getDeclaredMethods()) {
if (!m.isSynthetic()) {
nonSyntheticMethodCount+=1;
}
}
if (nonSyntheticMethodCount != 2 || cls.getDeclaredConstructors().length != 1) throw new InvalidRequestException("Check your source to not define additional Java methods or constructors");
MethodType methodType=MethodType.methodType(void.class).appendParameterTypes(TypeCodec.class,TypeCodec[].class);
MethodHandle ctor=MethodHandles.lookup().findConstructor(cls,methodType);
this.javaUDF=(JavaUDF)ctor.invokeWithArguments(returnCodec,argCodecs);
}
  finally {
thread.setContextClassLoader(orig);
}
}
 catch (InvocationTargetException e) {
throw new InvalidRequestException(String.format("Could not compile function '%s' from Java source: %s",name,e.getCause()));
}
catch (VirtualMachineError e) {
throw e;
}
catch (Throwable e) {
throw new InvalidRequestException(String.format("Could not compile function '%s' from Java source: %s",name,e));
}
}
