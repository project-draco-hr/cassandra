{
  MBeanServer server=ManagementFactory.getPlatformMBeanServer();
  logger.info(String.format("%-25s%10s%10s%15s%10s%18s","Pool Name","Active","Pending","Completed","Blocked","All Time Blocked"));
  Set<ObjectName> request, internal;
  try {
    request=server.queryNames(new ObjectName("org.apache.cassandra.request:type=*"),null);
    internal=server.queryNames(new ObjectName("org.apache.cassandra.internal:type=*"),null);
  }
 catch (  MalformedObjectNameException e) {
    throw new RuntimeException(e);
  }
  for (  ObjectName objectName : Iterables.concat(request,internal)) {
    String poolName=objectName.getKeyProperty("type");
    JMXEnabledThreadPoolExecutorMBean threadPoolProxy=JMX.newMBeanProxy(server,objectName,JMXEnabledThreadPoolExecutorMBean.class);
    logger.info(String.format("%-25s%10s%10s%15s%10s%18s",poolName,threadPoolProxy.getActiveCount(),threadPoolProxy.getPendingTasks(),threadPoolProxy.getCompletedTasks(),threadPoolProxy.getCurrentlyBlockedTasks(),threadPoolProxy.getTotalBlockedTasks()));
  }
  logger.info(String.format("%-25s%10s%10s","CompactionManager",CompactionManager.instance.getActiveCompactions(),CompactionManager.instance.getPendingTasks()));
  logger.info(String.format("%-25s%10s%10s","Commitlog","n/a",CommitLog.instance.getPendingTasks()));
  int pendingCommands=0;
  for (  int n : MessagingService.instance().getCommandPendingTasks().values()) {
    pendingCommands+=n;
  }
  int pendingResponses=0;
  for (  int n : MessagingService.instance().getResponsePendingTasks().values()) {
    pendingResponses+=n;
  }
  logger.info(String.format("%-25s%10s%10s","MessagingService","n/a",pendingCommands + "," + pendingResponses));
  AutoSavingCache<KeyCacheKey,RowIndexEntry> keyCache=CacheService.instance.keyCache;
  AutoSavingCache<RowCacheKey,IRowCacheEntry> rowCache=CacheService.instance.rowCache;
  int keyCacheKeysToSave=DatabaseDescriptor.getKeyCacheKeysToSave();
  int rowCacheKeysToSave=DatabaseDescriptor.getRowCacheKeysToSave();
  logger.info(String.format("%-25s%10s%25s%25s","Cache Type","Size","Capacity","KeysToSave"));
  logger.info(String.format("%-25s%10s%25s%25s","KeyCache",keyCache.weightedSize(),keyCache.getCapacity(),keyCacheKeysToSave == Integer.MAX_VALUE ? "all" : keyCacheKeysToSave));
  logger.info(String.format("%-25s%10s%25s%25s","RowCache",rowCache.weightedSize(),rowCache.getCapacity(),rowCacheKeysToSave == Integer.MAX_VALUE ? "all" : rowCacheKeysToSave));
  logger.info(String.format("%-25s%20s","ColumnFamily","Memtable ops,data"));
  for (  ColumnFamilyStore cfs : ColumnFamilyStore.all()) {
    logger.info(String.format("%-25s%20s",cfs.keyspace.getName() + "." + cfs.name,cfs.getMemtableColumnsCount() + "," + cfs.getMemtableDataSize()));
  }
}
