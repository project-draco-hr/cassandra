{
  createTable("CREATE TABLE %s(" + "  key int," + "  column int,"+ "  data int static,"+ "  extra text,"+ "  PRIMARY KEY(key, column)"+ ") WITH compaction = { 'class' :  'SizeTieredCompactionStrategy', 'provide_overlapping_tombstones' : 'cell'  };");
  for (int i=0; i < KEY_COUNT; ++i)   for (int j=0; j < CLUSTERING_COUNT; ++j)   execute("INSERT INTO %s (key, column, data, extra) VALUES (?, ?, ?, ?)",i,j,i + j,"" + i + ":"+ j);
  Set<SSTableReader> readers=new HashSet<>();
  ColumnFamilyStore cfs=getCurrentColumnFamilyStore();
  flush();
  assertEquals(1,cfs.getLiveSSTables().size());
  SSTableReader table0=getNewTable(readers);
  assertEquals(0,countTombstoneMarkers(table0));
  int cellCount=countStaticCells(table0);
  assertEquals(KEY_COUNT,cellCount);
  execute("DELETE data FROM %s WHERE key = 0");
  execute("INSERT INTO %s (key, data) VALUES (1, 0)");
  flush();
  assertEquals(2,cfs.getLiveSSTables().size());
  SSTableReader table1=getNewTable(readers);
  assertTrue(countStaticCells(table1) > 0);
  assertEquals(0,countTombstoneMarkers(table0));
  CompactionManager.instance.forceUserDefinedCompaction(table0.getFilename());
  assertEquals(2,cfs.getLiveSSTables().size());
  SSTableReader table3=getNewTable(readers);
  assertEquals(0,countTombstoneMarkers(table3));
  assertEquals(cellCount - 2,countStaticCells(table3));
}
