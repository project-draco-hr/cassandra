{
  setUp();
  int iteration=0;
  int bytesChecked=0;
  int action=0;
  while (generated.size() < 1024 * 1024 * 8) {
    action=r.nextInt(18);
    iteration++;
switch (action) {
case 0:
{
        generated.flush();
        dosp.flush();
        break;
      }
case 1:
{
      int val=r.nextInt();
      dosp.write(val);
      ndosp.write(val);
      break;
    }
case 2:
{
    byte randomBytes[]=new byte[r.nextInt(4096 * 2 + 1)];
    r.nextBytes(randomBytes);
    dosp.write(randomBytes);
    ndosp.write(randomBytes);
    break;
  }
case 3:
{
  byte randomBytes[]=new byte[r.nextInt(4096 * 2 + 1)];
  r.nextBytes(randomBytes);
  int offset=randomBytes.length == 0 ? 0 : r.nextInt(randomBytes.length);
  int length=randomBytes.length == 0 ? 0 : r.nextInt(randomBytes.length - offset);
  dosp.write(randomBytes,offset,length);
  ndosp.write(randomBytes,offset,length);
  break;
}
case 4:
{
boolean val=r.nextInt(2) == 0;
dosp.writeBoolean(val);
ndosp.writeBoolean(val);
break;
}
case 5:
{
int val=r.nextInt();
dosp.writeByte(val);
ndosp.writeByte(val);
break;
}
case 6:
{
int val=r.nextInt();
dosp.writeShort(val);
ndosp.writeShort(val);
break;
}
case 7:
{
int val=r.nextInt();
dosp.writeChar(val);
ndosp.writeChar(val);
break;
}
case 8:
{
int val=r.nextInt();
dosp.writeInt(val);
ndosp.writeInt(val);
break;
}
case 9:
{
int val=r.nextInt();
dosp.writeLong(val);
ndosp.writeLong(val);
break;
}
case 10:
{
float val=r.nextFloat();
dosp.writeFloat(val);
ndosp.writeFloat(val);
break;
}
case 11:
{
double val=r.nextDouble();
dosp.writeDouble(val);
ndosp.writeDouble(val);
break;
}
case 12:
{
dosp.writeBytes(simple);
ndosp.writeBytes(simple);
break;
}
case 13:
{
dosp.writeChars(twoByte);
ndosp.writeChars(twoByte);
break;
}
case 14:
{
StringBuilder sb=new StringBuilder();
int length=r.nextInt(500);
sb.append(simple + twoByte + threeByte+ fourByte);
for (int ii=0; ii < length; ii++) {
sb.append((char)(r.nextInt() & 0xffff));
}
String str=sb.toString();
writeUTFLegacy(str,dosp);
ndosp.writeUTF(str);
break;
}
case 15:
{
ByteBuffer buf=ByteBuffer.allocate(r.nextInt(1024 * 8 + 1));
r.nextBytes(buf.array());
buf.position(buf.capacity() == 0 ? 0 : r.nextInt(buf.capacity()));
buf.limit(buf.position() + (buf.capacity() - buf.position() == 0 ? 0 : r.nextInt(buf.capacity() - buf.position())));
ByteBuffer dup=buf.duplicate();
ndosp.write(buf.duplicate());
assertEquals(dup.position(),buf.position());
assertEquals(dup.limit(),buf.limit());
dosp.write(buf.duplicate());
break;
}
case 16:
{
ByteBuffer buf=ByteBuffer.allocateDirect(r.nextInt(1024 * 8 + 1));
while (buf.hasRemaining()) buf.put((byte)r.nextInt());
buf.position(buf.capacity() == 0 ? 0 : r.nextInt(buf.capacity()));
buf.limit(buf.position() + (buf.capacity() - buf.position() == 0 ? 0 : r.nextInt(buf.capacity() - buf.position())));
ByteBuffer dup=buf.duplicate();
ndosp.write(buf.duplicate());
assertEquals(dup.position(),buf.position());
assertEquals(dup.limit(),buf.limit());
dosp.write(buf.duplicate());
break;
}
case 17:
{
try (Memory buf=Memory.allocate(r.nextInt(1024 * 8 - 1) + 1)){
for (int ii=0; ii < buf.size(); ii++) buf.setByte(ii,(byte)r.nextInt());
long offset=buf.size() == 0 ? 0 : r.nextInt((int)buf.size());
long length=(buf.size() - offset == 0 ? 0 : r.nextInt((int)(buf.size() - offset)));
ndosp.write(buf,offset,length);
dosp.write(buf,offset,length);
}
 break;
}
default :
fail("Shouldn't reach here");
}
}
assertSameOutput(0,-1,iteration);
}
