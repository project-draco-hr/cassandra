{
  if (endpoints.values().size() == 1)   return endpoints.values();
  ListMultimap<String,InetAddress> validated=ArrayListMultimap.create();
  for (  Map.Entry<String,InetAddress> entry : endpoints.entries())   if (isValid(entry.getValue()))   validated.put(entry.getKey(),entry.getValue());
  if (validated.size() <= 2)   return validated.values();
  if (validated.size() - validated.get(localRack).size() >= 2) {
    validated.removeAll(localRack);
  }
  if (validated.keySet().size() == 1) {
    Collection<InetAddress> otherRack=Iterables.getOnlyElement(validated.asMap().values());
    return Lists.newArrayList(Iterables.limit(otherRack,2));
  }
  Collection<String> racks;
  if (validated.keySet().size() == 2) {
    racks=validated.keySet();
  }
 else {
    racks=Lists.newArrayList(validated.keySet());
    Collections.shuffle((List<String>)racks);
  }
  List<InetAddress> result=new ArrayList<>(2);
  for (  String rack : Iterables.limit(racks,2)) {
    List<InetAddress> rackMembers=validated.get(rack);
    result.add(rackMembers.get(getRandomInt(rackMembers.size())));
  }
  return result;
}
