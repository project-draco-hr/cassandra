{
  CompactionManager.instance.disableAutoCompaction();
  Keyspace keyspace=Keyspace.open(KEYSPACE2);
  String cfName="Standard1";
  ColumnFamilyStore cfs=keyspace.getColumnFamilyStore(cfName);
  for (int k=1; k <= 2; ++k) {
    String key="key" + k;
    for (int i=0; i < 10; i++) {
      RowUpdateBuilder builder=new RowUpdateBuilder(cfs.metadata,0,key);
      builder.clustering(String.valueOf(i)).add("val",ByteBufferUtil.EMPTY_BYTE_BUFFER).build().applyUnsafe();
    }
    cfs.forceBlockingFlush();
    for (int i=0; i < 10; i++) {
      RowUpdateBuilder.deleteRow(cfs.metadata,1,key,String.valueOf(i)).applyUnsafe();
    }
    cfs.forceBlockingFlush();
  }
  DecoratedKey key1=Util.dk("key1");
  DecoratedKey key2=Util.dk("key2");
  cfs.forceBlockingFlush();
  Collection<SSTableReader> sstablesIncomplete=cfs.getLiveSSTables();
  RowUpdateBuilder builder=new RowUpdateBuilder(cfs.metadata,2,"key1");
  builder.clustering(String.valueOf(5)).add("val",ByteBufferUtil.EMPTY_BYTE_BUFFER).build().applyUnsafe();
  cfs.forceBlockingFlush();
  List<AbstractCompactionTask> tasks=cfs.getCompactionStrategyManager().getUserDefinedTasks(sstablesIncomplete,Integer.MAX_VALUE);
  assertEquals(1,tasks.size());
  tasks.get(0).execute(null);
  Util.assertEmpty(Util.cmd(cfs,key2).build());
  ImmutableBTreePartition partition=Util.getOnlyPartitionUnfiltered(Util.cmd(cfs,key1).build());
  assertEquals(1,partition.rowCount());
}
