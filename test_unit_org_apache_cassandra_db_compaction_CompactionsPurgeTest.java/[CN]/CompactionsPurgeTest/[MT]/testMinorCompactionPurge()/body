{
  CompactionManager.instance.disableAutoCompaction();
  Keyspace keyspace=Keyspace.open(KEYSPACE2);
  String cfName="Standard1";
  ColumnFamilyStore cfs=keyspace.getColumnFamilyStore(cfName);
  Mutation rm;
  for (int k=1; k <= 2; ++k) {
    DecoratedKey key=Util.dk("key" + k);
    rm=new Mutation(KEYSPACE2,key.key);
    for (int i=0; i < 10; i++) {
      rm.add(cfName,cellname(String.valueOf(i)),ByteBufferUtil.EMPTY_BYTE_BUFFER,0);
    }
    rm.apply();
    cfs.forceBlockingFlush();
    for (int i=0; i < 10; i++) {
      rm=new Mutation(KEYSPACE2,key.key);
      rm.delete(cfName,cellname(String.valueOf(i)),1);
      rm.apply();
    }
    cfs.forceBlockingFlush();
  }
  DecoratedKey key1=Util.dk("key1");
  DecoratedKey key2=Util.dk("key2");
  cfs.forceBlockingFlush();
  Collection<SSTableReader> sstablesIncomplete=cfs.getSSTables();
  rm=new Mutation(KEYSPACE2,key1.key);
  rm.add(cfName,cellname(String.valueOf(5)),ByteBufferUtil.EMPTY_BYTE_BUFFER,2);
  rm.apply();
  cfs.forceBlockingFlush();
  cfs.getCompactionStrategy().getUserDefinedTask(sstablesIncomplete,Integer.MAX_VALUE).execute(null);
  ColumnFamily cf=cfs.getColumnFamily(QueryFilter.getIdentityFilter(key2,cfName,System.currentTimeMillis()));
  assertNull(cf);
  cf=cfs.getColumnFamily(QueryFilter.getIdentityFilter(key1,cfName,System.currentTimeMillis()));
  assertEquals(1,cf.getColumnCount());
}
