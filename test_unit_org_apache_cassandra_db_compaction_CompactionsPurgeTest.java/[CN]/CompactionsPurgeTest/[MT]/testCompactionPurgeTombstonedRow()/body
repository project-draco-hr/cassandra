{
  CompactionManager.instance.disableAutoCompaction();
  String keyspaceName=KEYSPACE1;
  String cfName="Standard1";
  Keyspace keyspace=Keyspace.open(keyspaceName);
  ColumnFamilyStore cfs=keyspace.getColumnFamilyStore(cfName);
  DecoratedKey key=Util.dk("key3");
  Mutation rm;
  QueryFilter filter=QueryFilter.getIdentityFilter(key,cfName,System.currentTimeMillis());
  rm=new Mutation(keyspaceName,key.getKey());
  for (int i=0; i < 10; i++)   rm.add(cfName,cellname(String.valueOf(i)),ByteBufferUtil.EMPTY_BYTE_BUFFER,i);
  rm.applyUnsafe();
  rm=new Mutation(keyspaceName,key.getKey());
  rm.delete(cfName,4);
  rm.applyUnsafe();
  ColumnFamily cf=cfs.getColumnFamily(filter);
  assertTrue(cf.isMarkedForDelete());
  cfs.forceBlockingFlush();
  Util.compactAll(cfs,Integer.MAX_VALUE).get();
  assertFalse(cfs.getColumnFamily(filter).isMarkedForDelete());
  rm=new Mutation(keyspaceName,key.getKey());
  for (int i=0; i < 5; i++)   rm.add(cfName,cellname(String.valueOf(i)),ByteBufferUtil.EMPTY_BYTE_BUFFER,i);
  rm.applyUnsafe();
  cf=cfs.getColumnFamily(filter);
  assertEquals(10,cf.getColumnCount());
  for (  Cell c : cf)   assertTrue(c.isLive());
}
