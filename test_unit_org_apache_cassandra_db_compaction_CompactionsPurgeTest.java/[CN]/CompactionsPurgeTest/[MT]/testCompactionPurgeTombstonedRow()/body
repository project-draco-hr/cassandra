{
  CompactionManager.instance.disableAutoCompaction();
  String keyspaceName=KEYSPACE1;
  String cfName="Standard1";
  Keyspace keyspace=Keyspace.open(keyspaceName);
  ColumnFamilyStore cfs=keyspace.getColumnFamilyStore(cfName);
  String key="key3";
  for (int i=0; i < 10; i++) {
    RowUpdateBuilder builder=new RowUpdateBuilder(cfs.metadata,i,key);
    builder.clustering(String.valueOf(i)).add("val",ByteBufferUtil.EMPTY_BYTE_BUFFER).build().applyUnsafe();
  }
  Mutation rm=new Mutation(KEYSPACE1,dk(key));
  rm.add(PartitionUpdate.fullPartitionDelete(cfs.metadata,dk(key),4,FBUtilities.nowInSeconds()));
  rm.applyUnsafe();
  ArrayBackedPartition partition=Util.getOnlyPartitionUnfiltered(Util.cmd(cfs,key).build());
  assertFalse(partition.partitionLevelDeletion().isLive());
  cfs.forceBlockingFlush();
  Util.compactAll(cfs,Integer.MAX_VALUE).get();
  assertFalse(Util.getOnlyPartitionUnfiltered(Util.cmd(cfs,key).build()).isEmpty());
  for (int i=0; i < 5; i++) {
    RowUpdateBuilder builder=new RowUpdateBuilder(cfs.metadata,i,key);
    builder.clustering(String.valueOf(i)).add("val",ByteBufferUtil.EMPTY_BYTE_BUFFER).build().applyUnsafe();
  }
  partition=Util.getOnlyPartitionUnfiltered(Util.cmd(cfs,key).build());
  assertEquals(10,partition.rowCount());
}
