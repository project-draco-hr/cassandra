{
  CompactionManager.instance.disableAutoCompaction();
  Keyspace keyspace=Keyspace.open(KEYSPACE2);
  String cfName="Standard1";
  ColumnFamilyStore cfs=keyspace.getColumnFamilyStore(cfName);
  String key3="key3";
  new RowUpdateBuilder(cfs.metadata,8,key3).clustering("c1").add("val",ByteBufferUtil.EMPTY_BYTE_BUFFER).build().applyUnsafe();
  new RowUpdateBuilder(cfs.metadata,8,key3).clustering("c2").add("val",ByteBufferUtil.EMPTY_BYTE_BUFFER).build().applyUnsafe();
  cfs.forceBlockingFlush();
  RowUpdateBuilder.deleteRow(cfs.metadata,10,key3,"c1").applyUnsafe();
  cfs.forceBlockingFlush();
  Collection<SSTableReader> sstablesIncomplete=cfs.getLiveSSTables();
  RowUpdateBuilder.deleteRow(cfs.metadata,9,key3,"c2").applyUnsafe();
  cfs.forceBlockingFlush();
  List<AbstractCompactionTask> tasks=cfs.getCompactionStrategyManager().getUserDefinedTasks(sstablesIncomplete,Integer.MAX_VALUE);
  assertEquals(1,tasks.size());
  tasks.get(0).execute(null);
  ImmutableBTreePartition partition=Util.getOnlyPartitionUnfiltered(Util.cmd(cfs,key3).build());
  assertEquals(2,partition.rowCount());
  for (  Row row : partition)   assertFalse(row.hasLiveData(FBUtilities.nowInSeconds()));
}
