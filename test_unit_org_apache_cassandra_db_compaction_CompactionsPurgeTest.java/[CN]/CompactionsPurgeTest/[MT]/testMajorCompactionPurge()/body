{
  CompactionManager.instance.disableAutoCompaction();
  Keyspace keyspace=Keyspace.open(KEYSPACE1);
  String cfName="Standard1";
  ColumnFamilyStore cfs=keyspace.getColumnFamilyStore(cfName);
  DecoratedKey key=Util.dk("key1");
  Mutation rm;
  rm=new Mutation(KEYSPACE1,key.getKey());
  for (int i=0; i < 10; i++) {
    rm.add(cfName,cellname(String.valueOf(i)),ByteBufferUtil.EMPTY_BYTE_BUFFER,0);
  }
  rm.apply();
  cfs.forceBlockingFlush();
  for (int i=0; i < 10; i++) {
    rm=new Mutation(KEYSPACE1,key.getKey());
    rm.delete(cfName,cellname(String.valueOf(i)),1);
    rm.apply();
  }
  cfs.forceBlockingFlush();
  rm=new Mutation(KEYSPACE1,key.getKey());
  rm.add(cfName,cellname(String.valueOf(5)),ByteBufferUtil.EMPTY_BYTE_BUFFER,2);
  rm.apply();
  cfs.forceBlockingFlush();
  CompactionManager.instance.submitMaximal(cfs,Integer.MAX_VALUE).get();
  cfs.invalidateCachedRow(key);
  ColumnFamily cf=cfs.getColumnFamily(QueryFilter.getIdentityFilter(key,cfName,System.currentTimeMillis()));
  assertColumns(cf,"5");
  assertNotNull(cf.getColumn(cellname(String.valueOf(5))));
}
