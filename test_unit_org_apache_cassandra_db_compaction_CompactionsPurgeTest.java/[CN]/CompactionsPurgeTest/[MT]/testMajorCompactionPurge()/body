{
  CompactionManager.instance.disableAutoCompaction();
  Keyspace keyspace=Keyspace.open(KEYSPACE1);
  String cfName="Standard1";
  ColumnFamilyStore cfs=keyspace.getColumnFamilyStore(cfName);
  String key="key1";
  for (int i=0; i < 10; i++) {
    RowUpdateBuilder builder=new RowUpdateBuilder(cfs.metadata,0,key);
    builder.clustering(String.valueOf(i)).add("val",ByteBufferUtil.EMPTY_BYTE_BUFFER).build().applyUnsafe();
  }
  cfs.forceBlockingFlush();
  for (int i=0; i < 10; i++) {
    RowUpdateBuilder.deleteRow(cfs.metadata,1,key,String.valueOf(i)).applyUnsafe();
  }
  cfs.forceBlockingFlush();
  RowUpdateBuilder builder=new RowUpdateBuilder(cfs.metadata,2,key);
  builder.clustering(String.valueOf(5)).add("val",ByteBufferUtil.EMPTY_BYTE_BUFFER).build().applyUnsafe();
  cfs.forceBlockingFlush();
  FBUtilities.waitOnFutures(CompactionManager.instance.submitMaximal(cfs,Integer.MAX_VALUE,false));
  cfs.invalidateCachedPartition(dk(key));
  ArrayBackedPartition partition=Util.getOnlyPartitionUnfiltered(Util.cmd(cfs,key).build());
  assertEquals(1,partition.rowCount());
}
