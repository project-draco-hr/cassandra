{
  byte[] body=(byte[])message.getMessageBody()[0];
  try {
    DataInputBuffer bufIn=new DataInputBuffer();
    bufIn.reset(body,body.length);
    TokenUpdater.TokenInfoMessage tiMessage=TokenUpdater.TokenInfoMessage.serializer().deserialize(bufIn);
    BigInteger token=tiMessage.getToken();
    logger_.info("Updating the token to [" + token + "]");
    StorageService.instance().updateToken(token);
    Map<String,byte[]> headers=message.getHeaders();
    headers.remove(StorageService.getLocalStorageEndPoint().getHost());
    logger_.debug("Number of nodes in the header " + headers.size());
    Set<String> nodes=headers.keySet();
    for (    String node : nodes) {
      logger_.debug("Processing node " + node);
      byte[] bytes=headers.remove(node);
      EndPoint target=new EndPoint(node,DatabaseDescriptor.getStoragePort());
      token=new BigInteger(bytes);
      tiMessage=new TokenUpdater.TokenInfoMessage(target,token);
      ByteArrayOutputStream bos=new ByteArrayOutputStream();
      DataOutputStream dos=new DataOutputStream(bos);
      TokenInfoMessage.serializer().serialize(tiMessage,dos);
      message.setMessageBody(new Object[]{bos.toByteArray()});
      logger_.debug("Sending a token update message to " + target + " to update it to "+ token);
      MessagingService.getMessagingInstance().sendOneWay(message,target);
      break;
    }
  }
 catch (  IOException ex) {
    logger_.debug(LogUtil.throwableToString(ex));
  }
}
