{
  this.listener=listener;
  this.desc=new RepairJobDesc(sessionId,keyspace,columnFamily,range);
  this.parallelismDegree=parallelismDegree;
  this.taskExecutor=taskExecutor;
  IRequestProcessor<InetAddress> processor=new IRequestProcessor<InetAddress>(){
    @Override public void process(    InetAddress endpoint){
      ValidationRequest request=new ValidationRequest(desc,gcBefore);
      MessagingService.instance().sendOneWay(request.createMessage(),endpoint);
    }
  }
;
switch (parallelismDegree) {
case SEQUENTIAL:
    this.treeRequests=new SequentialRequestCoordinator<>(processor);
  break;
case PARALLEL:
this.treeRequests=new ParallelRequestCoordinator<>(processor);
break;
case DATACENTER_AWARE:
this.treeRequests=new DatacenterAwareRequestCoordinator(processor);
break;
default :
throw new AssertionError("Unknown degree of parallelism specified");
}
}
