{
  List<InetAddress> allEndpoints=new ArrayList<>(session.endpoints);
  allEndpoints.add(FBUtilities.getBroadcastAddress());
  ListenableFuture<List<TreeResponse>> validations;
  if (isSequential) {
    List<ListenableFuture<InetAddress>> snapshotTasks=new ArrayList<>(allEndpoints.size());
    for (    InetAddress endpoint : allEndpoints) {
      SnapshotTask snapshotTask=new SnapshotTask(desc,endpoint);
      snapshotTasks.add(snapshotTask);
      taskExecutor.execute(snapshotTask);
    }
    ListenableFuture<List<InetAddress>> allSnapshotTasks=Futures.allAsList(snapshotTasks);
    validations=Futures.transform(allSnapshotTasks,new AsyncFunction<List<InetAddress>,List<TreeResponse>>(){
      public ListenableFuture<List<TreeResponse>> apply(      List<InetAddress> endpoints) throws Exception {
        return sendValidationRequest(endpoints);
      }
    }
,taskExecutor);
  }
 else {
    validations=sendValidationRequest(allEndpoints);
  }
  ListenableFuture<List<SyncStat>> syncResults=Futures.transform(validations,new AsyncFunction<List<TreeResponse>,List<SyncStat>>(){
    public ListenableFuture<List<SyncStat>> apply(    List<TreeResponse> trees) throws Exception {
      FailureDetector.instance.unregisterFailureDetectionEventListener(session);
      InetAddress local=FBUtilities.getLocalAddress();
      List<SyncTask> syncTasks=new ArrayList<>();
      for (int i=0; i < trees.size() - 1; ++i) {
        TreeResponse r1=trees.get(i);
        for (int j=i + 1; j < trees.size(); ++j) {
          TreeResponse r2=trees.get(j);
          SyncTask task;
          if (r1.endpoint.equals(local) || r2.endpoint.equals(local)) {
            task=new LocalSyncTask(desc,r1,r2,repairedAt);
          }
 else {
            task=new RemoteSyncTask(desc,r1,r2);
            session.waitForSync(Pair.create(desc,new NodePair(r1.endpoint,r2.endpoint)),(RemoteSyncTask)task);
          }
          syncTasks.add(task);
          taskExecutor.submit(task);
        }
      }
      return Futures.allAsList(syncTasks);
    }
  }
,taskExecutor);
  Futures.addCallback(syncResults,new FutureCallback<List<SyncStat>>(){
    public void onSuccess(    List<SyncStat> stats){
      logger.info(String.format("[repair #%s] %s is fully synced",session.getId(),desc.columnFamily));
      set(new RepairResult(desc,stats));
    }
    /** 
 * Snapshot, validation and sync failures are all handled here
 */
    public void onFailure(    Throwable t){
      logger.warn(String.format("[repair #%s] %s sync failed",session.getId(),desc.columnFamily));
      setException(t);
    }
  }
,taskExecutor);
  Futures.getUnchecked(validations);
}
