{
  UUID hostId=Gossiper.instance.getHostId(endpoint);
  logger.info("Started hinted handoff for host: {} with IP: {}",hostId,endpoint);
  final ByteBuffer hostIdBytes=ByteBuffer.wrap(UUIDGen.decompose(hostId));
  DecoratedKey epkey=StorageService.getPartitioner().decorateKey(hostIdBytes);
  final AtomicInteger rowsReplayed=new AtomicInteger(0);
  Composite startColumn=Composites.EMPTY;
  int pageSize=calculatePageSize();
  logger.debug("Using pageSize of {}",pageSize);
  int throttleInKB=DatabaseDescriptor.getHintedHandoffThrottleInKB() / (StorageService.instance.getTokenMetadata().getAllEndpoints().size() - 1);
  RateLimiter rateLimiter=RateLimiter.create(throttleInKB == 0 ? Double.MAX_VALUE : throttleInKB * 1024);
  boolean finished=false;
  delivery:   while (true) {
    long now=System.currentTimeMillis();
    QueryFilter filter=QueryFilter.getSliceFilter(epkey,SystemKeyspace.HINTS_CF,startColumn,Composites.EMPTY,false,pageSize,now);
    ColumnFamily hintsPage=ColumnFamilyStore.removeDeleted(hintStore.getColumnFamily(filter),(int)(now / 1000));
    if (pagingFinished(hintsPage,startColumn)) {
      logger.info("Finished hinted handoff of {} rows to endpoint {}",rowsReplayed,endpoint);
      finished=true;
      break;
    }
    if (!FailureDetector.instance.isAlive(endpoint)) {
      logger.info("Endpoint {} died during hint delivery; aborting ({} delivered)",endpoint,rowsReplayed);
      break;
    }
    List<WriteResponseHandler> responseHandlers=Lists.newArrayList();
    Map<UUID,Long> truncationTimesCache=new HashMap<UUID,Long>();
    for (    final Cell hint : hintsPage) {
      if (hintedHandOffPaused) {
        logger.debug("Hints delivery process is paused, aborting");
        break delivery;
      }
      if (!hint.isLive(System.currentTimeMillis()))       continue;
      startColumn=hint.name();
      int version=Int32Type.instance.compose(hint.name().get(1));
      DataInputStream in=new DataInputStream(ByteBufferUtil.inputStream(hint.value()));
      Mutation mutation;
      try {
        mutation=Mutation.serializer.deserialize(in,version);
      }
 catch (      UnknownColumnFamilyException e) {
        logger.debug("Skipping delivery of hint for deleted columnfamily",e);
        deleteHint(hostIdBytes,hint.name(),hint.timestamp());
        continue;
      }
catch (      IOException e) {
        throw new AssertionError(e);
      }
      truncationTimesCache.clear();
      for (      UUID cfId : ImmutableSet.copyOf((mutation.getColumnFamilyIds()))) {
        Long truncatedAt=truncationTimesCache.get(cfId);
        if (truncatedAt == null) {
          ColumnFamilyStore cfs=Keyspace.open(mutation.getKeyspaceName()).getColumnFamilyStore(cfId);
          truncatedAt=cfs.getTruncationTime();
          truncationTimesCache.put(cfId,truncatedAt);
        }
        if (hint.timestamp() < truncatedAt) {
          logger.debug("Skipping delivery of hint for truncated columnfamily {}",cfId);
          mutation=mutation.without(cfId);
        }
      }
      if (mutation.isEmpty()) {
        deleteHint(hostIdBytes,hint.name(),hint.timestamp());
        continue;
      }
      MessageOut<Mutation> message=mutation.createMessage();
      rateLimiter.acquire(message.serializedSize(MessagingService.current_version));
      Runnable callback=new Runnable(){
        public void run(){
          rowsReplayed.incrementAndGet();
          deleteHint(hostIdBytes,hint.name(),hint.timestamp());
        }
      }
;
      WriteResponseHandler responseHandler=new WriteResponseHandler(endpoint,WriteType.UNLOGGED_BATCH,callback);
      MessagingService.instance().sendRR(message,endpoint,responseHandler);
      responseHandlers.add(responseHandler);
    }
    for (    WriteResponseHandler handler : responseHandlers) {
      try {
        handler.get();
      }
 catch (      WriteTimeoutException e) {
        logger.info("Timed out replaying hints to {}; aborting ({} delivered)",endpoint,rowsReplayed);
        break delivery;
      }
    }
  }
  if (finished || rowsReplayed.get() >= DatabaseDescriptor.getTombstoneWarnThreshold()) {
    try {
      compact().get();
    }
 catch (    Exception e) {
      throw new RuntimeException(e);
    }
  }
}
