{
  long hintSizes=0;
  Throttle hintThrottle=new Throttle("HintThrottle",new Throttle.ThroughputFunction(){
    public int targetThroughput(){
      if (DatabaseDescriptor.getHintedHandoffThrottleInKB() < 1)       return 0;
      int totalBytesPerMS=(DatabaseDescriptor.getHintedHandoffThrottleInKB() * 1024) / 8 / 1000;
      return totalBytesPerMS / Math.max(1,executor.getActiveCount());
    }
  }
);
  ColumnFamilyStore hintStore=Table.open(Table.SYSTEM_TABLE).getColumnFamilyStore(SystemTable.HINTS_CF);
  if (hintStore.isEmpty())   return;
  logger.debug("Checking remote({}) schema before delivering hints",endpoint);
  try {
    waitForSchemaAgreement(endpoint);
  }
 catch (  TimeoutException e) {
    return;
  }
  if (!FailureDetector.instance.isAlive(endpoint)) {
    logger.debug("Endpoint {} died before hint delivery, aborting",endpoint);
    return;
  }
  UUID hostId=StorageService.instance.getTokenMetadata().getHostId(endpoint);
  logger.info("Started hinted handoff for host: {} with IP: {}",hostId,endpoint);
  ByteBuffer hostIdBytes=ByteBuffer.wrap(UUIDGen.decompose(hostId));
  DecoratedKey epkey=StorageService.getPartitioner().decorateKey(hostIdBytes);
  int rowsReplayed=0;
  ByteBuffer startColumn=ByteBufferUtil.EMPTY_BYTE_BUFFER;
  int pageSize=PAGE_SIZE;
  if (hintStore.getMeanColumns() > 0) {
    int averageColumnSize=(int)(hintStore.getMeanRowSize() / hintStore.getMeanColumns());
    pageSize=Math.min(PAGE_SIZE,DatabaseDescriptor.getInMemoryCompactionLimit() / averageColumnSize);
    pageSize=Math.max(2,pageSize);
    logger.debug("average hinted-row column size is {}; using pageSize of {}",averageColumnSize,pageSize);
  }
  delivery:   while (true) {
    QueryFilter filter=QueryFilter.getSliceFilter(epkey,new QueryPath(SystemTable.HINTS_CF),startColumn,ByteBufferUtil.EMPTY_BYTE_BUFFER,false,pageSize);
    ColumnFamily hintsPage=ColumnFamilyStore.removeDeleted(hintStore.getColumnFamily(filter),(int)(System.currentTimeMillis() / 1000));
    if (pagingFinished(hintsPage,startColumn))     break;
    for (    IColumn hint : hintsPage.getSortedColumns()) {
      if (!hint.isLive())       continue;
      startColumn=hint.name();
      ByteBuffer[] components=comparator.split(hint.name());
      int version=Int32Type.instance.compose(components[1]);
      DataInputStream in=new DataInputStream(ByteBufferUtil.inputStream(hint.value()));
      RowMutation rm;
      try {
        rm=RowMutation.serializer.deserialize(in,version);
      }
 catch (      UnknownColumnFamilyException e) {
        logger.debug("Skipping delivery of hint for deleted columnfamily",e);
        rm=null;
      }
      try {
        if (rm != null) {
          MessageOut<RowMutation> message=rm.createMessage();
          sendMutation(endpoint,message);
          hintSizes+=message.serializedSize(MessagingService.current_version);
          hintThrottle.throttle(hintSizes);
          rowsReplayed++;
        }
        deleteHint(hostIdBytes,hint.name(),hint.maxTimestamp());
      }
 catch (      TimeoutException e) {
        logger.info(String.format("Timed out replaying hints to %s; aborting further deliveries",endpoint));
        break delivery;
      }
    }
  }
  if (rowsReplayed > 0) {
    try {
      compact().get();
    }
 catch (    Exception e) {
      throw new RuntimeException(e);
    }
  }
  logger.info(String.format("Finished hinted handoff of %s rows to endpoint %s",rowsReplayed,endpoint));
}
