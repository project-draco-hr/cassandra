{
  ColumnFamilyStore hintStore=Table.open(Table.SYSTEM_KS).getColumnFamilyStore(SystemTable.HINTS_CF);
  if (hintStore.isEmpty())   return;
  if (hintedHandOffPaused) {
    logger.debug("Hints delivery process is paused, aborting");
    return;
  }
  logger.debug("Checking remote({}) schema before delivering hints",endpoint);
  try {
    waitForSchemaAgreement(endpoint);
  }
 catch (  TimeoutException e) {
    return;
  }
  if (!FailureDetector.instance.isAlive(endpoint)) {
    logger.debug("Endpoint {} died before hint delivery, aborting",endpoint);
    return;
  }
  UUID hostId=Gossiper.instance.getHostId(endpoint);
  logger.info("Started hinted handoff for host: {} with IP: {}",hostId,endpoint);
  final ByteBuffer hostIdBytes=ByteBuffer.wrap(UUIDGen.decompose(hostId));
  DecoratedKey epkey=StorageService.getPartitioner().decorateKey(hostIdBytes);
  final AtomicInteger rowsReplayed=new AtomicInteger(0);
  ByteBuffer startColumn=ByteBufferUtil.EMPTY_BYTE_BUFFER;
  int pageSize=PAGE_SIZE;
  if (hintStore.getMeanColumns() > 0) {
    int averageColumnSize=(int)(hintStore.getMeanRowSize() / hintStore.getMeanColumns());
    pageSize=Math.min(PAGE_SIZE,DatabaseDescriptor.getInMemoryCompactionLimit() / averageColumnSize);
    pageSize=Math.max(2,pageSize);
    logger.debug("average hinted-row column size is {}; using pageSize of {}",averageColumnSize,pageSize);
  }
  int throttleInKB=DatabaseDescriptor.getHintedHandoffThrottleInKB();
  RateLimiter rateLimiter=RateLimiter.create(throttleInKB == 0 ? Double.MAX_VALUE : throttleInKB * 1024);
  while (true) {
    if (hintedHandOffPaused) {
      logger.debug("Hints delivery process is paused, aborting");
      break;
    }
    QueryFilter filter=QueryFilter.getSliceFilter(epkey,SystemTable.HINTS_CF,startColumn,ByteBufferUtil.EMPTY_BYTE_BUFFER,false,pageSize);
    ColumnFamily hintsPage=ColumnFamilyStore.removeDeleted(hintStore.getColumnFamily(filter),(int)(System.currentTimeMillis() / 1000));
    if (pagingFinished(hintsPage,startColumn)) {
      if (ByteBufferUtil.EMPTY_BYTE_BUFFER.equals(startColumn)) {
        break;
      }
 else {
        startColumn=ByteBufferUtil.EMPTY_BYTE_BUFFER;
        continue;
      }
    }
    for (    final Column hint : hintsPage.getSortedColumns()) {
      if (!hint.isLive())       continue;
      if (hintedHandOffPaused) {
        logger.debug("Hints delivery process is paused, aborting");
        break;
      }
      startColumn=hint.name();
      ByteBuffer[] components=comparator.split(hint.name());
      int version=Int32Type.instance.compose(components[1]);
      DataInputStream in=new DataInputStream(ByteBufferUtil.inputStream(hint.value()));
      RowMutation rm;
      try {
        rm=RowMutation.serializer.deserialize(in,version);
      }
 catch (      UnknownColumnFamilyException e) {
        logger.debug("Skipping delivery of hint for deleted columnfamily",e);
        deleteHint(hostIdBytes,hint.name(),hint.maxTimestamp());
        continue;
      }
      MessageOut<RowMutation> message=rm.createMessage();
      rateLimiter.acquire(message.serializedSize(MessagingService.current_version));
      WrappedRunnable callback=new WrappedRunnable(){
        public void runMayThrow() throws IOException {
          rowsReplayed.incrementAndGet();
          deleteHint(hostIdBytes,hint.name(),hint.maxTimestamp());
        }
      }
;
      IAsyncCallback responseHandler=new WriteResponseHandler(endpoint,WriteType.UNLOGGED_BATCH,callback);
      MessagingService.instance().sendRR(message,endpoint,responseHandler);
    }
    if (!FailureDetector.instance.isAlive(endpoint)) {
      logger.debug("Endpoint {} died during hint delivery, aborting",endpoint);
      return;
    }
  }
  try {
    compact().get();
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
  logger.info(String.format("Finished hinted handoff of %s rows to endpoint %s",rowsReplayed,endpoint));
  if (hintedHandOffPaused) {
    logger.info("Hints delivery process is paused, not delivering further hints");
  }
}
