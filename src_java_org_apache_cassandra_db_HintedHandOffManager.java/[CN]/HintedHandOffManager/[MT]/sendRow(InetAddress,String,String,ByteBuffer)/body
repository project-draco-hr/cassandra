{
  if (!Gossiper.instance.isKnownEndpoint(endpoint)) {
    logger_.warn("Hints found for endpoint " + endpoint + " which is not part of the gossip network.  discarding.");
    return true;
  }
  if (!FailureDetector.instance.isAlive(endpoint)) {
    return false;
  }
  if (CFMetaData.getId(tableName,cfName) == null) {
    logger_.debug("Discarding hints for dropped keyspace or columnfamily {}/{}",tableName,cfName);
    return true;
  }
  Table table=Table.open(tableName);
  ColumnFamilyStore cfs=table.getColumnFamilyStore(cfName);
  int pageSize=PAGE_SIZE;
  if (cfs.getMeanColumns() > 0) {
    int averageColumnSize=(int)(cfs.getMeanRowSize() / cfs.getMeanColumns());
    pageSize=Math.min(PAGE_SIZE,DatabaseDescriptor.getInMemoryCompactionLimit() / averageColumnSize);
    pageSize=Math.max(2,pageSize);
    logger_.debug("average hinted-row column size is {}; using pageSize of {}",averageColumnSize,pageSize);
  }
  DecoratedKey dkey=StorageService.getPartitioner().decorateKey(key);
  ByteBuffer startColumn=ByteBufferUtil.EMPTY_BYTE_BUFFER;
  while (true) {
    QueryFilter filter=QueryFilter.getSliceFilter(dkey,new QueryPath(cfs.getColumnFamilyName()),startColumn,ByteBufferUtil.EMPTY_BYTE_BUFFER,false,pageSize);
    ColumnFamily cf=cfs.getColumnFamily(filter);
    if (pagingFinished(cf,startColumn))     break;
    if (cf.getColumnNames().isEmpty()) {
      logger_.debug("Nothing to hand off for {}",dkey);
      break;
    }
    startColumn=cf.getColumnNames().last();
    RowMutation rm=new RowMutation(tableName,key);
    rm.add(cf);
    Message message=rm.makeRowMutationMessage();
    IWriteResponseHandler responseHandler=WriteResponseHandler.create(endpoint);
    MessagingService.instance().sendRR(message,endpoint,responseHandler);
    try {
      responseHandler.get();
    }
 catch (    TimeoutException e) {
      return false;
    }
    try {
      Thread.sleep(DatabaseDescriptor.getHintedHandoffThrottleDelay());
    }
 catch (    InterruptedException e) {
      throw new AssertionError(e);
    }
  }
  return true;
}
