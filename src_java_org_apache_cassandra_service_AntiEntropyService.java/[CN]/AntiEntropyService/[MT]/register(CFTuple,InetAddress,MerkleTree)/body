{
  InetAddress LOCAL=FBUtilities.getLocalAddress();
  Cachetable<CFTuple,MerkleTree> etrees=cacheForEndpoint(endpoint);
  List<Differencer> differencers=new ArrayList<Differencer>();
  if (LOCAL.equals(endpoint)) {
    for (    Map.Entry<InetAddress,Cachetable<CFTuple,MerkleTree>> entry : trees.entrySet()) {
      if (LOCAL.equals(entry.getKey())) {
        continue;
      }
      MerkleTree remotetree=entry.getValue().remove(cf);
      if (remotetree == null) {
        continue;
      }
      differencers.add(new Differencer(cf,LOCAL,entry.getKey(),tree,remotetree));
    }
    etrees.put(cf,tree);
    logger.debug("Cached local tree for " + cf);
  }
 else {
    MerkleTree localtree=cacheForEndpoint(LOCAL).get(cf);
    if (localtree != null) {
      differencers.add(new Differencer(cf,LOCAL,endpoint,localtree,tree));
    }
 else {
      etrees.put(cf,tree);
      logger.debug("Cached remote tree from " + endpoint + " for "+ cf);
    }
  }
  for (  Differencer differencer : differencers) {
    logger.debug("Queueing comparison " + differencer);
    StageManager.getStage(AE_SERVICE_STAGE).execute(differencer);
  }
}
