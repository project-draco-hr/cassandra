{
  List<DecoratedKey> keys=new ArrayList<DecoratedKey>();
  ColumnFamilyStore cfs;
  try {
    cfs=Table.open(cf.left).getColumnFamilyStore(cf.right);
  }
 catch (  IOException e) {
    throw new IOError(e);
  }
  if (cfs != null) {
    for (    SSTable.KeyPosition info : cfs.allIndexPositions())     keys.add(info.key);
  }
  if (keys.isEmpty()) {
    tree.init();
  }
 else {
    int numkeys=keys.size();
    Random random=new Random();
    while (true) {
      DecoratedKey dk=keys.get(random.nextInt(numkeys));
      if (!tree.split(dk.token))       break;
    }
  }
  logger.debug("Prepared AEService tree of size " + tree.size() + " for "+ cf);
  mintoken=tree.partitioner().getMinimumToken();
  ranges=tree.invalids(new Range(mintoken,mintoken));
}
