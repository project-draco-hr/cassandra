{
  StorageService ss=StorageService.instance();
  Token minimum=ss.getPartitioner().getMinimumToken();
  if (ltree.partitioner() == null)   ltree.partitioner(ss.getPartitioner());
  if (rtree.partitioner() == null)   rtree.partitioner(ss.getPartitioner());
  Set<Range> interesting=new HashSet(ss.getRangesForEndPoint(local));
  interesting.retainAll(ss.getRangesForEndPoint(remote));
  for (  MerkleTree.TreeRange diff : MerkleTree.difference(ltree,rtree)) {
    for (    Range localrange : interesting) {
      if (diff.intersects(localrange)) {
        differences.add(diff);
        break;
      }
    }
  }
  float difference=differenceFraction();
  try {
    if (difference == 0.0) {
      logger.debug("Endpoints " + local + " and "+ remote+ " are consistent for "+ cf);
      return;
    }
    if (difference < 0.05)     performRangeRepair();
 else     performStreamingRepair();
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
}
