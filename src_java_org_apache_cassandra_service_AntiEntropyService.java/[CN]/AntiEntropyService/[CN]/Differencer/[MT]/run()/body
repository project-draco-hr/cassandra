{
  InetAddress local=FBUtilities.getLocalAddress();
  StorageService ss=StorageService.instance;
  if (ltree.partitioner() == null)   ltree.partitioner(StorageService.getPartitioner());
  if (rtree.partitioner() == null)   rtree.partitioner(StorageService.getPartitioner());
  Set<Range> interesting=new HashSet(ss.getRangesForEndpoint(request.cf.left,local));
  interesting.retainAll(ss.getRangesForEndpoint(request.cf.left,request.endpoint));
  for (  MerkleTree.TreeRange diff : MerkleTree.difference(ltree,rtree)) {
    for (    Range localrange : interesting) {
      if (diff.intersects(localrange)) {
        differences.add(diff);
        break;
      }
    }
  }
  float difference=differenceFraction();
  String format="Endpoints " + local + " and "+ request.endpoint+ " are %s for "+ request.cf;
  if (difference == 0.0) {
    logger.info(String.format(format,"consistent"));
    AntiEntropyService.instance.completedRequest(request);
    return;
  }
  logger.info(String.format(format,(difference * 100) + "% out of sync"));
  try {
    performStreamingRepair();
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
}
