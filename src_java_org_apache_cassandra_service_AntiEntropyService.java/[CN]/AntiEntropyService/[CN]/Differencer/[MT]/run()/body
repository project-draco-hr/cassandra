{
  StorageService ss=StorageService.instance;
  if (ltree.partitioner() == null)   ltree.partitioner(StorageService.getPartitioner());
  if (rtree.partitioner() == null)   rtree.partitioner(StorageService.getPartitioner());
  Set<Range> interesting=new HashSet(ss.getRangesForEndpoint(cf.left,local));
  interesting.retainAll(ss.getRangesForEndpoint(cf.left,remote));
  for (  MerkleTree.TreeRange diff : MerkleTree.difference(ltree,rtree)) {
    for (    Range localrange : interesting) {
      if (diff.intersects(localrange)) {
        differences.add(diff);
        break;
      }
    }
  }
  float difference=differenceFraction();
  if (difference == 0.0) {
    logger.info("Endpoints " + local + " and "+ remote+ " are consistent for "+ cf);
  }
 else {
    try {
      performStreamingRepair();
    }
 catch (    IOException e) {
      throw new RuntimeException(e);
    }
  }
  AntiEntropyService.instance.completedRequest(cf,local,remote);
}
