{
  logger.info("Performing streaming repair of " + differences.size() + " ranges to "+ remote+ " for "+ cf);
  ColumnFamilyStore cfstore=Table.open(cf.left).getColumnFamilyStore(cf.right);
  try {
    List<Range> ranges=new ArrayList<Range>(differences);
    final List<SSTableReader> sstables=CompactionManager.instance.submitAnticompaction(cfstore,ranges,remote).get();
    Future f=StageManager.getStage(StageManager.STREAM_STAGE).submit(new WrappedRunnable(){
      protected void runMayThrow() throws Exception {
        StreamOut.transferSSTables(remote,sstables,cf.left);
        StreamOutManager.remove(remote);
      }
    }
);
    f.get();
  }
 catch (  Exception e) {
    throw new IOException("Streaming repair failed.",e);
  }
  logger.info("Finished streaming repair to " + remote + " for "+ cf);
}
