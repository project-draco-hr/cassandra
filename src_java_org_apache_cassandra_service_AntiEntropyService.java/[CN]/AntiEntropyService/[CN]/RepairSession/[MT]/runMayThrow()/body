{
  if (endpoints.isEmpty()) {
    differencingDone.signalAll();
    logger.info("No neighbors to repair with for " + tablename + " on "+ range+ ": "+ getName()+ " completed.");
    return;
  }
  for (  InetAddress endpoint : endpoints) {
    if (!FailureDetector.instance.isAlive(endpoint)) {
      differencingDone.signalAll();
      logger.info("Could not proceed on repair because a neighbor (" + endpoint + ") is dead: "+ getName()+ " failed.");
      return;
    }
  }
  AntiEntropyService.instance.sessions.put(getName(),this);
  Gossiper.instance.register(this);
  FailureDetector.instance.registerFailureDetectionEventListener(this);
  try {
    for (    String cfname : cfnames) {
      RepairJob job=new RepairJob(cfname);
      jobs.offer(job);
      activeJobs.put(cfname,job);
    }
    jobs.peek().sendTreeRequests();
    completed.await();
    if (exception != null)     throw exception;
  }
 catch (  InterruptedException e) {
    throw new RuntimeException("Interrupted while waiting for repair: repair will continue in the background.");
  }
 finally {
    FailureDetector.instance.unregisterFailureDetectionEventListener(this);
    Gossiper.instance.unregister(this);
    AntiEntropyService.instance.sessions.remove(getName());
  }
}
