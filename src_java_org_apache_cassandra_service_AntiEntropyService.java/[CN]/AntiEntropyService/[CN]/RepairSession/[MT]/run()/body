{
  if (endpoints.isEmpty()) {
    differencingDone.signalAll();
    logger.info("No neighbors to repair with for " + tablename + " on "+ range+ ": "+ getName()+ " completed.");
    return;
  }
  for (  InetAddress endpoint : endpoints) {
    if (!FailureDetector.instance.isAlive(endpoint)) {
      differencingDone.signalAll();
      logger.info("Could not proceed on repair because a neighbor (" + endpoint + ") is dead: "+ getName()+ " failed.");
      return;
    }
  }
  AntiEntropyService.instance.sessions.put(getName(),this);
  try {
    for (    String cfname : cfnames)     jobs.offer(new RepairJob(cfname));
    completedLatch=new CountDownLatch(endpoints.size() * cfnames.length);
    jobs.peek().sendTreeRequests();
    completedLatch.await();
  }
 catch (  InterruptedException e) {
    throw new RuntimeException("Interrupted while waiting for repair: repair will continue in the background.");
  }
 finally {
    AntiEntropyService.instance.sessions.remove(getName());
  }
}
