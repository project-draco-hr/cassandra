{
  CompactionManager.instance.disableAutoCompaction();
  Keyspace keyspace=Keyspace.open(KEYSPACE1);
  ColumnFamilyStore cfs=keyspace.getColumnFamilyStore(COLUMN_FAMILY1);
  CacheService.instance.invalidateKeyCache();
  assertKeyCacheSize(0,KEYSPACE1,COLUMN_FAMILY1);
  DecoratedKey key1=Util.dk("key1");
  DecoratedKey key2=Util.dk("key2");
  RowMutation rm;
  rm=new RowMutation(KEYSPACE1,key1.key);
  rm.add(COLUMN_FAMILY1,ByteBufferUtil.bytes("1"),ByteBufferUtil.EMPTY_BYTE_BUFFER,0);
  rm.apply();
  rm=new RowMutation(KEYSPACE1,key2.key);
  rm.add(COLUMN_FAMILY1,ByteBufferUtil.bytes("2"),ByteBufferUtil.EMPTY_BYTE_BUFFER,0);
  rm.apply();
  cfs.forceBlockingFlush();
  cfs.getColumnFamily(QueryFilter.getSliceFilter(key1,COLUMN_FAMILY1,ByteBufferUtil.EMPTY_BYTE_BUFFER,ByteBufferUtil.EMPTY_BYTE_BUFFER,false,10,System.currentTimeMillis()));
  cfs.getColumnFamily(QueryFilter.getSliceFilter(key2,COLUMN_FAMILY1,ByteBufferUtil.EMPTY_BYTE_BUFFER,ByteBufferUtil.EMPTY_BYTE_BUFFER,false,10,System.currentTimeMillis()));
  assertKeyCacheSize(2,KEYSPACE1,COLUMN_FAMILY1);
  Util.compactAll(cfs).get();
  assertKeyCacheSize(4,KEYSPACE1,COLUMN_FAMILY1);
  cfs.getColumnFamily(QueryFilter.getSliceFilter(key1,COLUMN_FAMILY1,ByteBufferUtil.EMPTY_BYTE_BUFFER,ByteBufferUtil.EMPTY_BYTE_BUFFER,false,10,System.currentTimeMillis()));
  cfs.getColumnFamily(QueryFilter.getSliceFilter(key2,COLUMN_FAMILY1,ByteBufferUtil.EMPTY_BYTE_BUFFER,ByteBufferUtil.EMPTY_BYTE_BUFFER,false,10,System.currentTimeMillis()));
  assertKeyCacheSize(4,KEYSPACE1,COLUMN_FAMILY1);
}
