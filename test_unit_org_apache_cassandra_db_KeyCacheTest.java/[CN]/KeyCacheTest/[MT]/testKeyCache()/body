{
  CompactionManager.instance.disableAutoCompaction();
  Keyspace keyspace=Keyspace.open(KEYSPACE1);
  ColumnFamilyStore cfs=keyspace.getColumnFamilyStore(COLUMN_FAMILY1);
  CacheService.instance.invalidateKeyCache();
  assertKeyCacheSize(0,KEYSPACE1,COLUMN_FAMILY1);
  DecoratedKey key1=Util.dk("key1");
  DecoratedKey key2=Util.dk("key2");
  Mutation rm;
  rm=new Mutation(KEYSPACE1,key1.key);
  rm.add(COLUMN_FAMILY1,Util.cellname("1"),ByteBufferUtil.EMPTY_BYTE_BUFFER,0);
  rm.apply();
  rm=new Mutation(KEYSPACE1,key2.key);
  rm.add(COLUMN_FAMILY1,Util.cellname("2"),ByteBufferUtil.EMPTY_BYTE_BUFFER,0);
  rm.apply();
  cfs.forceBlockingFlush();
  cfs.getColumnFamily(QueryFilter.getSliceFilter(key1,COLUMN_FAMILY1,Composites.EMPTY,Composites.EMPTY,false,10,System.currentTimeMillis()));
  cfs.getColumnFamily(QueryFilter.getSliceFilter(key2,COLUMN_FAMILY1,Composites.EMPTY,Composites.EMPTY,false,10,System.currentTimeMillis()));
  assertKeyCacheSize(2,KEYSPACE1,COLUMN_FAMILY1);
  Set<SSTableReader> readers=cfs.getDataTracker().getSSTables();
  for (  SSTableReader reader : readers)   reader.acquireReference();
  Util.compactAll(cfs,Integer.MAX_VALUE).get();
  assertKeyCacheSize(4,KEYSPACE1,COLUMN_FAMILY1);
  for (  SSTableReader reader : readers)   reader.releaseReference();
  assertKeyCacheSize(2,KEYSPACE1,COLUMN_FAMILY1);
  cfs.getColumnFamily(QueryFilter.getSliceFilter(key1,COLUMN_FAMILY1,Composites.EMPTY,Composites.EMPTY,false,10,System.currentTimeMillis()));
  cfs.getColumnFamily(QueryFilter.getSliceFilter(key2,COLUMN_FAMILY1,Composites.EMPTY,Composites.EMPTY,false,10,System.currentTimeMillis()));
  assertKeyCacheSize(2,KEYSPACE1,COLUMN_FAMILY1);
}
