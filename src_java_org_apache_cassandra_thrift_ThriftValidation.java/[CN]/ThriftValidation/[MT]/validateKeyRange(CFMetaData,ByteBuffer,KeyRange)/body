{
  if ((range.start_key == null) == (range.start_token == null) || (range.end_key == null) == (range.end_token == null)) {
    throw new org.apache.cassandra.exceptions.InvalidRequestException("exactly one each of {start key, start token} and {end key, end token} must be specified");
  }
  if (range.start_token != null && range.end_key != null)   throw new org.apache.cassandra.exceptions.InvalidRequestException("start token + end key is not a supported key range");
  IPartitioner p=metadata.partitioner;
  if (range.start_key != null && range.end_key != null) {
    Token startToken=p.getToken(range.start_key);
    Token endToken=p.getToken(range.end_key);
    if (startToken.compareTo(endToken) > 0 && !endToken.isMinimum()) {
      if (p.preservesOrder())       throw new org.apache.cassandra.exceptions.InvalidRequestException("start key must sort before (or equal to) finish key in your partitioner!");
 else       throw new org.apache.cassandra.exceptions.InvalidRequestException("start key's token sorts after end key's token.  this is not allowed; you probably should not specify end key at all except with an ordered partitioner");
    }
  }
 else   if (range.start_key != null && range.end_token != null) {
    PartitionPosition stop=p.getTokenFactory().fromString(range.end_token).maxKeyBound();
    if (PartitionPosition.ForKey.get(range.start_key,p).compareTo(stop) > 0 && !stop.isMinimum())     throw new org.apache.cassandra.exceptions.InvalidRequestException("Start key's token sorts after end token");
  }
  validateFilterClauses(metadata,range.row_filter);
  if (!isEmpty(range.row_filter) && superColumn != null) {
    throw new org.apache.cassandra.exceptions.InvalidRequestException("super columns are not supported for indexing");
  }
  if (range.count <= 0) {
    throw new org.apache.cassandra.exceptions.InvalidRequestException("maxRows must be positive");
  }
}
