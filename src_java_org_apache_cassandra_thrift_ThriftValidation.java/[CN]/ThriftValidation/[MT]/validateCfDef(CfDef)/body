{
  try {
    if (cf_def.key_alias != null) {
      if (!cf_def.key_alias.hasRemaining())       throw new InvalidRequestException("key_alias may not be empty");
      try {
        AsciiType.instance.validate(cf_def.key_alias);
      }
 catch (      MarshalException e) {
        throw new InvalidRequestException("Key aliases must be ascii");
      }
    }
    ColumnFamilyType cfType=ColumnFamilyType.create(cf_def.column_type);
    if (cfType == null)     throw new InvalidRequestException("invalid column type " + cf_def.column_type);
    TypeParser.parse(cf_def.comparator_type);
    TypeParser.parse(cf_def.subcomparator_type);
    TypeParser.parse(cf_def.default_validation_class);
    if (cfType != ColumnFamilyType.Super && cf_def.subcomparator_type != null)     throw new InvalidRequestException("subcomparator_type is invalid for standard columns");
    if (cf_def.column_metadata == null)     return;
    AbstractType comparator=cfType == ColumnFamilyType.Standard ? TypeParser.parse(cf_def.comparator_type) : TypeParser.parse(cf_def.subcomparator_type);
    Set<String> indexNames=new HashSet<String>();
    for (    ColumnDef c : cf_def.column_metadata) {
      CFMetaData cfm=CFMetaData.fromThrift(cf_def);
      String idxName=cfm.indexName(ColumnDefinition.fromColumnDef(c));
      if (indexNames.contains(idxName))       throw new InvalidRequestException("Duplicate index names " + idxName);
      indexNames.add(idxName);
      TypeParser.parse(c.validation_class);
      try {
        comparator.validate(c.name);
      }
 catch (      MarshalException e) {
        throw new InvalidRequestException(String.format("Column name %s is not valid for comparator %s",ByteBufferUtil.bytesToHex(c.name),cf_def.comparator_type));
      }
      if ((c.index_name != null) && (c.index_type == null))       throw new ConfigurationException("index_name cannot be set without index_type");
      if (cfType == ColumnFamilyType.Super && c.index_type != null)       throw new InvalidRequestException("Secondary indexes are not supported on supercolumns");
    }
    validateMinMaxCompactionThresholds(cf_def);
    validateMemtableSettings(cf_def);
  }
 catch (  ConfigurationException e) {
    throw new InvalidRequestException(e.getMessage());
  }
}
