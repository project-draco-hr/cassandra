{
  int maxNameLength=Cell.MAX_NAME_LENGTH;
  if (superColumnName != null) {
    if (superColumnName.remaining() > maxNameLength)     throw new org.apache.cassandra.exceptions.InvalidRequestException("supercolumn name length must not be greater than " + maxNameLength);
    if (superColumnName.remaining() == 0)     throw new org.apache.cassandra.exceptions.InvalidRequestException("supercolumn name must not be empty");
    if (metadata.cfType == ColumnFamilyType.Standard)     throw new org.apache.cassandra.exceptions.InvalidRequestException("supercolumn specified to table " + metadata.cfName + " containing normal columns");
  }
  AbstractType<?> comparator=SuperColumns.getComparatorFor(metadata,superColumnName);
  boolean isCQL3Table=!metadata.isThriftCompatible();
  for (  ByteBuffer name : column_names) {
    if (name.remaining() > maxNameLength)     throw new org.apache.cassandra.exceptions.InvalidRequestException("column name length must not be greater than " + maxNameLength);
    if (name.remaining() == 0)     throw new org.apache.cassandra.exceptions.InvalidRequestException("column name must not be empty");
    try {
      comparator.validate(name);
    }
 catch (    MarshalException e) {
      throw new org.apache.cassandra.exceptions.InvalidRequestException(e.getMessage());
    }
    if (isCQL3Table) {
      Composite composite=metadata.comparator.fromByteBuffer(name);
      int minComponents=metadata.comparator.clusteringPrefixSize() + 1;
      if (composite.size() < minComponents)       throw new org.apache.cassandra.exceptions.InvalidRequestException(String.format("Not enough components (found %d but %d expected) for column name since %s is a CQL3 table",composite.size(),minComponents,metadata.cfName));
      int columnIndex=metadata.comparator.clusteringPrefixSize();
      ByteBuffer CQL3ColumnName=composite.get(columnIndex);
      if (!CQL3ColumnName.hasRemaining())       continue;
      ColumnIdentifier columnId=new ColumnIdentifier(CQL3ColumnName,metadata.comparator.subtype(columnIndex));
      if (metadata.getColumnDefinition(columnId) == null)       throw new org.apache.cassandra.exceptions.InvalidRequestException(String.format("Invalid cell for CQL3 table %s. The CQL3 column component (%s) does not correspond to a defined CQL3 column",metadata.cfName,columnId));
      if (metadata.comparator.hasCollections() && composite.size() == metadata.comparator.size()) {
        ColumnToCollectionType collectionType=metadata.comparator.collectionType();
        if (!collectionType.defined.containsKey(CQL3ColumnName))         throw new org.apache.cassandra.exceptions.InvalidRequestException(String.format("Invalid collection component, %s is not a collection",UTF8Type.instance.getString(CQL3ColumnName)));
      }
    }
  }
}
