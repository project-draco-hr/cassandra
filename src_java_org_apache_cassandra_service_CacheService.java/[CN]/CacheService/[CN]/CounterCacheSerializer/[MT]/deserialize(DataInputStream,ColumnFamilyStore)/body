{
  final ByteBuffer partitionKey=ByteBufferUtil.readWithLength(in);
  final ByteBuffer cellName=ByteBufferUtil.readWithLength(in);
  return StageManager.getStage(Stage.READ).submit(new Callable<Pair<CounterCacheKey,ClockAndCount>>(){
    public Pair<CounterCacheKey,ClockAndCount> call() throws Exception {
      DecoratedKey key=cfs.partitioner.decorateKey(partitionKey);
      LegacyLayout.LegacyCellName name=LegacyLayout.decodeCellName(cfs.metadata,cellName);
      ColumnDefinition column=name.column;
      CellPath path=name.collectionElement == null ? null : CellPath.create(name.collectionElement);
      int nowInSec=FBUtilities.nowInSeconds();
      ColumnFilter.Builder builder=ColumnFilter.selectionBuilder();
      if (path == null)       builder.add(column);
 else       builder.select(column,path);
      ClusteringIndexFilter filter=new ClusteringIndexNamesFilter(FBUtilities.<Clustering>singleton(name.clustering,cfs.metadata.comparator),false);
      SinglePartitionReadCommand cmd=SinglePartitionReadCommand.create(cfs.metadata,nowInSec,key,builder.build(),filter);
      try (OpOrder.Group op=cfs.readOrdering.start();RowIterator iter=UnfilteredRowIterators.filter(cmd.queryMemtableAndDisk(cfs,op),nowInSec)){
        Cell cell;
        if (column.isStatic()) {
          cell=iter.staticRow().getCell(column);
        }
 else {
          if (!iter.hasNext())           return null;
          cell=iter.next().getCell(column);
        }
        if (cell == null)         return null;
        ClockAndCount clockAndCount=CounterContext.instance().getLocalClockAndCount(cell.value());
        return Pair.create(CounterCacheKey.create(cfs.metadata.cfId,partitionKey,name.clustering,column,path),clockAndCount);
      }
     }
  }
);
}
