{
  checkFalse(!type.allowClusteringColumnSlices() && clusteringColumnsRestrictions.hasSlice(),"Slice restrictions are not supported on the clustering columns in %s statements",type);
  if (!type.allowClusteringColumnSlices() && (!cfm.isCompactTable() || (cfm.isCompactTable() && !hasClusteringColumnsRestriction()))) {
    if (!selectsOnlyStaticColumns && hasUnrestrictedClusteringColumns())     throw invalidRequest("Some clustering keys are missing: %s",Joiner.on(", ").join(getUnrestrictedClusteringColumns()));
  }
 else {
    checkFalse(clusteringColumnsRestrictions.hasIN() && selectsComplexColumn,"Cannot restrict clustering columns by IN relations when a collection is selected by the query");
    checkFalse(clusteringColumnsRestrictions.hasContains() && !hasQueriableIndex && !allowFiltering,"Clustering columns can only be restricted with CONTAINS with a secondary index or filtering");
    if (hasClusteringColumnsRestriction() && clusteringColumnsRestrictions.needFiltering()) {
      if (hasQueriableIndex || forView) {
        usesSecondaryIndexing=true;
      }
 else {
        List<ColumnDefinition> clusteringColumns=cfm.clusteringColumns();
        List<ColumnDefinition> restrictedColumns=new LinkedList<>(clusteringColumnsRestrictions.getColumnDefs());
        for (int i=0, m=restrictedColumns.size(); i < m; i++) {
          ColumnDefinition clusteringColumn=clusteringColumns.get(i);
          ColumnDefinition restrictedColumn=restrictedColumns.get(i);
          if (!clusteringColumn.equals(restrictedColumn) && !allowFiltering) {
            throw invalidRequest("PRIMARY KEY column \"%s\" cannot be restricted as preceding column \"%s\" is not restricted",restrictedColumn.name,clusteringColumn.name);
          }
        }
      }
    }
  }
}
