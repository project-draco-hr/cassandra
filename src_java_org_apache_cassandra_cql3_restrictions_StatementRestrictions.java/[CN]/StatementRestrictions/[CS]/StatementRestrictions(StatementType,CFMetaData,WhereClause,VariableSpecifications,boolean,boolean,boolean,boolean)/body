{
  this(type,cfm);
  ColumnFamilyStore cfs;
  SecondaryIndexManager secondaryIndexManager=null;
  if (type.allowUseOfSecondaryIndices()) {
    cfs=Keyspace.open(cfm.ksName).getColumnFamilyStore(cfm.cfName);
    secondaryIndexManager=cfs.indexManager;
  }
  for (  Relation relation : whereClause.relations) {
    if (relation.operator() == Operator.IS_NOT) {
      if (!forView)       throw new InvalidRequestException("Unsupported restriction: " + relation);
      for (      ColumnDefinition def : relation.toRestriction(cfm,boundNames).getColumnDefs())       this.notNullColumns.add(def);
    }
 else     if (relation.isLIKE()) {
      Restriction restriction=relation.toRestriction(cfm,boundNames);
      if (!type.allowUseOfSecondaryIndices() || !restriction.hasSupportingIndex(secondaryIndexManager))       throw new InvalidRequestException(relation + " restriction is only supported on properly indexed columns");
      addRestriction(restriction);
    }
 else {
      addRestriction(relation.toRestriction(cfm,boundNames));
    }
  }
  boolean hasQueriableClusteringColumnIndex=false;
  boolean hasQueriableIndex=false;
  if (type.allowUseOfSecondaryIndices()) {
    if (whereClause.containsCustomExpressions())     processCustomIndexExpressions(whereClause.expressions,boundNames,secondaryIndexManager);
    hasQueriableClusteringColumnIndex=clusteringColumnsRestrictions.hasSupportingIndex(secondaryIndexManager);
    hasQueriableIndex=!indexRestrictions.getCustomIndexExpressions().isEmpty() || hasQueriableClusteringColumnIndex || partitionKeyRestrictions.hasSupportingIndex(secondaryIndexManager)|| nonPrimaryKeyRestrictions.hasSupportingIndex(secondaryIndexManager);
  }
  processPartitionKeyRestrictions(hasQueriableIndex);
  if (usesSecondaryIndexing)   indexRestrictions.add(partitionKeyRestrictions);
  if (selectsOnlyStaticColumns && hasClusteringColumnsRestriction()) {
    if (type.isDelete() || type.isUpdate())     throw invalidRequest("Invalid restrictions on clustering columns since the %s statement modifies only static columns",type);
    if (type.isSelect())     throw invalidRequest("Cannot restrict clustering columns when selecting only static columns");
  }
  processClusteringColumnsRestrictions(hasQueriableIndex,selectsOnlyStaticColumns,selectACollection,forView);
  if (isKeyRange && hasQueriableClusteringColumnIndex)   usesSecondaryIndexing=true;
  usesSecondaryIndexing=usesSecondaryIndexing || clusteringColumnsRestrictions.isContains();
  if (usesSecondaryIndexing)   indexRestrictions.add(clusteringColumnsRestrictions);
  if (!nonPrimaryKeyRestrictions.isEmpty()) {
    if (!type.allowNonPrimaryKeyInWhereClause()) {
      Collection<ColumnIdentifier> nonPrimaryKeyColumns=ColumnDefinition.toIdentifiers(nonPrimaryKeyRestrictions.getColumnDefs());
      throw invalidRequest("Non PRIMARY KEY columns found in where clause: %s ",Joiner.on(", ").join(nonPrimaryKeyColumns));
    }
    if (hasQueriableIndex)     usesSecondaryIndexing=true;
 else     if (!useFiltering)     throw invalidRequest(StatementRestrictions.REQUIRES_ALLOW_FILTERING_MESSAGE);
    indexRestrictions.add(nonPrimaryKeyRestrictions);
  }
  if (usesSecondaryIndexing)   validateSecondaryIndexSelections(selectsOnlyStaticColumns);
}
