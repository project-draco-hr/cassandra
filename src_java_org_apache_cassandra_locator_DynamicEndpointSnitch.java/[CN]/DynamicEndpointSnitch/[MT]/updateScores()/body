{
  if (!StorageService.instance.isInitialized())   return;
  if (!registered) {
    if (MessagingService.instance() != null) {
      MessagingService.instance().register(this);
      registered=true;
    }
  }
  double maxLatency=1;
  long maxPenalty=1;
  HashMap<InetAddress,Long> penalties=new HashMap<InetAddress,Long>();
  for (  Map.Entry<InetAddress,BoundedStatsDeque> entry : windows.entrySet()) {
    double mean=entry.getValue().mean();
    if (mean > maxLatency)     maxLatency=mean;
    long timePenalty=lastReceived.containsKey(entry.getKey()) ? lastReceived.get(entry.getKey()) : System.currentTimeMillis();
    timePenalty=System.currentTimeMillis() - timePenalty;
    timePenalty=timePenalty > UPDATE_INTERVAL_IN_MS ? UPDATE_INTERVAL_IN_MS : timePenalty;
    penalties.put(entry.getKey(),timePenalty);
    if (timePenalty > maxPenalty)     maxPenalty=timePenalty;
  }
  for (  Map.Entry<InetAddress,BoundedStatsDeque> entry : windows.entrySet()) {
    double score=entry.getValue().mean() / maxLatency;
    if (penalties.containsKey(entry.getKey()))     score+=penalties.get(entry.getKey()) / ((double)maxPenalty);
 else     score+=1;
    score+=StorageService.instance.getSeverity(entry.getKey());
    scores.put(entry.getKey(),score);
  }
  intervalupdates.set(0);
}
