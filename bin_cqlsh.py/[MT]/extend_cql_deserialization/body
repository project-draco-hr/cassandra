def extend_cql_deserialization():
    '\n    The python driver returns BLOBs as string, but we expect them as bytearrays\n    the implementation of cassandra.cqltypes.BytesType.deserialize.\n\n    The deserializers package exists only when the driver has been compiled with cython extensions and\n    cassandra.deserializers.DesBytesType replaces cassandra.cqltypes.BytesType.deserialize.\n\n    DesBytesTypeByteArray is a fast deserializer that converts blobs into bytearrays but it was\n    only introduced recently (3.1.0). If it is available we use it, otherwise we remove\n    cassandra.deserializers.DesBytesType so that we fall back onto cassandra.cqltypes.BytesType.deserialize\n    just like in the case where no cython extensions are present.\n    '
    if hasattr(cassandra, 'deserializers'):
        if hasattr(cassandra.deserializers, 'DesBytesTypeByteArray'):
            cassandra.deserializers.DesBytesType = cassandra.deserializers.DesBytesTypeByteArray
        else:
            del cassandra.deserializers.DesBytesType
    cassandra.cqltypes.BytesType.deserialize = staticmethod((lambda byts, protocol_version: bytearray(byts)))


    class DateOverFlowWarning(RuntimeWarning):
        pass

    def deserialize_date_fallback_int(byts, protocol_version):
        timestamp_ms = int64_unpack(byts)
        try:
            return datetime_from_timestamp((timestamp_ms / 1000.0))
        except OverflowError:
            warnings.warn(DateOverFlowWarning('Some timestamps are larger than Python datetime can represent. Timestamps are displayed in milliseconds from epoch.'))
            return timestamp_ms
    cassandra.cqltypes.DateType.deserialize = staticmethod(deserialize_date_fallback_int)
    if hasattr(cassandra, 'deserializers'):
        del cassandra.deserializers.DesDateType
    cassandra.cqltypes.CassandraType.support_empty_values = True
