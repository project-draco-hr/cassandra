def read_options(cmdlineargs, environment):
    configs = ConfigParser.SafeConfigParser()
    configs.read(CONFIG_FILE)
    rawconfigs = ConfigParser.RawConfigParser()
    rawconfigs.read(CONFIG_FILE)
    optvalues = optparse.Values()
    optvalues.username = option_with_default(configs.get, 'authentication', 'username')
    optvalues.password = option_with_default(rawconfigs.get, 'authentication', 'password')
    optvalues.keyspace = option_with_default(configs.get, 'authentication', 'keyspace')
    optvalues.completekey = option_with_default(configs.get, 'ui', 'completekey', DEFAULT_COMPLETEKEY)
    optvalues.color = option_with_default(configs.getboolean, 'ui', 'color')
    optvalues.time_format = raw_option_with_default(configs, 'ui', 'time_format', DEFAULT_TIMESTAMP_FORMAT)
    optvalues.nanotime_format = raw_option_with_default(configs, 'ui', 'nanotime_format', DEFAULT_NANOTIME_FORMAT)
    optvalues.date_format = raw_option_with_default(configs, 'ui', 'date_format', DEFAULT_DATE_FORMAT)
    optvalues.float_precision = option_with_default(configs.getint, 'ui', 'float_precision', DEFAULT_FLOAT_PRECISION)
    optvalues.field_size_limit = option_with_default(configs.getint, 'csv', 'field_size_limit', csv.field_size_limit())
    optvalues.max_trace_wait = option_with_default(configs.getfloat, 'tracing', 'max_trace_wait', DEFAULT_MAX_TRACE_WAIT)
    optvalues.debug = False
    optvalues.file = None
    optvalues.ssl = False
    optvalues.encoding = None
    optvalues.tty = sys.stdin.isatty()
    optvalues.cqlversion = option_with_default(configs.get, 'cql', 'version', DEFAULT_CQLVER)
    optvalues.connect_timeout = option_with_default(configs.getint, 'connection', 'timeout', DEFAULT_CONNECT_TIMEOUT_SECONDS)
    optvalues.execute = None
    (options, arguments) = parser.parse_args(cmdlineargs, values=optvalues)
    hostname = option_with_default(configs.get, 'connection', 'hostname', DEFAULT_HOST)
    port = option_with_default(configs.get, 'connection', 'port', DEFAULT_PORT)
    try:
        options.connect_timeout = int(options.connect_timeout)
    except ValueError:
        parser.error(('"%s" is not a valid timeout.' % (options.connect_timeout,)))
        options.connect_timeout = DEFAULT_CONNECT_TIMEOUT_SECONDS
    options.client_timeout = option_with_default(configs.get, 'connection', 'client_timeout', '10')
    if (options.client_timeout.lower() == 'none'):
        options.client_timeout = None
    else:
        options.client_timeout = int(options.client_timeout)
    hostname = environment.get('CQLSH_HOST', hostname)
    port = environment.get('CQLSH_PORT', port)
    if (len(arguments) > 0):
        hostname = arguments[0]
    if (len(arguments) > 1):
        port = arguments[1]
    if (options.file or options.execute):
        options.tty = False
    if (options.execute and (not options.execute.endswith(';'))):
        options.execute += ';'
    if (optvalues.color in (True, False)):
        options.color = optvalues.color
    elif (options.file is not None):
        options.color = False
    else:
        options.color = should_use_color()
    (options.cqlversion, cqlvertup) = full_cql_version(options.cqlversion)
    if (cqlvertup[0] < 3):
        parser.error(('%r is not a supported CQL version.' % options.cqlversion))
    else:
        options.cqlmodule = cql3handling
    try:
        port = int(port)
    except ValueError:
        parser.error(('%r is not a valid port number.' % port))
    return (options, hostname, port)
