def do_source(self, parsed):
    "\n        SOURCE [cqlsh only]\n\n        Executes a file containing CQL statements. Gives the output for each\n        statement in turn, if any, or any errors that occur along the way.\n\n        Errors do NOT abort execution of the CQL source file.\n\n        Usage:\n\n          SOURCE '<file>';\n\n        That is, the path to the file to be executed must be given inside a\n        string literal. The path is interpreted relative to the current working\n        directory. The tilde shorthand notation ('~/mydir') is supported for\n        referring to $HOME.\n\n        See also the --file option to cqlsh.\n        "
    fname = parsed.get_binding('fname')
    fname = os.path.expanduser(self.cql_unprotect_value(fname))
    try:
        (encoding, bom_size) = get_file_encoding_bomsize(fname)
        f = codecs.open(fname, 'r', encoding)
        f.seek(bom_size)
    except IOError as e:
        self.printerr(('Could not open %r: %s' % (fname, e)))
        return
    subshell = Shell(self.hostname, self.port, color=self.color, encoding=self.encoding, stdin=f, tty=False, use_conn=self.conn, cqlver=self.cql_version, keyspace=self.current_keyspace, display_timestamp_format=self.display_timestamp_format, display_date_format=self.display_date_format, display_nanotime_format=self.display_nanotime_format, display_float_precision=self.display_float_precision, display_double_precision=self.display_double_precision, max_trace_wait=self.max_trace_wait)
    subshell.cmdloop()
    f.close()
