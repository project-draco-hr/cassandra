def perform_simple_statement(self, statement):
    if (not statement):
        return (False, None)
    future = self.session.execute_async(statement, trace=self.tracing_enabled)
    result = None
    try:
        result = future.result()
    except CQL_ERRORS as err:
        self.printerr(((unicode(err.__class__.__name__) + u': ') + err.message.decode(encoding='utf-8')))
    except Exception:
        import traceback
        self.printerr(traceback.format_exc())
    if (not future.is_schema_agreed):
        try:
            self.conn.refresh_schema_metadata(5)
        except Exception:
            self.printerr('Warning: schema version mismatch detected; check the schema versions of your nodes in system.local and system.peers.')
            self.conn.refresh_schema_metadata((-1))
    if (result is None):
        return (False, None)
    if (statement.query_string[:6].lower() == 'select'):
        self.print_result(result, self.parse_for_table_meta(statement.query_string))
    elif (statement.query_string.lower().startswith('list users') or statement.query_string.lower().startswith('list roles')):
        self.print_result(result, self.get_table_meta('system_auth', 'roles'))
    elif statement.query_string.lower().startswith('list'):
        self.print_result(result, self.get_table_meta('system_auth', 'role_permissions'))
    elif result:
        self.writeresult('')
        self.print_static_result(result.column_names, list(result), self.parse_for_table_meta(statement.query_string))
    self.flush_output()
    return (True, future)
