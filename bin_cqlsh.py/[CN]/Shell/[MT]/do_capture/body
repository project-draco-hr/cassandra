def do_capture(self, parsed):
    "\n        CAPTURE [cqlsh only]\n\n        Begins capturing command output and appending it to a specified file.\n        Output will not be shown at the console while it is captured.\n\n        Usage:\n\n          CAPTURE '<file>';\n          CAPTURE OFF;\n          CAPTURE;\n\n        That is, the path to the file to be appended to must be given inside a\n        string literal. The path is interpreted relative to the current working\n        directory. The tilde shorthand notation ('~/mydir') is supported for\n        referring to $HOME.\n\n        Only query result output is captured. Errors and output from cqlsh-only\n        commands will still be shown in the cqlsh session.\n\n        To stop capturing output and show it in the cqlsh session again, use\n        CAPTURE OFF.\n\n        To inspect the current capture configuration, use CAPTURE with no\n        arguments.\n        "
    fname = parsed.get_binding('fname')
    if (fname is None):
        if (self.shunted_query_out is not None):
            print ('Currently capturing query output to %r.' % (self.query_out.name,))
        else:
            print 'Currently not capturing query output.'
        return
    if (fname.upper() == 'OFF'):
        if (self.shunted_query_out is None):
            self.printerr('Not currently capturing output.')
            return
        self.query_out.close()
        self.query_out = self.shunted_query_out
        self.color = self.shunted_color
        self.shunted_query_out = None
        del self.shunted_color
        return
    if (self.shunted_query_out is not None):
        self.printerr(('Already capturing output to %s. Use CAPTURE OFF to disable.' % (self.query_out.name,)))
        return
    fname = os.path.expanduser(self.cql_unprotect_value(fname))
    try:
        f = open(fname, 'a')
    except IOError as e:
        self.printerr(('Could not open %r for append: %s' % (fname, e)))
        return
    self.shunted_query_out = self.query_out
    self.shunted_color = self.color
    self.query_out = f
    self.color = False
    print ('Now capturing query output to %r.' % (fname,))
