':"\n# bash code here; finds a suitable python interpreter and execs this file.\n# prefer unqualified "python" if suitable:\npython -c \'import sys; sys.exit(not (0x020500b0 < sys.hexversion < 0x03000000))\' 2>/dev/null     && exec python "$0" "$@"\nfor pyver in 2.6 2.7 2.5; do\n    which python$pyver > /dev/null 2>&1 && exec python$pyver "$0" "$@"\ndone\necho "No appropriate python interpreter found." >&2\nexit 1\n":'
from __future__ import with_statement
import cmd
import codecs
import ConfigParser
import csv
import getpass
import locale
import multiprocessing as mp
import optparse
import os
import platform
import sys
import time
import traceback
import warnings
from contextlib import contextmanager
from functools import partial
from glob import glob
from StringIO import StringIO
from uuid import UUID
if ((sys.version_info[0] != 2) or (sys.version_info[1] != 7)):
    sys.exit('\nCQL Shell supports only Python 2.7\n')
description = 'CQL Shell for Apache Cassandra'
version = '5.0.1'
readline = None
try:
    if sys.stdin.isatty():
        import readline
except ImportError:
    pass
CQL_LIB_PREFIX = 'cassandra-driver-internal-only-'
CASSANDRA_PATH = os.path.join(os.path.dirname(os.path.realpath(__file__)), '..')
ZIPLIB_DIRS = [os.path.join(CASSANDRA_PATH, 'lib')]
myplatform = platform.system()
if (myplatform == 'Linux'):
    ZIPLIB_DIRS.append('/usr/share/cassandra/lib')
if os.environ.get('CQLSH_NO_BUNDLED', ''):
    ZIPLIB_DIRS = ()
cql_zip = find_zip(CQL_LIB_PREFIX)
if cql_zip:
    ver = os.path.splitext(os.path.basename(cql_zip))[0][len(CQL_LIB_PREFIX):]
    sys.path.insert(0, os.path.join(cql_zip, ('cassandra-driver-' + ver)))
third_parties = ('futures-', 'six-')
for lib in third_parties:
    lib_zip = find_zip(lib)
    if lib_zip:
        sys.path.insert(0, lib_zip)
warnings.filterwarnings('ignore', '.*blist.*')
try:
    import cassandra
except ImportError as e:
    sys.exit(('\nPython Cassandra driver not installed, or not on PYTHONPATH.\nYou might try "pip install cassandra-driver".\n\nPython: %s\nModule load path: %r\n\nError: %s\n' % (sys.executable, sys.path, e)))
from cassandra.auth import PlainTextAuthProvider
from cassandra.cluster import Cluster
from cassandra.metadata import ColumnMetadata, KeyspaceMetadata, TableMetadata, protect_name, protect_names, protect_value
from cassandra.policies import WhiteListRoundRobinPolicy
from cassandra.protocol import QueryMessage, ResultMessage
from cassandra.query import SimpleStatement, ordered_dict_factory, TraceUnavailable
cqlshlibdir = os.path.join(CASSANDRA_PATH, 'pylib')
if os.path.isdir(cqlshlibdir):
    sys.path.insert(0, cqlshlibdir)
from cqlshlib import cql3handling, cqlhandling, pylexotron, sslhandling, copy
from cqlshlib.displaying import ANSI_RESET, BLUE, COLUMN_NAME_COLORS, CYAN, RED, FormattedValue, colorme
from cqlshlib.formatting import DEFAULT_DATE_FORMAT, DEFAULT_NANOTIME_FORMAT, DEFAULT_TIMESTAMP_FORMAT, DateTimeFormat, format_by_type, format_value_utype, formatter_for
from cqlshlib.tracing import print_trace, print_trace_session
from cqlshlib.util import get_file_encoding_bomsize, trim_if_present
DEFAULT_HOST = '127.0.0.1'
DEFAULT_PORT = 9042
DEFAULT_CQLVER = '3.3.1'
DEFAULT_PROTOCOL_VERSION = 4
DEFAULT_CONNECT_TIMEOUT_SECONDS = 5
DEFAULT_FLOAT_PRECISION = 5
DEFAULT_MAX_TRACE_WAIT = 10
if ((readline is not None) and (readline.__doc__ is not None) and ('libedit' in readline.__doc__)):
    DEFAULT_COMPLETEKEY = '\t'
else:
    DEFAULT_COMPLETEKEY = 'tab'
cqldocs = None
cqlruleset = None
epilog = ('Connects to %(DEFAULT_HOST)s:%(DEFAULT_PORT)d by default. These\ndefaults can be changed by setting $CQLSH_HOST and/or $CQLSH_PORT. When a\nhost (and optional port number) are given on the command line, they take\nprecedence over any defaults.' % globals())
parser = optparse.OptionParser(description=description, epilog=epilog, usage='Usage: %prog [options] [host [port]]', version=('cqlsh ' + version))
parser.add_option('-C', '--color', action='store_true', dest='color', help='Always use color output')
parser.add_option('--no-color', action='store_false', dest='color', help='Never use color output')
parser.add_option('--ssl', action='store_true', help='Use SSL', default=False)
parser.add_option('-u', '--username', help='Authenticate as user.')
parser.add_option('-p', '--password', help='Authenticate using password.')
parser.add_option('-k', '--keyspace', help='Authenticate to the given keyspace.')
parser.add_option('-f', '--file', help='Execute commands from FILE, then exit')
parser.add_option('--debug', action='store_true', help='Show additional debugging information')
parser.add_option('--encoding', help=(('Specify a non-default encoding for output.  If you are ' + 'experiencing problems with unicode characters, using utf8 may fix the problem.') + (' (Default from system preferences: %s)' % (locale.getpreferredencoding(),))))
parser.add_option('--cqlshrc', help='Specify an alternative cqlshrc file location.')
parser.add_option('--cqlversion', default=DEFAULT_CQLVER, help='Specify a particular CQL version (default: %default). Examples: "3.0.3", "3.1.0"')
parser.add_option('-e', '--execute', help='Execute the statement and quit.')
parser.add_option('--connect-timeout', default=DEFAULT_CONNECT_TIMEOUT_SECONDS, dest='connect_timeout', help='Specify the connection timeout in seconds (default: %default seconds).')
optvalues = optparse.Values()
(options, arguments) = parser.parse_args(sys.argv[1:], values=optvalues)
HISTORY_DIR = os.path.expanduser(os.path.join('~', '.cassandra'))
if hasattr(options, 'cqlshrc'):
    CONFIG_FILE = options.cqlshrc
    if (not os.path.exists(CONFIG_FILE)):
        print ('\nWarning: Specified cqlshrc location `%s` does not exist.  Using `%s` instead.\n' % (CONFIG_FILE, HISTORY_DIR))
        CONFIG_FILE = os.path.join(HISTORY_DIR, 'cqlshrc')
else:
    CONFIG_FILE = os.path.join(HISTORY_DIR, 'cqlshrc')
HISTORY = os.path.join(HISTORY_DIR, 'cqlsh_history')
if (not os.path.exists(HISTORY_DIR)):
    try:
        os.mkdir(HISTORY_DIR)
    except OSError:
        print ('\nWarning: Cannot create directory at `%s`. Command history will not be saved.\n' % HISTORY_DIR)
OLD_CONFIG_FILE = os.path.expanduser(os.path.join('~', '.cqlshrc'))
if os.path.exists(OLD_CONFIG_FILE):
    if os.path.exists(CONFIG_FILE):
        print ('\nWarning: cqlshrc config files were found at both the old location (%s) and                 the new location (%s), the old config file will not be migrated to the new                 location, and the new location will be used for now.  You should manually                 consolidate the config files at the new location and remove the old file.' % (OLD_CONFIG_FILE, CONFIG_FILE))
    else:
        os.rename(OLD_CONFIG_FILE, CONFIG_FILE)
OLD_HISTORY = os.path.expanduser(os.path.join('~', '.cqlsh_history'))
if os.path.exists(OLD_HISTORY):
    os.rename(OLD_HISTORY, HISTORY)
CQL_ERRORS = (cassandra.AlreadyExists, cassandra.AuthenticationFailed, cassandra.InvalidRequest, cassandra.Timeout, cassandra.Unauthorized, cassandra.OperationTimedOut, cassandra.cluster.NoHostAvailable, cassandra.connection.ConnectionBusy, cassandra.connection.ProtocolError, cassandra.connection.ConnectionException, cassandra.protocol.ErrorMessage, cassandra.protocol.InternalError, cassandra.query.TraceUnavailable)
debug_completion = bool((os.environ.get('CQLSH_DEBUG_COMPLETION', '') == 'YES'))
my_commands_ending_with_newline = ('help', '?', 'consistency', 'serial', 'describe', 'desc', 'show', 'source', 'capture', 'login', 'debug', 'tracing', 'expand', 'paging', 'exit', 'quit', 'clear', 'cls')
cqlsh_syntax_completers = []
cqlsh_extra_syntax_rules = '\n<cqlshCommand> ::= <CQL_Statement>\n                 | <specialCommand> ( ";" | "\\n" )\n                 ;\n\n<specialCommand> ::= <describeCommand>\n                   | <consistencyCommand>\n                   | <serialConsistencyCommand>\n                   | <showCommand>\n                   | <sourceCommand>\n                   | <captureCommand>\n                   | <copyCommand>\n                   | <loginCommand>\n                   | <debugCommand>\n                   | <helpCommand>\n                   | <tracingCommand>\n                   | <expandCommand>\n                   | <exitCommand>\n                   | <pagingCommand>\n                   | <clearCommand>\n                   ;\n\n<describeCommand> ::= ( "DESCRIBE" | "DESC" )\n                                  ( "FUNCTIONS" ksname=<keyspaceName>?\n                                  | "FUNCTION" udf=<anyFunctionName>\n                                  | "AGGREGATES" ksname=<keyspaceName>?\n                                  | "AGGREGATE" uda=<userAggregateName>\n                                  | "KEYSPACES"\n                                  | "KEYSPACE" ksname=<keyspaceName>?\n                                  | ( "COLUMNFAMILY" | "TABLE" ) cf=<columnFamilyName>\n                                  | "INDEX" idx=<indexName>\n                                  | "MATERIALIZED" "VIEW" mv=<materializedViewName>\n                                  | ( "COLUMNFAMILIES" | "TABLES" )\n                                  | "FULL"? "SCHEMA"\n                                  | "CLUSTER"\n                                  | "TYPES"\n                                  | "TYPE" ut=<userTypeName>\n                                  | (ksname=<keyspaceName> | cf=<columnFamilyName> | idx=<indexName> | mv=<materializedViewName>))\n                    ;\n\n<consistencyCommand> ::= "CONSISTENCY" ( level=<consistencyLevel> )?\n                       ;\n\n<consistencyLevel> ::= "ANY"\n                     | "ONE"\n                     | "TWO"\n                     | "THREE"\n                     | "QUORUM"\n                     | "ALL"\n                     | "LOCAL_QUORUM"\n                     | "EACH_QUORUM"\n                     | "SERIAL"\n                     | "LOCAL_SERIAL"\n                     | "LOCAL_ONE"\n                     ;\n\n<serialConsistencyCommand> ::= "SERIAL" "CONSISTENCY" ( level=<serialConsistencyLevel> )?\n                             ;\n\n<serialConsistencyLevel> ::= "SERIAL"\n                           | "LOCAL_SERIAL"\n                           ;\n\n<showCommand> ::= "SHOW" what=( "VERSION" | "HOST" | "SESSION" sessionid=<uuid> )\n                ;\n\n<sourceCommand> ::= "SOURCE" fname=<stringLiteral>\n                  ;\n\n<captureCommand> ::= "CAPTURE" ( fname=( <stringLiteral> | "OFF" ) )?\n                   ;\n\n<copyCommand> ::= "COPY" cf=<columnFamilyName>\n                         ( "(" [colnames]=<colname> ( "," [colnames]=<colname> )* ")" )?\n                         ( dir="FROM" ( fname=<stringLiteral> | "STDIN" )\n                         | dir="TO"   ( fname=<stringLiteral> | "STDOUT" ) )\n                         ( "WITH" <copyOption> ( "AND" <copyOption> )* )?\n                ;\n\n<copyOption> ::= [optnames]=(<identifier>|<reserved_identifier>) "=" [optvals]=<copyOptionVal>\n               ;\n\n<copyOptionVal> ::= <identifier>\n                  | <reserved_identifier>\n                  | <stringLiteral>\n                  ;\n\n# avoiding just "DEBUG" so that this rule doesn\'t get treated as a terminal\n<debugCommand> ::= "DEBUG" "THINGS"?\n                 ;\n\n<helpCommand> ::= ( "HELP" | "?" ) [topic]=( /[a-z_]*/ )*\n                ;\n\n<tracingCommand> ::= "TRACING" ( switch=( "ON" | "OFF" ) )?\n                   ;\n\n<expandCommand> ::= "EXPAND" ( switch=( "ON" | "OFF" ) )?\n                   ;\n\n<pagingCommand> ::= "PAGING" ( switch=( "ON" | "OFF" | /[0-9]+/) )?\n                  ;\n\n<loginCommand> ::= "LOGIN" username=<username> (password=<stringLiteral>)?\n                 ;\n\n<exitCommand> ::= "exit" | "quit"\n                ;\n\n<clearCommand> ::= "CLEAR" | "CLS"\n                 ;\n\n<qmark> ::= "?" ;\n'
cqlsh_syntax_completer('sourceCommand', 'fname')(complete_source_quoted_filename)
cqlsh_syntax_completer('captureCommand', 'fname')(complete_source_quoted_filename)
COPY_OPTIONS = ['DELIMITER', 'QUOTE', 'ESCAPE', 'HEADER', 'NULL', 'ENCODING', 'TIMEFORMAT', 'JOBS', 'PAGESIZE', 'PAGETIMEOUT', 'MAXATTEMPTS']
warnings.showwarning = show_warning_without_quoting_line
warnings.filterwarnings('always', category=cql3handling.UnexpectedTableStructure)
insert_driver_hooks()
if (__name__ == '__main__'):
    main(*read_options(sys.argv[1:], os.environ))
