{
  ColumnFamilyStore cfs=Table.open(localFile.desc.ksname).getColumnFamilyStore(localFile.desc.cfname);
  DecoratedKey key;
  SSTableWriter writer=new SSTableWriter(localFile.getFilename(),remoteFile.estimatedKeys);
  CompactionController controller=new CompactionController(cfs,Collections.<SSTableReader>emptySet(),Integer.MIN_VALUE);
  try {
    BytesReadTracker in=new BytesReadTracker(input);
    long totalBytesRead=0;
    for (    Pair<Long,Long> section : localFile.sections) {
      long length=section.right - section.left;
      if (remoteFile.compressionInfo != null)       ((CompressedInputStream)underliningStream).position(section.left);
      long bytesRead=0;
      while (bytesRead < length) {
        in.reset(0);
        key=StorageService.getPartitioner().decorateKey(ByteBufferUtil.readWithShortLength(in));
        writer.appendFromStream(key,cfs.metadata,in);
        cfs.invalidateCachedRow(key);
        bytesRead+=in.getBytesRead();
        if (remoteFile.compressionInfo != null)         remoteFile.progress=((CompressedInputStream)underliningStream).getTotalCompressedBytesRead();
 else         remoteFile.progress+=in.getBytesRead();
        totalBytesRead+=in.getBytesRead();
      }
    }
    StreamingMetrics.totalIncomingBytes.inc(totalBytesRead);
    metrics.incomingBytes.inc(totalBytesRead);
    return writer.closeAndOpenReader();
  }
 catch (  Throwable e) {
    writer.abort();
    if (e instanceof IOException)     throw (IOException)e;
 else     throw Throwables.propagate(e);
  }
 finally {
    controller.close();
  }
}
