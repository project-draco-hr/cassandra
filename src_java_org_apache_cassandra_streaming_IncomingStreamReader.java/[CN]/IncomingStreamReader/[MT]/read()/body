{
  StreamingService.instance.setStatus("Receiving stream");
  InetSocketAddress remoteAddress=(InetSocketAddress)socketChannel.socket().getRemoteSocketAddress();
  if (logger.isDebugEnabled())   logger.debug("Creating file for " + pendingFile.getFilename());
  FileOutputStream fos=new FileOutputStream(pendingFile.getFilename(),true);
  FileChannel fc=fos.getChannel();
  long bytesRead=0;
  try {
    while (bytesRead < pendingFile.getExpectedBytes()) {
      bytesRead+=fc.transferFrom(socketChannel,bytesRead,FileStreamTask.CHUNK_SIZE);
      pendingFile.update(bytesRead);
    }
    StreamingService.instance.setStatus("Receiving stream: finished reading chunk, awaiting more");
  }
 catch (  IOException ex) {
    streamStatus.setAction(CompletedFileStatus.StreamCompletionAction.STREAM);
    handleStreamCompletion(remoteAddress.getAddress());
    File file=new File(pendingFile.getFilename());
    file.delete();
    StreamingService.instance.setStatus("Receiving stream: recovering from IO error");
    throw ex;
  }
 finally {
    StreamInManager.activeStreams.remove(remoteAddress.getAddress(),pendingFile);
  }
  if (bytesRead == pendingFile.getExpectedBytes()) {
    if (logger.isDebugEnabled()) {
      logger.debug("Removing stream context " + pendingFile);
    }
    fc.close();
    StreamingService.instance.setStatus(StreamingService.NOTHING);
    handleStreamCompletion(remoteAddress.getAddress());
  }
}
