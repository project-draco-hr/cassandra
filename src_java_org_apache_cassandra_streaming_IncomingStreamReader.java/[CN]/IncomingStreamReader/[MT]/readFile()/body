{
  if (logger.isDebugEnabled()) {
    logger.debug("Receiving stream");
    logger.debug("Creating file for {}",localFile.getFilename());
  }
  FileOutputStream fos=new FileOutputStream(localFile.getFilename(),true);
  FileChannel fc=fos.getChannel();
  long offset=0;
  try {
    for (    Pair<Long,Long> section : localFile.sections) {
      long length=section.right - section.left;
      long bytesRead=0;
      while (bytesRead < length)       bytesRead+=fc.transferFrom(socketChannel,offset + bytesRead,length - bytesRead);
      offset+=length;
    }
  }
 catch (  IOException ex) {
    StreamReply reply=new StreamReply(remoteFile.getFilename(),session.getSessionId(),StreamReply.Status.FILE_RETRY);
    logger.info("Streaming of file {} from {} failed: requesting a retry.",remoteFile,session);
    MessagingService.instance.sendOneWay(reply.createMessage(),session.getHost());
    FileUtils.deleteWithConfirm(new File(localFile.getFilename()));
    throw ex;
  }
 finally {
    fc.close();
  }
  if (logger.isDebugEnabled())   logger.debug("Removing stream context {}",remoteFile);
  StreamReply reply=new StreamReply(remoteFile.getFilename(),session.getSessionId(),StreamReply.Status.FILE_FINISHED);
  addSSTable(localFile);
  session.remove(remoteFile);
  if (logger.isDebugEnabled())   logger.debug("Sending a streaming finished message for {} to {}",remoteFile,session);
  MessagingService.instance.sendOneWay(reply.createMessage(),session.getHost());
}
