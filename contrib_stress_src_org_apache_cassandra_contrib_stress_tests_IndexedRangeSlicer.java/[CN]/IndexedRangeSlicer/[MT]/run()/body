{
  String format="%0" + session.getTotalKeysLength() + "d";
  SlicePredicate predicate=new SlicePredicate().setSlice_range(new SliceRange(ByteBuffer.wrap(new byte[]{}),ByteBuffer.wrap(new byte[]{}),false,session.getColumnsPerKey()));
  List<String> values=super.generateValues();
  ColumnParent parent=new ColumnParent("Standard1");
  int expectedPerValue=session.getNumKeys() / values.size();
  ByteBuffer columnName=ByteBuffer.wrap("C1".getBytes());
  for (int i=range.begins(); i < range.size(); i++) {
    int received=0;
    String startOffset="0";
    ByteBuffer value=ByteBuffer.wrap(values.get(i % values.size()).getBytes());
    IndexExpression expression=new IndexExpression(columnName,IndexOperator.EQ,value);
    while (received < expectedPerValue) {
      IndexClause clause=new IndexClause(Arrays.asList(expression),ByteBuffer.wrap(startOffset.getBytes()),session.getKeysPerCall());
      List<KeySlice> results=null;
      long start=System.currentTimeMillis();
      try {
        results=client.get_indexed_slices(parent,clause,predicate,session.getConsistencyLevel());
        if (results.size() == 0) {
          throw new RuntimeException("No indexed values from offset received: " + startOffset);
        }
      }
 catch (      InvalidRequestException e) {
        System.err.println(e.getWhy());
        if (!session.ignoreErrors())         return;
      }
catch (      Exception e) {
        System.err.println(e.getMessage());
        if (!session.ignoreErrors())         return;
      }
      received+=results.size();
      startOffset=String.format(format,(1 + getMaxKey(results)));
      session.operationCount.getAndIncrement(index);
      session.keyCount.getAndAdd(index,results.size());
      session.latencies.getAndAdd(index,System.currentTimeMillis() - start);
    }
  }
}
