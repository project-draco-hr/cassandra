{
  logger_.info("Starting in bootstrap mode (first, sleeping to get load information)");
  StorageService ss=StorageService.instance();
  StorageLoadBalancer slb=StorageLoadBalancer.instance();
  slb.waitForLoadInfo();
  if (DatabaseDescriptor.getInitialToken() == null) {
    double maxLoad=0;
    InetAddress maxEndpoint=null;
    for (    Map.Entry<InetAddress,Double> entry : slb.getLoadInfo().entrySet()) {
      if (maxEndpoint == null || entry.getValue() > maxLoad) {
        maxEndpoint=entry.getKey();
        maxLoad=entry.getValue();
      }
    }
    if (maxEndpoint == null) {
      throw new RuntimeException("No bootstrap sources found");
    }
    if (!maxEndpoint.equals(FBUtilities.getLocalAddress())) {
      Token<?> t=getBootstrapTokenFrom(maxEndpoint);
      logger_.info("Setting token to " + t + " to assume load from "+ maxEndpoint);
      ss.updateToken(t);
    }
  }
  new Thread(new Runnable(){
    public void run(){
      for (int i=0; i < targets_.size(); i++) {
        tokenMetadata_.update(tokens_[i],targets_.get(i),false);
      }
      Map<Range,List<BootstrapSourceTarget>> rangesWithSourceTarget=getRangesWithSourceTarget();
      if (logger_.isDebugEnabled())       logger_.debug("Beginning bootstrap process for [" + StringUtils.join(targets_,", ") + "] ...");
      try {
        LeaveJoinProtocolHelper.assignWork(rangesWithSourceTarget);
      }
 catch (      IOException e) {
        throw new RuntimeException(e);
      }
    }
  }
).start();
  Gossiper.instance().addApplicationState(StorageService.BOOTSTRAP_MODE,new ApplicationState(""));
}
