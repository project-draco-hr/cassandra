{
  Map<Token,InetAddress> tokenToEndPointMap=tokenMetadata.cloneTokenEndPointMap();
  for (  Token token : tokens) {
    tokenToEndPointMap.remove(token);
  }
  Set<Token> oldTokens=new HashSet<Token>(tokenToEndPointMap.keySet());
  Range[] oldRanges=StorageService.instance().getAllRanges(oldTokens);
  if (logger.isDebugEnabled())   logger.debug("Total number of old ranges " + oldRanges.length);
  Map<Range,List<Range>> splitRanges=LeaveJoinProtocolHelper.getRangeSplitRangeMapping(oldRanges,tokens);
  Map<Range,List<InetAddress>> oldRangeToEndPointMap=StorageService.instance().constructRangeToEndPointMap(oldRanges,tokenToEndPointMap);
  Map<Range,List<InetAddress>> replicasForSplitRanges=new HashMap<Range,List<InetAddress>>();
  Set<Range> rangesSplit=splitRanges.keySet();
  for (  Range splitRange : rangesSplit) {
    replicasForSplitRanges.put(splitRange,oldRangeToEndPointMap.get(splitRange));
  }
  for (  Range splitRange : rangesSplit) {
    oldRangeToEndPointMap.remove(splitRange);
  }
  for (  Range splitRange : rangesSplit) {
    List<Range> subRanges=splitRanges.get(splitRange);
    List<InetAddress> replicas=replicasForSplitRanges.get(splitRange);
    for (    Range subRange : subRanges) {
      oldRangeToEndPointMap.put(subRange,new ArrayList<InetAddress>(replicas));
    }
  }
  Collections.addAll(oldTokens,tokens);
  Range[] newRanges=StorageService.instance().getAllRanges(oldTokens);
  if (logger.isDebugEnabled())   logger.debug("Total number of new ranges " + newRanges.length);
  Map<Range,List<InetAddress>> newRangeToEndPointMap=StorageService.instance().constructRangeToEndPointMap(newRanges);
  Map<Range,List<BootstrapSourceTarget>> rangesWithSourceTarget=LeaveJoinProtocolHelper.getRangeSourceTargetInfo(oldRangeToEndPointMap,newRangeToEndPointMap);
  return rangesWithSourceTarget;
}
