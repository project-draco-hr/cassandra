{
  new EmbeddedCassandraService().start();
  ByteArrayOutputStream errStream=new ByteArrayOutputStream();
  ByteArrayOutputStream outStream=new ByteArrayOutputStream();
  CliMain.connect("127.0.0.1",9170);
  CliMain.sessionState.setOut(new PrintStream(outStream));
  CliMain.sessionState.setErr(new PrintStream(errStream));
  CliMain.processStatement("drop keyspace TestKeySpace;");
  CliMain.processStatement("create keyspace TestKeySpace;");
  for (  String statement : statements) {
    errStream.reset();
    CliMain.processStatement(statement);
    String result=outStream.toString();
    assertEquals(errStream.toString() + " processing " + statement,"",errStream.toString());
    if (statement.startsWith("drop ") || statement.startsWith("create ") || statement.startsWith("update ")) {
      assertTrue(result.matches("(.{8})-(.{4})-(.{4})-(.{4})-(.{12})\n"));
    }
 else     if (statement.startsWith("set ")) {
      assertEquals(result,"Value inserted.\n");
    }
 else     if (statement.startsWith("get ")) {
      if (statement.contains("where")) {
        assertTrue(result.startsWith("-------------------\nRowKey:"));
      }
 else {
        assertTrue(result.startsWith("=> (column=") || result.startsWith("Value was not found"));
      }
    }
 else     if (statement.startsWith("truncate ")) {
      assertTrue(result.contains(" truncated."));
    }
 else     if (statement.startsWith("assume ")) {
      assertTrue(result.contains("successfully."));
    }
    outStream.reset();
    errStream.reset();
  }
}
