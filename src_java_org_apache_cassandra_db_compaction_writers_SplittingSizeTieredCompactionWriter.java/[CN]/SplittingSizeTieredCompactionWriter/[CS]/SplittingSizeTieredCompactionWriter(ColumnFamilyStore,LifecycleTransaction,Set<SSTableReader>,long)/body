{
  super(cfs,txn,nonExpiredSSTables,false);
  this.allSSTables=txn.originals();
  totalSize=cfs.getExpectedCompactedFileSize(nonExpiredSSTables,txn.opType());
  double[] potentialRatios=new double[20];
  double currentRatio=1;
  for (int i=0; i < potentialRatios.length; i++) {
    currentRatio/=2;
    potentialRatios[i]=currentRatio;
  }
  int noPointIndex=0;
  for (  double ratio : potentialRatios) {
    noPointIndex++;
    if (ratio * totalSize < smallestSSTable) {
      break;
    }
  }
  ratios=Arrays.copyOfRange(potentialRatios,0,noPointIndex);
  File sstableDirectory=cfs.directories.getLocationForDisk(getWriteDirectory(Math.round(totalSize * ratios[currentRatioIndex])));
  long currentPartitionsToWrite=Math.round(estimatedTotalKeys * ratios[currentRatioIndex]);
  currentBytesToWrite=Math.round(totalSize * ratios[currentRatioIndex]);
  @SuppressWarnings("resource") SSTableWriter writer=SSTableWriter.create(Descriptor.fromFilename(cfs.getSSTablePath(sstableDirectory)),currentPartitionsToWrite,minRepairedAt,cfs.metadata,new MetadataCollector(allSSTables,cfs.metadata.comparator,0),SerializationHeader.make(cfs.metadata,nonExpiredSSTables),txn);
  sstableWriter.switchWriter(writer);
  logger.debug("Ratios={}, expectedKeys = {}, totalSize = {}, currentPartitionsToWrite = {}, currentBytesToWrite = {}",ratios,estimatedTotalKeys,totalSize,currentPartitionsToWrite,currentBytesToWrite);
}
