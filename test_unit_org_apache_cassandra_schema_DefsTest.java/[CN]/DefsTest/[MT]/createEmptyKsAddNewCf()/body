{
  assertNull(Schema.instance.getKSMetaData(EMPTY_KEYSPACE));
  KSMetaData newKs=KSMetaData.testMetadata(EMPTY_KEYSPACE,SimpleStrategy.class,KSMetaData.optsWithRF(5));
  MigrationManager.announceNewKeyspace(newKs);
  assertNotNull(Schema.instance.getKSMetaData(EMPTY_KEYSPACE));
  String tableName="added_later";
  CFMetaData newCf=addTestTable(EMPTY_KEYSPACE,tableName,"A new CF to add to an empty KS");
  assertFalse(Schema.instance.getKSMetaData(newKs.name).cfMetaData().containsKey(newCf.cfName));
  MigrationManager.announceNewColumnFamily(newCf);
  assertTrue(Schema.instance.getKSMetaData(newKs.name).cfMetaData().containsKey(newCf.cfName));
  assertEquals(Schema.instance.getKSMetaData(newKs.name).cfMetaData().get(newCf.cfName),newCf);
  QueryProcessor.executeInternal(String.format("INSERT INTO %s.%s (key, col, val) VALUES (?, ?, ?)",EMPTY_KEYSPACE,tableName),"key0","col0","val0");
  ColumnFamilyStore cfs=Keyspace.open(newKs.name).getColumnFamilyStore(newCf.cfName);
  assertNotNull(cfs);
  cfs.forceBlockingFlush();
  UntypedResultSet rows=QueryProcessor.executeInternal(String.format("SELECT * FROM %s.%s",EMPTY_KEYSPACE,tableName));
  assertRows(rows,row("key0","col0","val0"));
}
