{
  CFMetaData cf=addTestTable("UpdatedKeyspace","AddedStandard1","A new cf for a new ks");
  KeyspaceMetadata oldKs=KeyspaceMetadata.create(cf.ksName,KeyspaceParams.simple(5),Tables.of(cf));
  MigrationManager.announceNewKeyspace(oldKs);
  assertNotNull(Schema.instance.getKSMetaData(cf.ksName));
  assertEquals(Schema.instance.getKSMetaData(cf.ksName),oldKs);
  KeyspaceMetadata newBadKs2=KeyspaceMetadata.create(cf.ksName + "trash",KeyspaceParams.simple(4));
  try {
    MigrationManager.announceKeyspaceUpdate(newBadKs2);
    throw new AssertionError("Should not have been able to update a KS with an invalid KS name.");
  }
 catch (  ConfigurationException ex) {
  }
  Map<String,String> replicationMap=new HashMap<>();
  replicationMap.put(ReplicationParams.CLASS,OldNetworkTopologyStrategy.class.getName());
  replicationMap.put("replication_factor","1");
  KeyspaceMetadata newKs=KeyspaceMetadata.create(cf.ksName,KeyspaceParams.create(true,replicationMap));
  MigrationManager.announceKeyspaceUpdate(newKs);
  KeyspaceMetadata newFetchedKs=Schema.instance.getKSMetaData(newKs.name);
  assertEquals(newFetchedKs.params.replication.klass,newKs.params.replication.klass);
  assertFalse(newFetchedKs.params.replication.klass.equals(oldKs.params.replication.klass));
}
