{
  Multimap<InetAddress,Range<Token>> rangeFetchMapMap=HashMultimap.create();
  for (  Range<Token> range : rangesWithSources.keySet()) {
    boolean foundSource=false;
    outer:     for (    InetAddress address : rangesWithSources.get(range)) {
      for (      ISourceFilter filter : sourceFilters) {
        if (!filter.shouldInclude(address))         continue outer;
      }
      if (address.equals(FBUtilities.getBroadcastAddress())) {
        foundSource=true;
        continue;
      }
      rangeFetchMapMap.put(address,range);
      foundSource=true;
      break;
    }
    if (!foundSource) {
      AbstractReplicationStrategy strat=Keyspace.open(keyspace).getReplicationStrategy();
      if (strat != null && strat.getReplicationFactor() == 1) {
        if (useStrictConsistency)         throw new IllegalStateException("Unable to find sufficient sources for streaming range " + range + " in keyspace "+ keyspace+ " with RF=1."+ "If you want to ignore this, consider using system property -Dcassandra.consistent.rangemovement=false.");
 else         logger.warn("Unable to find sufficient sources for streaming range {} in keyspace {} with RF=1. " + "Keyspace might be missing data.",range,keyspace);
      }
 else       throw new IllegalStateException("Unable to find sufficient sources for streaming range " + range + " in keyspace "+ keyspace);
    }
  }
  return rangeFetchMapMap;
}
