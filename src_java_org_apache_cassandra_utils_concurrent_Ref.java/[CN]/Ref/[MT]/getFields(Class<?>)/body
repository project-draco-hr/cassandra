{
  if (clazz == null || clazz == PhantomReference.class || clazz == Class.class || java.lang.reflect.Member.class.isAssignableFrom(clazz))   return emptyList();
  List<Field> fields=fieldMap.get(clazz);
  if (fields != null)   return fields;
  fieldMap.put(clazz,fields=new ArrayList<>());
  for (  Field field : clazz.getDeclaredFields()) {
    if (field.getType().isPrimitive() || Modifier.isStatic(field.getModifiers()))     continue;
    field.setAccessible(true);
    fields.add(field);
  }
  fields.addAll(getFields(clazz.getSuperclass()));
  return fields;
}
