{
  ObjectName query;
  try {
    Map<String,List<ColumnFamilyStoreMBean>> cfstoreMap=new HashMap<String,List<ColumnFamilyStoreMBean>>();
    query=new ObjectName("org.apache.cassandra.db:type=ColumnFamilyStores,*");
    Set<ObjectName> result=mbeanServerConn.queryNames(query,null);
    for (    ObjectName objectName : result) {
      String tableName=objectName.getKeyProperty("keyspace");
      ColumnFamilyStoreMBean cfsProxy=JMX.newMBeanProxy(mbeanServerConn,objectName,ColumnFamilyStoreMBean.class);
      if (!cfstoreMap.containsKey(tableName)) {
        List<ColumnFamilyStoreMBean> columnFamilies=new ArrayList<ColumnFamilyStoreMBean>();
        columnFamilies.add(cfsProxy);
        cfstoreMap.put(tableName,columnFamilies);
      }
 else {
        cfstoreMap.get(tableName).add(cfsProxy);
      }
    }
    for (    String tableName : cfstoreMap.keySet()) {
      List<ColumnFamilyStoreMBean> columnFamilies=cfstoreMap.get(tableName);
      int tableReadCount=0;
      int tableWriteCount=0;
      int tablePendingTasks=0;
      double tableTotalReadTime=0.0f;
      double tableTotalWriteTime=0.0f;
      outs.println("Keyspace: " + tableName);
      for (      ColumnFamilyStoreMBean cfstore : columnFamilies) {
        int writeCount=cfstore.getWriteCount();
        int readCount=cfstore.getReadCount();
        tableReadCount+=readCount;
        tableTotalReadTime+=cfstore.getReadLatency() * readCount;
        tableWriteCount+=writeCount;
        tableTotalWriteTime+=cfstore.getWriteLatency() * writeCount;
        tablePendingTasks+=cfstore.getPendingTasks();
      }
      double tableReadLatency=Double.NaN;
      double tableWriteLatency=Double.NaN;
      if (tableReadCount > 0.0f)       tableReadLatency=tableTotalReadTime / tableReadCount;
      if (tableWriteCount > 0.0f)       tableWriteLatency=tableTotalWriteTime / tableWriteCount;
      outs.println("\tRead Count: " + tableReadCount);
      outs.println("\tRead Latency: " + String.format("%01.3f",tableReadLatency) + " ms.");
      outs.println("\tWrite Count: " + tableWriteCount);
      outs.println("\tWrite Latency: " + String.format("%01.3f",tableWriteLatency) + " ms.");
      outs.println("\tPending Tasks: " + tablePendingTasks);
      for (      ColumnFamilyStoreMBean cfstore : columnFamilies) {
        outs.println("\t\tColumn Family: " + cfstore.getColumnFamilyName());
        outs.println("\t\tSSTable count: " + cfstore.getLiveSSTableCount());
        outs.println("\t\tSpace used (live): " + cfstore.getLiveDiskSpaceUsed());
        outs.println("\t\tSpace used (total): " + cfstore.getTotalDiskSpaceUsed());
        outs.println("\t\tMemtable Columns Count: " + cfstore.getMemtableColumnsCount());
        outs.println("\t\tMemtable Data Size: " + cfstore.getMemtableDataSize());
        outs.println("\t\tMemtable Switch Count: " + cfstore.getMemtableSwitchCount());
        outs.println("\t\tRead Count: " + cfstore.getReadCount());
        outs.println("\t\tRead Latency: " + String.format("%01.3f",cfstore.getReadLatency()) + " ms.");
        outs.println("\t\tWrite Count: " + cfstore.getWriteCount());
        outs.println("\t\tWrite Latency: " + String.format("%01.3f",cfstore.getWriteLatency()) + " ms.");
        outs.println("\t\tPending Tasks: " + cfstore.getPendingTasks());
        outs.println("");
      }
      outs.println("----------------");
    }
  }
 catch (  MalformedObjectNameException e) {
    throw new RuntimeException("Invalid ObjectName? Please report this as a bug.",e);
  }
catch (  IOException e) {
    throw new RuntimeException("Could not retrieve list of stat mbeans.",e);
  }
}
