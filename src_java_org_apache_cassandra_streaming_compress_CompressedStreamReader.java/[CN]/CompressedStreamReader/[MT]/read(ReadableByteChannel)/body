{
  long totalSize=totalSize();
  Pair<String,String> kscf=Schema.instance.getCF(cfId);
  ColumnFamilyStore cfs=null;
  if (kscf != null)   cfs=Keyspace.open(kscf.left).getColumnFamilyStore(kscf.right);
  if (kscf == null || cfs == null) {
    throw new IOException("CF " + cfId + " was dropped during streaming");
  }
  logger.debug("[Stream #{}] Start receiving file #{} from {}, repairedAt = {}, size = {}, ks = '{}', table = '{}'.",session.planId(),fileSeqNum,session.peer,repairedAt,totalSize,cfs.keyspace.getName(),cfs.getColumnFamilyName());
  CompressedInputStream cis=new CompressedInputStream(Channels.newInputStream(channel),compressionInfo,inputVersion.hasPostCompressionAdlerChecksums);
  BytesReadTracker in=new BytesReadTracker(new DataInputStream(cis));
  SSTableWriter writer=null;
  DecoratedKey key=null;
  try {
    writer=createWriter(cfs,totalSize,repairedAt);
    int sectionIdx=0;
    for (    Pair<Long,Long> section : sections) {
      long length=section.right - section.left;
      cis.position(section.left);
      in.reset(0);
      logger.trace("[Stream #{}] Reading section {} with length {} from stream.",session.planId(),sectionIdx++,length);
      while (in.getBytesRead() < length) {
        key=StorageService.getPartitioner().decorateKey(ByteBufferUtil.readWithShortLength(in));
        writeRow(key,writer,in,cfs);
        session.progress(desc,ProgressInfo.Direction.IN,cis.getTotalCompressedBytesRead(),totalSize);
      }
    }
    logger.debug("[Stream #{}] Finished receiving file #{} from {} readBytes = {}, totalSize = {}",session.planId(),fileSeqNum,session.peer,cis.getTotalCompressedBytesRead(),totalSize);
    return writer;
  }
 catch (  Throwable e) {
    if (key != null)     logger.warn("[Stream {}] Error while reading partition {} from stream on ks='{}' and table='{}'.",session.planId(),key,cfs.keyspace.getName(),cfs.getColumnFamilyName());
    if (writer != null) {
      try {
        writer.abort();
      }
 catch (      Throwable e2) {
        e.addSuppressed(e2);
      }
    }
    drain(cis,in.getBytesRead());
    if (e instanceof IOException)     throw (IOException)e;
 else     throw Throwables.propagate(e);
  }
}
