{
  logger.debug("reading file from {}, repairedAt = {}",session.peer,repairedAt);
  long totalSize=totalSize();
  Pair<String,String> kscf=Schema.instance.getCF(cfId);
  if (kscf == null) {
    throw new IOException("CF " + cfId + " was dropped during streaming");
  }
  ColumnFamilyStore cfs=Keyspace.open(kscf.left).getColumnFamilyStore(kscf.right);
  CompressedInputStream cis=new CompressedInputStream(Channels.newInputStream(channel),compressionInfo,inputVersion.hasPostCompressionAdlerChecksums);
  BytesReadTracker in=new BytesReadTracker(new DataInputStream(cis));
  SSTableWriter writer=null;
  try {
    writer=createWriter(cfs,totalSize,repairedAt);
    for (    Pair<Long,Long> section : sections) {
      long length=section.right - section.left;
      cis.position(section.left);
      in.reset(0);
      while (in.getBytesRead() < length) {
        writeRow(writer,in,cfs);
        session.progress(desc,ProgressInfo.Direction.IN,cis.getTotalCompressedBytesRead(),totalSize);
      }
    }
    return writer;
  }
 catch (  Throwable e) {
    if (writer != null) {
      try {
        writer.abort();
      }
 catch (      Throwable e2) {
        e.addSuppressed(e2);
      }
    }
    drain(cis,in.getBytesRead());
    if (e instanceof IOException)     throw (IOException)e;
 else     throw Throwables.propagate(e);
  }
}
