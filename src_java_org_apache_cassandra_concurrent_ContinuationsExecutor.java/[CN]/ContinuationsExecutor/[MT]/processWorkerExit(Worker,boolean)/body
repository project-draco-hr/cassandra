{
  if (completedAbruptly)   decrementWorkerCount();
  final ReentrantLock mainLock=this.mainLock;
  mainLock.lock();
  try {
    completedTaskCount+=w.completedTasks;
    workers.remove(w);
  }
  finally {
    mainLock.unlock();
  }
  tryTerminate();
  int c=ctl.get();
  if (runStateLessThan(c,STOP)) {
    if (!completedAbruptly) {
      int min=allowCoreThreadTimeOut ? 0 : corePoolSize;
      if (min == 0 && !workQueue.isEmpty())       min=1;
      if (workerCountOf(c) >= min)       return;
    }
    addWorker(null,false);
  }
}
