{
  TField field;
  iprot.readStructBegin();
  while (true) {
    field=iprot.readFieldBegin();
    if (field.type == TType.STOP) {
      break;
    }
switch (field.id) {
case 1:
      if (field.type == TType.STRING) {
        this.table=iprot.readString();
        this.__isset.table=true;
      }
 else {
        TProtocolUtil.skip(iprot,field.type);
      }
    break;
case 2:
  if (field.type == TType.STRING) {
    this.key=iprot.readString();
    this.__isset.key=true;
  }
 else {
    TProtocolUtil.skip(iprot,field.type);
  }
break;
case 3:
if (field.type == TType.MAP) {
{
  TMap _map0=iprot.readMapBegin();
  this.cfmap=new HashMap<String,List<column_t>>(2 * _map0.size);
  for (int _i1=0; _i1 < _map0.size; ++_i1) {
    String _key2;
    List<column_t> _val3;
    _key2=iprot.readString();
{
      TList _list4=iprot.readListBegin();
      _val3=new ArrayList<column_t>(_list4.size);
      for (int _i5=0; _i5 < _list4.size; ++_i5) {
        column_t _elem6=new column_t();
        _elem6=new column_t();
        _elem6.read(iprot);
        _val3.add(_elem6);
      }
      iprot.readListEnd();
    }
    this.cfmap.put(_key2,_val3);
  }
  iprot.readMapEnd();
}
this.__isset.cfmap=true;
}
 else {
TProtocolUtil.skip(iprot,field.type);
}
break;
case 4:
if (field.type == TType.MAP) {
{
TMap _map7=iprot.readMapBegin();
this.cfmapdel=new HashMap<String,List<column_t>>(2 * _map7.size);
for (int _i8=0; _i8 < _map7.size; ++_i8) {
String _key9;
List<column_t> _val10;
_key9=iprot.readString();
{
  TList _list11=iprot.readListBegin();
  _val10=new ArrayList<column_t>(_list11.size);
  for (int _i12=0; _i12 < _list11.size; ++_i12) {
    column_t _elem13=new column_t();
    _elem13=new column_t();
    _elem13.read(iprot);
    _val10.add(_elem13);
  }
  iprot.readListEnd();
}
this.cfmapdel.put(_key9,_val10);
}
iprot.readMapEnd();
}
this.__isset.cfmapdel=true;
}
 else {
TProtocolUtil.skip(iprot,field.type);
}
break;
default :
TProtocolUtil.skip(iprot,field.type);
break;
}
iprot.readFieldEnd();
}
iprot.readStructEnd();
}
