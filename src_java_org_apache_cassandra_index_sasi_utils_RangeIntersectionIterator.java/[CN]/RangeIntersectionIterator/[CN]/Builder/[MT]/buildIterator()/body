{
  if (statistics.isDisjoint())   return new BounceIntersectionIterator<>(statistics,new PriorityQueue<RangeIterator<K,D>>(1));
switch (strategy) {
case LOOKUP:
    return new LookupIntersectionIterator<>(statistics,ranges);
case BOUNCE:
  return new BounceIntersectionIterator<>(statistics,ranges);
case ADAPTIVE:
return statistics.sizeRatio() <= 0.01d ? new LookupIntersectionIterator<>(statistics,ranges) : new BounceIntersectionIterator<>(statistics,ranges);
default :
throw new IllegalStateException("Unknown strategy: " + strategy);
}
}
