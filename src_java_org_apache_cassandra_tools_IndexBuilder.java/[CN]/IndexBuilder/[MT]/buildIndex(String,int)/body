{
  String indexFile=dataFile.replace("-Data.","-Index.");
  final int bufferSize=64 * 1024;
  IFileWriter indexWriter=SequenceFile.bufferedWriter(indexFile,bufferSize);
  IFileReader dataReader=SequenceFile.bufferedReader(dataFile,bufferSize);
  DataOutputBuffer bufOut=new DataOutputBuffer();
  DataInputBuffer bufIn=new DataInputBuffer();
  BloomFilter bf=new BloomFilter((SSTable.indexInterval() + 1) * blockCount,8);
  try {
    while (!dataReader.isEOF()) {
      bufOut.reset();
      long blockIndexOffset=dataReader.getCurrentPosition();
      dataReader.next(bufOut);
      bufIn.reset(bufOut.getData(),bufOut.getLength());
      String key=bufIn.readUTF();
      if (key.equals(SSTable.blockIndexKey_)) {
        bufIn.readInt();
        int blockSize=bufIn.readInt();
        String largestKey=null;
        for (int i=0; i < blockSize; ++i) {
          String currentKey=bufIn.readUTF();
          bf.add(currentKey);
          if (largestKey == null) {
            largestKey=currentKey;
          }
 else {
            if (currentKey.compareTo(largestKey) > 0) {
              largestKey=currentKey;
            }
          }
          bufIn.readLong();
          bufIn.readLong();
        }
        indexWriter.append(largestKey,BasicUtilities.longToByteArray(blockIndexOffset));
      }
    }
  }
  finally {
    dataReader.close();
    SSTable.storeBloomFilter(dataFile,bf);
    bufOut.reset();
    BloomFilter.serializer().serialize(bf,bufOut);
    byte[] bytes=new byte[bufOut.getLength()];
    System.arraycopy(bufOut.getData(),0,bytes,0,bytes.length);
    indexWriter.close(bytes,bytes.length);
    bufOut.close();
  }
}
