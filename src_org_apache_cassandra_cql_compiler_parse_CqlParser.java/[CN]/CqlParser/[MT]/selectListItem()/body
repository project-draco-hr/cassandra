{
  selectListItem_return retval=new selectListItem_return();
  retval.start=input.LT(1);
  CommonTree root_0=null;
  Token char_literal29=null;
  Token char_literal31=null;
  columnExpression_return columnExpression28=null;
  selectStmt_return selectStmt30=null;
  CommonTree char_literal29_tree=null;
  CommonTree char_literal31_tree=null;
  RewriteRuleTokenStream stream_49=new RewriteRuleTokenStream(adaptor,"token 49");
  RewriteRuleTokenStream stream_48=new RewriteRuleTokenStream(adaptor,"token 48");
  RewriteRuleSubtreeStream stream_selectStmt=new RewriteRuleSubtreeStream(adaptor,"rule selectStmt");
  try {
    int alt9=2;
    int LA9_0=input.LA(1);
    if ((LA9_0 == Identifier)) {
      alt9=1;
    }
 else     if ((LA9_0 == 48)) {
      alt9=2;
    }
 else {
      if (backtracking > 0) {
        failed=true;
        return retval;
      }
      NoViableAltException nvae=new NoViableAltException("147:1: selectListItem : ( columnExpression | '(' selectStmt ')' -> ^( A_SELECT selectStmt ) );",9,0,input);
      throw nvae;
    }
switch (alt9) {
case 1:
{
        root_0=(CommonTree)adaptor.nil();
        pushFollow(FOLLOW_columnExpression_in_selectListItem522);
        columnExpression28=columnExpression();
        _fsp--;
        if (failed)         return retval;
        if (backtracking == 0)         adaptor.addChild(root_0,columnExpression28.getTree());
      }
    break;
case 2:
{
    char_literal29=(Token)input.LT(1);
    match(input,48,FOLLOW_48_in_selectListItem527);
    if (failed)     return retval;
    if (backtracking == 0)     stream_48.add(char_literal29);
    pushFollow(FOLLOW_selectStmt_in_selectListItem529);
    selectStmt30=selectStmt();
    _fsp--;
    if (failed)     return retval;
    if (backtracking == 0)     stream_selectStmt.add(selectStmt30.getTree());
    char_literal31=(Token)input.LT(1);
    match(input,49,FOLLOW_49_in_selectListItem531);
    if (failed)     return retval;
    if (backtracking == 0)     stream_49.add(char_literal31);
    if (backtracking == 0) {
      retval.tree=root_0;
      RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval != null ? retval.tree : null);
      root_0=(CommonTree)adaptor.nil();
{
{
          CommonTree root_1=(CommonTree)adaptor.nil();
          root_1=(CommonTree)adaptor.becomeRoot(adaptor.create(A_SELECT,"A_SELECT"),root_1);
          adaptor.addChild(root_1,stream_selectStmt.next());
          adaptor.addChild(root_0,root_1);
        }
      }
    }
  }
break;
}
retval.stop=input.LT(-1);
if (backtracking == 0) {
retval.tree=(CommonTree)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return retval;
}
