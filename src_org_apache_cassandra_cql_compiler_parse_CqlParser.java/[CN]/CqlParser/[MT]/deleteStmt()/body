{
  deleteStmt_return retval=new deleteStmt_return();
  retval.start=input.LT(1);
  CommonTree root_0=null;
  Token K_DELETE60=null;
  columnSpec_return columnSpec61=null;
  CommonTree K_DELETE60_tree=null;
  RewriteRuleTokenStream stream_K_DELETE=new RewriteRuleTokenStream(adaptor,"token K_DELETE");
  RewriteRuleSubtreeStream stream_columnSpec=new RewriteRuleSubtreeStream(adaptor,"rule columnSpec");
  try {
{
      K_DELETE60=(Token)input.LT(1);
      match(input,K_DELETE,FOLLOW_K_DELETE_in_deleteStmt800);
      if (failed)       return retval;
      if (backtracking == 0)       stream_K_DELETE.add(K_DELETE60);
      pushFollow(FOLLOW_columnSpec_in_deleteStmt802);
      columnSpec61=columnSpec();
      _fsp--;
      if (failed)       return retval;
      if (backtracking == 0)       stream_columnSpec.add(columnSpec61.getTree());
      if (backtracking == 0) {
        retval.tree=root_0;
        RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval != null ? retval.tree : null);
        root_0=(CommonTree)adaptor.nil();
{
{
            CommonTree root_1=(CommonTree)adaptor.nil();
            root_1=(CommonTree)adaptor.becomeRoot(adaptor.create(A_DELETE,"A_DELETE"),root_1);
            adaptor.addChild(root_1,stream_columnSpec.next());
            adaptor.addChild(root_0,root_1);
          }
        }
      }
    }
    retval.stop=input.LT(-1);
    if (backtracking == 0) {
      retval.tree=(CommonTree)adaptor.rulePostProcessing(root_0);
      adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
    }
  }
 catch (  RecognitionException re) {
    reportError(re);
    recover(input,re);
  }
 finally {
  }
  return retval;
}
