{
  stmt_return retval=new stmt_return();
  retval.start=input.LT(1);
  CommonTree root_0=null;
  deleteStmt_return deleteStmt9=null;
  getStmt_return getStmt10=null;
  selectStmt_return selectStmt11=null;
  setStmt_return setStmt12=null;
  try {
    int alt4=4;
switch (input.LA(1)) {
case K_DELETE:
{
        alt4=1;
      }
    break;
case K_GET:
{
    alt4=2;
  }
break;
case K_SELECT:
{
alt4=3;
}
break;
case K_SET:
{
alt4=4;
}
break;
default :
if (backtracking > 0) {
failed=true;
return retval;
}
NoViableAltException nvae=new NoViableAltException("117:1: stmt : ( deleteStmt | getStmt | selectStmt | setStmt );",4,0,input);
throw nvae;
}
switch (alt4) {
case 1:
{
root_0=(CommonTree)adaptor.nil();
pushFollow(FOLLOW_deleteStmt_in_stmt317);
deleteStmt9=deleteStmt();
_fsp--;
if (failed) return retval;
if (backtracking == 0) adaptor.addChild(root_0,deleteStmt9.getTree());
}
break;
case 2:
{
root_0=(CommonTree)adaptor.nil();
pushFollow(FOLLOW_getStmt_in_stmt325);
getStmt10=getStmt();
_fsp--;
if (failed) return retval;
if (backtracking == 0) adaptor.addChild(root_0,getStmt10.getTree());
}
break;
case 3:
{
root_0=(CommonTree)adaptor.nil();
pushFollow(FOLLOW_selectStmt_in_stmt333);
selectStmt11=selectStmt();
_fsp--;
if (failed) return retval;
if (backtracking == 0) adaptor.addChild(root_0,selectStmt11.getTree());
}
break;
case 4:
{
root_0=(CommonTree)adaptor.nil();
pushFollow(FOLLOW_setStmt_in_stmt341);
setStmt12=setStmt();
_fsp--;
if (failed) return retval;
if (backtracking == 0) adaptor.addChild(root_0,setStmt12.getTree());
}
break;
}
retval.stop=input.LT(-1);
if (backtracking == 0) {
retval.tree=(CommonTree)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return retval;
}
