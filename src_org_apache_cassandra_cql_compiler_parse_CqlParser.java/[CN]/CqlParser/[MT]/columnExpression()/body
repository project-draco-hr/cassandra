{
  columnExpression_return retval=new columnExpression_return();
  retval.start=input.LT(1);
  CommonTree root_0=null;
  columnOrSuperColumnName_return columnOrSuperColumnName32=null;
  columnExpressionRest_return columnExpressionRest33=null;
  try {
{
      root_0=(CommonTree)adaptor.nil();
      pushFollow(FOLLOW_columnOrSuperColumnName_in_columnExpression551);
      columnOrSuperColumnName32=columnOrSuperColumnName();
      _fsp--;
      if (failed)       return retval;
      if (backtracking == 0)       adaptor.addChild(root_0,columnOrSuperColumnName32.getTree());
      pushFollow(FOLLOW_columnExpressionRest_in_columnExpression553);
      columnExpressionRest33=columnExpressionRest();
      _fsp--;
      if (failed)       return retval;
      if (backtracking == 0)       adaptor.addChild(root_0,columnExpressionRest33.getTree());
    }
    retval.stop=input.LT(-1);
    if (backtracking == 0) {
      retval.tree=(CommonTree)adaptor.rulePostProcessing(root_0);
      adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
    }
  }
 catch (  RecognitionException re) {
    reportError(re);
    recover(input,re);
  }
 finally {
  }
  return retval;
}
