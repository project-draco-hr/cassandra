{
  columnMapValue_return retval=new columnMapValue_return();
  retval.start=input.LT(1);
  CommonTree root_0=null;
  Token LEFT_BRACE78=null;
  Token COMMA80=null;
  Token RIGHT_BRACE82=null;
  columnMapEntry_return columnMapEntry79=null;
  columnMapEntry_return columnMapEntry81=null;
  CommonTree LEFT_BRACE78_tree=null;
  CommonTree COMMA80_tree=null;
  CommonTree RIGHT_BRACE82_tree=null;
  RewriteRuleTokenStream stream_RIGHT_BRACE=new RewriteRuleTokenStream(adaptor,"token RIGHT_BRACE");
  RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
  RewriteRuleTokenStream stream_LEFT_BRACE=new RewriteRuleTokenStream(adaptor,"token LEFT_BRACE");
  RewriteRuleSubtreeStream stream_columnMapEntry=new RewriteRuleSubtreeStream(adaptor,"rule columnMapEntry");
  try {
{
      LEFT_BRACE78=(Token)input.LT(1);
      match(input,LEFT_BRACE,FOLLOW_LEFT_BRACE_in_columnMapValue992);
      if (failed)       return retval;
      if (backtracking == 0)       stream_LEFT_BRACE.add(LEFT_BRACE78);
      pushFollow(FOLLOW_columnMapEntry_in_columnMapValue994);
      columnMapEntry79=columnMapEntry();
      _fsp--;
      if (failed)       return retval;
      if (backtracking == 0)       stream_columnMapEntry.add(columnMapEntry79.getTree());
      loop16:       do {
        int alt16=2;
        int LA16_0=input.LA(1);
        if ((LA16_0 == COMMA)) {
          alt16=1;
        }
switch (alt16) {
case 1:
{
            COMMA80=(Token)input.LT(1);
            match(input,COMMA,FOLLOW_COMMA_in_columnMapValue997);
            if (failed)             return retval;
            if (backtracking == 0)             stream_COMMA.add(COMMA80);
            pushFollow(FOLLOW_columnMapEntry_in_columnMapValue999);
            columnMapEntry81=columnMapEntry();
            _fsp--;
            if (failed)             return retval;
            if (backtracking == 0)             stream_columnMapEntry.add(columnMapEntry81.getTree());
          }
        break;
default :
      break loop16;
  }
}
 while (true);
RIGHT_BRACE82=(Token)input.LT(1);
match(input,RIGHT_BRACE,FOLLOW_RIGHT_BRACE_in_columnMapValue1003);
if (failed) return retval;
if (backtracking == 0) stream_RIGHT_BRACE.add(RIGHT_BRACE82);
if (backtracking == 0) {
  retval.tree=root_0;
  RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval != null ? retval.tree : null);
  root_0=(CommonTree)adaptor.nil();
{
{
      CommonTree root_1=(CommonTree)adaptor.nil();
      root_1=(CommonTree)adaptor.becomeRoot(adaptor.create(A_COLUMN_MAP_VALUE,"A_COLUMN_MAP_VALUE"),root_1);
      if (!(stream_columnMapEntry.hasNext())) {
        throw new RewriteEarlyExitException();
      }
      while (stream_columnMapEntry.hasNext()) {
        adaptor.addChild(root_1,stream_columnMapEntry.next());
      }
      stream_columnMapEntry.reset();
      adaptor.addChild(root_0,root_1);
    }
  }
}
}
retval.stop=input.LT(-1);
if (backtracking == 0) {
retval.tree=(CommonTree)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return retval;
}
