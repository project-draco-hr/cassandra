{
  setStmt_return retval=new setStmt_return();
  retval.start=input.LT(1);
  CommonTree root_0=null;
  Token K_SET15=null;
  Token char_literal17=null;
  columnSpec_return columnSpec16=null;
  valueExpr_return valueExpr18=null;
  CommonTree K_SET15_tree=null;
  CommonTree char_literal17_tree=null;
  RewriteRuleTokenStream stream_47=new RewriteRuleTokenStream(adaptor,"token 47");
  RewriteRuleTokenStream stream_K_SET=new RewriteRuleTokenStream(adaptor,"token K_SET");
  RewriteRuleSubtreeStream stream_valueExpr=new RewriteRuleSubtreeStream(adaptor,"rule valueExpr");
  RewriteRuleSubtreeStream stream_columnSpec=new RewriteRuleSubtreeStream(adaptor,"rule columnSpec");
  try {
{
      K_SET15=(Token)input.LT(1);
      match(input,K_SET,FOLLOW_K_SET_in_setStmt386);
      if (failed)       return retval;
      if (backtracking == 0)       stream_K_SET.add(K_SET15);
      pushFollow(FOLLOW_columnSpec_in_setStmt388);
      columnSpec16=columnSpec();
      _fsp--;
      if (failed)       return retval;
      if (backtracking == 0)       stream_columnSpec.add(columnSpec16.getTree());
      char_literal17=(Token)input.LT(1);
      match(input,47,FOLLOW_47_in_setStmt390);
      if (failed)       return retval;
      if (backtracking == 0)       stream_47.add(char_literal17);
      pushFollow(FOLLOW_valueExpr_in_setStmt392);
      valueExpr18=valueExpr();
      _fsp--;
      if (failed)       return retval;
      if (backtracking == 0)       stream_valueExpr.add(valueExpr18.getTree());
      if (backtracking == 0) {
        retval.tree=root_0;
        RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval != null ? retval.tree : null);
        root_0=(CommonTree)adaptor.nil();
{
{
            CommonTree root_1=(CommonTree)adaptor.nil();
            root_1=(CommonTree)adaptor.becomeRoot(adaptor.create(A_SET,"A_SET"),root_1);
            adaptor.addChild(root_1,stream_columnSpec.next());
            adaptor.addChild(root_1,stream_valueExpr.next());
            adaptor.addChild(root_0,root_1);
          }
        }
      }
    }
    retval.stop=input.LT(-1);
    if (backtracking == 0) {
      retval.tree=(CommonTree)adaptor.rulePostProcessing(root_0);
      adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
    }
  }
 catch (  RecognitionException re) {
    reportError(re);
    recover(input,re);
  }
 finally {
  }
  return retval;
}
