{
  columnSpec_return retval=new columnSpec_return();
  retval.start=input.LT(1);
  CommonTree root_0=null;
  Token char_literal63=null;
  Token char_literal65=null;
  Token char_literal67=null;
  Token char_literal68=null;
  Token char_literal69=null;
  Token char_literal70=null;
  Token char_literal71=null;
  List list_a=null;
  tableName_return tableName62=null;
  columnFamilyName_return columnFamilyName64=null;
  rowKey_return rowKey66=null;
  RuleReturnScope a=null;
  CommonTree char_literal63_tree=null;
  CommonTree char_literal65_tree=null;
  CommonTree char_literal67_tree=null;
  CommonTree char_literal68_tree=null;
  CommonTree char_literal69_tree=null;
  CommonTree char_literal70_tree=null;
  CommonTree char_literal71_tree=null;
  RewriteRuleTokenStream stream_51=new RewriteRuleTokenStream(adaptor,"token 51");
  RewriteRuleTokenStream stream_52=new RewriteRuleTokenStream(adaptor,"token 52");
  RewriteRuleTokenStream stream_50=new RewriteRuleTokenStream(adaptor,"token 50");
  RewriteRuleSubtreeStream stream_columnOrSuperColumnKey=new RewriteRuleSubtreeStream(adaptor,"rule columnOrSuperColumnKey");
  RewriteRuleSubtreeStream stream_columnFamilyName=new RewriteRuleSubtreeStream(adaptor,"rule columnFamilyName");
  RewriteRuleSubtreeStream stream_tableName=new RewriteRuleSubtreeStream(adaptor,"rule tableName");
  RewriteRuleSubtreeStream stream_rowKey=new RewriteRuleSubtreeStream(adaptor,"rule rowKey");
  try {
{
      pushFollow(FOLLOW_tableName_in_columnSpec827);
      tableName62=tableName();
      _fsp--;
      if (failed)       return retval;
      if (backtracking == 0)       stream_tableName.add(tableName62.getTree());
      char_literal63=(Token)input.LT(1);
      match(input,52,FOLLOW_52_in_columnSpec829);
      if (failed)       return retval;
      if (backtracking == 0)       stream_52.add(char_literal63);
      pushFollow(FOLLOW_columnFamilyName_in_columnSpec831);
      columnFamilyName64=columnFamilyName();
      _fsp--;
      if (failed)       return retval;
      if (backtracking == 0)       stream_columnFamilyName.add(columnFamilyName64.getTree());
      char_literal65=(Token)input.LT(1);
      match(input,50,FOLLOW_50_in_columnSpec833);
      if (failed)       return retval;
      if (backtracking == 0)       stream_50.add(char_literal65);
      pushFollow(FOLLOW_rowKey_in_columnSpec835);
      rowKey66=rowKey();
      _fsp--;
      if (failed)       return retval;
      if (backtracking == 0)       stream_rowKey.add(rowKey66.getTree());
      char_literal67=(Token)input.LT(1);
      match(input,51,FOLLOW_51_in_columnSpec837);
      if (failed)       return retval;
      if (backtracking == 0)       stream_51.add(char_literal67);
      int alt14=2;
      int LA14_0=input.LA(1);
      if ((LA14_0 == 50)) {
        alt14=1;
      }
switch (alt14) {
case 1:
{
          char_literal68=(Token)input.LT(1);
          match(input,50,FOLLOW_50_in_columnSpec850);
          if (failed)           return retval;
          if (backtracking == 0)           stream_50.add(char_literal68);
          pushFollow(FOLLOW_columnOrSuperColumnKey_in_columnSpec854);
          a=columnOrSuperColumnKey();
          _fsp--;
          if (failed)           return retval;
          if (backtracking == 0)           stream_columnOrSuperColumnKey.add(a.getTree());
          if (list_a == null)           list_a=new ArrayList();
          list_a.add(a);
          char_literal69=(Token)input.LT(1);
          match(input,51,FOLLOW_51_in_columnSpec856);
          if (failed)           return retval;
          if (backtracking == 0)           stream_51.add(char_literal69);
          int alt13=2;
          int LA13_0=input.LA(1);
          if ((LA13_0 == 50)) {
            alt13=1;
          }
switch (alt13) {
case 1:
{
              char_literal70=(Token)input.LT(1);
              match(input,50,FOLLOW_50_in_columnSpec872);
              if (failed)               return retval;
              if (backtracking == 0)               stream_50.add(char_literal70);
              pushFollow(FOLLOW_columnOrSuperColumnKey_in_columnSpec876);
              a=columnOrSuperColumnKey();
              _fsp--;
              if (failed)               return retval;
              if (backtracking == 0)               stream_columnOrSuperColumnKey.add(a.getTree());
              if (list_a == null)               list_a=new ArrayList();
              list_a.add(a);
              char_literal71=(Token)input.LT(1);
              match(input,51,FOLLOW_51_in_columnSpec878);
              if (failed)               return retval;
              if (backtracking == 0)               stream_51.add(char_literal71);
            }
          break;
      }
    }
  break;
}
if (backtracking == 0) {
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval != null ? retval.tree : null);
RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"token a",list_a);
root_0=(CommonTree)adaptor.nil();
{
{
    CommonTree root_1=(CommonTree)adaptor.nil();
    root_1=(CommonTree)adaptor.becomeRoot(adaptor.create(A_COLUMN_ACCESS,"A_COLUMN_ACCESS"),root_1);
    adaptor.addChild(root_1,stream_tableName.next());
    adaptor.addChild(root_1,stream_columnFamilyName.next());
    adaptor.addChild(root_1,stream_rowKey.next());
    if (stream_a.hasNext()) {
      if (!(stream_a.hasNext())) {
        throw new RewriteEarlyExitException();
      }
      while (stream_a.hasNext()) {
        adaptor.addChild(root_1,((ParserRuleReturnScope)stream_a.next()).getTree());
      }
      stream_a.reset();
    }
    stream_a.reset();
    adaptor.addChild(root_0,root_1);
  }
}
}
}
retval.stop=input.LT(-1);
if (backtracking == 0) {
retval.tree=(CommonTree)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return retval;
}
