{
  tableExpression_return retval=new tableExpression_return();
  retval.start=input.LT(1);
  CommonTree root_0=null;
  Token char_literal39=null;
  Token char_literal41=null;
  Token char_literal43=null;
  tableName_return tableName38=null;
  columnFamilyName_return columnFamilyName40=null;
  stringVal_return stringVal42=null;
  CommonTree char_literal39_tree=null;
  CommonTree char_literal41_tree=null;
  CommonTree char_literal43_tree=null;
  try {
{
      root_0=(CommonTree)adaptor.nil();
      pushFollow(FOLLOW_tableName_in_tableExpression590);
      tableName38=tableName();
      _fsp--;
      if (failed)       return retval;
      if (backtracking == 0)       adaptor.addChild(root_0,tableName38.getTree());
      char_literal39=(Token)input.LT(1);
      match(input,52,FOLLOW_52_in_tableExpression592);
      if (failed)       return retval;
      if (backtracking == 0) {
        char_literal39_tree=(CommonTree)adaptor.create(char_literal39);
        adaptor.addChild(root_0,char_literal39_tree);
      }
      pushFollow(FOLLOW_columnFamilyName_in_tableExpression594);
      columnFamilyName40=columnFamilyName();
      _fsp--;
      if (failed)       return retval;
      if (backtracking == 0)       adaptor.addChild(root_0,columnFamilyName40.getTree());
      char_literal41=(Token)input.LT(1);
      match(input,50,FOLLOW_50_in_tableExpression596);
      if (failed)       return retval;
      if (backtracking == 0) {
        char_literal41_tree=(CommonTree)adaptor.create(char_literal41);
        adaptor.addChild(root_0,char_literal41_tree);
      }
      pushFollow(FOLLOW_stringVal_in_tableExpression598);
      stringVal42=stringVal();
      _fsp--;
      if (failed)       return retval;
      if (backtracking == 0)       adaptor.addChild(root_0,stringVal42.getTree());
      char_literal43=(Token)input.LT(1);
      match(input,51,FOLLOW_51_in_tableExpression600);
      if (failed)       return retval;
      if (backtracking == 0) {
        char_literal43_tree=(CommonTree)adaptor.create(char_literal43);
        adaptor.addChild(root_0,char_literal43_tree);
      }
    }
    retval.stop=input.LT(-1);
    if (backtracking == 0) {
      retval.tree=(CommonTree)adaptor.rulePostProcessing(root_0);
      adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
    }
  }
 catch (  RecognitionException re) {
    reportError(re);
    recover(input,re);
  }
 finally {
  }
  return retval;
}
