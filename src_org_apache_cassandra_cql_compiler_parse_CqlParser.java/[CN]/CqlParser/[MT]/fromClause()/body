{
  fromClause_return retval=new fromClause_return();
  retval.start=input.LT(1);
  CommonTree root_0=null;
  Token K_FROM44=null;
  tableExpression_return tableExpression45=null;
  CommonTree K_FROM44_tree=null;
  RewriteRuleTokenStream stream_K_FROM=new RewriteRuleTokenStream(adaptor,"token K_FROM");
  RewriteRuleSubtreeStream stream_tableExpression=new RewriteRuleSubtreeStream(adaptor,"rule tableExpression");
  try {
{
      K_FROM44=(Token)input.LT(1);
      match(input,K_FROM,FOLLOW_K_FROM_in_fromClause613);
      if (failed)       return retval;
      if (backtracking == 0)       stream_K_FROM.add(K_FROM44);
      pushFollow(FOLLOW_tableExpression_in_fromClause615);
      tableExpression45=tableExpression();
      _fsp--;
      if (failed)       return retval;
      if (backtracking == 0)       stream_tableExpression.add(tableExpression45.getTree());
      if (backtracking == 0) {
        retval.tree=root_0;
        RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval != null ? retval.tree : null);
        root_0=(CommonTree)adaptor.nil();
{
{
            CommonTree root_1=(CommonTree)adaptor.nil();
            root_1=(CommonTree)adaptor.becomeRoot(adaptor.create(A_FROM,"A_FROM"),root_1);
            adaptor.addChild(root_1,stream_tableExpression.next());
            adaptor.addChild(root_0,root_1);
          }
        }
      }
    }
    retval.stop=input.LT(-1);
    if (backtracking == 0) {
      retval.tree=(CommonTree)adaptor.rulePostProcessing(root_0);
      adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
    }
  }
 catch (  RecognitionException re) {
    reportError(re);
    recover(input,re);
  }
 finally {
  }
  return retval;
}
