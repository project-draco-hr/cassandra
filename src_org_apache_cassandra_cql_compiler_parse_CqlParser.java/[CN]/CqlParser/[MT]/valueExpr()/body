{
  valueExpr_return retval=new valueExpr_return();
  retval.start=input.LT(1);
  CommonTree root_0=null;
  cellValue_return cellValue74=null;
  columnMapValue_return columnMapValue75=null;
  superColumnMapValue_return superColumnMapValue76=null;
  try {
    int alt15=3;
    int LA15_0=input.LA(1);
    if ((LA15_0 == StringLiteral || LA15_0 == 53)) {
      alt15=1;
    }
 else     if ((LA15_0 == LEFT_BRACE)) {
      int LA15_2=input.LA(2);
      if ((LA15_2 == StringLiteral || LA15_2 == 53)) {
        int LA15_3=input.LA(3);
        if ((LA15_3 == ASSOC)) {
          int LA15_4=input.LA(4);
          if ((LA15_4 == LEFT_BRACE)) {
            alt15=3;
          }
 else           if ((LA15_4 == StringLiteral || LA15_4 == 53)) {
            alt15=2;
          }
 else {
            if (backtracking > 0) {
              failed=true;
              return retval;
            }
            NoViableAltException nvae=new NoViableAltException("201:1: valueExpr : ( cellValue | columnMapValue | superColumnMapValue );",15,4,input);
            throw nvae;
          }
        }
 else {
          if (backtracking > 0) {
            failed=true;
            return retval;
          }
          NoViableAltException nvae=new NoViableAltException("201:1: valueExpr : ( cellValue | columnMapValue | superColumnMapValue );",15,3,input);
          throw nvae;
        }
      }
 else {
        if (backtracking > 0) {
          failed=true;
          return retval;
        }
        NoViableAltException nvae=new NoViableAltException("201:1: valueExpr : ( cellValue | columnMapValue | superColumnMapValue );",15,2,input);
        throw nvae;
      }
    }
 else {
      if (backtracking > 0) {
        failed=true;
        return retval;
      }
      NoViableAltException nvae=new NoViableAltException("201:1: valueExpr : ( cellValue | columnMapValue | superColumnMapValue );",15,0,input);
      throw nvae;
    }
switch (alt15) {
case 1:
{
        root_0=(CommonTree)adaptor.nil();
        pushFollow(FOLLOW_cellValue_in_valueExpr950);
        cellValue74=cellValue();
        _fsp--;
        if (failed)         return retval;
        if (backtracking == 0)         adaptor.addChild(root_0,cellValue74.getTree());
      }
    break;
case 2:
{
    root_0=(CommonTree)adaptor.nil();
    pushFollow(FOLLOW_columnMapValue_in_valueExpr958);
    columnMapValue75=columnMapValue();
    _fsp--;
    if (failed)     return retval;
    if (backtracking == 0)     adaptor.addChild(root_0,columnMapValue75.getTree());
  }
break;
case 3:
{
root_0=(CommonTree)adaptor.nil();
pushFollow(FOLLOW_superColumnMapValue_in_valueExpr966);
superColumnMapValue76=superColumnMapValue();
_fsp--;
if (failed) return retval;
if (backtracking == 0) adaptor.addChild(root_0,superColumnMapValue76.getTree());
}
break;
}
retval.stop=input.LT(-1);
if (backtracking == 0) {
retval.tree=(CommonTree)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return retval;
}
