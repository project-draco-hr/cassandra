{
  whereClause_return retval=new whereClause_return();
  retval.start=input.LT(1);
  CommonTree root_0=null;
  Token K_WHERE46=null;
  Token K_WHERE48=null;
  keyInClause_return keyInClause47=null;
  keyExactMatch_return keyExactMatch49=null;
  CommonTree K_WHERE46_tree=null;
  CommonTree K_WHERE48_tree=null;
  RewriteRuleTokenStream stream_K_WHERE=new RewriteRuleTokenStream(adaptor,"token K_WHERE");
  RewriteRuleSubtreeStream stream_keyExactMatch=new RewriteRuleSubtreeStream(adaptor,"rule keyExactMatch");
  RewriteRuleSubtreeStream stream_keyInClause=new RewriteRuleSubtreeStream(adaptor,"rule keyInClause");
  try {
    int alt11=2;
    int LA11_0=input.LA(1);
    if ((LA11_0 == K_WHERE)) {
      int LA11_1=input.LA(2);
      if ((LA11_1 == Identifier)) {
        int LA11_2=input.LA(3);
        if ((LA11_2 == 47)) {
          alt11=2;
        }
 else         if ((LA11_2 == K_IN)) {
          alt11=1;
        }
 else {
          if (backtracking > 0) {
            failed=true;
            return retval;
          }
          NoViableAltException nvae=new NoViableAltException("167:1: whereClause : ( K_WHERE keyInClause -> ^( A_WHERE keyInClause ) | K_WHERE keyExactMatch -> ^( A_WHERE keyExactMatch ) );",11,2,input);
          throw nvae;
        }
      }
 else {
        if (backtracking > 0) {
          failed=true;
          return retval;
        }
        NoViableAltException nvae=new NoViableAltException("167:1: whereClause : ( K_WHERE keyInClause -> ^( A_WHERE keyInClause ) | K_WHERE keyExactMatch -> ^( A_WHERE keyExactMatch ) );",11,1,input);
        throw nvae;
      }
    }
 else {
      if (backtracking > 0) {
        failed=true;
        return retval;
      }
      NoViableAltException nvae=new NoViableAltException("167:1: whereClause : ( K_WHERE keyInClause -> ^( A_WHERE keyInClause ) | K_WHERE keyExactMatch -> ^( A_WHERE keyExactMatch ) );",11,0,input);
      throw nvae;
    }
switch (alt11) {
case 1:
{
        K_WHERE46=(Token)input.LT(1);
        match(input,K_WHERE,FOLLOW_K_WHERE_in_whereClause640);
        if (failed)         return retval;
        if (backtracking == 0)         stream_K_WHERE.add(K_WHERE46);
        pushFollow(FOLLOW_keyInClause_in_whereClause642);
        keyInClause47=keyInClause();
        _fsp--;
        if (failed)         return retval;
        if (backtracking == 0)         stream_keyInClause.add(keyInClause47.getTree());
        if (backtracking == 0) {
          retval.tree=root_0;
          RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval != null ? retval.tree : null);
          root_0=(CommonTree)adaptor.nil();
{
{
              CommonTree root_1=(CommonTree)adaptor.nil();
              root_1=(CommonTree)adaptor.becomeRoot(adaptor.create(A_WHERE,"A_WHERE"),root_1);
              adaptor.addChild(root_1,stream_keyInClause.next());
              adaptor.addChild(root_0,root_1);
            }
          }
        }
      }
    break;
case 2:
{
    K_WHERE48=(Token)input.LT(1);
    match(input,K_WHERE,FOLLOW_K_WHERE_in_whereClause660);
    if (failed)     return retval;
    if (backtracking == 0)     stream_K_WHERE.add(K_WHERE48);
    pushFollow(FOLLOW_keyExactMatch_in_whereClause662);
    keyExactMatch49=keyExactMatch();
    _fsp--;
    if (failed)     return retval;
    if (backtracking == 0)     stream_keyExactMatch.add(keyExactMatch49.getTree());
    if (backtracking == 0) {
      retval.tree=root_0;
      RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval != null ? retval.tree : null);
      root_0=(CommonTree)adaptor.nil();
{
{
          CommonTree root_1=(CommonTree)adaptor.nil();
          root_1=(CommonTree)adaptor.becomeRoot(adaptor.create(A_WHERE,"A_WHERE"),root_1);
          adaptor.addChild(root_1,stream_keyExactMatch.next());
          adaptor.addChild(root_0,root_1);
        }
      }
    }
  }
break;
}
retval.stop=input.LT(-1);
if (backtracking == 0) {
retval.tree=(CommonTree)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return retval;
}
