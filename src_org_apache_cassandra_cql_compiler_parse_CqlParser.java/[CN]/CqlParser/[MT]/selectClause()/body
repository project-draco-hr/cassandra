{
  selectClause_return retval=new selectClause_return();
  retval.start=input.LT(1);
  CommonTree root_0=null;
  Token K_SELECT23=null;
  selectList_return selectList24=null;
  CommonTree K_SELECT23_tree=null;
  RewriteRuleTokenStream stream_K_SELECT=new RewriteRuleTokenStream(adaptor,"token K_SELECT");
  RewriteRuleSubtreeStream stream_selectList=new RewriteRuleSubtreeStream(adaptor,"rule selectList");
  try {
{
      K_SELECT23=(Token)input.LT(1);
      match(input,K_SELECT,FOLLOW_K_SELECT_in_selectClause483);
      if (failed)       return retval;
      if (backtracking == 0)       stream_K_SELECT.add(K_SELECT23);
      pushFollow(FOLLOW_selectList_in_selectClause485);
      selectList24=selectList();
      _fsp--;
      if (failed)       return retval;
      if (backtracking == 0)       stream_selectList.add(selectList24.getTree());
      if (backtracking == 0) {
        retval.tree=root_0;
        RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval != null ? retval.tree : null);
        root_0=(CommonTree)adaptor.nil();
{
{
            CommonTree root_1=(CommonTree)adaptor.nil();
            root_1=(CommonTree)adaptor.becomeRoot(adaptor.create(A_SELECT_CLAUSE,"A_SELECT_CLAUSE"),root_1);
            adaptor.addChild(root_1,stream_selectList.next());
            adaptor.addChild(root_0,root_1);
          }
        }
      }
    }
    retval.stop=input.LT(-1);
    if (backtracking == 0) {
      retval.tree=(CommonTree)adaptor.rulePostProcessing(root_0);
      adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
    }
  }
 catch (  RecognitionException re) {
    reportError(re);
    recover(input,re);
  }
 finally {
  }
  return retval;
}
