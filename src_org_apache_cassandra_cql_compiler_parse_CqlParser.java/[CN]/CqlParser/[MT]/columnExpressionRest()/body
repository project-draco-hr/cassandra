{
  columnExpressionRest_return retval=new columnExpressionRest_return();
  retval.start=input.LT(1);
  CommonTree root_0=null;
  Token char_literal34=null;
  Token char_literal36=null;
  stringVal_return stringVal35=null;
  columnExpressionRest_return columnExpressionRest37=null;
  CommonTree char_literal34_tree=null;
  CommonTree char_literal36_tree=null;
  try {
    int alt10=2;
    int LA10_0=input.LA(1);
    if ((LA10_0 == EOF || LA10_0 == SEMICOLON || (LA10_0 >= K_FROM && LA10_0 <= K_WHERE) || LA10_0 == K_LIMIT || LA10_0 == COMMA || LA10_0 == 49)) {
      alt10=1;
    }
 else     if ((LA10_0 == 50)) {
      alt10=2;
    }
 else {
      if (backtracking > 0) {
        failed=true;
        return retval;
      }
      NoViableAltException nvae=new NoViableAltException("155:1: columnExpressionRest : ( | '[' stringVal ']' columnExpressionRest );",10,0,input);
      throw nvae;
    }
switch (alt10) {
case 1:
{
        root_0=(CommonTree)adaptor.nil();
      }
    break;
case 2:
{
    root_0=(CommonTree)adaptor.nil();
    char_literal34=(Token)input.LT(1);
    match(input,50,FOLLOW_50_in_columnExpressionRest570);
    if (failed)     return retval;
    if (backtracking == 0) {
      char_literal34_tree=(CommonTree)adaptor.create(char_literal34);
      adaptor.addChild(root_0,char_literal34_tree);
    }
    pushFollow(FOLLOW_stringVal_in_columnExpressionRest572);
    stringVal35=stringVal();
    _fsp--;
    if (failed)     return retval;
    if (backtracking == 0)     adaptor.addChild(root_0,stringVal35.getTree());
    char_literal36=(Token)input.LT(1);
    match(input,51,FOLLOW_51_in_columnExpressionRest574);
    if (failed)     return retval;
    if (backtracking == 0) {
      char_literal36_tree=(CommonTree)adaptor.create(char_literal36);
      adaptor.addChild(root_0,char_literal36_tree);
    }
    pushFollow(FOLLOW_columnExpressionRest_in_columnExpressionRest576);
    columnExpressionRest37=columnExpressionRest();
    _fsp--;
    if (failed)     return retval;
    if (backtracking == 0)     adaptor.addChild(root_0,columnExpressionRest37.getTree());
  }
break;
}
retval.stop=input.LT(-1);
if (backtracking == 0) {
retval.tree=(CommonTree)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return retval;
}
