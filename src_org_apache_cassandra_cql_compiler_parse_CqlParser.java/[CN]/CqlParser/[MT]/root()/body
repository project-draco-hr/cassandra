{
  root_return retval=new root_return();
  retval.start=input.LT(1);
  CommonTree root_0=null;
  Token SEMICOLON2=null;
  Token EOF3=null;
  Token K_EXPLAIN4=null;
  Token K_PLAN5=null;
  Token SEMICOLON7=null;
  Token EOF8=null;
  stmt_return stmt1=null;
  stmt_return stmt6=null;
  CommonTree SEMICOLON2_tree=null;
  CommonTree EOF3_tree=null;
  CommonTree K_EXPLAIN4_tree=null;
  CommonTree K_PLAN5_tree=null;
  CommonTree SEMICOLON7_tree=null;
  CommonTree EOF8_tree=null;
  RewriteRuleTokenStream stream_K_EXPLAIN=new RewriteRuleTokenStream(adaptor,"token K_EXPLAIN");
  RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
  RewriteRuleTokenStream stream_EOF=new RewriteRuleTokenStream(adaptor,"token EOF");
  RewriteRuleTokenStream stream_K_PLAN=new RewriteRuleTokenStream(adaptor,"token K_PLAN");
  RewriteRuleSubtreeStream stream_stmt=new RewriteRuleSubtreeStream(adaptor,"rule stmt");
  try {
    int alt3=2;
    int LA3_0=input.LA(1);
    if (((LA3_0 >= K_GET && LA3_0 <= K_SELECT) || LA3_0 == K_DELETE)) {
      alt3=1;
    }
 else     if ((LA3_0 == K_EXPLAIN)) {
      alt3=2;
    }
 else {
      if (backtracking > 0) {
        failed=true;
        return retval;
      }
      NoViableAltException nvae=new NoViableAltException("112:1: root : ( stmt ( SEMICOLON )? EOF -> stmt | K_EXPLAIN K_PLAN stmt ( SEMICOLON )? EOF -> ^( A_EXPLAIN_PLAN stmt ) );",3,0,input);
      throw nvae;
    }
switch (alt3) {
case 1:
{
        pushFollow(FOLLOW_stmt_in_root266);
        stmt1=stmt();
        _fsp--;
        if (failed)         return retval;
        if (backtracking == 0)         stream_stmt.add(stmt1.getTree());
        int alt1=2;
        int LA1_0=input.LA(1);
        if ((LA1_0 == SEMICOLON)) {
          alt1=1;
        }
switch (alt1) {
case 1:
{
            SEMICOLON2=(Token)input.LT(1);
            match(input,SEMICOLON,FOLLOW_SEMICOLON_in_root268);
            if (failed)             return retval;
            if (backtracking == 0)             stream_SEMICOLON.add(SEMICOLON2);
          }
        break;
    }
    EOF3=(Token)input.LT(1);
    match(input,EOF,FOLLOW_EOF_in_root271);
    if (failed)     return retval;
    if (backtracking == 0)     stream_EOF.add(EOF3);
    if (backtracking == 0) {
      retval.tree=root_0;
      RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval != null ? retval.tree : null);
      root_0=(CommonTree)adaptor.nil();
{
        adaptor.addChild(root_0,stream_stmt.next());
      }
    }
  }
break;
case 2:
{
K_EXPLAIN4=(Token)input.LT(1);
match(input,K_EXPLAIN,FOLLOW_K_EXPLAIN_in_root283);
if (failed) return retval;
if (backtracking == 0) stream_K_EXPLAIN.add(K_EXPLAIN4);
K_PLAN5=(Token)input.LT(1);
match(input,K_PLAN,FOLLOW_K_PLAN_in_root285);
if (failed) return retval;
if (backtracking == 0) stream_K_PLAN.add(K_PLAN5);
pushFollow(FOLLOW_stmt_in_root287);
stmt6=stmt();
_fsp--;
if (failed) return retval;
if (backtracking == 0) stream_stmt.add(stmt6.getTree());
int alt2=2;
int LA2_0=input.LA(1);
if ((LA2_0 == SEMICOLON)) {
  alt2=1;
}
switch (alt2) {
case 1:
{
    SEMICOLON7=(Token)input.LT(1);
    match(input,SEMICOLON,FOLLOW_SEMICOLON_in_root289);
    if (failed)     return retval;
    if (backtracking == 0)     stream_SEMICOLON.add(SEMICOLON7);
  }
break;
}
EOF8=(Token)input.LT(1);
match(input,EOF,FOLLOW_EOF_in_root292);
if (failed) return retval;
if (backtracking == 0) stream_EOF.add(EOF8);
if (backtracking == 0) {
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval != null ? retval.tree : null);
root_0=(CommonTree)adaptor.nil();
{
{
  CommonTree root_1=(CommonTree)adaptor.nil();
  root_1=(CommonTree)adaptor.becomeRoot(adaptor.create(A_EXPLAIN_PLAN,"A_EXPLAIN_PLAN"),root_1);
  adaptor.addChild(root_1,stream_stmt.next());
  adaptor.addChild(root_0,root_1);
}
}
}
}
break;
}
retval.stop=input.LT(-1);
if (backtracking == 0) {
retval.tree=(CommonTree)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return retval;
}
