{
  columnMapEntry_return retval=new columnMapEntry_return();
  retval.start=input.LT(1);
  CommonTree root_0=null;
  Token ASSOC89=null;
  columnKey_return columnKey88=null;
  cellValue_return cellValue90=null;
  CommonTree ASSOC89_tree=null;
  RewriteRuleTokenStream stream_ASSOC=new RewriteRuleTokenStream(adaptor,"token ASSOC");
  RewriteRuleSubtreeStream stream_columnKey=new RewriteRuleSubtreeStream(adaptor,"rule columnKey");
  RewriteRuleSubtreeStream stream_cellValue=new RewriteRuleSubtreeStream(adaptor,"rule cellValue");
  try {
{
      pushFollow(FOLLOW_columnKey_in_columnMapEntry1072);
      columnKey88=columnKey();
      _fsp--;
      if (failed)       return retval;
      if (backtracking == 0)       stream_columnKey.add(columnKey88.getTree());
      ASSOC89=(Token)input.LT(1);
      match(input,ASSOC,FOLLOW_ASSOC_in_columnMapEntry1074);
      if (failed)       return retval;
      if (backtracking == 0)       stream_ASSOC.add(ASSOC89);
      pushFollow(FOLLOW_cellValue_in_columnMapEntry1076);
      cellValue90=cellValue();
      _fsp--;
      if (failed)       return retval;
      if (backtracking == 0)       stream_cellValue.add(cellValue90.getTree());
      if (backtracking == 0) {
        retval.tree=root_0;
        RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval != null ? retval.tree : null);
        root_0=(CommonTree)adaptor.nil();
{
{
            CommonTree root_1=(CommonTree)adaptor.nil();
            root_1=(CommonTree)adaptor.becomeRoot(adaptor.create(A_COLUMN_MAP_ENTRY,"A_COLUMN_MAP_ENTRY"),root_1);
            adaptor.addChild(root_1,stream_columnKey.next());
            adaptor.addChild(root_1,stream_cellValue.next());
            adaptor.addChild(root_0,root_1);
          }
        }
      }
    }
    retval.stop=input.LT(-1);
    if (backtracking == 0) {
      retval.tree=(CommonTree)adaptor.rulePostProcessing(root_0);
      adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
    }
  }
 catch (  RecognitionException re) {
    reportError(re);
    recover(input,re);
  }
 finally {
  }
  return retval;
}
