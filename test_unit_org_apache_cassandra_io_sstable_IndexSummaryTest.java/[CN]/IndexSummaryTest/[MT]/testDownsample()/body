{
  final int NUM_KEYS=4096;
  final int INDEX_INTERVAL=128;
  final int ORIGINAL_NUM_ENTRIES=NUM_KEYS / INDEX_INTERVAL;
  Pair<List<DecoratedKey>,IndexSummary> random=generateRandomIndex(NUM_KEYS,INDEX_INTERVAL);
  List<DecoratedKey> keys=random.left;
  IndexSummary original=random.right;
  for (int i=0; i < ORIGINAL_NUM_ENTRIES; i++)   assertEquals(keys.get(i * INDEX_INTERVAL).key,ByteBuffer.wrap(original.getKey(i)));
  List<Integer> samplePattern=Downsampling.getSamplingPattern(BASE_SAMPLING_LEVEL);
  int downsamplingRound=1;
  for (int samplingLevel=BASE_SAMPLING_LEVEL - 1; samplingLevel >= MIN_SAMPLING_LEVEL; samplingLevel--) {
    IndexSummary downsampled=downsample(original,samplingLevel,DatabaseDescriptor.getPartitioner());
    assertEquals(entriesAtSamplingLevel(samplingLevel,original.getMaxNumberOfEntries()),downsampled.size());
    int sampledCount=0;
    List<Integer> skipStartPoints=samplePattern.subList(0,downsamplingRound);
    for (int i=0; i < ORIGINAL_NUM_ENTRIES; i++) {
      if (!shouldSkip(i,skipStartPoints)) {
        assertEquals(keys.get(i * INDEX_INTERVAL).key,ByteBuffer.wrap(downsampled.getKey(sampledCount)));
        sampledCount++;
      }
    }
    downsamplingRound++;
  }
  IndexSummary previous=original;
  downsamplingRound=1;
  for (int downsampleLevel=BASE_SAMPLING_LEVEL - 1; downsampleLevel >= MIN_SAMPLING_LEVEL; downsampleLevel--) {
    IndexSummary downsampled=downsample(previous,downsampleLevel,DatabaseDescriptor.getPartitioner());
    assertEquals(entriesAtSamplingLevel(downsampleLevel,original.getMaxNumberOfEntries()),downsampled.size());
    int sampledCount=0;
    List<Integer> skipStartPoints=samplePattern.subList(0,downsamplingRound);
    for (int i=0; i < ORIGINAL_NUM_ENTRIES; i++) {
      if (!shouldSkip(i,skipStartPoints)) {
        assertEquals(keys.get(i * INDEX_INTERVAL).key,ByteBuffer.wrap(downsampled.getKey(sampledCount)));
        sampledCount++;
      }
    }
    previous=downsampled;
    downsamplingRound++;
  }
}
