{
  CommitLogSegmentManagerCDC cdcMgr=(CommitLogSegmentManagerCDC)CommitLog.instance.segmentManager;
  createTable("CREATE TABLE %s (idx int, data text, primary key(idx)) WITH cdc=false;");
  for (int i=0; i < 8; i++) {
    new RowUpdateBuilder(currentTableMetadata(),0,i).add("data",randomizeBuffer(DatabaseDescriptor.getCommitLogSegmentSize() / 4)).build().apply();
  }
  Assert.assertEquals(4 * DatabaseDescriptor.getCommitLogSegmentSize(),cdcMgr.updateCDCTotalSize());
  expectCurrentCDCState(CDCState.PERMITTED);
  CommitLog.instance.forceRecycleAllSegments();
  Assert.assertEquals(0,new File(DatabaseDescriptor.getCDCLogLocation()).listFiles().length);
  createTable("CREATE TABLE %s (idx int, data text, primary key(idx)) WITH cdc=true;");
  for (int i=0; i < 8; i++) {
    new RowUpdateBuilder(currentTableMetadata(),0,i).add("data",randomizeBuffer(DatabaseDescriptor.getCommitLogSegmentSize() / 4)).build().apply();
  }
  Assert.assertEquals(4 * DatabaseDescriptor.getCommitLogSegmentSize(),cdcMgr.updateCDCTotalSize());
  CommitLog.instance.forceRecycleAllSegments();
  expectCurrentCDCState(CDCState.PERMITTED);
  cdcMgr.awaitManagementTasksCompletion();
  int seen=getCDCRawCount();
  Assert.assertTrue("Expected >3 files in cdc_raw, saw: " + seen,seen >= 3);
}
