{
  if (!outputFormat.isEmpty() && !"json".equals(outputFormat) && !"yaml".equals(outputFormat)) {
    throw new IllegalArgumentException("arguments for -F are json,yaml only.");
  }
  TableStats.OptionFilter filter=new OptionFilter(ignore,tableNames);
  ArrayListMultimap<String,ColumnFamilyStoreMBean> selectedTableMbeans=ArrayListMultimap.create();
  Map<String,StatsKeyspace> keyspaceStats=new HashMap<>();
  Iterator<Map.Entry<String,ColumnFamilyStoreMBean>> tableMBeans=probe.getColumnFamilyStoreMBeanProxies();
  while (tableMBeans.hasNext()) {
    Map.Entry<String,ColumnFamilyStoreMBean> entry=tableMBeans.next();
    String keyspaceName=entry.getKey();
    ColumnFamilyStoreMBean tableProxy=entry.getValue();
    if (filter.isKeyspaceIncluded(keyspaceName)) {
      StatsKeyspace stats=keyspaceStats.get(keyspaceName);
      if (stats == null) {
        stats=new StatsKeyspace(probe,keyspaceName);
        keyspaceStats.put(keyspaceName,stats);
      }
      stats.add(tableProxy);
      if (filter.isTableIncluded(keyspaceName,tableProxy.getTableName()))       selectedTableMbeans.put(keyspaceName,tableProxy);
    }
  }
  filter.verifyKeyspaces(probe.getKeyspaces());
  filter.verifyTables();
  StatsHolder holder=new StatsHolder();
  for (  Map.Entry<String,Collection<ColumnFamilyStoreMBean>> entry : selectedTableMbeans.asMap().entrySet()) {
    String keyspaceName=entry.getKey();
    Collection<ColumnFamilyStoreMBean> tables=entry.getValue();
    StatsKeyspace statsKeyspace=keyspaceStats.get(keyspaceName);
    for (    ColumnFamilyStoreMBean table : tables) {
      String tableName=table.getTableName();
      StatsTable statsTable=new StatsTable();
      statsTable.name=tableName;
      statsTable.isIndex=tableName.contains(".");
      statsTable.sstableCount=probe.getColumnFamilyMetric(keyspaceName,tableName,"LiveSSTableCount");
      int[] leveledSStables=table.getSSTableCountPerLevel();
      if (leveledSStables != null) {
        statsTable.isLeveledSstable=true;
        for (int level=0; level < leveledSStables.length; level++) {
          int count=leveledSStables[level];
          long maxCount=4L;
          if (level > 0)           maxCount=(long)Math.pow(10,level);
          statsTable.sstablesInEachLevel.add(count + ((count > maxCount) ? "/" + maxCount : ""));
        }
      }
      Long memtableOffHeapSize=null;
      Long bloomFilterOffHeapSize=null;
      Long indexSummaryOffHeapSize=null;
      Long compressionMetadataOffHeapSize=null;
      Long offHeapSize=null;
      try {
        memtableOffHeapSize=(Long)probe.getColumnFamilyMetric(keyspaceName,tableName,"MemtableOffHeapSize");
        bloomFilterOffHeapSize=(Long)probe.getColumnFamilyMetric(keyspaceName,tableName,"BloomFilterOffHeapMemoryUsed");
        indexSummaryOffHeapSize=(Long)probe.getColumnFamilyMetric(keyspaceName,tableName,"IndexSummaryOffHeapMemoryUsed");
        compressionMetadataOffHeapSize=(Long)probe.getColumnFamilyMetric(keyspaceName,tableName,"CompressionMetadataOffHeapMemoryUsed");
        offHeapSize=memtableOffHeapSize + bloomFilterOffHeapSize + indexSummaryOffHeapSize+ compressionMetadataOffHeapSize;
      }
 catch (      RuntimeException e) {
        if (!(e.getCause() instanceof InstanceNotFoundException))         throw e;
      }
      statsTable.spaceUsedLive=format((Long)probe.getColumnFamilyMetric(keyspaceName,tableName,"LiveDiskSpaceUsed"),humanReadable);
      statsTable.spaceUsedTotal=format((Long)probe.getColumnFamilyMetric(keyspaceName,tableName,"TotalDiskSpaceUsed"),humanReadable);
      statsTable.spaceUsedBySnapshotsTotal=format((Long)probe.getColumnFamilyMetric(keyspaceName,tableName,"SnapshotsSize"),humanReadable);
      if (offHeapSize != null) {
        statsTable.offHeapUsed=true;
        statsTable.offHeapMemoryUsedTotal=format(offHeapSize,humanReadable);
      }
      statsTable.sstableCompressionRatio=probe.getColumnFamilyMetric(keyspaceName,tableName,"CompressionRatio");
      Object estimatedPartitionCount=probe.getColumnFamilyMetric(keyspaceName,tableName,"EstimatedPartitionCount");
      if (Long.valueOf(-1L).equals(estimatedPartitionCount)) {
        estimatedPartitionCount=0L;
      }
      statsTable.numberOfKeysEstimate=estimatedPartitionCount;
      statsTable.memtableCellCount=probe.getColumnFamilyMetric(keyspaceName,tableName,"MemtableColumnsCount");
      statsTable.memtableDataSize=format((Long)probe.getColumnFamilyMetric(keyspaceName,tableName,"MemtableLiveDataSize"),humanReadable);
      if (memtableOffHeapSize != null) {
        statsTable.memtableOffHeapUsed=true;
        statsTable.memtableOffHeapMemoryUsed=format(memtableOffHeapSize,humanReadable);
      }
      statsTable.memtableSwitchCount=probe.getColumnFamilyMetric(keyspaceName,tableName,"MemtableSwitchCount");
      statsTable.localReadCount=((CassandraMetricsRegistry.JmxTimerMBean)probe.getColumnFamilyMetric(keyspaceName,tableName,"ReadLatency")).getCount();
      double localReadLatency=((CassandraMetricsRegistry.JmxTimerMBean)probe.getColumnFamilyMetric(keyspaceName,tableName,"ReadLatency")).getMean() / 1000;
      double localRLatency=localReadLatency > 0 ? localReadLatency : Double.NaN;
      statsTable.localReadLatencyMs=localRLatency;
      statsTable.localWriteCount=((CassandraMetricsRegistry.JmxTimerMBean)probe.getColumnFamilyMetric(keyspaceName,tableName,"WriteLatency")).getCount();
      double localWriteLatency=((CassandraMetricsRegistry.JmxTimerMBean)probe.getColumnFamilyMetric(keyspaceName,tableName,"WriteLatency")).getMean() / 1000;
      double localWLatency=localWriteLatency > 0 ? localWriteLatency : Double.NaN;
      statsTable.localWriteLatencyMs=localWLatency;
      statsTable.pendingFlushes=probe.getColumnFamilyMetric(keyspaceName,tableName,"PendingFlushes");
      statsTable.bloomFilterFalsePositives=probe.getColumnFamilyMetric(keyspaceName,tableName,"BloomFilterFalsePositives");
      statsTable.bloomFilterFalseRatio=probe.getColumnFamilyMetric(keyspaceName,tableName,"RecentBloomFilterFalseRatio");
      statsTable.bloomFilterSpaceUsed=format((Long)probe.getColumnFamilyMetric(keyspaceName,tableName,"BloomFilterDiskSpaceUsed"),humanReadable);
      if (bloomFilterOffHeapSize != null) {
        statsTable.bloomFilterOffHeapUsed=true;
        statsTable.bloomFilterOffHeapMemoryUsed=format(bloomFilterOffHeapSize,humanReadable);
      }
      if (indexSummaryOffHeapSize != null) {
        statsTable.indexSummaryOffHeapUsed=true;
        statsTable.indexSummaryOffHeapMemoryUsed=format(indexSummaryOffHeapSize,humanReadable);
      }
      if (compressionMetadataOffHeapSize != null) {
        statsTable.compressionMetadataOffHeapUsed=true;
        statsTable.compressionMetadataOffHeapMemoryUsed=format(compressionMetadataOffHeapSize,humanReadable);
      }
      statsTable.compactedPartitionMinimumBytes=(Long)probe.getColumnFamilyMetric(keyspaceName,tableName,"MinPartitionSize");
      statsTable.compactedPartitionMaximumBytes=(Long)probe.getColumnFamilyMetric(keyspaceName,tableName,"MaxPartitionSize");
      statsTable.compactedPartitionMeanBytes=(Long)probe.getColumnFamilyMetric(keyspaceName,tableName,"MeanPartitionSize");
      CassandraMetricsRegistry.JmxHistogramMBean histogram=(CassandraMetricsRegistry.JmxHistogramMBean)probe.getColumnFamilyMetric(keyspaceName,tableName,"LiveScannedHistogram");
      statsTable.averageLiveCellsPerSliceLastFiveMinutes=histogram.getMean();
      statsTable.maximumLiveCellsPerSliceLastFiveMinutes=histogram.getMax();
      histogram=(CassandraMetricsRegistry.JmxHistogramMBean)probe.getColumnFamilyMetric(keyspaceName,tableName,"TombstoneScannedHistogram");
      statsTable.averageTombstonesPerSliceLastFiveMinutes=histogram.getMean();
      statsTable.maximumTombstonesPerSliceLastFiveMinutes=histogram.getMax();
      statsTable.droppedMutations=format((Long)probe.getColumnFamilyMetric(keyspaceName,tableName,"DroppedMutations"),humanReadable);
      statsKeyspace.tables.add(statsTable);
    }
    holder.keyspaces.add(statsKeyspace);
  }
  TableStatsPrinter printer=TableStatsPrinter.from(outputFormat);
  printer.print(holder,System.out);
}
