{
  ColumnFamilyStore cfs=Keyspace.open(KEYSPACE1).getColumnFamilyStore("Standard1");
  cfs.disableAutoCompaction();
  cfs.metadata.gcGraceSeconds(0);
  long timestamp=System.currentTimeMillis();
  Mutation rm=new Mutation(KEYSPACE1,Util.dk("ttl").getKey());
  rm.add("Standard1",Util.cellname("col"),ByteBufferUtil.EMPTY_BYTE_BUFFER,timestamp,1);
  rm.add("Standard1",Util.cellname("col7"),ByteBufferUtil.EMPTY_BYTE_BUFFER,timestamp,1);
  rm.applyUnsafe();
  cfs.forceBlockingFlush();
  rm=new Mutation(KEYSPACE1,Util.dk("ttl").getKey());
  rm.add("Standard1",Util.cellname("col2"),ByteBufferUtil.EMPTY_BYTE_BUFFER,timestamp,1);
  rm.applyUnsafe();
  cfs.forceBlockingFlush();
  rm=new Mutation(KEYSPACE1,Util.dk("ttl").getKey());
  rm.add("Standard1",Util.cellname("col3"),ByteBufferUtil.EMPTY_BYTE_BUFFER,timestamp,1);
  rm.applyUnsafe();
  cfs.forceBlockingFlush();
  DecoratedKey noTTLKey=Util.dk("nottl");
  rm=new Mutation(KEYSPACE1,noTTLKey.getKey());
  rm.add("Standard1",Util.cellname("col311"),ByteBufferUtil.EMPTY_BYTE_BUFFER,timestamp);
  rm.applyUnsafe();
  cfs.forceBlockingFlush();
  Thread.sleep(2000);
  assertEquals(4,cfs.getSSTables().size());
  cfs.enableAutoCompaction(true);
  assertEquals(1,cfs.getSSTables().size());
  SSTableReader sstable=cfs.getSSTables().iterator().next();
  SSTableScanner scanner=sstable.getScanner(DataRange.allData(sstable.partitioner));
  assertTrue(scanner.hasNext());
  while (scanner.hasNext()) {
    OnDiskAtomIterator iter=scanner.next();
    assertEquals(noTTLKey,iter.getKey());
  }
}
