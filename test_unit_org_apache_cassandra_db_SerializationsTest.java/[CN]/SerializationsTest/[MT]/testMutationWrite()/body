{
  Mutation standardRowRm=new Mutation(statics.KS,statics.StandardRow);
  Mutation superRowRm=new Mutation(statics.KS,statics.SuperRow);
  Mutation standardRm=new Mutation(statics.KS,statics.Key,statics.StandardCf);
  Mutation superRm=new Mutation(statics.KS,statics.Key,statics.SuperCf);
  Map<UUID,ColumnFamily> mods=new HashMap<UUID,ColumnFamily>();
  mods.put(statics.StandardCf.metadata().cfId,statics.StandardCf);
  mods.put(statics.SuperCf.metadata().cfId,statics.SuperCf);
  Mutation mixedRm=new Mutation(statics.KS,statics.Key,mods);
  DataOutputStreamPlus out=getOutput("db.RowMutation.bin");
  Mutation.serializer.serialize(standardRowRm,out,getVersion());
  Mutation.serializer.serialize(superRowRm,out,getVersion());
  Mutation.serializer.serialize(standardRm,out,getVersion());
  Mutation.serializer.serialize(superRm,out,getVersion());
  Mutation.serializer.serialize(mixedRm,out,getVersion());
  standardRowRm.createMessage().serialize(out,getVersion());
  superRowRm.createMessage().serialize(out,getVersion());
  standardRm.createMessage().serialize(out,getVersion());
  superRm.createMessage().serialize(out,getVersion());
  mixedRm.createMessage().serialize(out,getVersion());
  out.close();
  testSerializedSize(standardRowRm,Mutation.serializer);
  testSerializedSize(superRowRm,Mutation.serializer);
  testSerializedSize(standardRm,Mutation.serializer);
  testSerializedSize(superRm,Mutation.serializer);
  testSerializedSize(mixedRm,Mutation.serializer);
}
