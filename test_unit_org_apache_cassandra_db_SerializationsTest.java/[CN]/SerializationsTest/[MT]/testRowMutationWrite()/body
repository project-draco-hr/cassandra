{
  RowMutation emptyRm=new RowMutation(Statics.KS,Statics.Key);
  RowMutation standardRowRm=new RowMutation(Statics.KS,Statics.StandardRow);
  RowMutation superRowRm=new RowMutation(Statics.KS,Statics.SuperRow);
  RowMutation standardRm=new RowMutation(Statics.KS,Statics.Key);
  standardRm.add(Statics.StandardCf);
  RowMutation superRm=new RowMutation(Statics.KS,Statics.Key);
  superRm.add(Statics.SuperCf);
  Map<Integer,ColumnFamily> mods=new HashMap<Integer,ColumnFamily>();
  mods.put(Statics.StandardCf.metadata().cfId,Statics.StandardCf);
  mods.put(Statics.SuperCf.metadata().cfId,Statics.SuperCf);
  RowMutation mixedRm=new RowMutation(Statics.KS,Statics.Key,mods);
  DataOutputStream out=getOutput("db.RowMutation.bin");
  RowMutation.serializer().serialize(emptyRm,out,getVersion());
  RowMutation.serializer().serialize(standardRowRm,out,getVersion());
  RowMutation.serializer().serialize(superRowRm,out,getVersion());
  RowMutation.serializer().serialize(standardRm,out,getVersion());
  RowMutation.serializer().serialize(superRm,out,getVersion());
  RowMutation.serializer().serialize(mixedRm,out,getVersion());
  emptyRm.createMessage().serialize(out,getVersion());
  standardRowRm.createMessage().serialize(out,getVersion());
  superRowRm.createMessage().serialize(out,getVersion());
  standardRm.createMessage().serialize(out,getVersion());
  superRm.createMessage().serialize(out,getVersion());
  mixedRm.createMessage().serialize(out,getVersion());
  out.close();
  testSerializedSize(emptyRm,RowMutation.serializer());
  testSerializedSize(standardRowRm,RowMutation.serializer());
  testSerializedSize(superRowRm,RowMutation.serializer());
  testSerializedSize(standardRm,RowMutation.serializer());
  testSerializedSize(superRm,RowMutation.serializer());
  testSerializedSize(mixedRm,RowMutation.serializer());
}
