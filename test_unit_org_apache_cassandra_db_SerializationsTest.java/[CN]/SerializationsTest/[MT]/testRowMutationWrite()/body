{
  RowMutation emptyRm=new RowMutation(statics.KS,statics.Key);
  RowMutation standardRowRm=new RowMutation(statics.KS,statics.StandardRow);
  RowMutation superRowRm=new RowMutation(statics.KS,statics.SuperRow);
  RowMutation standardRm=new RowMutation(statics.KS,statics.Key);
  standardRm.add(statics.StandardCf);
  RowMutation superRm=new RowMutation(statics.KS,statics.Key);
  superRm.add(statics.SuperCf);
  Map<UUID,ColumnFamily> mods=new HashMap<UUID,ColumnFamily>();
  mods.put(statics.StandardCf.metadata().cfId,statics.StandardCf);
  mods.put(statics.SuperCf.metadata().cfId,statics.SuperCf);
  RowMutation mixedRm=new RowMutation(statics.KS,statics.Key,mods);
  DataOutputStream out=getOutput("db.RowMutation.bin");
  RowMutation.serializer.serialize(emptyRm,out,getVersion());
  RowMutation.serializer.serialize(standardRowRm,out,getVersion());
  RowMutation.serializer.serialize(superRowRm,out,getVersion());
  RowMutation.serializer.serialize(standardRm,out,getVersion());
  RowMutation.serializer.serialize(superRm,out,getVersion());
  RowMutation.serializer.serialize(mixedRm,out,getVersion());
  emptyRm.createMessage().serialize(out,getVersion());
  standardRowRm.createMessage().serialize(out,getVersion());
  superRowRm.createMessage().serialize(out,getVersion());
  standardRm.createMessage().serialize(out,getVersion());
  superRm.createMessage().serialize(out,getVersion());
  mixedRm.createMessage().serialize(out,getVersion());
  out.close();
  testSerializedSize(emptyRm,RowMutation.serializer);
  testSerializedSize(standardRowRm,RowMutation.serializer);
  testSerializedSize(superRowRm,RowMutation.serializer);
  testSerializedSize(standardRm,RowMutation.serializer);
  testSerializedSize(superRm,RowMutation.serializer);
  testSerializedSize(mixedRm,RowMutation.serializer);
}
