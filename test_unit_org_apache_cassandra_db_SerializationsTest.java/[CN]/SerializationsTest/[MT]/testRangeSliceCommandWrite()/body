{
  ByteBuffer startCol=ByteBufferUtil.bytes("Start");
  ByteBuffer stopCol=ByteBufferUtil.bytes("Stop");
  ByteBuffer emptyCol=ByteBufferUtil.bytes("");
  SlicePredicate namesPred=new SlicePredicate();
  namesPred.column_names=Statics.NamedCols;
  SliceRange emptySliceRange=new SliceRange(emptyCol,emptyCol,false,100);
  SliceRange nonEmptySliceRange=new SliceRange(startCol,stopCol,true,100);
  SlicePredicate emptyRangePred=new SlicePredicate();
  emptyRangePred.slice_range=emptySliceRange;
  SlicePredicate nonEmptyRangePred=new SlicePredicate();
  nonEmptyRangePred.slice_range=nonEmptySliceRange;
  IPartitioner part=StorageService.getPartitioner();
  AbstractBounds<RowPosition> bounds=new Range<Token>(part.getRandomToken(),part.getRandomToken()).toRowBounds();
  MessageOut<RangeSliceCommand> namesCmd=new RangeSliceCommand(Statics.KS,"Standard1",null,namesPred,bounds,100).createMessage();
  MessageOut<RangeSliceCommand> emptyRangeCmd=new RangeSliceCommand(Statics.KS,"Standard1",null,emptyRangePred,bounds,100).createMessage();
  MessageOut<RangeSliceCommand> regRangeCmd=new RangeSliceCommand(Statics.KS,"Standard1",null,nonEmptyRangePred,bounds,100).createMessage();
  MessageOut<RangeSliceCommand> namesCmdSup=new RangeSliceCommand(Statics.KS,"Super1",Statics.SC,namesPred,bounds,100).createMessage();
  MessageOut<RangeSliceCommand> emptyRangeCmdSup=new RangeSliceCommand(Statics.KS,"Super1",Statics.SC,emptyRangePred,bounds,100).createMessage();
  MessageOut<RangeSliceCommand> regRangeCmdSup=new RangeSliceCommand(Statics.KS,"Super1",Statics.SC,nonEmptyRangePred,bounds,100).createMessage();
  DataOutputStream out=getOutput("db.RangeSliceCommand.bin");
  namesCmd.serialize(out,getVersion());
  emptyRangeCmd.serialize(out,getVersion());
  regRangeCmd.serialize(out,getVersion());
  namesCmdSup.serialize(out,getVersion());
  emptyRangeCmdSup.serialize(out,getVersion());
  regRangeCmdSup.serialize(out,getVersion());
  out.close();
}
