{
  ByteBuffer startCol=ByteBufferUtil.bytes("Start");
  ByteBuffer stopCol=ByteBufferUtil.bytes("Stop");
  ByteBuffer emptyCol=ByteBufferUtil.bytes("");
  SlicePredicate namesPred=new SlicePredicate();
  namesPred.column_names=Statics.NamedCols;
  SliceRange emptySliceRange=new SliceRange(emptyCol,emptyCol,false,100);
  SliceRange nonEmptySliceRange=new SliceRange(startCol,stopCol,true,100);
  SlicePredicate emptyRangePred=new SlicePredicate();
  emptyRangePred.slice_range=emptySliceRange;
  SlicePredicate nonEmptyRangePred=new SlicePredicate();
  nonEmptyRangePred.slice_range=nonEmptySliceRange;
  IPartitioner part=StorageService.getPartitioner();
  AbstractBounds bounds=new Range(part.getRandomToken(),part.getRandomToken());
  Message namesCmd=new RangeSliceCommand(Statics.KS,"Standard1",null,namesPred,bounds,100).getMessage(MessagingService.version_);
  Message emptyRangeCmd=new RangeSliceCommand(Statics.KS,"Standard1",null,emptyRangePred,bounds,100).getMessage(MessagingService.version_);
  Message regRangeCmd=new RangeSliceCommand(Statics.KS,"Standard1",null,nonEmptyRangePred,bounds,100).getMessage(MessagingService.version_);
  Message namesCmdSup=new RangeSliceCommand(Statics.KS,"Super1",Statics.SC,namesPred,bounds,100).getMessage(MessagingService.version_);
  Message emptyRangeCmdSup=new RangeSliceCommand(Statics.KS,"Super1",Statics.SC,emptyRangePred,bounds,100).getMessage(MessagingService.version_);
  Message regRangeCmdSup=new RangeSliceCommand(Statics.KS,"Super1",Statics.SC,nonEmptyRangePred,bounds,100).getMessage(MessagingService.version_);
  DataOutputStream dout=getOutput("db.RangeSliceCommand.bin");
  messageSerializer.serialize(namesCmd,dout,getVersion());
  messageSerializer.serialize(emptyRangeCmd,dout,getVersion());
  messageSerializer.serialize(regRangeCmd,dout,getVersion());
  messageSerializer.serialize(namesCmdSup,dout,getVersion());
  messageSerializer.serialize(emptyRangeCmdSup,dout,getVersion());
  messageSerializer.serialize(regRangeCmdSup,dout,getVersion());
  dout.close();
}
