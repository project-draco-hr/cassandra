{
  boolean lowerInclusive=false, upperInclusive=false;
switch (op) {
case LIKE_PREFIX:
case LIKE_SUFFIX:
case LIKE_CONTAINS:
case LIKE_MATCHES:
case EQ:
    lower=new Bound(value,true);
  upper=lower;
operation=Op.valueOf(op);
break;
case NEQ:
if (operation == null) {
operation=Op.NOT_EQ;
lower=new Bound(value,true);
upper=lower;
}
 else exclusions.add(value);
break;
case LTE:
upperInclusive=true;
case LT:
operation=Op.RANGE;
upper=new Bound(value,upperInclusive);
break;
case GTE:
lowerInclusive=true;
case GT:
operation=Op.RANGE;
lower=new Bound(value,lowerInclusive);
break;
}
return this;
}
