{
  StorageService ss=StorageService.instance;
  final int RING_SIZE=5;
  final int LEAVING_NODE=2;
  TokenMetadata tmd=ss.getTokenMetadata();
  tmd.clearUnsafe();
  IPartitioner partitioner=new RandomPartitioner();
  AbstractReplicationStrategy testStrategy=new RackUnawareStrategy(tmd,null);
  IPartitioner oldPartitioner=ss.setPartitionerUnsafe(partitioner);
  Map<String,AbstractReplicationStrategy> oldStrategies=ss.setReplicationStrategyUnsafe(createReplacements(testStrategy));
  ArrayList<Token> endPointTokens=new ArrayList<Token>();
  ArrayList<Token> keyTokens=new ArrayList<Token>();
  List<InetAddress> hosts=new ArrayList<InetAddress>();
  createInitialRing(ss,partitioner,endPointTokens,keyTokens,hosts,RING_SIZE);
  final Map<String,List<Range>> deadNodesRanges=new HashMap<String,List<Range>>();
  for (  String table : DatabaseDescriptor.getNonSystemTables()) {
    List<Range> list=new ArrayList<Range>();
    list.addAll(testStrategy.getAddressRanges(table).get(hosts.get(LEAVING_NODE)));
    Collections.sort(list);
    deadNodesRanges.put(table,list);
  }
  ss.onChange(hosts.get(LEAVING_NODE),StorageService.MOVE_STATE,new ApplicationState(StorageService.STATE_LEAVING + StorageService.Delimiter + partitioner.getTokenFactory().toString(endPointTokens.get(LEAVING_NODE))));
  assertTrue(tmd.isLeaving(hosts.get(LEAVING_NODE)));
  for (  String table : DatabaseDescriptor.getNonSystemTables()) {
    int replicationFactor=DatabaseDescriptor.getReplicationFactor(table);
    if (hosts.size() - 1 < replicationFactor)     continue;
    for (int i=0; i < replicationFactor; i++) {
      assertTrue(tmd.getPendingRanges(table,hosts.get((LEAVING_NODE + 1 + i) % RING_SIZE)).size() > 0);
      assertEquals(tmd.getPendingRanges(table,hosts.get((LEAVING_NODE + 1 + i) % RING_SIZE)).get(0),deadNodesRanges.get(table).get(i));
    }
    final int replicaStart=(LEAVING_NODE - replicationFactor + RING_SIZE) % RING_SIZE;
    for (int i=0; i < keyTokens.size(); ++i) {
      Collection<InetAddress> endPoints=testStrategy.getWriteEndpoints(keyTokens.get(i),table,testStrategy.getNaturalEndpoints(keyTokens.get(i),table));
      boolean isReplica=(i - replicaStart + RING_SIZE) % RING_SIZE < replicationFactor;
      if (isReplica)       assertTrue(endPoints.size() == replicationFactor + 1);
 else       assertTrue(endPoints.size() == replicationFactor);
    }
  }
  ss.setPartitionerUnsafe(oldPartitioner);
  ss.setReplicationStrategyUnsafe(oldStrategies);
}
