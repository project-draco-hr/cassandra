{
  StorageService ss=StorageService.instance();
  TokenMetadata tmd=ss.getTokenMetadata();
  tmd.clearUnsafe();
  IPartitioner partitioner=new RandomPartitioner();
  AbstractReplicationStrategy testStrategy=new RackUnawareStrategy(tmd,3);
  IPartitioner oldPartitioner=ss.setPartitionerUnsafe(partitioner);
  AbstractReplicationStrategy oldStrategy=ss.setReplicationStrategyUnsafe(testStrategy);
  ArrayList<Token> endPointTokens=new ArrayList<Token>();
  ArrayList<Token> keyTokens=new ArrayList<Token>();
  List<InetAddress> hosts=new ArrayList<InetAddress>();
  createInitialRing(ss,partitioner,endPointTokens,keyTokens,hosts,10);
  ss.onChange(hosts.get(6),StorageService.MOVE_STATE,new ApplicationState(StorageService.STATE_LEAVING + StorageService.Delimiter + partitioner.getTokenFactory().toString(endPointTokens.get(6))));
  ss.onChange(hosts.get(8),StorageService.MOVE_STATE,new ApplicationState(StorageService.STATE_LEAVING + StorageService.Delimiter + partitioner.getTokenFactory().toString(endPointTokens.get(8))));
  ss.onChange(hosts.get(9),StorageService.MOVE_STATE,new ApplicationState(StorageService.STATE_LEAVING + StorageService.Delimiter + partitioner.getTokenFactory().toString(endPointTokens.get(9))));
  InetAddress boot1=InetAddress.getByName("127.0.1.1");
  ss.onChange(boot1,StorageService.MOVE_STATE,new ApplicationState(StorageService.STATE_BOOTSTRAPPING + StorageService.Delimiter + partitioner.getTokenFactory().toString(keyTokens.get(5))));
  InetAddress boot2=InetAddress.getByName("127.0.1.2");
  ss.onChange(boot2,StorageService.MOVE_STATE,new ApplicationState(StorageService.STATE_BOOTSTRAPPING + StorageService.Delimiter + partitioner.getTokenFactory().toString(keyTokens.get(7))));
  Collection<InetAddress> endPoints=null;
  for (int i=0; i < 3; ++i) {
    endPoints=testStrategy.getWriteEndpoints(keyTokens.get(i),testStrategy.getNaturalEndpoints(keyTokens.get(i)));
    assertTrue(endPoints.size() == 3);
    assertTrue(endPoints.contains(hosts.get(i + 1)));
    assertTrue(endPoints.contains(hosts.get(i + 2)));
    assertTrue(endPoints.contains(hosts.get(i + 3)));
  }
  endPoints=testStrategy.getWriteEndpoints(keyTokens.get(3),testStrategy.getNaturalEndpoints(keyTokens.get(3)));
  assertTrue(endPoints.size() == 5);
  assertTrue(endPoints.contains(hosts.get(4)));
  assertTrue(endPoints.contains(hosts.get(5)));
  assertTrue(endPoints.contains(hosts.get(6)));
  assertTrue(endPoints.contains(hosts.get(7)));
  assertTrue(endPoints.contains(boot1));
  endPoints=testStrategy.getWriteEndpoints(keyTokens.get(4),testStrategy.getNaturalEndpoints(keyTokens.get(4)));
  assertTrue(endPoints.size() == 6);
  assertTrue(endPoints.contains(hosts.get(5)));
  assertTrue(endPoints.contains(hosts.get(6)));
  assertTrue(endPoints.contains(hosts.get(7)));
  assertTrue(endPoints.contains(hosts.get(0)));
  assertTrue(endPoints.contains(boot1));
  assertTrue(endPoints.contains(boot2));
  endPoints=testStrategy.getWriteEndpoints(keyTokens.get(5),testStrategy.getNaturalEndpoints(keyTokens.get(5)));
  assertTrue(endPoints.size() == 7);
  assertTrue(endPoints.contains(hosts.get(6)));
  assertTrue(endPoints.contains(hosts.get(7)));
  assertTrue(endPoints.contains(hosts.get(8)));
  assertTrue(endPoints.contains(hosts.get(0)));
  assertTrue(endPoints.contains(hosts.get(1)));
  assertTrue(endPoints.contains(boot1));
  assertTrue(endPoints.contains(boot2));
  endPoints=testStrategy.getWriteEndpoints(keyTokens.get(6),testStrategy.getNaturalEndpoints(keyTokens.get(6)));
  assertTrue(endPoints.size() == 6);
  assertTrue(endPoints.contains(hosts.get(7)));
  assertTrue(endPoints.contains(hosts.get(8)));
  assertTrue(endPoints.contains(hosts.get(9)));
  assertTrue(endPoints.contains(hosts.get(0)));
  assertTrue(endPoints.contains(hosts.get(1)));
  assertTrue(endPoints.contains(boot2));
  endPoints=testStrategy.getWriteEndpoints(keyTokens.get(7),testStrategy.getNaturalEndpoints(keyTokens.get(7)));
  assertTrue(endPoints.size() == 6);
  assertTrue(endPoints.contains(hosts.get(8)));
  assertTrue(endPoints.contains(hosts.get(9)));
  assertTrue(endPoints.contains(hosts.get(0)));
  assertTrue(endPoints.contains(hosts.get(1)));
  assertTrue(endPoints.contains(hosts.get(2)));
  assertTrue(endPoints.contains(boot2));
  endPoints=testStrategy.getWriteEndpoints(keyTokens.get(8),testStrategy.getNaturalEndpoints(keyTokens.get(8)));
  assertTrue(endPoints.size() == 4);
  assertTrue(endPoints.contains(hosts.get(9)));
  assertTrue(endPoints.contains(hosts.get(0)));
  assertTrue(endPoints.contains(hosts.get(1)));
  assertTrue(endPoints.contains(hosts.get(2)));
  endPoints=testStrategy.getWriteEndpoints(keyTokens.get(9),testStrategy.getNaturalEndpoints(keyTokens.get(9)));
  assertTrue(endPoints.size() == 3);
  assertTrue(endPoints.contains(hosts.get(0)));
  assertTrue(endPoints.contains(hosts.get(1)));
  assertTrue(endPoints.contains(hosts.get(2)));
  ss.onChange(hosts.get(6),StorageService.MOVE_STATE,new ApplicationState(StorageService.STATE_LEFT + StorageService.Delimiter + StorageService.LEFT_NORMALLY+ StorageService.Delimiter+ partitioner.getTokenFactory().toString(endPointTokens.get(6))));
  ss.onChange(hosts.get(9),StorageService.MOVE_STATE,new ApplicationState(StorageService.STATE_LEFT + StorageService.Delimiter + StorageService.LEFT_NORMALLY+ StorageService.Delimiter+ partitioner.getTokenFactory().toString(endPointTokens.get(9))));
  ss.onChange(boot1,StorageService.MOVE_STATE,new ApplicationState(StorageService.STATE_NORMAL + StorageService.Delimiter + partitioner.getTokenFactory().toString(keyTokens.get(5))));
  for (int i=0; i < 3; ++i) {
    endPoints=testStrategy.getWriteEndpoints(keyTokens.get(i),testStrategy.getNaturalEndpoints(keyTokens.get(i)));
    assertTrue(endPoints.size() == 3);
    assertTrue(endPoints.contains(hosts.get(i + 1)));
    assertTrue(endPoints.contains(hosts.get(i + 2)));
    assertTrue(endPoints.contains(hosts.get(i + 3)));
  }
  endPoints=testStrategy.getWriteEndpoints(keyTokens.get(3),testStrategy.getNaturalEndpoints(keyTokens.get(3)));
  assertTrue(endPoints.size() == 3);
  assertTrue(endPoints.contains(hosts.get(4)));
  assertTrue(endPoints.contains(hosts.get(5)));
  assertTrue(endPoints.contains(boot1));
  endPoints=testStrategy.getWriteEndpoints(keyTokens.get(4),testStrategy.getNaturalEndpoints(keyTokens.get(4)));
  assertTrue(endPoints.size() == 3);
  assertTrue(endPoints.contains(hosts.get(5)));
  assertTrue(endPoints.contains(boot1));
  assertTrue(endPoints.contains(hosts.get(7)));
  endPoints=testStrategy.getWriteEndpoints(keyTokens.get(5),testStrategy.getNaturalEndpoints(keyTokens.get(5)));
  assertTrue(endPoints.size() == 5);
  assertTrue(endPoints.contains(boot1));
  assertTrue(endPoints.contains(hosts.get(7)));
  assertTrue(endPoints.contains(boot2));
  assertTrue(endPoints.contains(hosts.get(8)));
  assertTrue(endPoints.contains(hosts.get(0)));
  endPoints=testStrategy.getWriteEndpoints(keyTokens.get(6),testStrategy.getNaturalEndpoints(keyTokens.get(6)));
  assertTrue(endPoints.size() == 5);
  assertTrue(endPoints.contains(hosts.get(7)));
  assertTrue(endPoints.contains(boot2));
  assertTrue(endPoints.contains(hosts.get(8)));
  assertTrue(endPoints.contains(hosts.get(0)));
  assertTrue(endPoints.contains(hosts.get(1)));
  endPoints=testStrategy.getWriteEndpoints(keyTokens.get(7),testStrategy.getNaturalEndpoints(keyTokens.get(7)));
  assertTrue(endPoints.size() == 5);
  assertTrue(endPoints.contains(boot2));
  assertTrue(endPoints.contains(hosts.get(8)));
  assertTrue(endPoints.contains(hosts.get(0)));
  assertTrue(endPoints.contains(hosts.get(1)));
  assertTrue(endPoints.contains(hosts.get(2)));
  endPoints=testStrategy.getWriteEndpoints(keyTokens.get(8),testStrategy.getNaturalEndpoints(keyTokens.get(8)));
  assertTrue(endPoints.size() == 3);
  assertTrue(endPoints.contains(hosts.get(0)));
  assertTrue(endPoints.contains(hosts.get(1)));
  assertTrue(endPoints.contains(hosts.get(2)));
  endPoints=testStrategy.getWriteEndpoints(keyTokens.get(9),testStrategy.getNaturalEndpoints(keyTokens.get(9)));
  assertTrue(endPoints.size() == 3);
  assertTrue(endPoints.contains(hosts.get(0)));
  assertTrue(endPoints.contains(hosts.get(1)));
  assertTrue(endPoints.contains(hosts.get(2)));
  ss.setPartitionerUnsafe(oldPartitioner);
  ss.setReplicationStrategyUnsafe(oldStrategy);
}
