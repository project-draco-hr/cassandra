{
  StorageService ss=StorageService.instance;
  final int RING_SIZE=10;
  TokenMetadata tmd=ss.getTokenMetadata();
  tmd.clearUnsafe();
  IPartitioner partitioner=new RandomPartitioner();
  VersionedValue.VersionedValueFactory valueFactory=new VersionedValue.VersionedValueFactory(partitioner);
  ArrayList<Token> endpointTokens=new ArrayList<Token>();
  ArrayList<Token> keyTokens=new ArrayList<Token>();
  List<InetAddress> hosts=new ArrayList<InetAddress>();
  List<UUID> hostIds=new ArrayList<UUID>();
  Util.createInitialRing(ss,partitioner,endpointTokens,keyTokens,hosts,hostIds,RING_SIZE);
  final int[] MOVING=new int[]{6,8,9};
  Map<Integer,Token> newTokens=new HashMap<Integer,Token>();
  for (  int movingIndex : MOVING) {
    Token newToken=positionToken(movingIndex);
    ss.onChange(hosts.get(movingIndex),ApplicationState.STATUS,valueFactory.moving(newToken));
    newTokens.put(movingIndex,newToken);
  }
  Collection<InetAddress> endpoints;
  tmd=tmd.cloneAfterAllSettled();
  ss.setTokenMetadataUnsafe(tmd);
  InetAddress boot1=InetAddress.getByName("127.0.1.1");
  Gossiper.instance.initializeNodeUnsafe(boot1,UUID.randomUUID(),1);
  Gossiper.instance.injectApplicationState(boot1,ApplicationState.TOKENS,valueFactory.tokens(Collections.singleton(keyTokens.get(5))));
  ss.onChange(boot1,ApplicationState.STATUS,valueFactory.bootstrapping(Collections.<Token>singleton(keyTokens.get(5))));
  InetAddress boot2=InetAddress.getByName("127.0.1.2");
  Gossiper.instance.initializeNodeUnsafe(boot2,UUID.randomUUID(),1);
  Gossiper.instance.injectApplicationState(boot2,ApplicationState.TOKENS,valueFactory.tokens(Collections.singleton(keyTokens.get(7))));
  ss.onChange(boot2,ApplicationState.STATUS,valueFactory.bootstrapping(Collections.<Token>singleton(keyTokens.get(7))));
  PendingRangeCalculatorService.instance.blockUntilFinished();
  Map<String,AbstractReplicationStrategy> keyspaceStrategyMap=new HashMap<String,AbstractReplicationStrategy>();
  for (int i=1; i <= 4; i++) {
    keyspaceStrategyMap.put("MoveTestKeyspace" + i,getStrategy("MoveTestKeyspace" + i,tmd));
  }
  Multimap<InetAddress,Range<Token>> keyspace1ranges=keyspaceStrategyMap.get(KEYSPACE1).getAddressRanges();
  Collection<Range<Token>> ranges1=keyspace1ranges.get(InetAddress.getByName("127.0.0.1"));
  assertEquals(1,collectionSize(ranges1));
  assertEquals(generateRange(97,0),ranges1.iterator().next());
  Collection<Range<Token>> ranges2=keyspace1ranges.get(InetAddress.getByName("127.0.0.2"));
  assertEquals(1,collectionSize(ranges2));
  assertEquals(generateRange(0,10),ranges2.iterator().next());
  Collection<Range<Token>> ranges3=keyspace1ranges.get(InetAddress.getByName("127.0.0.3"));
  assertEquals(1,collectionSize(ranges3));
  assertEquals(generateRange(10,20),ranges3.iterator().next());
  Collection<Range<Token>> ranges4=keyspace1ranges.get(InetAddress.getByName("127.0.0.4"));
  assertEquals(1,collectionSize(ranges4));
  assertEquals(generateRange(20,30),ranges4.iterator().next());
  Collection<Range<Token>> ranges5=keyspace1ranges.get(InetAddress.getByName("127.0.0.5"));
  assertEquals(1,collectionSize(ranges5));
  assertEquals(generateRange(30,40),ranges5.iterator().next());
  Collection<Range<Token>> ranges6=keyspace1ranges.get(InetAddress.getByName("127.0.0.6"));
  assertEquals(1,collectionSize(ranges6));
  assertEquals(generateRange(40,50),ranges6.iterator().next());
  Collection<Range<Token>> ranges7=keyspace1ranges.get(InetAddress.getByName("127.0.0.7"));
  assertEquals(1,collectionSize(ranges7));
  assertEquals(generateRange(50,67),ranges7.iterator().next());
  Collection<Range<Token>> ranges8=keyspace1ranges.get(InetAddress.getByName("127.0.0.8"));
  assertEquals(1,collectionSize(ranges8));
  assertEquals(generateRange(67,70),ranges8.iterator().next());
  Collection<Range<Token>> ranges9=keyspace1ranges.get(InetAddress.getByName("127.0.0.9"));
  assertEquals(1,collectionSize(ranges9));
  assertEquals(generateRange(70,87),ranges9.iterator().next());
  Collection<Range<Token>> ranges10=keyspace1ranges.get(InetAddress.getByName("127.0.0.10"));
  assertEquals(1,collectionSize(ranges10));
  assertEquals(generateRange(87,97),ranges10.iterator().next());
  Multimap<InetAddress,Range<Token>> keyspace3ranges=keyspaceStrategyMap.get(KEYSPACE3).getAddressRanges();
  ranges1=keyspace3ranges.get(InetAddress.getByName("127.0.0.1"));
  assertEquals(collectionSize(ranges1),5);
  assertTrue(ranges1.equals(generateRanges(97,0,70,87,50,67,87,97,67,70)));
  ranges2=keyspace3ranges.get(InetAddress.getByName("127.0.0.2"));
  assertEquals(collectionSize(ranges2),5);
  assertTrue(ranges2.equals(generateRanges(97,0,70,87,87,97,0,10,67,70)));
  ranges3=keyspace3ranges.get(InetAddress.getByName("127.0.0.3"));
  assertEquals(collectionSize(ranges3),5);
  assertTrue(ranges3.equals(generateRanges(97,0,70,87,87,97,0,10,10,20)));
  ranges4=keyspace3ranges.get(InetAddress.getByName("127.0.0.4"));
  assertEquals(collectionSize(ranges4),5);
  assertTrue(ranges4.equals(generateRanges(97,0,20,30,87,97,0,10,10,20)));
  ranges5=keyspace3ranges.get(InetAddress.getByName("127.0.0.5"));
  assertEquals(collectionSize(ranges5),5);
  assertTrue(ranges5.equals(generateRanges(97,0,30,40,20,30,0,10,10,20)));
  ranges6=keyspace3ranges.get(InetAddress.getByName("127.0.0.6"));
  assertEquals(collectionSize(ranges6),5);
  assertTrue(ranges6.equals(generateRanges(40,50,30,40,20,30,0,10,10,20)));
  ranges7=keyspace3ranges.get(InetAddress.getByName("127.0.0.7"));
  assertEquals(collectionSize(ranges7),5);
  assertTrue(ranges7.equals(generateRanges(40,50,30,40,50,67,20,30,10,20)));
  ranges8=keyspace3ranges.get(InetAddress.getByName("127.0.0.8"));
  assertEquals(collectionSize(ranges8),5);
  assertTrue(ranges8.equals(generateRanges(40,50,30,40,50,67,20,30,67,70)));
  ranges9=keyspace3ranges.get(InetAddress.getByName("127.0.0.9"));
  assertEquals(collectionSize(ranges9),5);
  assertTrue(ranges9.equals(generateRanges(40,50,70,87,30,40,50,67,67,70)));
  ranges10=keyspace3ranges.get(InetAddress.getByName("127.0.0.10"));
  assertEquals(collectionSize(ranges10),5);
  assertTrue(ranges10.equals(generateRanges(40,50,70,87,50,67,87,97,67,70)));
  Multimap<InetAddress,Range<Token>> keyspace4ranges=keyspaceStrategyMap.get(KEYSPACE4).getAddressRanges();
  ranges1=keyspace4ranges.get(InetAddress.getByName("127.0.0.1"));
  assertEquals(collectionSize(ranges1),3);
  assertTrue(ranges1.equals(generateRanges(97,0,70,87,87,97)));
  ranges2=keyspace4ranges.get(InetAddress.getByName("127.0.0.2"));
  assertEquals(collectionSize(ranges2),3);
  assertTrue(ranges2.equals(generateRanges(97,0,87,97,0,10)));
  ranges3=keyspace4ranges.get(InetAddress.getByName("127.0.0.3"));
  assertEquals(collectionSize(ranges3),3);
  assertTrue(ranges3.equals(generateRanges(97,0,0,10,10,20)));
  ranges4=keyspace4ranges.get(InetAddress.getByName("127.0.0.4"));
  assertEquals(collectionSize(ranges4),3);
  assertTrue(ranges4.equals(generateRanges(20,30,0,10,10,20)));
  ranges5=keyspace4ranges.get(InetAddress.getByName("127.0.0.5"));
  assertEquals(collectionSize(ranges5),3);
  assertTrue(ranges5.equals(generateRanges(30,40,20,30,10,20)));
  ranges6=keyspace4ranges.get(InetAddress.getByName("127.0.0.6"));
  assertEquals(collectionSize(ranges6),3);
  assertTrue(ranges6.equals(generateRanges(40,50,30,40,20,30)));
  ranges7=keyspace4ranges.get(InetAddress.getByName("127.0.0.7"));
  assertEquals(collectionSize(ranges7),3);
  assertTrue(ranges7.equals(generateRanges(40,50,30,40,50,67)));
  ranges8=keyspace4ranges.get(InetAddress.getByName("127.0.0.8"));
  assertEquals(collectionSize(ranges8),3);
  assertTrue(ranges8.equals(generateRanges(40,50,50,67,67,70)));
  ranges9=keyspace4ranges.get(InetAddress.getByName("127.0.0.9"));
  assertEquals(collectionSize(ranges9),3);
  assertTrue(ranges9.equals(generateRanges(70,87,50,67,67,70)));
  ranges10=keyspace4ranges.get(InetAddress.getByName("127.0.0.10"));
  assertEquals(collectionSize(ranges10),3);
  assertTrue(ranges10.equals(generateRanges(70,87,87,97,67,70)));
  Map<String,Multimap<Token,InetAddress>> expectedEndpoints=new HashMap<String,Multimap<Token,InetAddress>>();
  expectedEndpoints.put(KEYSPACE1,HashMultimap.<Token,InetAddress>create());
  expectedEndpoints.get(KEYSPACE1).putAll(new BigIntegerToken("5"),makeAddrs("127.0.0.2"));
  expectedEndpoints.get(KEYSPACE1).putAll(new BigIntegerToken("15"),makeAddrs("127.0.0.3"));
  expectedEndpoints.get(KEYSPACE1).putAll(new BigIntegerToken("25"),makeAddrs("127.0.0.4"));
  expectedEndpoints.get(KEYSPACE1).putAll(new BigIntegerToken("35"),makeAddrs("127.0.0.5"));
  expectedEndpoints.get(KEYSPACE1).putAll(new BigIntegerToken("45"),makeAddrs("127.0.0.6"));
  expectedEndpoints.get(KEYSPACE1).putAll(new BigIntegerToken("55"),makeAddrs("127.0.0.7","127.0.1.1"));
  expectedEndpoints.get(KEYSPACE1).putAll(new BigIntegerToken("65"),makeAddrs("127.0.0.7"));
  expectedEndpoints.get(KEYSPACE1).putAll(new BigIntegerToken("75"),makeAddrs("127.0.0.9","127.0.1.2"));
  expectedEndpoints.get(KEYSPACE1).putAll(new BigIntegerToken("85"),makeAddrs("127.0.0.9"));
  expectedEndpoints.get(KEYSPACE1).putAll(new BigIntegerToken("95"),makeAddrs("127.0.0.10"));
  expectedEndpoints.put(KEYSPACE2,HashMultimap.<Token,InetAddress>create());
  expectedEndpoints.get(KEYSPACE2).putAll(new BigIntegerToken("5"),makeAddrs("127.0.0.2"));
  expectedEndpoints.get(KEYSPACE2).putAll(new BigIntegerToken("15"),makeAddrs("127.0.0.3"));
  expectedEndpoints.get(KEYSPACE2).putAll(new BigIntegerToken("25"),makeAddrs("127.0.0.4"));
  expectedEndpoints.get(KEYSPACE2).putAll(new BigIntegerToken("35"),makeAddrs("127.0.0.5"));
  expectedEndpoints.get(KEYSPACE2).putAll(new BigIntegerToken("45"),makeAddrs("127.0.0.6"));
  expectedEndpoints.get(KEYSPACE2).putAll(new BigIntegerToken("55"),makeAddrs("127.0.0.7","127.0.1.1"));
  expectedEndpoints.get(KEYSPACE2).putAll(new BigIntegerToken("65"),makeAddrs("127.0.0.7"));
  expectedEndpoints.get(KEYSPACE2).putAll(new BigIntegerToken("75"),makeAddrs("127.0.0.9","127.0.1.2"));
  expectedEndpoints.get(KEYSPACE2).putAll(new BigIntegerToken("85"),makeAddrs("127.0.0.9"));
  expectedEndpoints.get(KEYSPACE2).putAll(new BigIntegerToken("95"),makeAddrs("127.0.0.10"));
  expectedEndpoints.put(KEYSPACE3,HashMultimap.<Token,InetAddress>create());
  expectedEndpoints.get(KEYSPACE3).putAll(new BigIntegerToken("5"),makeAddrs("127.0.0.2","127.0.0.3","127.0.0.4","127.0.0.5","127.0.0.6"));
  expectedEndpoints.get(KEYSPACE3).putAll(new BigIntegerToken("15"),makeAddrs("127.0.0.3","127.0.0.4","127.0.0.5","127.0.0.6","127.0.0.7","127.0.1.1"));
  expectedEndpoints.get(KEYSPACE3).putAll(new BigIntegerToken("25"),makeAddrs("127.0.0.4","127.0.0.5","127.0.0.6","127.0.0.7","127.0.0.8","127.0.1.1"));
  expectedEndpoints.get(KEYSPACE3).putAll(new BigIntegerToken("35"),makeAddrs("127.0.0.5","127.0.0.6","127.0.0.7","127.0.0.8","127.0.0.9","127.0.1.1","127.0.1.2"));
  expectedEndpoints.get(KEYSPACE3).putAll(new BigIntegerToken("45"),makeAddrs("127.0.0.6","127.0.0.7","127.0.0.8","127.0.0.9","127.0.0.10","127.0.1.1","127.0.1.2"));
  expectedEndpoints.get(KEYSPACE3).putAll(new BigIntegerToken("55"),makeAddrs("127.0.0.7","127.0.0.8","127.0.0.9","127.0.0.10","127.0.0.1","127.0.1.1","127.0.1.2"));
  expectedEndpoints.get(KEYSPACE3).putAll(new BigIntegerToken("65"),makeAddrs("127.0.0.7","127.0.0.8","127.0.0.9","127.0.0.10","127.0.0.1","127.0.1.2"));
  expectedEndpoints.get(KEYSPACE3).putAll(new BigIntegerToken("75"),makeAddrs("127.0.0.9","127.0.0.10","127.0.0.1","127.0.0.2","127.0.0.3","127.0.1.2"));
  expectedEndpoints.get(KEYSPACE3).putAll(new BigIntegerToken("85"),makeAddrs("127.0.0.9","127.0.0.10","127.0.0.1","127.0.0.2","127.0.0.3"));
  expectedEndpoints.get(KEYSPACE3).putAll(new BigIntegerToken("95"),makeAddrs("127.0.0.10","127.0.0.1","127.0.0.2","127.0.0.3","127.0.0.4"));
  expectedEndpoints.put(KEYSPACE4,HashMultimap.<Token,InetAddress>create());
  expectedEndpoints.get(KEYSPACE4).putAll(new BigIntegerToken("5"),makeAddrs("127.0.0.2","127.0.0.3","127.0.0.4"));
  expectedEndpoints.get(KEYSPACE4).putAll(new BigIntegerToken("15"),makeAddrs("127.0.0.3","127.0.0.4","127.0.0.5"));
  expectedEndpoints.get(KEYSPACE4).putAll(new BigIntegerToken("25"),makeAddrs("127.0.0.4","127.0.0.5","127.0.0.6"));
  expectedEndpoints.get(KEYSPACE4).putAll(new BigIntegerToken("35"),makeAddrs("127.0.0.5","127.0.0.6","127.0.0.7","127.0.1.1"));
  expectedEndpoints.get(KEYSPACE4).putAll(new BigIntegerToken("45"),makeAddrs("127.0.0.6","127.0.0.7","127.0.0.8","127.0.1.1"));
  expectedEndpoints.get(KEYSPACE4).putAll(new BigIntegerToken("55"),makeAddrs("127.0.0.7","127.0.0.8","127.0.0.9","127.0.1.1","127.0.1.2"));
  expectedEndpoints.get(KEYSPACE4).putAll(new BigIntegerToken("65"),makeAddrs("127.0.0.7","127.0.0.8","127.0.0.9","127.0.1.2"));
  expectedEndpoints.get(KEYSPACE4).putAll(new BigIntegerToken("75"),makeAddrs("127.0.0.9","127.0.0.10","127.0.0.1","127.0.1.2"));
  expectedEndpoints.get(KEYSPACE4).putAll(new BigIntegerToken("85"),makeAddrs("127.0.0.9","127.0.0.10","127.0.0.1"));
  expectedEndpoints.get(KEYSPACE4).putAll(new BigIntegerToken("95"),makeAddrs("127.0.0.10","127.0.0.1","127.0.0.2"));
  for (  Map.Entry<String,AbstractReplicationStrategy> keyspaceStrategy : keyspaceStrategyMap.entrySet()) {
    String keyspaceName=keyspaceStrategy.getKey();
    AbstractReplicationStrategy strategy=keyspaceStrategy.getValue();
    for (    Token token : keyTokens) {
      endpoints=tmd.getWriteEndpoints(token,keyspaceName,strategy.getNaturalEndpoints(token));
      assertEquals(expectedEndpoints.get(keyspaceName).get(token).size(),endpoints.size());
      assertTrue(expectedEndpoints.get(keyspaceName).get(token).containsAll(endpoints));
    }
    if (strategy.getReplicationFactor() != 3)     continue;
    for (int i=0; i < 3; i++) {
      endpoints=tmd.getWriteEndpoints(keyTokens.get(i),keyspaceName,strategy.getNaturalEndpoints(keyTokens.get(i)));
      assertEquals(3,endpoints.size());
      assertTrue(endpoints.contains(hosts.get(i + 1)));
      assertTrue(endpoints.contains(hosts.get(i + 2)));
      assertTrue(endpoints.contains(hosts.get(i + 3)));
    }
    endpoints=tmd.getWriteEndpoints(keyTokens.get(3),keyspaceName,strategy.getNaturalEndpoints(keyTokens.get(3)));
    assertEquals(4,endpoints.size());
    assertTrue(endpoints.contains(hosts.get(4)));
    assertTrue(endpoints.contains(hosts.get(5)));
    assertTrue(endpoints.contains(hosts.get(6)));
    assertTrue(endpoints.contains(boot1));
    endpoints=tmd.getWriteEndpoints(keyTokens.get(4),keyspaceName,strategy.getNaturalEndpoints(keyTokens.get(4)));
    assertEquals(4,endpoints.size());
    assertTrue(endpoints.contains(hosts.get(5)));
    assertTrue(endpoints.contains(hosts.get(6)));
    assertTrue(endpoints.contains(hosts.get(7)));
    assertTrue(endpoints.contains(boot1));
    endpoints=tmd.getWriteEndpoints(keyTokens.get(5),keyspaceName,strategy.getNaturalEndpoints(keyTokens.get(5)));
    assertEquals(5,endpoints.size());
    assertTrue(endpoints.contains(hosts.get(6)));
    assertTrue(endpoints.contains(hosts.get(7)));
    assertTrue(endpoints.contains(hosts.get(8)));
    assertTrue(endpoints.contains(boot1));
    assertTrue(endpoints.contains(boot2));
    endpoints=tmd.getWriteEndpoints(keyTokens.get(6),keyspaceName,strategy.getNaturalEndpoints(keyTokens.get(6)));
    assertEquals(4,endpoints.size());
    assertTrue(endpoints.contains(hosts.get(6)));
    assertTrue(endpoints.contains(hosts.get(7)));
    assertTrue(endpoints.contains(hosts.get(8)));
    assertTrue(endpoints.contains(boot2));
    endpoints=tmd.getWriteEndpoints(keyTokens.get(7),keyspaceName,strategy.getNaturalEndpoints(keyTokens.get(7)));
    assertEquals(4,endpoints.size());
    assertTrue(endpoints.contains(hosts.get(8)));
    assertTrue(endpoints.contains(hosts.get(9)));
    assertTrue(endpoints.contains(hosts.get(0)));
    assertTrue(endpoints.contains(boot2));
    endpoints=tmd.getWriteEndpoints(keyTokens.get(8),keyspaceName,strategy.getNaturalEndpoints(keyTokens.get(8)));
    assertEquals(3,endpoints.size());
    assertTrue(endpoints.contains(hosts.get(8)));
    assertTrue(endpoints.contains(hosts.get(9)));
    assertTrue(endpoints.contains(hosts.get(0)));
    endpoints=tmd.getWriteEndpoints(keyTokens.get(9),keyspaceName,strategy.getNaturalEndpoints(keyTokens.get(9)));
    assertEquals(3,endpoints.size());
    assertTrue(endpoints.contains(hosts.get(9)));
    assertTrue(endpoints.contains(hosts.get(0)));
    assertTrue(endpoints.contains(hosts.get(1)));
  }
  for (  Integer movingIndex : MOVING) {
    ss.onChange(hosts.get(movingIndex),ApplicationState.STATUS,valueFactory.normal(Collections.singleton(newTokens.get(movingIndex))));
  }
}
