{
  StorageService ss=StorageService.instance;
  TokenMetadata tmd=ss.getTokenMetadata();
  tmd.clearUnsafe();
  IPartitioner partitioner=new RandomPartitioner();
  AbstractReplicationStrategy testStrategy=new RackUnawareStrategy(tmd,new SimpleSnitch());
  IPartitioner oldPartitioner=ss.setPartitionerUnsafe(partitioner);
  Map<String,AbstractReplicationStrategy> oldStrategy=ss.setReplicationStrategyUnsafe(createReplacements(testStrategy));
  ArrayList<Token> endpointTokens=new ArrayList<Token>();
  ArrayList<Token> keyTokens=new ArrayList<Token>();
  List<InetAddress> hosts=new ArrayList<InetAddress>();
  createInitialRing(ss,partitioner,endpointTokens,keyTokens,hosts,7);
  ss.onChange(hosts.get(2),StorageService.MOVE_STATE,new ApplicationState(StorageService.STATE_LEFT + StorageService.Delimiter + StorageService.LEFT_NORMALLY+ StorageService.Delimiter+ partitioner.getTokenFactory().toString(endpointTokens.get(2))));
  assertFalse(tmd.isMember(hosts.get(2)));
  ss.onChange(hosts.get(3),StorageService.MOVE_STATE,new ApplicationState(StorageService.STATE_BOOTSTRAPPING + StorageService.Delimiter + partitioner.getTokenFactory().toString(keyTokens.get(1))));
  assertFalse(tmd.isMember(hosts.get(3)));
  assertTrue(tmd.getBootstrapTokens().size() == 1);
  assertTrue(tmd.getBootstrapTokens().get(keyTokens.get(1)).equals(hosts.get(3)));
  ss.onChange(hosts.get(2),StorageService.MOVE_STATE,new ApplicationState(StorageService.STATE_LEFT + StorageService.Delimiter + StorageService.LEFT_NORMALLY+ StorageService.Delimiter+ partitioner.getTokenFactory().toString(keyTokens.get(1))));
  assertTrue(tmd.getBootstrapTokens().size() == 0);
  assertFalse(tmd.isMember(hosts.get(2)));
  assertFalse(tmd.isLeaving(hosts.get(2)));
  ss.setPartitionerUnsafe(oldPartitioner);
  ss.setReplicationStrategyUnsafe(oldStrategy);
}
