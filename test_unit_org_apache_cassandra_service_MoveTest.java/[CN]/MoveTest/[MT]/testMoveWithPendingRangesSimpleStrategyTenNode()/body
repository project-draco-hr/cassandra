{
  StorageService ss=StorageService.instance;
  final int RING_SIZE=10;
  TokenMetadata tmd=ss.getTokenMetadata();
  tmd.clearUnsafe();
  VersionedValue.VersionedValueFactory valueFactory=new VersionedValue.VersionedValueFactory(partitioner);
  ArrayList<Token> endpointTokens=new ArrayList<>();
  ArrayList<Token> keyTokens=new ArrayList<>();
  List<InetAddress> hosts=new ArrayList<>();
  List<UUID> hostIds=new ArrayList<>();
  Util.createInitialRing(ss,partitioner,endpointTokens,keyTokens,hosts,hostIds,RING_SIZE);
  PendingRangeCalculatorService.instance.blockUntilFinished();
  final int MOVING_NODE=0;
  moveHost(hosts.get(MOVING_NODE),2,tmd,valueFactory);
  assertPendingRanges(tmd,generatePendingRanges(generatePendingMapEntry(0,2,"127.0.0.1")),Simple_RF1_KeyspaceName);
  assertPendingRanges(tmd,generatePendingRanges(generatePendingMapEntry(0,2,"127.0.0.1")),Simple_RF2_KeyspaceName);
  assertPendingRanges(tmd,generatePendingRanges(generatePendingMapEntry(0,2,"127.0.0.1")),Simple_RF3_KeyspaceName);
  finishMove(hosts.get(MOVING_NODE),2,tmd);
  moveHost(hosts.get(MOVING_NODE),0,tmd,valueFactory);
  assertPendingRanges(tmd,generatePendingRanges(generatePendingMapEntry(0,2,"127.0.0.2")),Simple_RF1_KeyspaceName);
  assertPendingRanges(tmd,generatePendingRanges(generatePendingMapEntry(0,2,"127.0.0.3")),Simple_RF2_KeyspaceName);
  assertPendingRanges(tmd,generatePendingRanges(generatePendingMapEntry(0,2,"127.0.0.4")),Simple_RF3_KeyspaceName);
  finishMove(hosts.get(MOVING_NODE),0,tmd);
  moveHost(hosts.get(MOVING_NODE),1000,tmd,valueFactory);
  assertPendingRanges(tmd,generatePendingRanges(generatePendingMapEntry(1000,0,"127.0.0.2")),Simple_RF1_KeyspaceName);
  assertPendingRanges(tmd,generatePendingRanges(generatePendingMapEntry(1000,0,"127.0.0.3")),Simple_RF2_KeyspaceName);
  assertPendingRanges(tmd,generatePendingRanges(generatePendingMapEntry(1000,0,"127.0.0.4")),Simple_RF3_KeyspaceName);
  finishMove(hosts.get(MOVING_NODE),1000,tmd);
  moveHost(hosts.get(MOVING_NODE),0,tmd,valueFactory);
  assertPendingRanges(tmd,generatePendingRanges(generatePendingMapEntry(1000,0,"127.0.0.1")),Simple_RF1_KeyspaceName);
  assertPendingRanges(tmd,generatePendingRanges(generatePendingMapEntry(1000,0,"127.0.0.1")),Simple_RF2_KeyspaceName);
  assertPendingRanges(tmd,generatePendingRanges(generatePendingMapEntry(1000,0,"127.0.0.1")),Simple_RF3_KeyspaceName);
  finishMove(hosts.get(MOVING_NODE),0,tmd);
  moveHost(hosts.get(MOVING_NODE),35,tmd,valueFactory);
  assertPendingRanges(tmd,generatePendingRanges(generatePendingMapEntry(30,35,"127.0.0.1"),generatePendingMapEntry(90,0,"127.0.0.2")),Simple_RF1_KeyspaceName);
  assertPendingRanges(tmd,generatePendingRanges(generatePendingMapEntry(30,35,"127.0.0.1"),generatePendingMapEntry(20,30,"127.0.0.1"),generatePendingMapEntry(80,90,"127.0.0.2"),generatePendingMapEntry(90,0,"127.0.0.3")),Simple_RF2_KeyspaceName);
  assertPendingRanges(tmd,generatePendingRanges(generatePendingMapEntry(30,35,"127.0.0.1"),generatePendingMapEntry(20,30,"127.0.0.1"),generatePendingMapEntry(80,90,"127.0.0.3"),generatePendingMapEntry(90,0,"127.0.0.4"),generatePendingMapEntry(10,20,"127.0.0.1"),generatePendingMapEntry(70,80,"127.0.0.2")),Simple_RF3_KeyspaceName);
  finishMove(hosts.get(MOVING_NODE),35,tmd);
}
