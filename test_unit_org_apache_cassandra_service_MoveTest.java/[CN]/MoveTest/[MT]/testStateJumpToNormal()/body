{
  StorageService ss=StorageService.instance;
  TokenMetadata tmd=ss.getTokenMetadata();
  tmd.clearUnsafe();
  IPartitioner partitioner=new RandomPartitioner();
  VersionedValue.VersionedValueFactory valueFactory=new VersionedValue.VersionedValueFactory(partitioner);
  ArrayList<Token> endpointTokens=new ArrayList<Token>();
  ArrayList<Token> keyTokens=new ArrayList<Token>();
  List<InetAddress> hosts=new ArrayList<InetAddress>();
  List<UUID> hostIds=new ArrayList<UUID>();
  Util.createInitialRing(ss,partitioner,endpointTokens,keyTokens,hosts,hostIds,6);
  Token newToken=positionToken(7);
  ss.onChange(hosts.get(2),ApplicationState.STATUS,valueFactory.moving(newToken));
  assertTrue(tmd.isMoving(hosts.get(2)));
  assertTrue(tmd.getToken(hosts.get(2)).equals(endpointTokens.get(2)));
  Gossiper.instance.injectApplicationState(hosts.get(2),ApplicationState.TOKENS,valueFactory.tokens(Collections.singleton(newToken)));
  ss.onChange(hosts.get(2),ApplicationState.STATUS,valueFactory.normal(Collections.singleton(newToken)));
  assertTrue(tmd.getMovingEndpoints().isEmpty());
  assertTrue(tmd.getToken(hosts.get(2)).equals(newToken));
  newToken=positionToken(8);
  ss.onChange(hosts.get(2),ApplicationState.STATUS,valueFactory.moving(newToken));
  Gossiper.instance.injectApplicationState(hosts.get(2),ApplicationState.TOKENS,valueFactory.tokens(Collections.singleton(newToken)));
  ss.onChange(hosts.get(2),ApplicationState.STATUS,valueFactory.normal(Collections.singleton(newToken)));
  assertTrue(tmd.getBootstrapTokens().isEmpty());
  assertTrue(tmd.getMovingEndpoints().isEmpty());
  assertTrue(tmd.getToken(hosts.get(2)).equals(newToken));
}
