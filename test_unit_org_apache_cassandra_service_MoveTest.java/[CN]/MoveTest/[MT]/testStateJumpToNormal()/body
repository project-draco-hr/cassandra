{
  StorageService ss=StorageService.instance;
  TokenMetadata tmd=ss.getTokenMetadata();
  tmd.clearUnsafe();
  IPartitioner partitioner=new RandomPartitioner();
  ApplicationState.ApplicationStateFactory stateFactory=new ApplicationState.ApplicationStateFactory(partitioner);
  IPartitioner oldPartitioner=ss.setPartitionerUnsafe(partitioner);
  ArrayList<Token> endpointTokens=new ArrayList<Token>();
  ArrayList<Token> keyTokens=new ArrayList<Token>();
  List<InetAddress> hosts=new ArrayList<InetAddress>();
  createInitialRing(ss,partitioner,endpointTokens,keyTokens,hosts,6);
  ss.onChange(hosts.get(2),ApplicationState.STATE_MOVE,stateFactory.leaving(endpointTokens.get(2)));
  assertTrue(tmd.isLeaving(hosts.get(2)));
  assertTrue(tmd.getToken(hosts.get(2)).equals(endpointTokens.get(2)));
  ss.onChange(hosts.get(2),ApplicationState.STATE_MOVE,stateFactory.normal(keyTokens.get(2)));
  assertTrue(tmd.getLeavingEndpoints().isEmpty());
  assertTrue(tmd.getToken(hosts.get(2)).equals(keyTokens.get(2)));
  ss.onChange(hosts.get(2),ApplicationState.STATE_MOVE,stateFactory.leaving(keyTokens.get(2)));
  ss.onChange(hosts.get(2),ApplicationState.STATE_MOVE,stateFactory.left(keyTokens.get(2)));
  ss.onChange(hosts.get(2),ApplicationState.STATE_MOVE,stateFactory.normal(keyTokens.get(4)));
  assertTrue(tmd.getBootstrapTokens().isEmpty());
  assertTrue(tmd.getLeavingEndpoints().isEmpty());
  assertTrue(tmd.getToken(hosts.get(2)).equals(keyTokens.get(4)));
  ss.setPartitionerUnsafe(oldPartitioner);
}
