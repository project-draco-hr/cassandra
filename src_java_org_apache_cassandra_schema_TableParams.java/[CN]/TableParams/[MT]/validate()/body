{
  compaction.validate();
  compression.validate();
  if (bloomFilterFpChance <= 0 || bloomFilterFpChance > 1) {
    fail("%s must be larger than 0.0 and less than or equal to 1.0 (got %s)",Option.BLOOM_FILTER_FP_CHANCE,bloomFilterFpChance);
  }
  if (dcLocalReadRepairChance < 0 || dcLocalReadRepairChance > 1.0) {
    fail("%s must be larger than or equal to 0 and smaller than or equal to 1.0 (got %s)",Option.DCLOCAL_READ_REPAIR_CHANCE,dcLocalReadRepairChance);
  }
  if (readRepairChance < 0 || readRepairChance > 1.0) {
    fail("%s must be larger than or equal to 0 and smaller than or equal to 1.0 (got %s)",Option.READ_REPAIR_CHANCE,readRepairChance);
  }
  if (defaultTimeToLive < 0)   fail("%s must be greater than or equal to 0 (got %s)",Option.DEFAULT_TIME_TO_LIVE,defaultTimeToLive);
  if (gcGraceSeconds < 0)   fail("%s must be greater than or equal to 0 (got %s)",Option.GC_GRACE_SECONDS,gcGraceSeconds);
  if (minIndexInterval < 1)   fail("%s must be greater than or equal to 1 (got %s)",Option.MIN_INDEX_INTERVAL,minIndexInterval);
  if (maxIndexInterval < minIndexInterval) {
    fail("%s must be greater than or equal to %s (%s) (got %s)",Option.MAX_INDEX_INTERVAL,Option.MIN_INDEX_INTERVAL,minIndexInterval,maxIndexInterval);
  }
  if (memtableFlushPeriodInMs < 0)   fail("%s must be greater than or equal to 0 (got %s)",Option.MEMTABLE_FLUSH_PERIOD_IN_MS,memtableFlushPeriodInMs);
}
