{
  for (  String descOption : new String[]{"","_desc"}) {
    execute("INSERT INTO %s.single_clustering" + descOption + " (a, b, c) VALUES (0, 0, 0)");
    execute("INSERT INTO %s.single_clustering" + descOption + " (a, b, c) VALUES (0, 1, 1)");
    execute("INSERT INTO %s.single_clustering" + descOption + " (a, b, c) VALUES (0, 2, 2)");
    try {
      UntypedResultSet results=execute("SELECT blobAsInt(intAsBlob(b)) as col FROM %s.single_clustering" + descOption + " WHERE a=0 ORDER BY b ASC");
      assertEquals(3,results.size());
      Iterator<UntypedResultSet.Row> rows=results.iterator();
      for (int i=0; i < 3; i++)       assertEquals(i,rows.next().getInt("col"));
      results=execute("SELECT blobAsInt(intAsBlob(b)) as col FROM %s.single_clustering" + descOption + " WHERE a=0 ORDER BY b DESC");
      assertEquals(3,results.size());
      rows=results.iterator();
      for (int i=2; i >= 0; i--)       assertEquals(i,rows.next().getInt("col"));
      results=execute("SELECT b, blobAsInt(intAsBlob(b)) as col FROM %s.single_clustering" + descOption + " WHERE a=0 ORDER BY b ASC");
      assertEquals(3,results.size());
      rows=results.iterator();
      for (int i=0; i < 3; i++) {
        UntypedResultSet.Row row=rows.next();
        assertEquals(i,row.getInt("b"));
        assertEquals(i,row.getInt("col"));
      }
      results=execute("SELECT b, blobAsInt(intAsBlob(b)) as col FROM %s.single_clustering" + descOption + " WHERE a=0 ORDER BY b DESC");
      assertEquals(3,results.size());
      rows=results.iterator();
      for (int i=2; i >= 0; i--) {
        UntypedResultSet.Row row=rows.next();
        assertEquals(i,row.getInt("b"));
        assertEquals(i,row.getInt("col"));
      }
      results=execute("SELECT blobAsInt(intAsBlob(c)) as col FROM %s.single_clustering" + descOption + " WHERE a=0 ORDER BY b ASC");
      assertEquals(3,results.size());
      rows=results.iterator();
      for (int i=0; i < 3; i++)       assertEquals(i,rows.next().getInt("col"));
      results=execute("SELECT blobAsInt(intAsBlob(c)) as col FROM %s.single_clustering" + descOption + " WHERE a=0 ORDER BY b DESC");
      assertEquals(3,results.size());
      rows=results.iterator();
      for (int i=2; i >= 0; i--)       assertEquals(i,rows.next().getInt("col"));
    }
  finally {
      execute("DELETE FROM %s.single_clustering" + descOption + " WHERE a = 0");
    }
  }
}
