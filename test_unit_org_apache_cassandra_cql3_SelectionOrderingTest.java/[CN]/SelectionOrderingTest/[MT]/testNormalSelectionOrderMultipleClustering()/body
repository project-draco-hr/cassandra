{
  execute("INSERT INTO %s.multiple_clustering (a, b, c, d) VALUES (0, 0, 0, 0)");
  execute("INSERT INTO %s.multiple_clustering (a, b, c, d) VALUES (0, 0, 1, 1)");
  execute("INSERT INTO %s.multiple_clustering (a, b, c, d) VALUES (0, 0, 2, 2)");
  execute("INSERT INTO %s.multiple_clustering (a, b, c, d) VALUES (0, 1, 0, 3)");
  execute("INSERT INTO %s.multiple_clustering (a, b, c, d) VALUES (0, 1, 1, 4)");
  execute("INSERT INTO %s.multiple_clustering (a, b, c, d) VALUES (0, 1, 2, 5)");
  try {
    UntypedResultSet results=execute("SELECT * FROM %s.multiple_clustering WHERE a=0 ORDER BY b ASC");
    assertEquals(6,results.size());
    Iterator<UntypedResultSet.Row> rows=results.iterator();
    assertEquals(0,rows.next().getInt("d"));
    assertEquals(1,rows.next().getInt("d"));
    assertEquals(2,rows.next().getInt("d"));
    assertEquals(3,rows.next().getInt("d"));
    assertEquals(4,rows.next().getInt("d"));
    assertEquals(5,rows.next().getInt("d"));
    results=execute("SELECT * FROM %s.multiple_clustering WHERE a=0 ORDER BY b DESC");
    assertEquals(6,results.size());
    rows=results.iterator();
    assertEquals(5,rows.next().getInt("d"));
    assertEquals(4,rows.next().getInt("d"));
    assertEquals(3,rows.next().getInt("d"));
    assertEquals(2,rows.next().getInt("d"));
    assertEquals(1,rows.next().getInt("d"));
    assertEquals(0,rows.next().getInt("d"));
    results=execute("SELECT * FROM %s.multiple_clustering WHERE a=0 ORDER BY b DESC, c DESC");
    assertEquals(6,results.size());
    rows=results.iterator();
    assertEquals(5,rows.next().getInt("d"));
    assertEquals(4,rows.next().getInt("d"));
    assertEquals(3,rows.next().getInt("d"));
    assertEquals(2,rows.next().getInt("d"));
    assertEquals(1,rows.next().getInt("d"));
    assertEquals(0,rows.next().getInt("d"));
    results=execute("SELECT b FROM %s.multiple_clustering WHERE a=0 ORDER BY b ASC");
    assertEquals(6,results.size());
    rows=results.iterator();
    assertEquals(0,rows.next().getInt("b"));
    assertEquals(0,rows.next().getInt("b"));
    assertEquals(0,rows.next().getInt("b"));
    assertEquals(1,rows.next().getInt("b"));
    assertEquals(1,rows.next().getInt("b"));
    assertEquals(1,rows.next().getInt("b"));
    results=execute("SELECT b FROM %s.multiple_clustering WHERE a=0 ORDER BY b DESC");
    assertEquals(6,results.size());
    rows=results.iterator();
    assertEquals(1,rows.next().getInt("b"));
    assertEquals(1,rows.next().getInt("b"));
    assertEquals(1,rows.next().getInt("b"));
    assertEquals(0,rows.next().getInt("b"));
    assertEquals(0,rows.next().getInt("b"));
    assertEquals(0,rows.next().getInt("b"));
    results=execute("SELECT c FROM %s.multiple_clustering WHERE a=0 ORDER BY b ASC");
    rows=results.iterator();
    assertEquals(0,rows.next().getInt("c"));
    assertEquals(1,rows.next().getInt("c"));
    assertEquals(2,rows.next().getInt("c"));
    assertEquals(0,rows.next().getInt("c"));
    assertEquals(1,rows.next().getInt("c"));
    assertEquals(2,rows.next().getInt("c"));
    results=execute("SELECT c FROM %s.multiple_clustering WHERE a=0 ORDER BY b DESC");
    assertEquals(6,results.size());
    rows=results.iterator();
    assertEquals(2,rows.next().getInt("c"));
    assertEquals(1,rows.next().getInt("c"));
    assertEquals(0,rows.next().getInt("c"));
    assertEquals(2,rows.next().getInt("c"));
    assertEquals(1,rows.next().getInt("c"));
    assertEquals(0,rows.next().getInt("c"));
    results=execute("SELECT c FROM %s.multiple_clustering WHERE a=0 ORDER BY b ASC, c ASC");
    rows=results.iterator();
    assertEquals(0,rows.next().getInt("c"));
    assertEquals(1,rows.next().getInt("c"));
    assertEquals(2,rows.next().getInt("c"));
    assertEquals(0,rows.next().getInt("c"));
    assertEquals(1,rows.next().getInt("c"));
    assertEquals(2,rows.next().getInt("c"));
    results=execute("SELECT c FROM %s.multiple_clustering WHERE a=0 ORDER BY b DESC, c DESC");
    assertEquals(6,results.size());
    rows=results.iterator();
    assertEquals(2,rows.next().getInt("c"));
    assertEquals(1,rows.next().getInt("c"));
    assertEquals(0,rows.next().getInt("c"));
    assertEquals(2,rows.next().getInt("c"));
    assertEquals(1,rows.next().getInt("c"));
    assertEquals(0,rows.next().getInt("c"));
    results=execute("SELECT d FROM %s.multiple_clustering WHERE a=0 ORDER BY b ASC, c ASC");
    rows=results.iterator();
    assertEquals(0,rows.next().getInt("d"));
    assertEquals(1,rows.next().getInt("d"));
    assertEquals(2,rows.next().getInt("d"));
    assertEquals(3,rows.next().getInt("d"));
    assertEquals(4,rows.next().getInt("d"));
    assertEquals(5,rows.next().getInt("d"));
    results=execute("SELECT d FROM %s.multiple_clustering WHERE a=0 ORDER BY b DESC, c DESC");
    assertEquals(6,results.size());
    rows=results.iterator();
    assertEquals(5,rows.next().getInt("d"));
    assertEquals(4,rows.next().getInt("d"));
    assertEquals(3,rows.next().getInt("d"));
    assertEquals(2,rows.next().getInt("d"));
    assertEquals(1,rows.next().getInt("d"));
    assertEquals(0,rows.next().getInt("d"));
  }
  finally {
    execute("DELETE FROM %s.multiple_clustering WHERE a = 0");
  }
}
