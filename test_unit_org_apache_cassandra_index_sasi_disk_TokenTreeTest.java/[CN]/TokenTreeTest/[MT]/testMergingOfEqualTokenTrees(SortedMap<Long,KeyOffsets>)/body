{
  TokenTreeBuilder tokensA=new DynamicTokenTreeBuilder(tokensMap);
  TokenTreeBuilder tokensB=new DynamicTokenTreeBuilder(tokensMap);
  TokenTree a=buildTree(tokensA);
  TokenTree b=buildTree(tokensB);
  TokenTreeBuilder tokensC=new StaticTokenTreeBuilder(new CombinedTerm(null,null){
    public RangeIterator<Long,Token> getTokenIterator(){
      RangeIterator.Builder<Long,Token> union=RangeUnionIterator.builder();
      union.add(a.iterator(KeyConverter.instance));
      union.add(b.iterator(KeyConverter.instance));
      return union.build();
    }
  }
);
  TokenTree c=buildTree(tokensC);
  Assert.assertEquals(tokensMap.size(),c.getCount());
  Iterator<Token> tokenIterator=c.iterator(KeyConverter.instance);
  Iterator<Map.Entry<Long,KeyOffsets>> listIterator=tokensMap.entrySet().iterator();
  while (tokenIterator.hasNext() && listIterator.hasNext()) {
    Token treeNext=tokenIterator.next();
    Map.Entry<Long,KeyOffsets> listNext=listIterator.next();
    Assert.assertEquals(listNext.getKey(),treeNext.get());
    Assert.assertEquals(convert(listNext.getValue()),convert(treeNext));
  }
  for (  Map.Entry<Long,KeyOffsets> entry : tokensMap.entrySet()) {
    TokenTree.OnDiskToken result=c.get(entry.getKey(),KeyConverter.instance);
    Assert.assertNotNull("failed to find object for token " + entry.getKey(),result);
    KeyOffsets found=result.getOffsets();
    Assert.assertEquals(entry.getValue(),found);
  }
}
