def help_create_aggregate(self):
    print "\n        CREATE ( OR REPLACE )? AGGREGATE ( IF NOT EXISTS )?\n                            ( <keyspace> '.' )? <aggregate-name>\n                            '(' <arg-type> ( ',' <arg-type> )* ')'\n                            SFUNC ( <keyspace> '.' )? <state-functionname>\n                            STYPE <state-type>\n                            ( FINALFUNC ( <keyspace> '.' )? <final-functionname> )?\n                            ( INITCOND <init-cond> )?\n\n        CREATE AGGREGATE creates or replaces a user-defined aggregate.\n\n        CREATE AGGREGATE with the optional OR REPLACE keywords either creates an aggregate\n        or replaces an existing one with the same signature. A CREATE AGGREGATE without\n        OR REPLACE fails if an aggregate with the same signature already exists.\n\n        CREATE AGGREGATE with the optional IF NOT EXISTS keywords either creates an aggregate\n        if it does not already exist.\n\n        OR REPLACE and IF NOT EXIST cannot be used together.\n\n        Aggregates belong to a keyspace. If no keyspace is specified in <aggregate-name>, the\n        current keyspace is used (i.e. the keyspace specified using the USE statement). It is\n        not possible to create a user-defined aggregate in one of the system keyspaces.\n\n        Signatures for user-defined aggregates follow the same rules as for\n        user-defined functions.\n\n        STYPE defines the type of the state value and must be specified.\n\n        The optional INITCOND defines the initial state value for the aggregate. It defaults\n        to null. A non-null INITCOND must be specified for state functions that are declared\n        with RETURNS NULL ON NULL INPUT.\n\n        SFUNC references an existing function to be used as the state modifying function. The\n        type of first argument of the state function must match STYPE. The remaining argument\n        types of the state function must match the argument types of the aggregate function.\n        State is not updated for state functions declared with RETURNS NULL ON NULL INPUT and\n        called with null.\n\n        The optional FINALFUNC is called just before the aggregate result is returned. It must\n        take only one argument with type STYPE. The return type of the FINALFUNC may be a\n        different type. A final function declared with RETURNS NULL ON NULL INPUT means that\n        the aggregate's return value will be null, if the last state is null.\n\n        If no FINALFUNC is defined, the overall return type of the aggregate function is STYPE.\n        If a FINALFUNC is defined, it is the return type of that function.\n        "
