def help_select_expr(self):
    print '\n        SELECT: Specifying Columns\n\n          SELECT [FIRST n] [REVERSED] name1, name2, name3 FROM ...\n          SELECT [FIRST n] [REVERSED] name1..nameN FROM ...\n          SELECT COUNT(*) FROM ...\n\n        The SELECT expression determines which columns will appear in the\n        results and takes the form of either a comma separated list of names,\n        or a range. The range notation consists of a start and end column name\n        separated by two periods (..). The set of columns returned for a\n        range is start and end inclusive.\n\n        The FIRST option accepts an integer argument and can be used to apply a\n        limit to the number of columns returned per row.  When this limit is\n        left unset, it defaults to 10,000 columns.\n\n        The REVERSED option causes the sort order of the results to be\n        reversed.\n\n        It is worth noting that unlike the projection in a SQL SELECT, there is\n        no guarantee that the results will contain all of the columns\n        specified. This is because Cassandra is schema-less and there are no\n        guarantees that a given column exists.\n\n        When the COUNT aggregate function is specified as a column to fetch, a\n        single row will be returned, with a single column named "count" whose\n        value is the number of rows from the pre-aggregation resultset.\n\n        Currently, COUNT is the only function supported by CQL.\n\n         ** [FIRST n] and [REVERSED] are no longer supported in CQL 3.\n        '
