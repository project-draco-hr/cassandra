{
  StringBuffer sb=new StringBuffer("Tests run: ");
  sb.append(suite.runCount());
  sb.append(", Failures: ");
  sb.append(suite.failureCount());
  sb.append(", Errors: ");
  sb.append(suite.errorCount());
  sb.append(", Skipped: ");
  sb.append(suite.skipCount());
  sb.append(", Time elapsed: ");
  sb.append(numberFormat.format(suite.getRunTime() / ONE_SECOND));
  sb.append(" sec");
  sb.append(StringUtils.LINE_SEP);
  sb.append(StringUtils.LINE_SEP);
  if (systemOutput != null && systemOutput.length() > 0) {
    sb.append("------------- Standard Output ---------------").append(StringUtils.LINE_SEP).append(systemOutput).append("------------- ---------------- ---------------").append(StringUtils.LINE_SEP);
  }
  if (systemError != null && systemError.length() > 0) {
    sb.append("------------- Standard Error -----------------").append(StringUtils.LINE_SEP).append(systemError).append("------------- ---------------- ---------------").append(StringUtils.LINE_SEP);
  }
  if (output != null) {
    try {
      output.write(sb.toString());
      resultWriter.close();
      output.write(results.toString());
    }
 catch (    IOException ex) {
      throw new BuildException(ex);
    }
 finally {
      try {
        output.flush();
      }
 catch (      IOException ex) {
      }
      if (out != System.out && out != System.err) {
        FileUtils.close(out);
      }
    }
  }
}
