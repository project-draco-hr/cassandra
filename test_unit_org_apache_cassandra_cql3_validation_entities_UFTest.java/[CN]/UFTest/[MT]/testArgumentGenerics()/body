{
  createTable("CREATE TABLE %s (key int primary key, sval text, aval ascii, bval blob, empty_int int)");
  String typeName=createType("CREATE TYPE %s (txt text, i int)");
  createFunction(KEYSPACE,"map<text,bigint>,list<text>","CREATE FUNCTION IF NOT EXISTS %s(state map<text,bigint>, styles list<text>)\n" + "  RETURNS NULL ON NULL INPUT\n" + "  RETURNS map<text,bigint>\n"+ "  LANGUAGE java\n"+ "  AS $$\n"+ "    for (String style : styles) {\n"+ "      if (state.containsKey(style)) {\n"+ "        state.put(style, state.get(style) + 1L);\n"+ "      } else {\n"+ "        state.put(style, 1L);\n"+ "      }\n"+ "    }\n"+ "    return state;\n"+ "  $$");
  createFunction(KEYSPACE,"text","CREATE OR REPLACE FUNCTION %s(" + "  listText list<text>," + "  setText set<text>,"+ "  mapTextInt map<text, int>,"+ "  mapListTextSetInt map<frozen<list<text>>, frozen<set<int>>>,"+ "  mapTextTuple map<text, frozen<tuple<int, text>>>,"+ "  mapTextType map<text, frozen<" + typeName + ">>"+ ") "+ "CALLED ON NULL INPUT "+ "RETURNS map<frozen<list<text>>, frozen<set<int>>> "+ "LANGUAGE JAVA\n"+ "AS $$"+ "     for (String s : listtext) {};"+ "     for (String s : settext) {};"+ "     for (String s : maptextint.keySet()) {};"+ "     for (Integer s : maptextint.values()) {};"+ "     for (java.util.List<String> l : maplisttextsetint.keySet()) {};"+ "     for (java.util.Set<Integer> s : maplisttextsetint.values()) {};"+ "     for (com.datastax.driver.core.TupleValue t : maptexttuple.values()) {};"+ "     for (com.datastax.driver.core.UDTValue u : maptexttype.values()) {};"+ "     return maplisttextsetint;"+ "$$");
}
