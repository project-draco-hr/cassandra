{
  String type=KEYSPACE + '.' + createType("CREATE TYPE %s (txt text, i int)");
  createTable("CREATE TABLE %s (key int primary key, udt frozen<" + type + ">)");
  String fUdt0=createFunction(KEYSPACE,type,"CREATE FUNCTION %s( udt " + type + " ) "+ "RETURNS NULL ON NULL INPUT "+ "RETURNS "+ type+ " "+ "LANGUAGE java "+ "AS $$return "+ "     udt;$$;");
  String fUdt1=createFunction(KEYSPACE,type,"CREATE FUNCTION %s( udt " + type + ") "+ "RETURNS NULL ON NULL INPUT "+ "RETURNS text "+ "LANGUAGE java "+ "AS $$return "+ "     udt.getString(\"txt\");$$;");
  String fUdt2=createFunction(KEYSPACE,type,"CREATE FUNCTION %s( udt " + type + ") "+ "CALLED ON NULL INPUT "+ "RETURNS int "+ "LANGUAGE java "+ "AS $$return "+ "     Integer.valueOf(udt.getInt(\"i\"));$$;");
  execute("INSERT INTO %s (key, udt) VALUES (1, {txt: 'one', i:1})");
  UntypedResultSet rows=execute("SELECT " + fUdt0 + "(udt) FROM %s WHERE key = 1");
  Assert.assertEquals(1,rows.size());
  assertRows(execute("SELECT " + fUdt1 + "(udt) FROM %s WHERE key = 1"),row("one"));
  assertRows(execute("SELECT " + fUdt2 + "(udt) FROM %s WHERE key = 1"),row(1));
  for (  int version : PROTOCOL_VERSIONS) {
    List<Row> rowsNet=executeNet(version,"SELECT " + fUdt0 + "(udt) FROM %s WHERE key = 1").all();
    Assert.assertEquals(1,rowsNet.size());
    UDTValue udtVal=rowsNet.get(0).getUDTValue(0);
    Assert.assertEquals("one",udtVal.getString("txt"));
    Assert.assertEquals(1,udtVal.getInt("i"));
    assertRowsNet(version,executeNet(version,"SELECT " + fUdt1 + "(udt) FROM %s WHERE key = 1"),row("one"));
    assertRowsNet(version,executeNet(version,"SELECT " + fUdt2 + "(udt) FROM %s WHERE key = 1"),row(1));
  }
}
