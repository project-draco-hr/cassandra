{
  createTable("CREATE TABLE %s (key int primary key, dval double)");
  execute("INSERT INTO %s (key, dval) VALUES (?, ?)",1,1d);
  long udfWarnTimeout=DatabaseDescriptor.getUserDefinedFunctionWarnTimeout();
  long udfFailTimeout=DatabaseDescriptor.getUserDefinedFunctionFailTimeout();
  int maxTries=5;
  for (int i=1; i <= maxTries; i++) {
    try {
      DatabaseDescriptor.setUserDefinedFunctionWarnTimeout(10);
      DatabaseDescriptor.setUserDefinedFunctionFailTimeout(250);
      DatabaseDescriptor.setUserFunctionTimeoutPolicy(Config.UserFunctionTimeoutPolicy.ignore);
      ClientWarn.captureWarnings();
      String fName=createFunction(KEYSPACE_PER_TEST,"double","CREATE OR REPLACE FUNCTION %s(val double) " + "RETURNS NULL ON NULL INPUT " + "RETURNS double "+ "LANGUAGE JAVA\n"+ "AS 'long t=System.currentTimeMillis()+110; while (t>System.currentTimeMillis()) { }; return 0d;'");
      execute("SELECT " + fName + "(dval) FROM %s WHERE key=1");
      List<String> warnings=ClientWarn.getWarnings();
      Assert.assertNotNull(warnings);
      Assert.assertFalse(warnings.isEmpty());
      ClientWarn.resetWarnings();
      fName=createFunction(KEYSPACE_PER_TEST,"double","CREATE OR REPLACE FUNCTION %s(val double) " + "RETURNS NULL ON NULL INPUT " + "RETURNS double "+ "LANGUAGE JAVA\n"+ "AS 'long t=System.currentTimeMillis()+500; while (t>System.currentTimeMillis()) { }; return 0d;';");
      assertInvalidMessage("ran longer than 250ms","SELECT " + fName + "(dval) FROM %s WHERE key=1");
      fName=createFunction(KEYSPACE_PER_TEST,"double","CREATE OR REPLACE FUNCTION %s(val double) " + "RETURNS NULL ON NULL INPUT " + "RETURNS double "+ "LANGUAGE JAVASCRIPT\n"+ "AS 'var t=java.lang.System.currentTimeMillis()+500; while (t>java.lang.System.currentTimeMillis()) { }; 0;';");
      assertInvalidMessage("ran longer than 250ms","SELECT " + fName + "(dval) FROM %s WHERE key=1");
      return;
    }
 catch (    Error|RuntimeException e) {
      if (i == maxTries)       throw e;
    }
 finally {
      DatabaseDescriptor.setUserDefinedFunctionWarnTimeout(udfWarnTimeout);
      DatabaseDescriptor.setUserDefinedFunctionFailTimeout(udfFailTimeout);
    }
  }
}
