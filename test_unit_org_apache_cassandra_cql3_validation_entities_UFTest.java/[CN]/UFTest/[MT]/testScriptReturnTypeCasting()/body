{
  createTable("CREATE TABLE %s (key int primary key, val double)");
  execute("INSERT INTO %s (key, val) VALUES (?, ?)",1,1d);
  Object[][] variations={new Object[]{"true","boolean",true},new Object[]{"false","boolean",false},new Object[]{"100","tinyint",(byte)100},new Object[]{"100.","tinyint",(byte)100},new Object[]{"100","smallint",(short)100},new Object[]{"100.","smallint",(short)100},new Object[]{"100","int",100},new Object[]{"100.","int",100},new Object[]{"100","double",100d},new Object[]{"100.","double",100d},new Object[]{"100","bigint",100L},new Object[]{"100.","bigint",100L},new Object[]{"100","varint",BigInteger.valueOf(100L)},new Object[]{"100.","varint",BigInteger.valueOf(100L)},new Object[]{"parseInt(\"100\");","decimal",BigDecimal.valueOf(100d)},new Object[]{"100.","decimal",BigDecimal.valueOf(100d)}};
  for (  Object[] variation : variations) {
    Object functionBody=variation[0];
    Object returnType=variation[1];
    Object expectedResult=variation[2];
    String fName=createFunction(KEYSPACE,"double","CREATE OR REPLACE FUNCTION %s(val double) " + "RETURNS NULL ON NULL INPUT " + "RETURNS " + returnType + ' '+ "LANGUAGE javascript "+ "AS '"+ functionBody+ ";';");
    assertRows(execute("SELECT key, val, " + fName + "(val) FROM %s"),row(1,1d,expectedResult));
  }
}
