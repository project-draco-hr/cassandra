{
  createTable("CREATE TABLE %s (a int PRIMARY KEY, b frozen<list<int>>)");
  createIndex("CREATE INDEX ON %s (FULL(b))");
  execute("INSERT INTO %s (a, b) VALUES (?, ?)",0,list());
  execute("INSERT INTO %s (a, b) VALUES (?, ?)",1,list(1,2,3));
  execute("INSERT INTO %s (a, b) VALUES (?, ?)",2,list(4,5,6));
  execute("INSERT INTO %s (a, b) VALUES (?, ?)",3,list(7,8,9));
  assertInvalidMessage("The function arguments should not be frozen","CREATE OR REPLACE FUNCTION " + KEYSPACE + ".withFrozenArg(values frozen<list<int>>) "+ "CALLED ON NULL INPUT "+ "RETURNS int "+ "LANGUAGE java\n"+ "AS 'int sum = 0; for (Object value : values) {sum += value;} return sum;';");
  assertInvalidMessage("The function return type should not be frozen","CREATE OR REPLACE FUNCTION " + KEYSPACE + ".frozenReturnType(values list<int>) "+ "CALLED ON NULL INPUT "+ "RETURNS frozen<list<int>> "+ "LANGUAGE java\n"+ "AS 'return values;';");
  String functionName=createFunction(KEYSPACE,"list<int>","CREATE FUNCTION %s (values list<int>) " + "CALLED ON NULL INPUT " + "RETURNS int "+ "LANGUAGE java\n"+ "AS 'int sum = 0; for (Object value : values) {sum += ((Integer) value);} return sum;';");
  assertRows(execute("SELECT a, " + functionName + "(b) FROM %s WHERE a = 0"),row(0,0));
  assertRows(execute("SELECT a, " + functionName + "(b) FROM %s WHERE a = 1"),row(1,6));
  assertRows(execute("SELECT a, " + functionName + "(b) FROM %s WHERE a = 2"),row(2,15));
  assertRows(execute("SELECT a, " + functionName + "(b) FROM %s WHERE a = 3"),row(3,24));
  functionName=createFunction(KEYSPACE,"list<int>","CREATE FUNCTION %s (values list<int>) " + "CALLED ON NULL INPUT " + "RETURNS list<int> "+ "LANGUAGE java\n"+ "AS 'return values;';");
  assertRows(execute("SELECT a FROM %s WHERE b = " + functionName + "(?)",set(1,2,3)),row(1));
  assertInvalidMessage("The function arguments should not be frozen","DROP FUNCTION " + functionName + "(frozen<list<int>>);");
}
