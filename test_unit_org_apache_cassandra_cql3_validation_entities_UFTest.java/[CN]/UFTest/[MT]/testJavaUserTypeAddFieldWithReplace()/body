{
  String type=KEYSPACE + '.' + createType("CREATE TYPE %s (txt text, i int)");
  createTable("CREATE TABLE %s (key int primary key, udt frozen<" + type + ">)");
  String fName1replace=createFunction(KEYSPACE,type,"CREATE FUNCTION %s( udt " + type + ") "+ "RETURNS NULL ON NULL INPUT "+ "RETURNS text "+ "LANGUAGE java\n"+ "AS $$return udt.getString(\"txt\");$$;");
  String fName2replace=createFunction(KEYSPACE,type,"CREATE FUNCTION %s( udt " + type + " ) "+ "CALLED ON NULL INPUT "+ "RETURNS int "+ "LANGUAGE java\n"+ "AS $$return Integer.valueOf(udt.getInt(\"i\"));$$;");
  String fName3replace=createFunction(KEYSPACE,type,"CREATE FUNCTION %s( udt " + type + " ) "+ "CALLED ON NULL INPUT "+ "RETURNS double "+ "LANGUAGE java\n"+ "AS $$return Double.valueOf(udt.getDouble(\"added\"));$$;");
  String fName4replace=createFunction(KEYSPACE,type,"CREATE FUNCTION %s( udt " + type + " ) "+ "RETURNS NULL ON NULL INPUT "+ "RETURNS "+ type+ " "+ "LANGUAGE java\n"+ "AS $$return udt;$$;");
  String fName1noReplace=createFunction(KEYSPACE,type,"CREATE FUNCTION %s( udt " + type + " ) "+ "RETURNS NULL ON NULL INPUT "+ "RETURNS text "+ "LANGUAGE java\n"+ "AS $$return udt.getString(\"txt\");$$;");
  String fName2noReplace=createFunction(KEYSPACE,type,"CREATE FUNCTION %s( udt " + type + " ) "+ "CALLED ON NULL INPUT "+ "RETURNS int "+ "LANGUAGE java\n"+ "AS $$return Integer.valueOf(udt.getInt(\"i\"));$$;");
  String fName3noReplace=createFunction(KEYSPACE,type,"CREATE FUNCTION %s( udt " + type + " ) "+ "CALLED ON NULL INPUT "+ "RETURNS double "+ "LANGUAGE java\n"+ "AS $$return Double.valueOf(udt.getDouble(\"added\"));$$;");
  String fName4noReplace=createFunction(KEYSPACE,type,"CREATE FUNCTION %s( udt " + type + " ) "+ "RETURNS NULL ON NULL INPUT "+ "RETURNS "+ type+ " "+ "LANGUAGE java\n"+ "AS $$return udt;$$;");
  execute("INSERT INTO %s (key, udt) VALUES (1, {txt: 'one', i:1})");
  assertRows(execute("SELECT " + fName1replace + "(udt) FROM %s WHERE key = 1"),row("one"));
  assertRows(execute("SELECT " + fName2replace + "(udt) FROM %s WHERE key = 1"),row(1));
  execute("ALTER TYPE " + type + " ADD added double");
  execute("INSERT INTO %s (key, udt) VALUES (2, {txt: 'two', i:2, added: 2})");
  execute(String.format("CREATE OR REPLACE FUNCTION %s( udt %s ) " + "RETURNS NULL ON NULL INPUT " + "RETURNS text "+ "LANGUAGE java\n"+ "AS $$return "+ "     udt.getString(\"txt\");$$;",fName1replace,type));
  Assert.assertEquals(1,Schema.instance.getFunctions(parseFunctionName(fName1replace)).size());
  execute(String.format("CREATE OR REPLACE FUNCTION %s( udt %s ) " + "CALLED ON NULL INPUT " + "RETURNS int "+ "LANGUAGE java\n"+ "AS $$return "+ "     Integer.valueOf(udt.getInt(\"i\"));$$;",fName2replace,type));
  Assert.assertEquals(1,Schema.instance.getFunctions(parseFunctionName(fName2replace)).size());
  execute(String.format("CREATE OR REPLACE FUNCTION %s( udt %s ) " + "CALLED ON NULL INPUT " + "RETURNS double "+ "LANGUAGE java\n"+ "AS $$return "+ "     Double.valueOf(udt.getDouble(\"added\"));$$;",fName3replace,type));
  Assert.assertEquals(1,Schema.instance.getFunctions(parseFunctionName(fName3replace)).size());
  execute(String.format("CREATE OR REPLACE FUNCTION %s( udt %s ) " + "RETURNS NULL ON NULL INPUT " + "RETURNS %s "+ "LANGUAGE java\n"+ "AS $$return "+ "     udt;$$;",fName4replace,type,type));
  Assert.assertEquals(1,Schema.instance.getFunctions(parseFunctionName(fName4replace)).size());
  assertRows(execute("SELECT " + fName1replace + "(udt) FROM %s WHERE key = 2"),row("two"));
  assertRows(execute("SELECT " + fName2replace + "(udt) FROM %s WHERE key = 2"),row(2));
  assertRows(execute("SELECT " + fName3replace + "(udt) FROM %s WHERE key = 2"),row(2d));
  assertRows(execute("SELECT " + fName3replace + "(udt) FROM %s WHERE key = 1"),row(0d));
  assertRows(execute("SELECT " + fName1noReplace + "(udt) FROM %s WHERE key = 2"),row("two"));
  assertRows(execute("SELECT " + fName2noReplace + "(udt) FROM %s WHERE key = 2"),row(2));
  assertRows(execute("SELECT " + fName3noReplace + "(udt) FROM %s WHERE key = 2"),row(2d));
  assertRows(execute("SELECT " + fName3noReplace + "(udt) FROM %s WHERE key = 1"),row(0d));
  execute("DROP FUNCTION " + fName1replace);
  execute("DROP FUNCTION " + fName2replace);
  execute("DROP FUNCTION " + fName3replace);
  execute("DROP FUNCTION " + fName4replace);
  execute("DROP FUNCTION " + fName1noReplace);
  execute("DROP FUNCTION " + fName2noReplace);
  execute("DROP FUNCTION " + fName3noReplace);
  execute("DROP FUNCTION " + fName4noReplace);
}
