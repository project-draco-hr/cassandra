{
  factory=new ColumnFamilyMetricNameFactory(cfs);
  memtableColumnsCount=CassandraMetricRegistry.register(factory.createMetricName("MemtableColumnsCount"),new Gauge<Long>(){
    public Long getValue(){
      return cfs.getDataTracker().getMemtable().getOperations();
    }
  }
);
  memtableDataSize=CassandraMetricRegistry.register(factory.createMetricName("MemtableDataSize"),new Gauge<Long>(){
    public Long getValue(){
      return cfs.getDataTracker().getMemtable().getLiveSize();
    }
  }
);
  memtableSwitchCount=CassandraMetricRegistry.get().counter(factory.createMetricName("MemtableSwitchCount"));
  estimatedRowSizeHistogram=CassandraMetricRegistry.register(factory.createMetricName("EstimatedRowSizeHistogram"),new Gauge<long[]>(){
    public long[] getValue(){
      long[] histogram=new long[90];
      for (      SSTableReader sstable : cfs.getSSTables()) {
        long[] rowSize=sstable.getEstimatedRowSize().getBuckets(false);
        for (int i=0; i < histogram.length; i++)         histogram[i]+=rowSize[i];
      }
      return histogram;
    }
  }
);
  estimatedColumnCountHistogram=CassandraMetricRegistry.register(factory.createMetricName("EstimatedColumnCountHistogram"),new Gauge<long[]>(){
    public long[] getValue(){
      long[] histogram=new long[90];
      for (      SSTableReader sstable : cfs.getSSTables()) {
        long[] columnSize=sstable.getEstimatedColumnCount().getBuckets(false);
        for (int i=0; i < histogram.length; i++)         histogram[i]+=columnSize[i];
      }
      return histogram;
    }
  }
);
  sstablesPerReadHistogram=CassandraMetricRegistry.get().histogram(factory.createMetricName("SSTablesPerReadHistogram"));
  compressionRatio=CassandraMetricRegistry.register(factory.createMetricName("CompressionRatio"),new Gauge<Double>(){
    public Double getValue(){
      double sum=0;
      int total=0;
      for (      SSTableReader sstable : cfs.getSSTables()) {
        if (sstable.getCompressionRatio() != SSTableMetadata.NO_COMPRESSION_RATIO) {
          sum+=sstable.getCompressionRatio();
          total++;
        }
      }
      return total != 0 ? (double)sum / total : 0;
    }
  }
);
  readLatency=new LatencyMetrics(factory,"Read");
  writeLatency=new LatencyMetrics(factory,"Write");
  pendingTasks=CassandraMetricRegistry.register(factory.createMetricName("PendingTasks"),new Gauge<Integer>(){
    public Integer getValue(){
      return Keyspace.switchLock.getQueueLength();
    }
  }
);
  liveSSTableCount=CassandraMetricRegistry.register(factory.createMetricName("LiveSSTableCount"),new Gauge<Integer>(){
    public Integer getValue(){
      return cfs.getDataTracker().getSSTables().size();
    }
  }
);
  liveDiskSpaceUsed=CassandraMetricRegistry.get().counter(factory.createMetricName("LiveDiskSpaceUsed"));
  totalDiskSpaceUsed=CassandraMetricRegistry.get().counter(factory.createMetricName("TotalDiskSpaceUsed"));
  minRowSize=CassandraMetricRegistry.register(factory.createMetricName("MinRowSize"),new Gauge<Long>(){
    public Long getValue(){
      long min=0;
      for (      SSTableReader sstable : cfs.getSSTables()) {
        if (min == 0 || sstable.getEstimatedRowSize().min() < min)         min=sstable.getEstimatedRowSize().min();
      }
      return min;
    }
  }
);
  maxRowSize=CassandraMetricRegistry.register(factory.createMetricName("MaxRowSize"),new Gauge<Long>(){
    public Long getValue(){
      long max=0;
      for (      SSTableReader sstable : cfs.getSSTables()) {
        if (sstable.getEstimatedRowSize().max() > max)         max=sstable.getEstimatedRowSize().max();
      }
      return max;
    }
  }
);
  meanRowSize=CassandraMetricRegistry.register(factory.createMetricName("MeanRowSize"),new Gauge<Long>(){
    public Long getValue(){
      long sum=0;
      long count=0;
      for (      SSTableReader sstable : cfs.getSSTables()) {
        sum+=sstable.getEstimatedRowSize().mean();
        count++;
      }
      return count > 0 ? sum / count : 0;
    }
  }
);
  bloomFilterFalsePositives=CassandraMetricRegistry.register(factory.createMetricName("BloomFilterFalsePositives"),new Gauge<Long>(){
    public Long getValue(){
      long count=0L;
      for (      SSTableReader sstable : cfs.getSSTables())       count+=sstable.getBloomFilterFalsePositiveCount();
      return count;
    }
  }
);
  recentBloomFilterFalsePositives=CassandraMetricRegistry.register(factory.createMetricName("RecentBloomFilterFalsePositives"),new Gauge<Long>(){
    public Long getValue(){
      long count=0L;
      for (      SSTableReader sstable : cfs.getSSTables())       count+=sstable.getRecentBloomFilterFalsePositiveCount();
      return count;
    }
  }
);
  bloomFilterFalseRatio=CassandraMetricRegistry.register(factory.createMetricName("BloomFilterFalseRatio"),new Gauge<Double>(){
    public Double getValue(){
      long falseCount=0L;
      long trueCount=0L;
      for (      SSTableReader sstable : cfs.getSSTables()) {
        falseCount+=sstable.getBloomFilterFalsePositiveCount();
        trueCount+=sstable.getBloomFilterTruePositiveCount();
      }
      if (falseCount == 0L && trueCount == 0L)       return 0d;
      return (double)falseCount / (trueCount + falseCount);
    }
  }
);
  recentBloomFilterFalseRatio=CassandraMetricRegistry.register(factory.createMetricName("RecentBloomFilterFalseRatio"),new Gauge<Double>(){
    public Double getValue(){
      long falseCount=0L;
      long trueCount=0L;
      for (      SSTableReader sstable : cfs.getSSTables()) {
        falseCount+=sstable.getRecentBloomFilterFalsePositiveCount();
        trueCount+=sstable.getRecentBloomFilterTruePositiveCount();
      }
      if (falseCount == 0L && trueCount == 0L)       return 0d;
      return (double)falseCount / (trueCount + falseCount);
    }
  }
);
  bloomFilterDiskSpaceUsed=CassandraMetricRegistry.register(factory.createMetricName("BloomFilterDiskSpaceUsed"),new Gauge<Long>(){
    public Long getValue(){
      long total=0;
      for (      SSTableReader sst : cfs.getSSTables())       total+=sst.getBloomFilterSerializedSize();
      return total;
    }
  }
);
  speculativeRetry=CassandraMetricRegistry.get().counter(factory.createMetricName("SpeculativeRetry"));
  keyCacheHitRate=CassandraMetricRegistry.register(factory.createMetricName("KeyCacheHitRate"),new RatioGauge(){
    protected double getNumerator(){
      long hits=0L;
      for (      SSTableReader sstable : cfs.getSSTables())       hits+=sstable.getKeyCacheHit();
      return hits;
    }
    protected double getDenominator(){
      long requests=0L;
      for (      SSTableReader sstable : cfs.getSSTables())       requests+=sstable.getKeyCacheRequest();
      return Math.max(requests,1);
    }
    @Override protected Ratio getRatio(){
      return Ratio.of(getNumerator(),getDenominator());
    }
  }
);
}
