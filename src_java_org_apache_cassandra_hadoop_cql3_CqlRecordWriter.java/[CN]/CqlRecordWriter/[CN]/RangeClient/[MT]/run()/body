{
  outer:   while (run || !queue.isEmpty()) {
    List<ByteBuffer> bindVariables;
    try {
      bindVariables=queue.take();
    }
 catch (    InterruptedException e) {
      continue;
    }
    ListIterator<InetAddress> iter=endpoints.listIterator();
    while (true) {
      try {
        InetAddress address=iter.next();
        String host=address.getHostName();
        client=CqlConfigHelper.getOutputCluster(host,conf).connect();
      }
 catch (      Exception e) {
        if (Thread.interrupted()) {
          lastException=new IOException(e);
          iter.previous();
        }
        closeInternal();
        if ((e instanceof AuthenticationException || e instanceof InvalidQueryException) || !iter.hasNext()) {
          lastException=new IOException(e);
          break outer;
        }
      }
      try {
        int i=0;
        PreparedStatement statement=preparedStatement(client);
        while (bindVariables != null) {
          BoundStatement boundStatement=new BoundStatement(statement);
          for (int columnPosition=0; columnPosition < bindVariables.size(); columnPosition++) {
            boundStatement.setBytesUnsafe(columnPosition,bindVariables.get(columnPosition));
          }
          client.execute(boundStatement);
          i++;
          if (i >= batchThreshold)           break;
          bindVariables=queue.poll();
        }
        break;
      }
 catch (      Exception e) {
        closeInternal();
        if (!iter.hasNext()) {
          lastException=new IOException(e);
          break outer;
        }
      }
    }
  }
  closeInternal();
}
