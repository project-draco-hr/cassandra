def parse_types_compact(self):
    if issubclass(self.partition_key_validator, CompositeType):
        partkey_types = self.partition_key_validator.subtypes
    else:
        partkey_types = [self.partition_key_validator]
    if (len(partkey_types) != len(self.key_aliases)):
        warn(UnexpectedTableStructure(('Compact storage CF key-validator-types %r is not the same length as its key_aliases %r' % (partkey_types, self.key_aliases))))
    if (len(self.column_aliases) == 0):
        if (self.comparator is not UTF8Type):
            warn(UnexpectedTableStructure('Compact storage CF %s has no column aliases, but comparator is not UTF8Type.'))
        colalias_types = []
    elif issubclass(self.comparator, CompositeType):
        colalias_types = self.comparator.subtypes
    else:
        colalias_types = [self.comparator]
    if (len(colalias_types) != len(self.column_aliases)):
        warn(UnexpectedTableStructure(('Compact storage CF comparator-types %r is not the same length as its column_aliases %r' % (colalias_types, self.column_aliases))))
    partkey_cols = map(self.column_class, self.partition_key_components, partkey_types)
    colalias_cols = map(self.column_class, self.column_aliases, colalias_types)
    if (self.value_alias is not None):
        if self.coldefs:
            warn(UnexpectedTableStructure(('Compact storage CF has both a value_alias (%r) and entries in system.schema_columns' % (self.value_alias,))))
        if (self.value_alias == ''):
            value_cols = []
        else:
            value_cols = [self.column_class(self.value_alias, self.default_validator)]
    else:
        value_cols = map(self.column_class.from_layout, self.coldefs)
        value_cols.sort(key=(lambda c: c.name))
    return ((partkey_cols + colalias_cols) + value_cols)
