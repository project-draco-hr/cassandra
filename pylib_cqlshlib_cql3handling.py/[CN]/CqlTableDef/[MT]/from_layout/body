@classmethod
def from_layout(cls, layout, coldefs):
    '\n        This constructor accepts a dictionary of column-value pairs from a row\n        of system.schema_columnfamilies, and a sequence of similar dictionaries\n        from corresponding rows in system.schema_columns.\n        '
    try:
        cfname = layout[u'columnfamily_name']
        ksname = layout[u'keyspace_name']
    except KeyError:
        cfname = layout[u'columnfamily']
        ksname = layout[u'keyspace']
    cf = cls(name=cfname)
    for (attr, val) in layout.items():
        setattr(cf, attr.encode('ascii'), val)
    cf.keyspace = ksname
    for attr in cls.json_attrs:
        try:
            val = getattr(cf, attr)
            if ((attr == 'key_aliases') and (val is None)):
                val = '[]'
            setattr(cf, attr, json.loads(val))
        except AttributeError:
            pass
    cf.partition_key_validator = lookup_casstype(cf.key_validator)
    cf.comparator = lookup_casstype(cf.comparator)
    cf.default_validator = lookup_casstype(cf.default_validator)
    cf.coldefs = cf.filter_regular_coldefs(coldefs)
    cf.compact_storage = cf.is_compact_storage()
    cf.key_aliases = cf.get_key_aliases()
    cf.partition_key_components = cf.key_aliases
    cf.column_aliases = cf.get_column_aliases()
    cf.primary_key_components = (cf.key_aliases + list(cf.column_aliases))
    cf.columns = cf.get_columns()
    return cf
