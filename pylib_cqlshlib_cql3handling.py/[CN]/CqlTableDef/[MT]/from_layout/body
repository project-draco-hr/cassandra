@classmethod
def from_layout(cls, layout, coldefs):
    '\n        This constructor accepts a dictionary of column-value pairs from a row\n        of system.schema_columnfamilies, and a sequence of similar dictionaries\n        from corresponding rows in system.schema_columns.\n        '
    cf = cls(name=layout[u'columnfamily_name'])
    cf.keyspace = layout[u'keyspace_name']
    for (attr, val) in layout.items():
        setattr(cf, attr.encode('ascii'), val)
    cf.comparator = lookup_casstype(cf.comparator)
    for attr in ('compaction_strategy_options', 'compression_parameters'):
        setattr(cf, attr, json.loads(getattr(cf, attr)))
    columns = filter((lambda c: c.name), map(CqlColumnDef.from_layout, coldefs))
    partition_key_cols = filter((lambda c: (c.component_type == u'partition_key')), columns)
    partition_key_cols.sort(key=(lambda c: c.component_index))
    cf.partition_key_columns = map((lambda c: c.name), partition_key_cols)
    clustering_key_cols = filter((lambda c: (c.component_type == u'clustering_key')), columns)
    clustering_key_cols.sort(key=(lambda c: c.component_index))
    cf.clustering_key_columns = map((lambda c: c.name), clustering_key_cols)
    cf.primary_key_columns = (cf.partition_key_columns + cf.clustering_key_columns)
    regular_cols = list(((set(columns) - set(partition_key_cols)) - set(clustering_key_cols)))
    regular_cols.sort(key=(lambda c: c.name))
    cf.regular_columns = map((lambda c: c.name), regular_cols)
    cf.columns = ((partition_key_cols + clustering_key_cols) + regular_cols)
    return cf
