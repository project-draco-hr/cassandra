def check_assumptions(self):
    "\n        be explicit about assumptions being made; warn if not met. if some of\n        these are accurate but not the others, it's not clear whether the\n        right results will come out.\n        "
    if (self.value_alias is not None):
        if (len(self.coldefs) > 0):
            warn(UnexpectedTableStructure(('expected compact storage CF (has value alias) to have no column definitions in system.schema_columns, but found %r' % (self.coldefs,))))
        elif (len(self.column_aliases) == 0):
            warn(UnexpectedTableStructure('expected compact storage CF (has value alias) to have column aliases, but found none'))
    elif self.comparator.startswith((self.composite_type_name + '(')):
        if (len(self.column_aliases) == 0):
            warn(UnexpectedTableStructure('expected composite key CF to have column aliases, but found none'))
        elif (not self.comparator.endswith((self.colname_type_name + ')'))):
            warn(UnexpectedTableStructure(('expected non-compact composite CF to have %s as last component of composite comparator, but found %r' % (self.colname_type_name, self.comparator))))
        elif (len(self.coldefs) == 0):
            warn(UnexpectedTableStructure('expected non-compact composite CF to have entries in system.schema_columns, but found none'))
    elif (len(self.column_aliases) > 0):
        warn(UnexpectedTableStructure(('expected non-composite CF to have no column aliases, but found %r.' % (self.column_aliases,))))
    num_subtypes = (self.comparator.count(',') + 1)
    if self.compact_storage:
        num_subtypes += 1
    if (len(self.key_components) != num_subtypes):
        warn(UnexpectedTableStructure(("expected %r length to be %d, but it's %d. comparator=%r" % (self.key_components, num_subtypes, len(self.key_components), self.comparator))))
