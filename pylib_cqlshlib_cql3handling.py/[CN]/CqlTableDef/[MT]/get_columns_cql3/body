def get_columns_cql3(self):
    if issubclass(self.partition_key_validator, CompositeType):
        partkey_types = self.partition_key_validator.subtypes
    else:
        partkey_types = [self.partition_key_validator]
    partkey_cols = map(self.column_class, self.partition_key_components, partkey_types)
    for subtype in self.comparator.subtypes[:(-1)]:
        if issubclass(subtype, ColumnToCollectionType):
            warn(UnexpectedTableStructure('ColumnToCollectionType found, but not in last position inside composite comparator'))
    coltypes = list(self.comparator.subtypes)
    if issubclass(coltypes[(-1)], ColumnToCollectionType):
        coltypes.pop((-1))
    if ((len(coltypes) != (len(self.column_aliases) + 1)) or (coltypes[(-1)] is not UTF8Type)):
        warn(UnexpectedTableStructure('CQL3 CF does not have UTF8Type added to comparator'))
    colalias_cols = map(self.column_class, self.column_aliases, coltypes[:(-1)])
    if (self.value_alias is not None):
        warn(UnexpectedTableStructure(('CQL3 CF has a value_alias (%r)' % (self.value_alias,))))
    value_cols = map(self.column_class.from_layout, self.coldefs)
    value_cols.sort(key=(lambda c: c.name))
    return ((partkey_cols + colalias_cols) + value_cols)
