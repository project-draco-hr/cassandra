def parse_types_dynamic(self):
    if (not issubclass(self.comparator, CompositeType)):
        warn(UnexpectedTableStructure(('Dynamic storage CF comparator is %r, not composite' % (self.comparator,))))
    if issubclass(self.partition_key_validator, CompositeType):
        partkey_types = self.partition_key_validator.subtypes
    else:
        partkey_types = [self.partition_key_validator]
    if (len(partkey_types) != len(self.key_aliases)):
        warn(UnexpectedTableStructure(('Dynamic storage CF key-validator-types %r is not the same length as its key_aliases %r' % (partkey_types, self.key_aliases))))
    for subtype in self.comparator.subtypes[:(-1)]:
        if issubclass(subtype, ColumnToCollectionType):
            warn(UnexpectedTableStructure('ColumnToCollectionType found, but not in last position inside composite comparator'))
    coltypes = list(self.comparator.subtypes)
    if issubclass(coltypes[(-1)], ColumnToCollectionType):
        coltypes.pop((-1))
    if ((len(coltypes) != (len(self.column_aliases) + 1)) or (coltypes[(-1)] is not UTF8Type)):
        warn(UnexpectedTableStructure('Dynamic storage CF does not have UTF8Type added to comparator'))
    colalias_types = coltypes[:(-1)]
    partkey_cols = map(self.column_class, self.partition_key_components, partkey_types)
    colalias_cols = map(self.column_class, self.column_aliases, colalias_types)
    if (self.value_alias is not None):
        warn(UnexpectedTableStructure(('Dynamic storage CF has a value_alias (%r)' % (self.value_alias,))))
    value_cols = map(self.column_class.from_layout, self.coldefs)
    return ((partkey_cols + colalias_cols) + value_cols)
