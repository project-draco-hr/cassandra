def ks_prop_val_mapkey_completer(ctxt, cass):
    optname = ctxt.get_binding('propname')[(-1)]
    if (optname != 'replication'):
        return ()
    keysseen = map(dequote_value, ctxt.get_binding('propmapkey', ()))
    valsseen = map(dequote_value, ctxt.get_binding('propmapval', ()))
    for (k, v) in zip(keysseen, valsseen):
        if (k == 'class'):
            repclass = v
            break
    else:
        return ["'class'"]
    if (repclass in CqlRuleSet.replication_factor_strategies):
        opts = set(('replication_factor',))
    elif (repclass == 'NetworkTopologyStrategy'):
        return [Hint('<dc_name>')]
    return map(escape_value, opts.difference(keysseen))
