def cf_prop_val_mapkey_completer(ctxt, cass):
    optname = ctxt.get_binding('propname')[(-1)]
    for (cql3option, _, subopts) in CqlRuleSet.columnfamily_layout_map_options:
        if (optname == cql3option):
            break
    else:
        return ()
    keysseen = map(dequote_value, ctxt.get_binding('propmapkey', ()))
    valsseen = map(dequote_value, ctxt.get_binding('propmapval', ()))
    pairsseen = dict(zip(keysseen, valsseen))
    if (optname == 'compression'):
        return map(escape_value, set(subopts).difference(keysseen))
    if (optname == 'compaction'):
        opts = set(subopts)
        try:
            csc = pairsseen['class']
        except KeyError:
            return ["'class'"]
        csc = csc.split('.')[(-1)]
        if (csc == 'SizeTieredCompactionStrategy'):
            opts.add('min_sstable_size')
            opts.add('min_threshold')
            opts.add('bucket_high')
            opts.add('bucket_low')
            opts.add('cold_reads_to_omit')
        elif (csc == 'LeveledCompactionStrategy'):
            opts.add('sstable_size_in_mb')
        elif (csc == 'DateTieredCompactionStrategy'):
            opts.add('base_time_seconds')
            opts.add('max_sstable_age_days')
            opts.add('timestamp_resolution')
        return map(escape_value, opts)
    return ()
