{
  int minRow;
  int maxRow;
  String rowPrefix, keyspace="Keyspace1";
  if (args.length > 0) {
    keyspace=args[0];
    rowPrefix=args[1];
    minRow=Integer.parseInt(args[2]);
    maxRow=minRow + 1;
  }
 else {
    minRow=1;
    maxRow=10;
    rowPrefix="row";
  }
  TestRingCache tester=new TestRingCache(keyspace);
  for (int nRows=minRow; nRows < maxRow; nRows++) {
    byte[] row=(rowPrefix + nRows).getBytes();
    ColumnPath col=new ColumnPath("Standard1").setSuper_column(null).setColumn("col1".getBytes());
    ColumnParent parent=new ColumnParent("Standard1").setSuper_column(null);
    List<InetAddress> endpoints=tester.ringCache.getEndpoint(row);
    String hosts="";
    for (int i=0; i < endpoints.size(); i++)     hosts=hosts + ((i > 0) ? "," : "") + endpoints.get(i);
    System.out.println("hosts with key " + new String(row) + " : "+ hosts+ "; choose "+ endpoints.get(0));
    tester.setup(endpoints.get(0).getHostAddress(),DatabaseDescriptor.getRpcPort());
    tester.thriftClient.set_keyspace(keyspace);
    tester.thriftClient.insert(row,parent,new Column("col1".getBytes(),"val1".getBytes(),1),ConsistencyLevel.ONE);
    Column column=tester.thriftClient.get(row,col,ConsistencyLevel.ONE).column;
    System.out.println("read row " + new String(row) + " "+ new String(column.name)+ ":"+ new String(column.value)+ ":"+ column.timestamp);
  }
  System.exit(1);
}
