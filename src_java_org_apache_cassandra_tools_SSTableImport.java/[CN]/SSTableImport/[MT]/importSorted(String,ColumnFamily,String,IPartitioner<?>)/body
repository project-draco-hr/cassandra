{
  int importedKeys=0;
  long start=System.currentTimeMillis();
  JsonParser parser=getParser(jsonFile);
  if (keyCountToImport == null) {
    keyCountToImport=0;
    System.out.println("Counting keys to import, please wait... (NOTE: to skip this use -n <num_keys>)");
    parser.nextToken();
    while (parser.nextToken() != null) {
      parser.nextToken();
      parser.skipChildren();
      if (parser.getCurrentName() == null)       continue;
      keyCountToImport++;
    }
  }
  System.out.printf("Importing %s keys...%n",keyCountToImport);
  parser=getParser(jsonFile);
  SSTableWriter writer=new SSTableWriter(ssTablePath,keyCountToImport);
  int lineNumber=1;
  DecoratedKey prevStoredKey=null;
  while (parser.nextToken() != null) {
    String key=parser.getCurrentName();
    if (key != null) {
      String tokenName=parser.nextToken().name();
      if (tokenName.equals("START_ARRAY")) {
        if (columnFamily.getColumnFamilyType() == ColumnFamilyType.Super) {
          throw new RuntimeException("Can't write Standard columns to the Super Column Family.");
        }
        List<?> columns=parser.readValueAs(new TypeReference<List<?>>(){
        }
);
        addToStandardCF(columns,columnFamily);
      }
 else       if (tokenName.equals("START_OBJECT")) {
        if (columnFamily.getColumnFamilyType() == ColumnFamilyType.Standard) {
          throw new RuntimeException("Can't write Super columns to the Standard Column Family.");
        }
        Map<?,?> columns=parser.readValueAs(new TypeReference<Map<?,?>>(){
        }
);
        addToSuperCF(columns,columnFamily);
      }
 else {
        throw new UnsupportedOperationException("Only Array or Hash allowed as row content.");
      }
      DecoratedKey currentKey=partitioner.decorateKey(hexToBytes(key));
      if (prevStoredKey != null && prevStoredKey.compareTo(currentKey) != -1) {
        System.err.printf("Line %d: Key %s is greater than previous, collection is not sorted properly. Aborting import. You might need to delete SSTables manually.%n",lineNumber,key);
        return -1;
      }
      writer.append(currentKey,columnFamily);
      columnFamily.clear();
      prevStoredKey=currentKey;
      importedKeys++;
      lineNumber++;
      long current=System.currentTimeMillis();
      if (current - start >= 5000) {
        System.out.printf("Currently imported %d keys.%n",importedKeys);
        start=current;
      }
      if (keyCountToImport == importedKeys)       break;
    }
  }
  writer.closeAndOpenReader();
  return importedKeys;
}
