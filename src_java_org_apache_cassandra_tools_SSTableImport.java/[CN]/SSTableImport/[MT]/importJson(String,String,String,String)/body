{
  ColumnFamily cfamily=ColumnFamily.create(keyspace,cf);
  String cfType=cfamily.type();
  IPartitioner<?> partitioner=DatabaseDescriptor.getPartitioner();
  DataOutputBuffer dob=new DataOutputBuffer();
  try {
    JSONObject json=(JSONObject)JSONValue.parseWithException(new FileReader(jsonFile));
    SSTableWriter writer=new SSTableWriter(ssTablePath,json.size(),partitioner);
    List<DecoratedKey<?>> decoratedKeys=new ArrayList<DecoratedKey<?>>();
    for (    String key : (Set<String>)json.keySet())     decoratedKeys.add(partitioner.decorateKey(key));
    Collections.sort(decoratedKeys);
    for (    DecoratedKey<?> rowKey : decoratedKeys) {
      if (cfType.equals("Super"))       addToSuperCF((JSONObject)json.get(asStr(rowKey.key)),cfamily);
 else       addToStandardCF((JSONArray)json.get(asStr(rowKey.key)),cfamily);
      ColumnFamily.serializer().serializeWithIndexes(cfamily,dob);
      writer.append(rowKey,dob);
      dob.reset();
      cfamily.clear();
    }
    writer.closeAndOpenReader();
  }
 catch (  ClassCastException cce) {
    throw new RuntimeException("Invalid JSON input, or incorrect column family.",cce);
  }
}
