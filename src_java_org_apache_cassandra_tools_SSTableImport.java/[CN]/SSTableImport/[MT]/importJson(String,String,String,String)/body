{
  ColumnFamily cfamily=ColumnFamily.create(keyspace,cf);
  ColumnFamilyType cfType=cfamily.getColumnFamilyType();
  IPartitioner<?> partitioner=DatabaseDescriptor.getPartitioner();
  try {
    JSONObject json=(JSONObject)JSONValue.parseWithException(new FileReader(jsonFile));
    SSTableWriter writer=new SSTableWriter(ssTablePath,json.size(),partitioner);
    SortedMap<DecoratedKey,String> decoratedKeys=new TreeMap<DecoratedKey,String>();
    for (    String key : (Set<String>)json.keySet())     decoratedKeys.put(partitioner.decorateKey(hexToBytes(key)),key);
    for (    Map.Entry<DecoratedKey,String> rowKey : decoratedKeys.entrySet()) {
      if (cfType == ColumnFamilyType.Super)       addToSuperCF((JSONObject)json.get(rowKey.getValue()),cfamily);
 else       addToStandardCF((JSONArray)json.get(rowKey.getValue()),cfamily);
      writer.append(rowKey.getKey(),cfamily);
      cfamily.clear();
    }
    writer.closeAndOpenReader();
  }
 catch (  ClassCastException cce) {
    throw new RuntimeException("Invalid JSON input, or incorrect column family.",cce);
  }
}
