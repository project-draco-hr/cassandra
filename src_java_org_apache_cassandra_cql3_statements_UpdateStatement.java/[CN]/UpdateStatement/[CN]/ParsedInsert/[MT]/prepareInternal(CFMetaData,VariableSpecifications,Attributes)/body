{
  UpdateStatement stmt=new UpdateStatement(ModificationStatement.StatementType.INSERT,boundNames.size(),cfm,attrs);
  if (stmt.isCounter())   throw new InvalidRequestException("INSERT statement are not allowed on counter tables, use UPDATE instead");
  if (columnNames.size() != columnValues.size())   throw new InvalidRequestException("Unmatched column names/values");
  if (columnNames.isEmpty())   throw new InvalidRequestException("No columns provided to INSERT");
  for (int i=0; i < columnNames.size(); i++) {
    ColumnIdentifier id=columnNames.get(i).prepare(cfm);
    ColumnDefinition def=cfm.getColumnDefinition(id);
    if (def == null)     throw new InvalidRequestException(String.format("Unknown identifier %s",id));
    for (int j=0; j < i; j++) {
      ColumnIdentifier otherId=columnNames.get(j).prepare(cfm);
      if (id.equals(otherId))       throw new InvalidRequestException(String.format("Multiple definitions found for column %s",id));
    }
    Term.Raw value=columnValues.get(i);
switch (def.kind) {
case PARTITION_KEY:
case CLUSTERING_COLUMN:
      Term t=value.prepare(keyspace(),def);
    t.collectMarkerSpecification(boundNames);
  stmt.addKeyValue(def,t);
break;
default :
Operation operation=new Operation.SetValue(value).prepare(keyspace(),def);
operation.collectMarkerSpecification(boundNames);
stmt.addOperation(operation);
break;
}
}
return stmt;
}
