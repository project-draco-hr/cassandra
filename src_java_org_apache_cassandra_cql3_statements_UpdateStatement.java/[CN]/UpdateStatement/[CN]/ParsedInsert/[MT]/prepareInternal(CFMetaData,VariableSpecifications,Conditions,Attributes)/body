{
  checkFalse(cfm.isCounter(),"INSERT statements are not allowed on counter tables, use UPDATE instead");
  checkFalse(columnNames == null,"Column names for INSERT must be provided when using VALUES");
  checkFalse(columnNames.isEmpty(),"No columns provided to INSERT");
  checkFalse(columnNames.size() != columnValues.size(),"Unmatched column names/values");
  checkContainsNoDuplicates(columnNames,"The column names contains duplicates");
  WhereClause.Builder whereClause=new WhereClause.Builder();
  Operations operations=new Operations(type);
  boolean hasClusteringColumnsSet=false;
  for (int i=0; i < columnNames.size(); i++) {
    ColumnDefinition def=getColumnDefinition(cfm,columnNames.get(i));
    if (def.isClusteringColumn())     hasClusteringColumnsSet=true;
    Term.Raw value=columnValues.get(i);
    if (def.isPrimaryKeyColumn()) {
      whereClause.add(new SingleColumnRelation(columnNames.get(i),Operator.EQ,value));
    }
 else {
      Operation operation=new Operation.SetValue(value).prepare(cfm,def);
      operation.collectMarkerSpecification(boundNames);
      operations.add(operation);
    }
  }
  boolean applyOnlyToStaticColumns=appliesOnlyToStaticColumns(operations,conditions) && !hasClusteringColumnsSet;
  StatementRestrictions restrictions=new StatementRestrictions(type,cfm,whereClause.build(),boundNames,applyOnlyToStaticColumns,false,false,false);
  return new UpdateStatement(type,boundNames.size(),cfm,operations,restrictions,conditions,attrs);
}
