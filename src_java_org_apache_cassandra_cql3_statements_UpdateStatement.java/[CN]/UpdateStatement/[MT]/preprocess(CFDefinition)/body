{
  if (columns == null) {
    if (columnNames.size() != columnValues.size())     throw new InvalidRequestException("unmatched column names/values");
    if (columnNames.size() < 1)     throw new InvalidRequestException("no columns specified for INSERT");
    for (int i=0; i < columnNames.size(); i++) {
      CFDefinition.Name name=cfDef.get(columnNames.get(i));
      if (name == null)       throw new InvalidRequestException(String.format("Unknown identifier %s",columnNames.get(i)));
switch (name.kind) {
case KEY_ALIAS:
case COLUMN_ALIAS:
        if (processedKeys.containsKey(name.name))         throw new InvalidRequestException(String.format("Multiple definition found for PRIMARY KEY part %s",name));
      processedKeys.put(name.name,Collections.singletonList(columnValues.get(i)));
    break;
case VALUE_ALIAS:
case COLUMN_METADATA:
  if (processedColumns.containsKey(name.name))   throw new InvalidRequestException(String.format("Multiple definition found for column %s",name));
processedColumns.put(name.name,new Operation(columnValues.get(i)));
break;
}
}
}
 else {
for (Map.Entry<ColumnIdentifier,Operation> entry : columns.entrySet()) {
CFDefinition.Name name=cfDef.get(entry.getKey());
if (name == null) throw new InvalidRequestException(String.format("Unknown identifier %s",entry.getKey()));
switch (name.kind) {
case KEY_ALIAS:
case COLUMN_ALIAS:
throw new InvalidRequestException(String.format("PRIMARY KEY part %s found in SET part",entry.getKey()));
case VALUE_ALIAS:
case COLUMN_METADATA:
if (processedColumns.containsKey(name.name)) throw new InvalidRequestException(String.format("Multiple definition found for column %s",name));
processedColumns.put(name.name,entry.getValue());
break;
}
}
processKeys(cfDef,whereClause,processedKeys);
}
}
