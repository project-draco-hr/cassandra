{
  AbstractType<?> keyValidator=cfs.metadata.getKeyValidator();
  for (  Map.Entry<SSTableReader,Map<ColumnDefinition,ColumnIndex>> e : sstables.entrySet()) {
    SSTableReader sstable=e.getKey();
    Map<ColumnDefinition,ColumnIndex> indexes=e.getValue();
    try (RandomAccessReader dataFile=sstable.openDataReader()){
      PerSSTableIndexWriter indexWriter=SASIIndex.newWriter(keyValidator,sstable.descriptor,indexes,OperationType.COMPACTION);
      long previousKeyPosition=0;
      try (KeyIterator keys=new KeyIterator(sstable.descriptor,cfs.metadata)){
        while (keys.hasNext()) {
          if (isStopRequested())           throw new CompactionInterruptedException(getCompactionInfo());
          final DecoratedKey key=keys.next();
          final long keyPosition=keys.getKeyPosition();
          indexWriter.startPartition(key,keyPosition);
          try {
            RowIndexEntry indexEntry=sstable.getPosition(key,SSTableReader.Operator.EQ);
            dataFile.seek(indexEntry.position);
            int staticOffset=ByteBufferUtil.readWithShortLength(dataFile).remaining();
            try (SSTableIdentityIterator partition=SSTableIdentityIterator.create(sstable,dataFile,key)){
              if (cfs.metadata.hasStaticColumns()) {
                long staticPosition=indexEntry.position + staticOffset;
                indexWriter.nextUnfilteredCluster(partition.staticRow(),staticPosition);
              }
              long position=dataFile.getPosition();
              while (partition.hasNext()) {
                indexWriter.nextUnfilteredCluster(partition.next(),position);
                position=dataFile.getPosition();
              }
            }
           }
 catch (          IOException ex) {
            throw new FSReadError(ex,sstable.getFilename());
          }
          bytesProcessed+=keyPosition - previousKeyPosition;
          previousKeyPosition=keyPosition;
        }
        completeSSTable(indexWriter,sstable,indexes.values());
      }
     }
   }
}
