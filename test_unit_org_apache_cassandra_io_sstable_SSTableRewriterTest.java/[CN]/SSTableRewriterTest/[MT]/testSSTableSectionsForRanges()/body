{
  Keyspace keyspace=Keyspace.open(KEYSPACE);
  final ColumnFamilyStore cfs=keyspace.getColumnFamilyStore(CF);
  truncate(cfs);
  cfs.addSSTable(writeFile(cfs,1000));
  Collection<SSTableReader> allSSTables=cfs.getLiveSSTables();
  assertEquals(1,allSSTables.size());
  final Token firstToken=allSSTables.iterator().next().first.getToken();
  DatabaseDescriptor.setSSTablePreempiveOpenIntervalInMB(1);
  List<StreamSession.SSTableStreamingSections> sectionsBeforeRewrite=StreamSession.getSSTableSectionsForRanges(Collections.singleton(new Range<Token>(firstToken,firstToken)),Collections.singleton(cfs),0L,false);
  assertEquals(1,sectionsBeforeRewrite.size());
  for (  StreamSession.SSTableStreamingSections section : sectionsBeforeRewrite)   section.ref.release();
  final AtomicInteger checkCount=new AtomicInteger();
  final AtomicBoolean done=new AtomicBoolean(false);
  final AtomicBoolean failed=new AtomicBoolean(false);
  Runnable r=new Runnable(){
    public void run(){
      while (!done.get()) {
        Set<Range<Token>> range=Collections.singleton(new Range<Token>(firstToken,firstToken));
        List<StreamSession.SSTableStreamingSections> sections=StreamSession.getSSTableSectionsForRanges(range,Collections.singleton(cfs),0L,false);
        if (sections.size() != 1)         failed.set(true);
        for (        StreamSession.SSTableStreamingSections section : sections)         section.ref.release();
        checkCount.incrementAndGet();
        Uninterruptibles.sleepUninterruptibly(5,TimeUnit.MILLISECONDS);
      }
    }
  }
;
  Thread t=new Thread(r);
  try {
    t.start();
    cfs.forceMajorCompaction();
  }
  finally {
    DatabaseDescriptor.setSSTablePreempiveOpenIntervalInMB(50);
    done.set(true);
    t.join(20);
  }
  assertFalse(failed.get());
  assertTrue(checkCount.get() >= 2);
  truncate(cfs);
}
