{
  Keyspace keyspace=Keyspace.open(KEYSPACE);
  ColumnFamilyStore cfs=keyspace.getColumnFamilyStore(CF);
  truncate(cfs);
  for (int i=0; i < 100; i++) {
    String key=Integer.toString(i);
    for (int j=0; j < 10; j++)     new RowUpdateBuilder(cfs.metadata,100,key).clustering(Integer.toString(j)).add("val",ByteBufferUtil.EMPTY_BYTE_BUFFER).build().apply();
  }
  cfs.forceBlockingFlush();
  cfs.forceMajorCompaction();
  validateKeys(keyspace);
  assertEquals(1,cfs.getLiveSSTables().size());
  SSTableReader s=cfs.getLiveSSTables().iterator().next();
  Set<SSTableReader> compacting=new HashSet<>();
  compacting.add(s);
  int keyCount=0;
  try (ISSTableScanner scanner=compacting.iterator().next().getScanner();CompactionController controller=new CompactionController(cfs,compacting,0);LifecycleTransaction txn=cfs.getTracker().tryModify(compacting,OperationType.UNKNOWN);SSTableRewriter rewriter=new SSTableRewriter(cfs,txn,1000,false,1);CompactionIterator ci=new CompactionIterator(OperationType.COMPACTION,Collections.singletonList(scanner),controller,FBUtilities.nowInSeconds(),UUIDGen.getTimeUUID())){
    rewriter.switchWriter(getWriter(cfs,s.descriptor.directory,txn));
    while (ci.hasNext()) {
      rewriter.append(ci.next());
      if (keyCount % 10 == 0) {
        rewriter.switchWriter(getWriter(cfs,s.descriptor.directory,txn));
      }
      keyCount++;
      validateKeys(keyspace);
    }
    rewriter.finish();
  }
   validateKeys(keyspace);
  TransactionLog.waitForDeletions();
  validateCFS(cfs);
  truncate(cfs);
}
