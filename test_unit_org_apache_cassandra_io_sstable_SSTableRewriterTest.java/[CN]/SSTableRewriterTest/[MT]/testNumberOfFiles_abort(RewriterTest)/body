{
  Keyspace keyspace=Keyspace.open(KEYSPACE);
  ColumnFamilyStore cfs=keyspace.getColumnFamilyStore(CF);
  truncate(cfs);
  SSTableReader s=writeFile(cfs,1000);
  cfs.addSSTable(s);
  DecoratedKey origFirst=s.first;
  DecoratedKey origLast=s.last;
  long startSize=cfs.metric.liveDiskSpaceUsed.getCount();
  Set<SSTableReader> compacting=Sets.newHashSet(s);
  SSTableRewriter.overrideOpenInterval(10000000);
  try (ISSTableScanner scanner=s.getScanner();CompactionController controller=new CompactionController(cfs,compacting,0);LifecycleTransaction txn=cfs.getTracker().tryModify(compacting,OperationType.UNKNOWN);SSTableRewriter rewriter=new SSTableRewriter(cfs,txn,1000,false)){
    rewriter.switchWriter(getWriter(cfs,s.descriptor.directory));
    test.run(scanner,controller,s,cfs,rewriter);
  }
   SSTableDeletingTask.waitForDeletions();
  assertEquals(startSize,cfs.metric.liveDiskSpaceUsed.getCount());
  assertEquals(1,cfs.getSSTables().size());
  assertFileCounts(s.descriptor.directory.list(),0,0);
  assertEquals(cfs.getSSTables().iterator().next().first,origFirst);
  assertEquals(cfs.getSSTables().iterator().next().last,origLast);
  validateCFS(cfs);
}
