{
  Keyspace keyspace=Keyspace.open(KEYSPACE);
  ColumnFamilyStore cfs=keyspace.getColumnFamilyStore(CF);
  truncate(cfs);
  SSTableReader s=writeFile(cfs,1000);
  if (!offline)   cfs.addSSTable(s);
  Set<SSTableReader> compacting=Sets.newHashSet(s);
  try (ISSTableScanner scanner=compacting.iterator().next().getScanner();CompactionController controller=new CompactionController(cfs,compacting,0);LifecycleTransaction txn=offline ? LifecycleTransaction.offline(OperationType.UNKNOWN,compacting) : cfs.getTracker().tryModify(compacting,OperationType.UNKNOWN);SSTableRewriter rewriter=new SSTableRewriter(cfs,txn,1000,offline,10000000);CompactionIterator ci=new CompactionIterator(OperationType.COMPACTION,Collections.singletonList(scanner),controller,FBUtilities.nowInSeconds(),UUIDGen.getTimeUUID())){
    rewriter.switchWriter(getWriter(cfs,s.descriptor.directory,txn));
    while (ci.hasNext()) {
      rewriter.append(ci.next());
      if (rewriter.currentWriter().getOnDiskFilePointer() > 25000000) {
        rewriter.switchWriter(getWriter(cfs,s.descriptor.directory,txn));
      }
    }
    try {
      rewriter.throwDuringPrepare(earlyException);
      rewriter.prepareToCommit();
    }
 catch (    Throwable t) {
      rewriter.abort();
    }
  }
  finally {
    if (offline)     s.selfRef().release();
  }
  LifecycleTransaction.waitForDeletions();
  int filecount=assertFileCounts(s.descriptor.directory.list());
  assertEquals(filecount,1);
  if (!offline) {
    assertEquals(1,cfs.getLiveSSTables().size());
    validateCFS(cfs);
    truncate(cfs);
  }
 else {
    assertEquals(0,cfs.getLiveSSTables().size());
    cfs.truncateBlocking();
  }
  filecount=assertFileCounts(s.descriptor.directory.list());
  if (offline) {
    assertEquals(1,filecount);
    for (    File f : s.descriptor.directory.listFiles()) {
      FileUtils.deleteRecursive(f);
    }
    filecount=assertFileCounts(s.descriptor.directory.list());
  }
  assertEquals(0,filecount);
  truncate(cfs);
}
