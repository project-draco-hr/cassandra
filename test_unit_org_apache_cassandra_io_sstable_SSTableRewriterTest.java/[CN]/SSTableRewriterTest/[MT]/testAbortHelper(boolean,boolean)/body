{
  Keyspace keyspace=Keyspace.open(KEYSPACE);
  ColumnFamilyStore cfs=keyspace.getColumnFamilyStore(CF);
  truncate(cfs);
  SSTableReader s=writeFile(cfs,1000);
  if (!offline)   cfs.addSSTable(s);
  Set<SSTableReader> compacting=Sets.newHashSet(s);
  cfs.getDataTracker().markCompacting(compacting);
  SSTableRewriter rewriter=new SSTableRewriter(cfs,compacting,1000,offline,10000000);
  SSTableWriter w=getWriter(cfs,s.descriptor.directory);
  rewriter.switchWriter(w);
  try (ISSTableScanner scanner=compacting.iterator().next().getScanner();CompactionController controller=new CompactionController(cfs,compacting,0)){
    while (scanner.hasNext()) {
      rewriter.append(new LazilyCompactedRow(controller,Arrays.asList(scanner.next())));
      if (rewriter.currentWriter().getOnDiskFilePointer() > 25000000) {
        rewriter.switchWriter(getWriter(cfs,s.descriptor.directory));
      }
    }
    try {
      rewriter.finishAndThrow(earlyException);
    }
 catch (    Throwable t) {
      rewriter.abort();
    }
  }
  finally {
    cfs.getDataTracker().unmarkCompacting(compacting);
  }
  Thread.sleep(1000);
  int filecount=assertFileCounts(s.descriptor.directory.list(),0,0);
  assertEquals(filecount,1);
  if (!offline) {
    assertEquals(1,cfs.getSSTables().size());
    validateCFS(cfs);
  }
  truncate(cfs);
  filecount=assertFileCounts(s.descriptor.directory.list(),0,0);
  if (offline) {
    s.selfRef().release();
    assertEquals(1,filecount);
    for (    File f : s.descriptor.directory.listFiles()) {
      f.delete();
    }
    filecount=assertFileCounts(s.descriptor.directory.list(),0,0);
  }
  assertEquals(0,filecount);
  truncate(cfs);
}
