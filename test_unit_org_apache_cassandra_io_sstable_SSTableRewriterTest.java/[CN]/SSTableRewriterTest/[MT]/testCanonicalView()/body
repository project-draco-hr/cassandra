{
  Keyspace keyspace=Keyspace.open(KEYSPACE);
  ColumnFamilyStore cfs=keyspace.getColumnFamilyStore(CF);
  cfs.truncateBlocking();
  SSTableReader s=writeFile(cfs,1000);
  cfs.addSSTable(s);
  Set<SSTableReader> sstables=Sets.newHashSet(cfs.markAllCompacting());
  assertEquals(1,sstables.size());
  SSTableRewriter.overrideOpenInterval(10000000);
  SSTableRewriter writer=new SSTableRewriter(cfs,sstables,1000,false);
  boolean checked=false;
  try (AbstractCompactionStrategy.ScannerList scanners=cfs.getCompactionStrategy().getScanners(sstables)){
    ISSTableScanner scanner=scanners.scanners.get(0);
    CompactionController controller=new CompactionController(cfs,sstables,cfs.gcBefore(System.currentTimeMillis()));
    writer.switchWriter(getWriter(cfs,sstables.iterator().next().descriptor.directory));
    while (scanner.hasNext()) {
      AbstractCompactedRow row=new LazilyCompactedRow(controller,Collections.singletonList(scanner.next()));
      writer.append(row);
      if (!checked && writer.currentWriter().getFilePointer() > 15000000) {
        checked=true;
        ColumnFamilyStore.ViewFragment viewFragment=cfs.select(ColumnFamilyStore.CANONICAL_SSTABLES);
        assertEquals(1,viewFragment.sstables.size());
        SSTableReader sstable=viewFragment.sstables.get(0);
        assertEquals(s.descriptor,sstable.descriptor);
        assertTrue("Found early opened SSTable in canonical view: " + sstable.getFilename(),sstable.openReason != SSTableReader.OpenReason.EARLY);
      }
    }
  }
   writer.abort();
  cfs.getDataTracker().unmarkCompacting(sstables);
  cfs.truncateBlocking();
  SSTableDeletingTask.waitForDeletions();
  validateCFS(cfs);
}
