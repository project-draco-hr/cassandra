{
  Keyspace keyspace=Keyspace.open(KEYSPACE);
  ColumnFamilyStore cfs=keyspace.getColumnFamilyStore(CF);
  truncate(cfs);
  SSTableReader s=writeFile(cfs,1000);
  cfs.addSSTable(s);
  Set<SSTableReader> sstables=Sets.newHashSet(s);
  assertEquals(1,sstables.size());
  boolean checked=false;
  try (ISSTableScanner scanner=sstables.iterator().next().getScanner();CompactionController controller=new CompactionController(cfs,sstables,0);LifecycleTransaction txn=cfs.getTracker().tryModify(sstables,OperationType.UNKNOWN);SSTableRewriter writer=new SSTableRewriter(txn,1000,10000000,false);CompactionIterator ci=new CompactionIterator(OperationType.COMPACTION,Collections.singletonList(scanner),controller,FBUtilities.nowInSeconds(),UUIDGen.getTimeUUID())){
    writer.switchWriter(getWriter(cfs,sstables.iterator().next().descriptor.directory,txn));
    while (ci.hasNext()) {
      writer.append(ci.next());
      if (!checked && writer.currentWriter().getFilePointer() > 15000000) {
        checked=true;
        ColumnFamilyStore.ViewFragment viewFragment=cfs.select(View.select(SSTableSet.CANONICAL));
        assertEquals(1,viewFragment.sstables.size());
        SSTableReader sstable=viewFragment.sstables.get(0);
        assertEquals(s.descriptor,sstable.descriptor);
        assertTrue("Found early opened SSTable in canonical view: " + sstable.getFilename(),sstable.openReason != SSTableReader.OpenReason.EARLY);
      }
    }
  }
   truncateCF();
  validateCFS(cfs);
}
