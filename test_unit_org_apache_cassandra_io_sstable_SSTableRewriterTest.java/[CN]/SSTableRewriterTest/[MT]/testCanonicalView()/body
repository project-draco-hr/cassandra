{
  Keyspace keyspace=Keyspace.open(KEYSPACE);
  ColumnFamilyStore cfs=keyspace.getColumnFamilyStore(CF);
  truncate(cfs);
  SSTableReader s=writeFile(cfs,1000);
  cfs.addSSTable(s);
  Set<SSTableReader> sstables=Sets.newHashSet(s);
  assertEquals(1,sstables.size());
  boolean checked=false;
  try (ISSTableScanner scanner=sstables.iterator().next().getScanner();CompactionController controller=new CompactionController(cfs,sstables,0);LifecycleTransaction txn=cfs.getTracker().tryModify(sstables,OperationType.UNKNOWN);SSTableRewriter writer=new SSTableRewriter(cfs,txn,1000,false,10000000)){
    writer.switchWriter(getWriter(cfs,sstables.iterator().next().descriptor.directory));
    while (scanner.hasNext()) {
      AbstractCompactedRow row=new LazilyCompactedRow(controller,Collections.singletonList(scanner.next()));
      writer.append(row);
      if (!checked && writer.currentWriter().getFilePointer() > 15000000) {
        checked=true;
        ColumnFamilyStore.ViewFragment viewFragment=cfs.select(ColumnFamilyStore.CANONICAL_SSTABLES);
        assertEquals(1,viewFragment.sstables.size());
        SSTableReader sstable=viewFragment.sstables.get(0);
        assertEquals(s.descriptor,sstable.descriptor);
        assertTrue("Found early opened SSTable in canonical view: " + sstable.getFilename(),sstable.openReason != SSTableReader.OpenReason.EARLY);
      }
    }
  }
   truncateCF();
  validateCFS(cfs);
}
