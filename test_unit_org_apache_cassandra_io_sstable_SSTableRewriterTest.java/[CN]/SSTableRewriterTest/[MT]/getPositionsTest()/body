{
  Keyspace keyspace=Keyspace.open(KEYSPACE);
  ColumnFamilyStore cfs=keyspace.getColumnFamilyStore(CF);
  truncate(cfs);
  SSTableReader s=writeFile(cfs,1000);
  cfs.addSSTable(s);
  Set<SSTableReader> sstables=new HashSet<>(cfs.getLiveSSTables());
  assertEquals(1,sstables.size());
  int nowInSec=FBUtilities.nowInSeconds();
  boolean checked=false;
  try (AbstractCompactionStrategy.ScannerList scanners=cfs.getCompactionStrategyManager().getScanners(sstables);LifecycleTransaction txn=cfs.getTracker().tryModify(sstables,OperationType.UNKNOWN);SSTableRewriter writer=new SSTableRewriter(cfs,txn,1000,false,10000000);CompactionController controller=new CompactionController(cfs,sstables,cfs.gcBefore(nowInSec));CompactionIterator ci=new CompactionIterator(OperationType.COMPACTION,scanners.scanners,controller,nowInSec,UUIDGen.getTimeUUID())){
    writer.switchWriter(getWriter(cfs,sstables.iterator().next().descriptor.directory,txn));
    while (ci.hasNext()) {
      UnfilteredRowIterator row=ci.next();
      writer.append(row);
      if (!checked && writer.currentWriter().getFilePointer() > 1500000) {
        checked=true;
        for (        SSTableReader sstable : cfs.getLiveSSTables()) {
          if (sstable.openReason == SSTableReader.OpenReason.EARLY) {
            SSTableReader c=txn.current(sstables.iterator().next());
            Collection<Range<Token>> r=Arrays.asList(new Range<>(cfs.getPartitioner().getMinimumToken(),cfs.getPartitioner().getMinimumToken()));
            List<Pair<Long,Long>> tmplinkPositions=sstable.getPositionsForRanges(r);
            List<Pair<Long,Long>> compactingPositions=c.getPositionsForRanges(r);
            assertEquals(1,tmplinkPositions.size());
            assertEquals(1,compactingPositions.size());
            assertEquals(0,tmplinkPositions.get(0).left.longValue());
            assertEquals(tmplinkPositions.get(0).right.longValue(),compactingPositions.get(0).left.longValue());
            assertEquals(c.uncompressedLength(),compactingPositions.get(0).right.longValue());
          }
        }
      }
    }
    assertTrue(checked);
    writer.finish();
  }
   TransactionLogs.waitForDeletions();
  validateCFS(cfs);
  int filecounts=assertFileCounts(sstables.iterator().next().descriptor.directory.list());
  assertEquals(1,filecounts);
  truncate(cfs);
}
