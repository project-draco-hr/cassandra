{
  Keyspace keyspace=Keyspace.open(KEYSPACE);
  ColumnFamilyStore cfs=keyspace.getColumnFamilyStore(CF);
  cfs.truncateBlocking();
  cfs.disableAutoCompaction();
  SSTableReader s=writeFile(cfs,400);
  cfs.addSSTable(s);
  Set<SSTableReader> compacting=Sets.newHashSet(s);
  SSTableRewriter.overrideOpenInterval(1000000);
  List<SSTableReader> sstables;
  int files=1;
  try (SSTableRewriter rewriter=new SSTableRewriter(cfs,compacting,1000,false);ISSTableScanner scanner=s.getScanner();CompactionController controller=new CompactionController(cfs,compacting,0)){
    rewriter.switchWriter(getWriter(cfs,s.descriptor.directory));
    while (scanner.hasNext()) {
      rewriter.append(new LazilyCompactedRow(controller,Arrays.asList(scanner.next())));
      if (rewriter.currentWriter().getOnDiskFilePointer() > 2500000) {
        assertEquals(files,cfs.getSSTables().size());
        rewriter.switchWriter(getWriter(cfs,s.descriptor.directory));
        files++;
      }
    }
    sstables=rewriter.finish();
    cfs.getDataTracker().markCompactedSSTablesReplaced(compacting,sstables,OperationType.COMPACTION);
  }
   assertEquals(files,sstables.size());
  assertEquals(files,cfs.getSSTables().size());
  SSTableDeletingTask.waitForDeletions();
  assertFileCounts(s.descriptor.directory.list(),0,0);
  validateCFS(cfs);
}
