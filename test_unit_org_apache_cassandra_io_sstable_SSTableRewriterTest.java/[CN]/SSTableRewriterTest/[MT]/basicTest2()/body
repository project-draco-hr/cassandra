{
  Keyspace keyspace=Keyspace.open(KEYSPACE);
  ColumnFamilyStore cfs=keyspace.getColumnFamilyStore(CF);
  cfs.truncateBlocking();
  SSTableReader s=writeFile(cfs,1000);
  cfs.addSSTable(s);
  Set<SSTableReader> sstables=new HashSet<>(cfs.getSSTables());
  assertEquals(1,sstables.size());
  SSTableRewriter.overrideOpenInterval(10000000);
  SSTableRewriter writer=new SSTableRewriter(cfs,sstables,1000,false);
  try (AbstractCompactionStrategy.ScannerList scanners=cfs.getCompactionStrategy().getScanners(sstables)){
    ISSTableScanner scanner=scanners.scanners.get(0);
    CompactionController controller=new CompactionController(cfs,sstables,cfs.gcBefore(System.currentTimeMillis()));
    writer.switchWriter(getWriter(cfs,sstables.iterator().next().descriptor.directory));
    while (scanner.hasNext()) {
      AbstractCompactedRow row=new LazilyCompactedRow(controller,Arrays.asList(scanner.next()));
      writer.append(row);
    }
  }
   Collection<SSTableReader> newsstables=writer.finish();
  cfs.getDataTracker().markCompactedSSTablesReplaced(sstables,newsstables,OperationType.COMPACTION);
  SSTableDeletingTask.waitForDeletions();
  validateCFS(cfs);
  int filecounts=assertFileCounts(sstables.iterator().next().descriptor.directory.list(),0,0);
  assertEquals(1,filecounts);
}
