{
  Keyspace keyspace=Keyspace.open(KEYSPACE);
  ColumnFamilyStore cfs=keyspace.getColumnFamilyStore(CF);
  truncate(cfs);
  SSTableReader s=writeFile(cfs,1000);
  cfs.addSSTable(s);
  Set<SSTableReader> sstables=new HashSet<>(cfs.getLiveSSTables());
  assertEquals(1,sstables.size());
  int nowInSec=FBUtilities.nowInSeconds();
  try (AbstractCompactionStrategy.ScannerList scanners=cfs.getCompactionStrategyManager().getScanners(sstables);LifecycleTransaction txn=cfs.getTracker().tryModify(sstables,OperationType.UNKNOWN);SSTableRewriter writer=new SSTableRewriter(txn,1000,10000000,false);CompactionController controller=new CompactionController(cfs,sstables,cfs.gcBefore(nowInSec));CompactionIterator ci=new CompactionIterator(OperationType.COMPACTION,scanners.scanners,controller,nowInSec,UUIDGen.getTimeUUID())){
    writer.switchWriter(getWriter(cfs,sstables.iterator().next().descriptor.directory,txn));
    while (ci.hasNext()) {
      writer.append(ci.next());
    }
    writer.finish();
  }
   LifecycleTransaction.waitForDeletions();
  assertEquals(1,assertFileCounts(sstables.iterator().next().descriptor.directory.list()));
  validateCFS(cfs);
}
