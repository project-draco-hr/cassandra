{
  Keyspace keyspace=Keyspace.open(KEYSPACE);
  ColumnFamilyStore cfs=keyspace.getColumnFamilyStore(CF);
  cfs.truncateBlocking();
  SSTableReader s=writeFile(cfs,1000);
  cfs.addSSTable(s);
  long startSize=cfs.metric.liveDiskSpaceUsed.count();
  DecoratedKey origFirst=s.first;
  DecoratedKey origLast=s.last;
  Set<SSTableReader> compacting=Sets.newHashSet(s);
  SSTableRewriter.overrideOpenInterval(10000000);
  SSTableRewriter rewriter=new SSTableRewriter(cfs,compacting,1000,false);
  rewriter.switchWriter(getWriter(cfs,s.descriptor.directory));
  ICompactionScanner scanner=s.getScanner();
  CompactionController controller=new CompactionController(cfs,compacting,0);
  int files=1;
  while (scanner.hasNext()) {
    rewriter.append(new LazilyCompactedRow(controller,Arrays.asList(scanner.next())));
    if (rewriter.currentWriter().getOnDiskFilePointer() > 25000000) {
      rewriter.switchWriter(getWriter(cfs,s.descriptor.directory));
      files++;
      assertEquals(cfs.getSSTables().size(),files);
    }
  }
  rewriter.abort();
  Thread.sleep(1000);
  assertEquals(startSize,cfs.metric.liveDiskSpaceUsed.count());
  assertEquals(1,cfs.getSSTables().size());
  assertFileCounts(s.descriptor.directory.list(),0,0);
  assertEquals(cfs.getSSTables().iterator().next().first,origFirst);
  assertEquals(cfs.getSSTables().iterator().next().last,origLast);
  validateCFS(cfs);
}
