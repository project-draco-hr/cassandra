{
  Keyspace keyspace=Keyspace.open(KEYSPACE);
  ColumnFamilyStore cfs=keyspace.getColumnFamilyStore(CF);
  cfs.truncateBlocking();
  ArrayBackedSortedColumns cf=ArrayBackedSortedColumns.factory.create(cfs.metadata);
  for (int i=0; i < 1000; i++)   cf.addColumn(Util.column(String.valueOf(i),"a",1));
  File dir=cfs.directories.getDirectoryForNewSSTables();
  SSTableWriter writer=getWriter(cfs,dir);
  try {
    for (int i=0; i < 1000; i++)     writer.append(StorageService.getPartitioner().decorateKey(random(i,10)),cf);
    SSTableReader s=writer.openEarly(1000);
    assertFileCounts(dir.list(),2,2);
    for (int i=1000; i < 2000; i++)     writer.append(StorageService.getPartitioner().decorateKey(random(i,10)),cf);
    SSTableReader s2=writer.openEarly(1000);
    assertTrue(s.last.compareTo(s2.last) < 0);
    assertFileCounts(dir.list(),2,2);
    s.markObsolete(cfs.getDataTracker());
    s.selfRef().release();
    s2.selfRef().release();
    Thread.sleep(1000);
    assertFileCounts(dir.list(),0,2);
    writer.abort();
    Thread.sleep(1000);
    int datafiles=assertFileCounts(dir.list(),0,0);
    assertEquals(datafiles,0);
    validateCFS(cfs);
  }
 catch (  Throwable t) {
    writer.abort();
    throw t;
  }
}
