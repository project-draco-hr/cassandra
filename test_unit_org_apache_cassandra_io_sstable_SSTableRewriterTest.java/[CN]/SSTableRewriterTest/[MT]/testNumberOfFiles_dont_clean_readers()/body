{
  Keyspace keyspace=Keyspace.open(KEYSPACE);
  ColumnFamilyStore cfs=keyspace.getColumnFamilyStore(CF);
  cfs.truncateBlocking();
  SSTableReader s=writeFile(cfs,1000);
  cfs.addSSTable(s);
  Set<SSTableReader> compacting=Sets.newHashSet(s);
  SSTableRewriter rewriter=new SSTableRewriter(cfs,compacting,1000,false,10000000);
  rewriter.switchWriter(getWriter(cfs,s.descriptor.directory));
  int files=1;
  try (ISSTableScanner scanner=s.getScanner();CompactionController controller=new CompactionController(cfs,compacting,0)){
    while (scanner.hasNext()) {
      rewriter.append(new LazilyCompactedRow(controller,Arrays.asList(scanner.next())));
      if (rewriter.currentWriter().getOnDiskFilePointer() > 25000000) {
        rewriter.switchWriter(getWriter(cfs,s.descriptor.directory));
        files++;
        assertEquals(cfs.getSSTables().size(),files);
      }
    }
    List<SSTableReader> sstables=rewriter.finish();
    assertEquals(files,sstables.size());
    assertEquals(files,cfs.getSSTables().size());
    assertEquals(1,cfs.getDataTracker().getView().shadowed.size());
    cfs.getDataTracker().markCompactedSSTablesReplaced(compacting,sstables,OperationType.COMPACTION);
    assertEquals(files,cfs.getSSTables().size());
    assertEquals(0,cfs.getDataTracker().getView().shadowed.size());
    Thread.sleep(1000);
    assertFileCounts(s.descriptor.directory.list(),0,0);
    validateCFS(cfs);
  }
 catch (  Throwable t) {
    rewriter.abort();
    throw t;
  }
}
