{
  Keyspace keyspace=Keyspace.open(KEYSPACE);
  ColumnFamilyStore cfs=keyspace.getColumnFamilyStore(CF);
  truncate(cfs);
  SSTableReader s=writeFile(cfs,1000);
  cfs.addSSTable(s);
  Set<SSTableReader> compacting=Sets.newHashSet(s);
  int files=1;
  try (ISSTableScanner scanner=s.getScanner();CompactionController controller=new CompactionController(cfs,compacting,0);LifecycleTransaction txn=cfs.getTracker().tryModify(compacting,OperationType.UNKNOWN);SSTableRewriter rewriter=new SSTableRewriter(cfs,txn,1000,false,10000000);CompactionIterator ci=new CompactionIterator(OperationType.COMPACTION,Collections.singletonList(scanner),controller,FBUtilities.nowInSeconds(),UUIDGen.getTimeUUID())){
    rewriter.switchWriter(getWriter(cfs,s.descriptor.directory));
    while (ci.hasNext()) {
      rewriter.append(ci.next());
      if (rewriter.currentWriter().getFilePointer() > 2500000) {
        rewriter.switchWriter(getWriter(cfs,s.descriptor.directory));
        files++;
        assertEquals(cfs.getSSTables().size(),files);
      }
      if (files == 3) {
        rewriter.finish();
        break;
      }
    }
  }
   SSTableDeletingTask.waitForDeletions();
  assertEquals(files - 1,cfs.getSSTables().size());
  assertFileCounts(s.descriptor.directory.list(),0,0);
  validateCFS(cfs);
}
