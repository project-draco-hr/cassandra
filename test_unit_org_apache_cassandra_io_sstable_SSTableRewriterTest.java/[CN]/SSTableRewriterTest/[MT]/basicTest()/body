{
  Keyspace keyspace=Keyspace.open(KEYSPACE);
  ColumnFamilyStore cfs=keyspace.getColumnFamilyStore(CF);
  truncate(cfs);
  assertEquals(0,cfs.metric.liveDiskSpaceUsed.getCount());
  for (int j=0; j < 100; j++) {
    ByteBuffer key=ByteBufferUtil.bytes(String.valueOf(j));
    Mutation rm=new Mutation(KEYSPACE,key);
    rm.add(CF,Util.cellname("0"),ByteBufferUtil.EMPTY_BYTE_BUFFER,j);
    rm.apply();
  }
  cfs.forceBlockingFlush();
  Set<SSTableReader> sstables=new HashSet<>(cfs.getSSTables());
  assertEquals(1,sstables.size());
  assertEquals(sstables.iterator().next().bytesOnDisk(),cfs.metric.liveDiskSpaceUsed.getCount());
  try (AbstractCompactionStrategy.ScannerList scanners=cfs.getCompactionStrategy().getScanners(sstables);LifecycleTransaction txn=cfs.getTracker().tryModify(sstables,OperationType.UNKNOWN);SSTableRewriter writer=new SSTableRewriter(cfs,txn,1000,false)){
    ISSTableScanner scanner=scanners.scanners.get(0);
    CompactionController controller=new CompactionController(cfs,sstables,cfs.gcBefore(System.currentTimeMillis()));
    writer.switchWriter(getWriter(cfs,sstables.iterator().next().descriptor.directory));
    while (scanner.hasNext()) {
      AbstractCompactedRow row=new LazilyCompactedRow(controller,Arrays.asList(scanner.next()));
      writer.append(row);
    }
    writer.finish();
  }
   SSTableDeletingTask.waitForDeletions();
  validateCFS(cfs);
  int filecounts=assertFileCounts(sstables.iterator().next().descriptor.directory.list(),0,0);
  assertEquals(1,filecounts);
  truncate(cfs);
}
