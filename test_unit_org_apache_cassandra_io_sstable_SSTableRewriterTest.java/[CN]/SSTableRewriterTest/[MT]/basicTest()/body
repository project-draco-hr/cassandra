{
  Keyspace keyspace=Keyspace.open(KEYSPACE);
  ColumnFamilyStore cfs=keyspace.getColumnFamilyStore(CF);
  truncate(cfs);
  assertEquals(0,cfs.metric.liveDiskSpaceUsed.getCount());
  for (int j=0; j < 100; j++) {
    new RowUpdateBuilder(cfs.metadata,j,String.valueOf(j)).clustering("0").add("val",ByteBufferUtil.EMPTY_BYTE_BUFFER).build().apply();
  }
  cfs.forceBlockingFlush();
  Set<SSTableReader> sstables=new HashSet<>(cfs.getSSTables());
  assertEquals(1,sstables.size());
  assertEquals(sstables.iterator().next().bytesOnDisk(),cfs.metric.liveDiskSpaceUsed.getCount());
  int nowInSec=FBUtilities.nowInSeconds();
  try (AbstractCompactionStrategy.ScannerList scanners=cfs.getCompactionStrategyManager().getScanners(sstables);LifecycleTransaction txn=cfs.getTracker().tryModify(sstables,OperationType.UNKNOWN);SSTableRewriter writer=new SSTableRewriter(cfs,txn,1000,false);CompactionController controller=new CompactionController(cfs,sstables,cfs.gcBefore(nowInSec));CompactionIterator ci=new CompactionIterator(OperationType.COMPACTION,scanners.scanners,controller,nowInSec,UUIDGen.getTimeUUID())){
    writer.switchWriter(getWriter(cfs,sstables.iterator().next().descriptor.directory));
    while (ci.hasNext()) {
      writer.append(ci.next());
    }
    writer.finish();
  }
   SSTableDeletingTask.waitForDeletions();
  validateCFS(cfs);
  int filecounts=assertFileCounts(sstables.iterator().next().descriptor.directory.list(),0,0);
  assertEquals(1,filecounts);
  truncate(cfs);
}
