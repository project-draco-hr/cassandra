{
  Keyspace keyspace=Keyspace.open(KEYSPACE);
  ColumnFamilyStore cfs=keyspace.getColumnFamilyStore(CF);
  cfs.truncateBlocking();
  SSTableReader s=writeFile(cfs,1000);
  cfs.addSSTable(s);
  Set<SSTableReader> compacting=Sets.newHashSet(s);
  SSTableRewriter.overrideOpenInterval(10000000);
  SSTableRewriter rewriter=new SSTableRewriter(cfs,compacting,1000,false);
  SSTableWriter w=getWriter(cfs,s.descriptor.directory);
  rewriter.switchWriter(w);
  try (ICompactionScanner scanner=compacting.iterator().next().getScanner();CompactionController controller=new CompactionController(cfs,compacting,0)){
    while (scanner.hasNext()) {
      rewriter.append(new LazilyCompactedRow(controller,Arrays.asList(scanner.next())));
      if (rewriter.currentWriter().getOnDiskFilePointer() > 25000000) {
        rewriter.switchWriter(getWriter(cfs,s.descriptor.directory));
      }
    }
    try {
      rewriter.finishAndThrow(true);
    }
 catch (    Throwable t) {
      rewriter.abort();
    }
  }
   Thread.sleep(1000);
  int filecount=assertFileCounts(s.descriptor.directory.list(),0,0);
  assertEquals(filecount,1);
  assertEquals(1,cfs.getSSTables().size());
  validateCFS(cfs);
  cfs.truncateBlocking();
  Thread.sleep(1000);
  filecount=assertFileCounts(s.descriptor.directory.list(),0,0);
  assertEquals(0,filecount);
}
