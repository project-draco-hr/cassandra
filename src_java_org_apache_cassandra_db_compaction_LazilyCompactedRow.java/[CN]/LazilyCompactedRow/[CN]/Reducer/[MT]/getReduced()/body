{
  if (tombstone != null) {
    RangeTombstone t=tombstone;
    tombstone=null;
    if (t.timestamp() < getMaxPurgeableTimestamp() && t.data.isGcAble(controller.gcBefore)) {
      indexBuilder.tombstoneTracker().update(t,true);
      return null;
    }
 else {
      tombstones.update(t.getLocalDeletionTime());
      minTimestampTracker.update(t.timestamp());
      maxTimestampTracker.update(t.timestamp());
      maxDeletionTimeTracker.update(t.getLocalDeletionTime());
      minColumnNameSeen=ColumnNameHelper.minComponents(minColumnNameSeen,t.min,controller.cfs.metadata.comparator);
      maxColumnNameSeen=ColumnNameHelper.maxComponents(maxColumnNameSeen,t.max,controller.cfs.metadata.comparator);
      return t;
    }
  }
 else {
    container.delete(maxRowTombstone);
    Iterator<Cell> iter=container.iterator();
    Cell c=iter.next();
    boolean shouldPurge=c.getLocalDeletionTime() < Integer.MAX_VALUE && c.timestamp() < getMaxPurgeableTimestamp();
    removeDeleted(container,shouldPurge,key,controller);
    iter=container.iterator();
    if (!iter.hasNext()) {
      container=ArrayBackedSortedColumns.factory.create(emptyColumnFamily.metadata());
      return null;
    }
    int localDeletionTime=container.deletionInfo().getTopLevelDeletion().localDeletionTime;
    if (localDeletionTime < Integer.MAX_VALUE)     tombstones.update(localDeletionTime);
    Cell reduced=iter.next();
    container=ArrayBackedSortedColumns.factory.create(emptyColumnFamily.metadata());
    if (indexBuilder.tombstoneTracker().isDeleted(reduced)) {
      indexBuilder.tombstoneTracker().update(reduced,false);
      indexer.remove(reduced);
      return null;
    }
    columns++;
    minTimestampTracker.update(reduced.timestamp());
    maxTimestampTracker.update(reduced.timestamp());
    maxDeletionTimeTracker.update(reduced.getLocalDeletionTime());
    minColumnNameSeen=ColumnNameHelper.minComponents(minColumnNameSeen,reduced.name(),controller.cfs.metadata.comparator);
    maxColumnNameSeen=ColumnNameHelper.maxComponents(maxColumnNameSeen,reduced.name(),controller.cfs.metadata.comparator);
    int deletionTime=reduced.getLocalDeletionTime();
    if (deletionTime < Integer.MAX_VALUE)     tombstones.update(deletionTime);
    if (reduced instanceof CounterCell)     hasLegacyCounterShards=hasLegacyCounterShards || ((CounterCell)reduced).hasLegacyShards();
    return reduced;
  }
}
