{
  if (tombstone != null) {
    RangeTombstone t=tombstone;
    tombstone=null;
    if (t.data.isGcAble(controller.gcBefore)) {
      return null;
    }
 else {
      serializedSize+=t.serializedSizeForSSTable();
      return t;
    }
  }
 else {
    ColumnFamily purged=PrecompactedRow.removeDeletedAndOldShards(key,shouldPurge,controller,container);
    if (purged == null || !purged.iterator().hasNext()) {
      container.clear();
      return null;
    }
    IColumn reduced=purged.iterator().next();
    container.clear();
    if (indexBuilder.tombstoneTracker().isDeleted(reduced))     return null;
    serializedSize+=reduced.serializedSizeForSSTable();
    columns++;
    maxTimestampSeen=Math.max(maxTimestampSeen,reduced.maxTimestamp());
    int deletionTime=reduced.getLocalDeletionTime();
    if (deletionTime < Integer.MAX_VALUE) {
      tombstones.update(deletionTime);
    }
    return reduced;
  }
}
