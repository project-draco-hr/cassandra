{
  if (tombstone != null) {
    RangeTombstone t=tombstone;
    tombstone=null;
    if (t.data.isGcAble(controller.gcBefore)) {
      return null;
    }
 else {
      return t;
    }
  }
 else {
    boolean shouldPurge=container.getSortedColumns().iterator().next().timestamp() < maxPurgeableTimestamp;
    container.delete(maxRowTombstone);
    removeDeleted(container,shouldPurge,key,controller);
    Iterator<Cell> iter=container.iterator();
    if (!iter.hasNext()) {
      container.clear();
      return null;
    }
    int localDeletionTime=container.deletionInfo().getTopLevelDeletion().localDeletionTime;
    if (localDeletionTime < Integer.MAX_VALUE)     tombstones.update(localDeletionTime);
    Iterator<RangeTombstone> rangeTombstoneIterator=container.deletionInfo().rangeIterator();
    while (rangeTombstoneIterator.hasNext()) {
      RangeTombstone rangeTombstone=rangeTombstoneIterator.next();
      tombstones.update(rangeTombstone.getLocalDeletionTime());
    }
    Cell reduced=iter.next();
    container.clear();
    if (indexBuilder.tombstoneTracker().isDeleted(reduced)) {
      indexer.remove(reduced);
      return null;
    }
    columns++;
    minTimestampSeen=Math.min(minTimestampSeen,reduced.timestamp());
    maxTimestampSeen=Math.max(maxTimestampSeen,reduced.timestamp());
    maxLocalDeletionTimeSeen=Math.max(maxLocalDeletionTimeSeen,reduced.getLocalDeletionTime());
    minColumnNameSeen=ColumnNameHelper.minComponents(minColumnNameSeen,reduced.name(),controller.cfs.metadata.comparator);
    maxColumnNameSeen=ColumnNameHelper.maxComponents(maxColumnNameSeen,reduced.name(),controller.cfs.metadata.comparator);
    int deletionTime=reduced.getLocalDeletionTime();
    if (deletionTime < Integer.MAX_VALUE) {
      tombstones.update(deletionTime);
    }
    return reduced;
  }
}
