{
  Object[] params=new Object[argTypes.size()];
  for (int i=0; i < params.length; i++) {
    ByteBuffer bb=parameters.get(i);
    if (bb != null)     params[i]=argTypes.get(i).compose(bb);
  }
  try {
    Bindings bindings=new SimpleBindings();
    for (int i=0; i < params.length; i++)     bindings.put(argNames.get(i).toString(),params[i]);
    Object result=script.eval(bindings);
    if (result == null)     return null;
    Class<?> javaReturnType=returnType.getSerializer().getType();
    Class<?> resultType=result.getClass();
    if (!javaReturnType.isAssignableFrom(resultType)) {
      if (result instanceof Number) {
        Number rNumber=(Number)result;
        if (javaReturnType == Integer.class)         result=rNumber.intValue();
 else         if (javaReturnType == Long.class)         result=rNumber.longValue();
 else         if (javaReturnType == Float.class)         result=rNumber.floatValue();
 else         if (javaReturnType == Double.class)         result=rNumber.doubleValue();
 else         if (javaReturnType == BigInteger.class) {
          if (rNumber instanceof BigDecimal)           result=((BigDecimal)rNumber).toBigInteger();
 else           if (rNumber instanceof Double || rNumber instanceof Float)           result=new BigDecimal(rNumber.toString()).toBigInteger();
 else           result=BigInteger.valueOf(rNumber.longValue());
        }
 else         if (javaReturnType == BigDecimal.class)         result=new BigDecimal(rNumber.toString());
      }
    }
    @SuppressWarnings("unchecked") ByteBuffer r=((AbstractType)returnType).decompose(result);
    return r;
  }
 catch (  RuntimeException|ScriptException e) {
    logger.info("Execution of UDF '{}' failed",name,e);
    throw new InvalidRequestException("Execution of user-defined function '" + name + "' failed: "+ e);
  }
}
