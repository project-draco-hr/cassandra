{
  createTable("CREATE TABLE %s (" + "k int, " + "asciival ascii, "+ "bigintval bigint, "+ "PRIMARY KEY((k, asciival)))");
  execute("USE " + keyspace());
  executeNet(protocolVersion,"USE " + keyspace());
  createView("mv1_test","CREATE MATERIALIZED VIEW %s AS SELECT * FROM %%s WHERE bigintval IS NOT NULL AND k IS NOT NULL AND asciival IS NOT NULL PRIMARY KEY (bigintval, k, asciival)");
  updateMV("INSERT INTO %s(k,asciival,bigintval)VALUES(?,?,?)",0,"foo",1L);
  try {
    updateMV("INSERT INTO mv1_test(k,asciival,bigintval) VALUES(?,?,?)",1,"foo",2L);
    Assert.fail("Shouldn't be able to modify a MV directly");
  }
 catch (  Exception e) {
  }
  try {
    executeNet(protocolVersion,"ALTER TABLE mv1_test ADD foo text");
    Assert.fail("Should not be able to use alter table with MV");
  }
 catch (  Exception e) {
  }
  try {
    executeNet(protocolVersion,"ALTER TABLE mv1_test WITH compaction = { 'class' : 'LeveledCompactionStrategy' }");
    Assert.fail("Should not be able to use alter table with MV");
  }
 catch (  Exception e) {
  }
  executeNet(protocolVersion,"ALTER MATERIALIZED VIEW mv1_test WITH compaction = { 'class' : 'LeveledCompactionStrategy' }");
  executeNet(protocolVersion,"ALTER TABLE %s ADD foo text");
  CFMetaData metadata=Schema.instance.getCFMetaData(keyspace(),"mv1_test");
  Assert.assertNotNull(metadata.getColumnDefinition(ByteBufferUtil.bytes("foo")));
  updateMV("INSERT INTO %s(k,asciival,bigintval,foo)VALUES(?,?,?,?)",0,"foo",1L,"bar");
  assertRows(execute("SELECT foo from %s"),row("bar"));
  executeNet(protocolVersion,"ALTER TABLE %s RENAME asciival TO bar");
  assertRows(execute("SELECT bar from %s"),row("foo"));
  metadata=Schema.instance.getCFMetaData(keyspace(),"mv1_test");
  Assert.assertNotNull(metadata.getColumnDefinition(ByteBufferUtil.bytes("bar")));
}
