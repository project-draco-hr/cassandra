{
  if (name.equalsNativeFunction(TOKEN_FUNCTION_NAME))   return new TokenFct(Schema.instance.getCFMetaData(receiverKs,receiverCf));
  if (name.equalsNativeFunction(ToJsonFct.NAME))   throw new InvalidRequestException("toJson() may only be used within the selection clause of SELECT statements");
  if (name.equalsNativeFunction(FromJsonFct.NAME)) {
    if (receiverType == null)     throw new InvalidRequestException("fromJson() cannot be used in the selection clause of a SELECT statement");
    return FromJsonFct.getInstance(receiverType);
  }
  Collection<Function> candidates;
  if (!name.hasKeyspace()) {
    candidates=new ArrayList<>();
    candidates.addAll(Schema.instance.getFunctions(name.asNativeFunction()));
    candidates.addAll(Schema.instance.getFunctions(new FunctionName(keyspace,name.name)));
  }
 else {
    candidates=Schema.instance.getFunctions(name);
  }
  if (candidates.isEmpty())   return null;
  if (candidates.size() == 1) {
    Function fun=candidates.iterator().next();
    validateTypes(keyspace,fun,providedArgs,receiverKs,receiverCf);
    return fun;
  }
  List<Function> compatibles=null;
  for (  Function toTest : candidates) {
    AssignmentTestable.TestResult r=matchAguments(keyspace,toTest,providedArgs,receiverKs,receiverCf);
switch (r) {
case EXACT_MATCH:
      return toTest;
case WEAKLY_ASSIGNABLE:
    if (compatibles == null)     compatibles=new ArrayList<>();
  compatibles.add(toTest);
break;
}
}
if (compatibles == null || compatibles.isEmpty()) throw new InvalidRequestException(String.format("Invalid call to function %s, none of its type signatures match (known type signatures: %s)",name,format(candidates)));
if (compatibles.size() > 1) throw new InvalidRequestException(String.format("Ambiguous call to function %s (can be matched by following signatures: %s): use type casts to disambiguate",name,format(compatibles)));
return compatibles.get(0);
}
