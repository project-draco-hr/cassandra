{
  if (Strings.isNullOrEmpty(restoreDirectories))   return;
  for (  String dir : restoreDirectories.split(DELIMITER)) {
    File[] files=new File(dir).listFiles();
    if (files == null) {
      throw new RuntimeException("Unable to list directory " + dir);
    }
    for (    File fromFile : files) {
      CommitLogDescriptor fromHeader=CommitLogDescriptor.fromHeader(fromFile);
      CommitLogDescriptor fromName=CommitLogDescriptor.isValid(fromFile.getName()) ? CommitLogDescriptor.fromFileName(fromFile.getName()) : null;
      CommitLogDescriptor descriptor;
      if (fromHeader == null && fromName == null)       throw new IllegalStateException("Cannot safely construct descriptor for segment, either from its name or its header: " + fromFile.getPath());
 else       if (fromHeader != null && fromName != null && !fromHeader.equalsIgnoringCompression(fromName))       throw new IllegalStateException(String.format("Cannot safely construct descriptor for segment, as name and header descriptors do not match (%s vs %s): %s",fromHeader,fromName,fromFile.getPath()));
 else       if (fromName != null && fromHeader == null && fromName.version >= CommitLogDescriptor.VERSION_21)       throw new IllegalStateException("Cannot safely construct descriptor for segment, as name descriptor implies a version that should contain a header descriptor, but that descriptor could not be read: " + fromFile.getPath());
 else       if (fromHeader != null)       descriptor=fromHeader;
 else       descriptor=fromName;
      if (descriptor.version > CommitLogDescriptor.VERSION_30)       throw new IllegalStateException("Unsupported commit log version: " + descriptor.version);
      if (descriptor.compression != null) {
        try {
          CompressionParameters.createCompressor(descriptor.compression);
        }
 catch (        ConfigurationException e) {
          throw new IllegalStateException("Unknown compression",e);
        }
      }
      File toFile=new File(DatabaseDescriptor.getCommitLogLocation(),descriptor.fileName());
      if (toFile.exists()) {
        logger.debug("Skipping restore of archive {} as the segment already exists in the restore location {}",fromFile.getPath(),toFile.getPath());
        continue;
      }
      String command=restoreCommand.replace("%from",fromFile.getPath());
      command=command.replace("%to",toFile.getPath());
      try {
        exec(command);
      }
 catch (      IOException e) {
        throw new RuntimeException(e);
      }
    }
  }
}
