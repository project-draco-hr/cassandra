{
  Properties commitlog_commands=new Properties();
  try (InputStream stream=CommitLogArchiver.class.getClassLoader().getResourceAsStream("commitlog_archiving.properties")){
    if (stream == null) {
      logger.debug("No commitlog_archiving properties found; archive + pitr will be disabled");
      return disabled();
    }
 else {
      commitlog_commands.load(stream);
      String archiveCommand=commitlog_commands.getProperty("archive_command");
      String restoreCommand=commitlog_commands.getProperty("restore_command");
      String restoreDirectories=commitlog_commands.getProperty("restore_directories");
      if (restoreDirectories != null && !restoreDirectories.isEmpty()) {
        for (        String dir : restoreDirectories.split(DELIMITER)) {
          File directory=new File(dir);
          if (!directory.exists()) {
            if (!directory.mkdir()) {
              throw new RuntimeException("Unable to create directory: " + dir);
            }
          }
        }
      }
      String targetTime=commitlog_commands.getProperty("restore_point_in_time");
      TimeUnit precision=TimeUnit.valueOf(commitlog_commands.getProperty("precision","MICROSECONDS"));
      long restorePointInTime;
      try {
        restorePointInTime=Strings.isNullOrEmpty(targetTime) ? Long.MAX_VALUE : format.parse(targetTime).getTime();
      }
 catch (      ParseException e) {
        throw new RuntimeException("Unable to parse restore target time",e);
      }
      return new CommitLogArchiver(archiveCommand,restoreCommand,restoreDirectories,restorePointInTime,precision);
    }
  }
 catch (  IOException e) {
    throw new RuntimeException("Unable to load commitlog_archiving.properties",e);
  }
}
