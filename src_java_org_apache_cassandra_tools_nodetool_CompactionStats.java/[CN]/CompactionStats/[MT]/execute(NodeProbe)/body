{
  CompactionManagerMBean cm=probe.getCompactionManagerProxy();
  Map<String,Map<String,Integer>> pendingTaskNumberByTable=(Map<String,Map<String,Integer>>)probe.getCompactionMetric("PendingTasksByTableName");
  int numTotalPendingTask=0;
  for (  Entry<String,Map<String,Integer>> ksEntry : pendingTaskNumberByTable.entrySet()) {
    for (    Entry<String,Integer> tableEntry : ksEntry.getValue().entrySet())     numTotalPendingTask+=tableEntry.getValue();
  }
  System.out.println("pending tasks: " + numTotalPendingTask);
  for (  Entry<String,Map<String,Integer>> ksEntry : pendingTaskNumberByTable.entrySet()) {
    String ksName=ksEntry.getKey();
    for (    Entry<String,Integer> tableEntry : ksEntry.getValue().entrySet()) {
      String tableName=tableEntry.getKey();
      int pendingTaskCount=tableEntry.getValue();
      System.out.println("- " + ksName + '.'+ tableName+ ": "+ pendingTaskCount);
    }
  }
  System.out.println();
  long remainingBytes=0;
  TableBuilder table=new TableBuilder();
  List<Map<String,String>> compactions=cm.getCompactions();
  if (!compactions.isEmpty()) {
    int compactionThroughput=probe.getCompactionThroughput();
    table.add("id","compaction type","keyspace","table","completed","total","unit","progress");
    for (    Map<String,String> c : compactions) {
      long total=Long.parseLong(c.get("total"));
      long completed=Long.parseLong(c.get("completed"));
      String taskType=c.get("taskType");
      String keyspace=c.get("keyspace");
      String columnFamily=c.get("columnfamily");
      String completedStr=humanReadable ? FileUtils.stringifyFileSize(completed) : Long.toString(completed);
      String totalStr=humanReadable ? FileUtils.stringifyFileSize(total) : Long.toString(total);
      String unit=c.get("unit");
      String percentComplete=total == 0 ? "n/a" : new DecimalFormat("0.00").format((double)completed / total * 100) + "%";
      String id=c.get("compactionId");
      table.add(id,taskType,keyspace,columnFamily,completedStr,totalStr,unit,percentComplete);
      if (taskType.equals(OperationType.COMPACTION.toString()))       remainingBytes+=total - completed;
    }
    table.printTo(System.out);
    String remainingTime="n/a";
    if (compactionThroughput != 0) {
      long remainingTimeInSecs=remainingBytes / (1024L * 1024L * compactionThroughput);
      remainingTime=format("%dh%02dm%02ds",remainingTimeInSecs / 3600,(remainingTimeInSecs % 3600) / 60,(remainingTimeInSecs % 60));
    }
    System.out.printf("%25s%10s%n","Active compaction remaining time : ",remainingTime);
  }
}
