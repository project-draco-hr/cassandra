{
  Keyspace keyspace=Keyspace.open(KEYSPACE);
  ColumnFamilyStore store=keyspace.getColumnFamilyStore(TABLE);
  store.clearUnsafe();
  store.disableAutoCompaction();
  for (int i=0; i < 3; i++)   for (int j=2; j < 10; j++)   insertRowWithKey(i * 100 + j);
  store.forceBlockingFlush();
  assertEquals(1,store.getSSTables().size());
  SSTableReader sstable=store.getSSTables().iterator().next();
  SSTableScanner fullScanner=sstable.getScanner();
  assertScanContainsRanges(fullScanner,2,9,102,109,202,209);
  ICompactionScanner scanner=sstable.getScanner(makeRanges(1,9,101,109,201,209),null);
  assertScanContainsRanges(scanner,2,9,102,109,202,209);
  scanner=sstable.getScanner(makeRanges(101,109,201,209),null);
  assertScanContainsRanges(scanner,102,109,202,209);
  scanner=sstable.getScanner(makeRanges(1,9,201,209),null);
  assertScanContainsRanges(scanner,2,9,202,209);
  scanner=sstable.getScanner(makeRanges(1,9,101,109),null);
  assertScanContainsRanges(scanner,2,9,102,109);
  scanner=sstable.getScanner(makeRanges(1,5,101,109,201,209),null);
  assertScanContainsRanges(scanner,2,5,102,109,202,209);
  scanner=sstable.getScanner(makeRanges(1,20,101,109,201,209),null);
  assertScanContainsRanges(scanner,2,9,102,109,202,209);
  scanner=sstable.getScanner(makeRanges(1,5,6,205,206,209),null);
  assertScanContainsRanges(scanner,2,5,7,9,102,109,202,205,207,209);
  scanner=sstable.getScanner(makeRanges(0,1,2,20,101,109,150,159,201,209,1000,1001),null);
  assertScanContainsRanges(scanner,3,9,102,109,202,209);
  scanner=sstable.getScanner(makeRanges(201,209,1,20,201,209,101,109,1000,1001,150,159),null);
  assertScanContainsRanges(scanner,2,9,102,109,202,209);
  scanner=sstable.getScanner(makeRanges(0,1,150,159,250,259),null);
  assertFalse(scanner.hasNext());
  scanner=sstable.getScanner(new ArrayList<Range<Token>>(),null);
  assertFalse(scanner.hasNext());
}
