{
  Keyspace keyspace=Keyspace.open(KEYSPACE1);
  ColumnFamilyStore cfs=keyspace.getColumnFamilyStore("Standard1");
  cfs.clearUnsafe();
  final int ROWS_PER_SSTABLE=10;
  final int SSTABLES=cfs.metadata.getMinIndexInterval() * 3 / ROWS_PER_SSTABLE;
  cfs.disableAutoCompaction();
  long maxTimestampExpected=Long.MIN_VALUE;
  Set<DecoratedKey> inserted=new HashSet<DecoratedKey>();
  for (int j=0; j < SSTABLES; j++) {
    for (int i=0; i < ROWS_PER_SSTABLE; i++) {
      DecoratedKey key=Util.dk(String.valueOf(i % 2));
      long timestamp=j * ROWS_PER_SSTABLE + i;
      maxTimestampExpected=Math.max(timestamp,maxTimestampExpected);
      UpdateBuilder.create(cfs.metadata,key).withTimestamp(timestamp).newRow(String.valueOf(i / 2)).add("val",ByteBufferUtil.EMPTY_BYTE_BUFFER).apply();
      inserted.add(key);
    }
    cfs.forceBlockingFlush();
    CompactionsTest.assertMaxTimestamp(cfs,maxTimestampExpected);
    assertEquals(inserted.toString(),inserted.size(),Util.getAll(Util.cmd(cfs).build()).size());
  }
  forceCompactions(cfs);
  assertEquals(inserted.toString(),inserted.size(),Util.getAll(Util.cmd(cfs).build()).size());
  CompactionsTest.assertMaxTimestamp(cfs,maxTimestampExpected);
  cfs.truncateBlocking();
}
