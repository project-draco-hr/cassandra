{
  logger.debug("add_keyspace");
  state().hasKeyspaceSchemaAccess(Permission.WRITE);
  validateSchemaAgreement();
  ThriftValidation.validateKeyspaceNotYetExisting(ks_def.name);
  for (  CfDef cf : ks_def.cf_defs) {
    if (!cf.getKeyspace().equals(ks_def.getName())) {
      throw new InvalidRequestException("CsDef (" + cf.getName() + ") had a keyspace definition that did not match KsDef");
    }
  }
  try {
    Collection<CFMetaData> cfDefs=new ArrayList<CFMetaData>(ks_def.cf_defs.size());
    for (    CfDef cf_def : ks_def.cf_defs) {
      CFMetaData.addDefaultIndexNames(cf_def);
      ThriftValidation.validateCfDef(cf_def,null);
      cfDefs.add(CFMetaData.fromThrift(cf_def));
    }
    ThriftValidation.validateKsDef(ks_def);
    applyMigrationOnStage(new AddKeyspace(KSMetaData.fromThrift(ks_def,cfDefs.toArray(new CFMetaData[cfDefs.size()]))));
    return Schema.instance.getVersion().toString();
  }
 catch (  ConfigurationException e) {
    InvalidRequestException ex=new InvalidRequestException(e.getMessage());
    ex.initCause(e);
    throw ex;
  }
catch (  IOException e) {
    InvalidRequestException ex=new InvalidRequestException(e.getMessage());
    ex.initCause(e);
    throw ex;
  }
}
