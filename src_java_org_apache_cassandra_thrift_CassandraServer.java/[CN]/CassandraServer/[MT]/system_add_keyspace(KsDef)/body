{
  logger.debug("add_keyspace");
  state().hasKeyspaceListAccess(Permission.WRITE);
  for (  CfDef cf : ks_def.cf_defs) {
    if (!cf.getKeyspace().equals(ks_def.getName())) {
      throw new InvalidRequestException("CsDef (" + cf.getName() + ") had a keyspace definition that did not match KsDef");
    }
  }
  try {
    Collection<CFMetaData> cfDefs=new ArrayList<CFMetaData>(ks_def.cf_defs.size());
    for (    CfDef cfDef : ks_def.cf_defs) {
      ThriftValidation.validateCfDef(cfDef);
      cfDefs.add(convertToCFMetaData(cfDef));
    }
    KSMetaData ksm=new KSMetaData(ks_def.name,AbstractReplicationStrategy.getClass(ks_def.strategy_class),ks_def.strategy_options,ks_def.replication_factor,cfDefs.toArray(new CFMetaData[cfDefs.size()]));
    applyMigrationOnStage(new AddKeyspace(ksm));
    return DatabaseDescriptor.getDefsVersion().toString();
  }
 catch (  ConfigurationException e) {
    InvalidRequestException ex=new InvalidRequestException(e.getMessage());
    ex.initCause(e);
    throw ex;
  }
catch (  IOException e) {
    InvalidRequestException ex=new InvalidRequestException(e.getMessage());
    ex.initCause(e);
    throw ex;
  }
}
