{
  logger.debug("add_keyspace");
  ThriftValidation.validateKeyspaceNotSystem(ks_def.name);
  state().hasKeyspaceSchemaAccess(Permission.WRITE);
  ThriftValidation.validateKeyspaceNotYetExisting(ks_def.name);
  for (  CfDef cf : ks_def.cf_defs) {
    if (!cf.getKeyspace().equals(ks_def.getName())) {
      throw new InvalidRequestException("CfDef (" + cf.getName() + ") had a keyspace definition that did not match KsDef");
    }
  }
  try {
    Collection<CFMetaData> cfDefs=new ArrayList<CFMetaData>(ks_def.cf_defs.size());
    for (    CfDef cf_def : ks_def.cf_defs) {
      cf_def.unsetId();
      CFMetaData cfm=CFMetaData.fromThrift(cf_def);
      cfm.addDefaultIndexNames();
      cfDefs.add(cfm);
    }
    MigrationManager.announceNewKeyspace(KSMetaData.fromThrift(ks_def,cfDefs.toArray(new CFMetaData[cfDefs.size()])));
    return Schema.instance.getVersion().toString();
  }
 catch (  ConfigurationException e) {
    InvalidRequestException ex=new InvalidRequestException(e.getMessage());
    ex.initCause(e);
    throw ex;
  }
}
