{
  if (startSessionIfRequested()) {
    Map<String,String> traceParameters=ImmutableMap.of("column_parent",column_parent.toString(),"index_clause",index_clause.toString(),"slice_predicate",column_predicate.toString(),"consistency_level",consistency_level.name());
    Tracing.instance.begin("get_indexed_slices",traceParameters);
  }
 else {
    logger.debug("scan");
  }
  try {
    ThriftClientState cState=state();
    String keyspace=cState.getKeyspace();
    cState.hasColumnFamilyAccess(keyspace,column_parent.column_family,Permission.SELECT);
    CFMetaData metadata=ThriftValidation.validateColumnFamily(keyspace,column_parent.column_family,false);
    ThriftValidation.validateColumnParent(metadata,column_parent);
    ThriftValidation.validatePredicate(metadata,column_parent,column_predicate);
    ThriftValidation.validateIndexClauses(metadata,index_clause);
    org.apache.cassandra.db.ConsistencyLevel consistencyLevel=ThriftConversion.fromThrift(consistency_level);
    consistencyLevel.validateForRead(keyspace);
    IPartitioner p=metadata.partitioner;
    AbstractBounds<PartitionPosition> bounds=new Bounds<>(PartitionPosition.ForKey.get(index_clause.start_key,p),p.getMinimumToken().minKeyBound());
    int nowInSec=FBUtilities.nowInSeconds();
    ColumnFilter columns=makeColumnFilter(metadata,column_parent,column_predicate);
    ClusteringIndexFilter filter=toInternalFilter(metadata,column_parent,column_predicate);
    DataLimits limits=getLimits(index_clause.count,metadata.isSuper() && !column_parent.isSetSuper_column(),column_predicate);
    PartitionRangeReadCommand cmd=new PartitionRangeReadCommand(false,true,metadata,nowInSec,columns,ThriftConversion.rowFilterFromThrift(metadata,index_clause.expressions),limits,new DataRange(bounds,filter));
    try (PartitionIterator results=StorageProxy.getRangeSlice(cmd,consistencyLevel)){
      return thriftifyKeySlices(results,column_parent,limits.perPartitionCount());
    }
   }
 catch (  RequestValidationException e) {
    throw ThriftConversion.toThrift(e);
  }
catch (  RequestExecutionException e) {
    throw ThriftConversion.rethrow(e);
  }
 finally {
    Tracing.instance.stopSession();
  }
}
