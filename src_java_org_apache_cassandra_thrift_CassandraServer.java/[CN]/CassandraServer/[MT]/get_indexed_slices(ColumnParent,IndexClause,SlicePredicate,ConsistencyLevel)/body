{
  logger.debug("scan");
  ClientState cState=state();
  cState.hasColumnFamilyAccess(column_parent.column_family,Permission.READ);
  String keyspace=cState.getKeyspace();
  CFMetaData metadata=ThriftValidation.validateColumnFamily(keyspace,column_parent.column_family,false);
  ThriftValidation.validateColumnParent(metadata,column_parent);
  ThriftValidation.validatePredicate(metadata,column_parent,column_predicate);
  ThriftValidation.validateIndexClauses(metadata,index_clause);
  ThriftValidation.validateConsistencyLevel(keyspace,consistency_level,RequestType.READ);
  IPartitioner p=StorageService.getPartitioner();
  AbstractBounds<RowPosition> bounds=new Bounds<RowPosition>(RowPosition.forKey(index_clause.start_key,p),p.getMinimumToken().minKeyBound());
  IFilter filter=ThriftValidation.asIFilter(column_predicate,metadata.getComparatorFor(column_parent.super_column));
  RangeSliceCommand command=new RangeSliceCommand(keyspace,column_parent.column_family,null,filter,bounds,index_clause.expressions,index_clause.count);
  List<Row> rows;
  try {
    rows=StorageProxy.getRangeSlice(command,consistency_level);
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
catch (  TimeoutException e) {
    logger.debug("... timed out");
    throw new TimedOutException();
  }
  return thriftifyKeySlices(rows,column_parent,column_predicate);
}
