{
  if (startSessionIfRequested()) {
    Map<String,String> traceParameters=ImmutableMap.of("key",ByteBufferUtil.bytesToHex(request.key),"column_parent",request.column_parent.toString(),"consistency_level",request.consistency_level.name(),"count",String.valueOf(request.count),"column_slices",request.column_slices.toString());
    Tracing.instance.begin("get_multi_slice",traceParameters);
  }
 else {
    logger.debug("get_multi_slice");
  }
  try {
    ClientState cState=state();
    String keyspace=cState.getKeyspace();
    state().hasColumnFamilyAccess(keyspace,request.getColumn_parent().column_family,Permission.SELECT);
    CFMetaData metadata=ThriftValidation.validateColumnFamily(keyspace,request.getColumn_parent().column_family);
    if (metadata.isSuper())     throw new org.apache.cassandra.exceptions.InvalidRequestException("get_multi_slice does not support super columns");
    ThriftValidation.validateColumnParent(metadata,request.getColumn_parent());
    org.apache.cassandra.db.ConsistencyLevel consistencyLevel=ThriftConversion.fromThrift(request.getConsistency_level());
    consistencyLevel.validateForRead(keyspace);
    Slices.Builder builder=new Slices.Builder(metadata.comparator,request.getColumn_slices().size());
    for (int i=0; i < request.getColumn_slices().size(); i++) {
      fixOptionalSliceParameters(request.getColumn_slices().get(i));
      Slice.Bound start=LegacyLayout.decodeBound(metadata,request.getColumn_slices().get(i).start,true).bound;
      Slice.Bound finish=LegacyLayout.decodeBound(metadata,request.getColumn_slices().get(i).finish,false).bound;
      int compare=metadata.comparator.compare(start,finish);
      if (!request.reversed && compare > 0)       throw new InvalidRequestException(String.format("Column slice at index %d had start greater than finish",i));
 else       if (request.reversed && compare < 0)       throw new InvalidRequestException(String.format("Reversed column slice at index %d had start less than finish",i));
      builder.add(request.reversed ? Slice.make(finish,start) : Slice.make(start,finish));
    }
    Slices slices=builder.build();
    ColumnFilter columns=makeColumnFilter(metadata,slices);
    ClusteringIndexSliceFilter filter=new ClusteringIndexSliceFilter(slices,request.reversed);
    DataLimits limits=getLimits(1,false,request.count);
    ThriftValidation.validateKey(metadata,request.key);
    DecoratedKey dk=metadata.decorateKey(request.key);
    SinglePartitionReadCommand<?> cmd=SinglePartitionReadCommand.create(true,metadata,FBUtilities.nowInSeconds(),columns,RowFilter.NONE,limits,dk,filter);
    return getSlice(Collections.<SinglePartitionReadCommand<?>>singletonList(cmd),false,limits.perPartitionCount(),consistencyLevel,cState).entrySet().iterator().next().getValue();
  }
 catch (  RequestValidationException e) {
    throw ThriftConversion.toThrift(e);
  }
 finally {
    Tracing.instance.stopSession();
  }
}
