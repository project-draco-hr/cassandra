{
  CFMetaData metadata=ThriftValidation.validateColumnFamily(keyspace,column_parent.column_family);
  ThriftValidation.validateColumnParent(metadata,column_parent);
  ThriftValidation.validatePredicate(metadata,column_parent,predicate);
  org.apache.cassandra.db.ConsistencyLevel consistencyLevel=ThriftConversion.fromThrift(consistency_level);
  consistencyLevel.validateForRead(keyspace);
  List<ReadCommand> commands=new ArrayList<ReadCommand>(keys.size());
  IDiskAtomFilter filter;
  if (predicate.column_names != null) {
    if (metadata.isSuper()) {
      CompositeType type=(CompositeType)metadata.comparator;
      SortedSet s=new TreeSet<ByteBuffer>(column_parent.isSetSuper_column() ? type.types.get(1) : type.types.get(0));
      s.addAll(predicate.column_names);
      filter=SuperColumns.fromSCNamesFilter(type,column_parent.bufferForSuper_column(),new NamesQueryFilter(s));
    }
 else {
      SortedSet s=new TreeSet<ByteBuffer>(metadata.comparator);
      s.addAll(predicate.column_names);
      filter=new NamesQueryFilter(s);
    }
  }
 else {
    SliceRange range=predicate.slice_range;
    filter=new SliceQueryFilter(range.start,range.finish,range.reversed,range.count);
    if (metadata.isSuper())     filter=SuperColumns.fromSCFilter((CompositeType)metadata.comparator,column_parent.bufferForSuper_column(),filter);
  }
  for (  ByteBuffer key : keys) {
    ThriftValidation.validateKey(metadata,key);
    commands.add(ReadCommand.create(keyspace,key,column_parent.getColumn_family(),timestamp,filter.cloneShallow()));
  }
  return getSlice(commands,column_parent.isSetSuper_column(),consistencyLevel);
}
