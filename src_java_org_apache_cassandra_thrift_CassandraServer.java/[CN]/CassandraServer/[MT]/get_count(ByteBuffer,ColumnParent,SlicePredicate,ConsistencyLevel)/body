{
  if (startSessionIfRequested()) {
    Map<String,String> traceParameters=ImmutableMap.of("key",ByteBufferUtil.bytesToHex(key),"column_parent",column_parent.toString(),"predicate",predicate.toString(),"consistency_level",consistency_level.name());
    Tracing.instance.begin("get_count",traceParameters);
  }
 else {
    logger.debug("get_count");
  }
  try {
    ThriftClientState cState=state();
    String keyspace=cState.getKeyspace();
    cState.hasColumnFamilyAccess(keyspace,column_parent.column_family,Permission.SELECT);
    Keyspace keyspaceName=Keyspace.open(keyspace);
    ColumnFamilyStore cfs=keyspaceName.getColumnFamilyStore(column_parent.column_family);
    long timestamp=System.currentTimeMillis();
    if (predicate.column_names != null)     return getSliceInternal(keyspace,key,column_parent,timestamp,predicate,consistency_level).size();
    int pageSize;
    if (cfs.getMeanColumns() > 0) {
      int averageColumnSize=(int)(cfs.getMeanRowSize() / cfs.getMeanColumns());
      pageSize=Math.min(COUNT_PAGE_SIZE,DatabaseDescriptor.getInMemoryCompactionLimit() / averageColumnSize);
      pageSize=Math.max(2,pageSize);
      logger.debug("average row column size is {}; using pageSize of {}",averageColumnSize,pageSize);
    }
 else {
      pageSize=COUNT_PAGE_SIZE;
    }
    SliceRange sliceRange=predicate.slice_range == null ? new SliceRange(ByteBufferUtil.EMPTY_BYTE_BUFFER,ByteBufferUtil.EMPTY_BYTE_BUFFER,false,Integer.MAX_VALUE) : predicate.slice_range;
    SliceQueryFilter filter=toInternalFilter(cfs.metadata,column_parent,sliceRange);
    return QueryPagers.countPaged(keyspace,column_parent.column_family,key,filter,ThriftConversion.fromThrift(consistency_level),pageSize,timestamp);
  }
 catch (  RequestExecutionException e) {
    throw ThriftConversion.rethrow(e);
  }
catch (  RequestValidationException e) {
    throw ThriftConversion.toThrift(e);
  }
 finally {
    Tracing.instance.stopSession();
  }
}
