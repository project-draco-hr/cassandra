{
  if (startSessionIfRequested()) {
    Map<String,String> traceParameters=ImmutableMap.of("key",ByteBufferUtil.bytesToHex(key),"column_parent",column_parent.toString(),"predicate",predicate.toString(),"consistency_level",consistency_level.name());
    Tracing.instance().begin("get_count",traceParameters);
  }
 else {
    logger.debug("get_count");
  }
  try {
    ClientState cState=state();
    cState.hasColumnFamilyAccess(column_parent.column_family,Permission.READ);
    Table table=Table.open(cState.getKeyspace());
    ColumnFamilyStore cfs=table.getColumnFamilyStore(column_parent.column_family);
    if (predicate.column_names != null)     return get_slice(key,column_parent,predicate,consistency_level).size();
    int pageSize;
    if (cfs.getMeanColumns() > 0) {
      int averageColumnSize=(int)(cfs.getMeanRowSize() / cfs.getMeanColumns());
      pageSize=Math.min(COUNT_PAGE_SIZE,DatabaseDescriptor.getInMemoryCompactionLimit() / averageColumnSize);
      pageSize=Math.max(2,pageSize);
      logger.debug("average row column size is {}; using pageSize of {}",averageColumnSize,pageSize);
    }
 else {
      pageSize=COUNT_PAGE_SIZE;
    }
    int totalCount=0;
    List<ColumnOrSuperColumn> columns;
    if (predicate.slice_range == null) {
      predicate.slice_range=new SliceRange(ByteBufferUtil.EMPTY_BYTE_BUFFER,ByteBufferUtil.EMPTY_BYTE_BUFFER,false,Integer.MAX_VALUE);
    }
    int requestedCount=predicate.slice_range.count;
    int pages=0;
    while (true) {
      predicate.slice_range.count=Math.min(pageSize,requestedCount);
      columns=get_slice(key,column_parent,predicate,consistency_level);
      if (columns.isEmpty())       break;
      ByteBuffer firstName=getName(columns.get(0));
      int newColumns=pages == 0 || !firstName.equals(predicate.slice_range.start) ? columns.size() : columns.size() - 1;
      totalCount+=newColumns;
      requestedCount-=newColumns;
      pages++;
      if (requestedCount == 0 || columns.size() < predicate.slice_range.count)       break;
 else       predicate.slice_range.start=getName(columns.get(columns.size() - 1));
    }
    return totalCount;
  }
  finally {
    Tracing.instance().stopSession();
  }
}
