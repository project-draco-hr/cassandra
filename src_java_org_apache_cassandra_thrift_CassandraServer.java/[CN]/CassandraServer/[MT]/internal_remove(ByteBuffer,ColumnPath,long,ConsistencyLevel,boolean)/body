{
  ThriftClientState cState=state();
  String keyspace=cState.getKeyspace();
  cState.hasColumnFamilyAccess(keyspace,column_path.column_family,Permission.MODIFY);
  CFMetaData metadata=ThriftValidation.validateColumnFamily(keyspace,column_path.column_family,isCommutativeOp);
  ThriftValidation.validateKey(metadata,key);
  ThriftValidation.validateColumnPathOrParent(metadata,column_path);
  if (isCommutativeOp)   ThriftConversion.fromThrift(consistency_level).validateCounterForWrite(metadata);
  DecoratedKey dk=StorageService.getPartitioner().decorateKey(key);
  int nowInSec=FBUtilities.nowInSeconds();
  PartitionUpdate update;
  if (column_path.super_column == null && column_path.column == null) {
    update=PartitionUpdate.fullPartitionDelete(metadata,dk,timestamp,nowInSec);
  }
 else   if (column_path.super_column != null && column_path.column == null) {
    update=new PartitionUpdate(metadata,dk,PartitionColumns.NONE,1);
    Row.Writer writer=update.writer();
    writer.writeClusteringValue(column_path.super_column);
    writer.writeRowDeletion(new SimpleDeletionTime(timestamp,nowInSec));
    writer.endOfRow();
  }
 else {
    try {
      LegacyLayout.LegacyCellName name=LegacyLayout.decodeCellName(metadata,column_path.super_column,column_path.column);
      update=new PartitionUpdate(metadata,dk,PartitionColumns.of(name.column),1);
      Row.Writer writer=name.column.isStatic() ? update.staticWriter() : update.writer();
      name.clustering.writeTo(writer);
      CellPath path=name.collectionElement == null ? null : CellPath.create(name.collectionElement);
      writer.writeCell(name.column,false,ByteBufferUtil.EMPTY_BYTE_BUFFER,SimpleLivenessInfo.forDeletion(timestamp,nowInSec),path);
      writer.endOfRow();
    }
 catch (    UnknownColumnException e) {
      throw new org.apache.cassandra.exceptions.InvalidRequestException(e.getMessage());
    }
  }
  org.apache.cassandra.db.Mutation mutation=new org.apache.cassandra.db.Mutation(update);
  if (isCommutativeOp)   doInsert(consistency_level,Arrays.asList(new CounterMutation(mutation,ThriftConversion.fromThrift(consistency_level))));
 else   doInsert(consistency_level,Arrays.asList(mutation));
}
