{
  List<IMutation> rowMutations=new ArrayList<IMutation>();
  ThriftClientState cState=state();
  String keyspace=cState.getKeyspace();
  for (  Map.Entry<ByteBuffer,Map<String,List<Mutation>>> mutationEntry : mutation_map.entrySet()) {
    ByteBuffer key=mutationEntry.getKey();
    RowMutation rmStandard=null;
    RowMutation rmCounter=null;
    Map<String,List<Mutation>> columnFamilyToMutations=mutationEntry.getValue();
    for (    Map.Entry<String,List<Mutation>> columnFamilyMutations : columnFamilyToMutations.entrySet()) {
      String cfName=columnFamilyMutations.getKey();
      cState.hasColumnFamilyAccess(keyspace,cfName,Permission.MODIFY);
      CFMetaData metadata=ThriftValidation.validateColumnFamily(keyspace,cfName);
      ThriftValidation.validateKey(metadata,key);
      RowMutation rm;
      if (metadata.getDefaultValidator().isCommutative()) {
        ThriftConversion.fromThrift(consistency_level).validateCounterForWrite(metadata);
        rmCounter=rmCounter == null ? new RowMutation(keyspace,key) : rmCounter;
        rm=rmCounter;
      }
 else {
        rmStandard=rmStandard == null ? new RowMutation(keyspace,key) : rmStandard;
        rm=rmStandard;
      }
      for (      Mutation mutation : columnFamilyMutations.getValue()) {
        ThriftValidation.validateMutation(metadata,mutation);
        if (mutation.deletion != null) {
          deleteColumnOrSuperColumn(rm,cfName,mutation.deletion);
        }
        if (mutation.column_or_supercolumn != null) {
          addColumnOrSuperColumn(rm,cfName,mutation.column_or_supercolumn);
        }
      }
    }
    if (rmStandard != null && !rmStandard.isEmpty())     rowMutations.add(rmStandard);
    if (rmCounter != null && !rmCounter.isEmpty()) {
      if (allowCounterMutations)       rowMutations.add(new CounterMutation(rmCounter,ThriftConversion.fromThrift(consistency_level)));
 else       throw new org.apache.cassandra.exceptions.InvalidRequestException("Counter mutations are not allowed in atomic batches");
    }
  }
  return rowMutations;
}
