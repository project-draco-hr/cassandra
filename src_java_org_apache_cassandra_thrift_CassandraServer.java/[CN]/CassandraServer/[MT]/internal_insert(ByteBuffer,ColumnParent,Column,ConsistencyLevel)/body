{
  ThriftClientState cState=state();
  String keyspace=cState.getKeyspace();
  cState.hasColumnFamilyAccess(keyspace,column_parent.column_family,Permission.MODIFY);
  CFMetaData metadata=ThriftValidation.validateColumnFamily(keyspace,column_parent.column_family,false);
  ThriftValidation.validateKey(metadata,key);
  ThriftValidation.validateColumnParent(metadata,column_parent);
  if (metadata.isSuper() && column_parent.super_column == null) {
    throw new org.apache.cassandra.exceptions.InvalidRequestException("missing mandatory super column name for super CF " + column_parent.column_family);
  }
  ThriftValidation.validateColumnNames(metadata,column_parent,Arrays.asList(column.name));
  ThriftValidation.validateColumnData(metadata,column_parent.super_column,column);
  org.apache.cassandra.db.Mutation mutation;
  try {
    LegacyLayout.LegacyCellName name=LegacyLayout.decodeCellName(metadata,column_parent.super_column,column.name);
    DecoratedKey dk=StorageService.getPartitioner().decorateKey(key);
    PartitionUpdate update=new PartitionUpdate(metadata,dk,PartitionColumns.of(name.column),1);
    Row.Writer writer=name.column.isStatic() ? update.staticWriter() : update.writer();
    name.clustering.writeTo(writer);
    CellPath path=name.collectionElement == null ? null : CellPath.create(name.collectionElement);
    writer.writeCell(name.column,false,column.value,SimpleLivenessInfo.forUpdate(column.timestamp,column.ttl,FBUtilities.nowInSeconds(),metadata),path);
    writer.endOfRow();
    mutation=new org.apache.cassandra.db.Mutation(update);
  }
 catch (  MarshalException|UnknownColumnException e) {
    throw new org.apache.cassandra.exceptions.InvalidRequestException(e.getMessage());
  }
  doInsert(consistency_level,Arrays.asList(mutation));
}
