{
  if (logger.isDebugEnabled())   logger.debug("batch_mutate");
  AccessLevel needed=AccessLevel.READWRITE;
  TOP:   for (  Map<String,List<Mutation>> submap : mutation_map.values()) {
    for (    List<Mutation> mutations : submap.values()) {
      for (      Mutation m : mutations) {
        if (m.isSetDeletion()) {
          needed=AccessLevel.FULL;
          break TOP;
        }
      }
    }
  }
  checkKeyspaceAndLoginAuthorized(needed);
  List<RowMutation> rowMutations=new ArrayList<RowMutation>();
  for (  Map.Entry<byte[],Map<String,List<Mutation>>> mutationEntry : mutation_map.entrySet()) {
    byte[] key=mutationEntry.getKey();
    ThriftValidation.validateKey(key);
    Map<String,List<Mutation>> columnFamilyToMutations=mutationEntry.getValue();
    for (    Map.Entry<String,List<Mutation>> columnFamilyMutations : columnFamilyToMutations.entrySet()) {
      String cfName=columnFamilyMutations.getKey();
      for (      Mutation mutation : columnFamilyMutations.getValue()) {
        ThriftValidation.validateMutation(keySpace.get(),cfName,mutation);
      }
    }
    rowMutations.add(RowMutation.getRowMutationFromMutations(keySpace.get(),key,columnFamilyToMutations));
  }
  if (consistency_level == ConsistencyLevel.ZERO) {
    StorageProxy.mutate(rowMutations);
  }
 else {
    try {
      StorageProxy.mutateBlocking(rowMutations,consistency_level);
    }
 catch (    TimeoutException e) {
      throw new TimedOutException();
    }
  }
}
