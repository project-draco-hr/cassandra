{
  if (startSessionIfRequested()) {
    Map<String,String> traceParameters=ImmutableMap.of("column_parent",column_parent.toString(),"column",column.toString(),"consistency_level",consistency_level.name());
    Tracing.instance.begin("add",traceParameters);
  }
 else {
    logger.debug("add");
  }
  try {
    ClientState cState=state();
    String keyspace=cState.getKeyspace();
    cState.hasColumnFamilyAccess(keyspace,column_parent.column_family,Permission.MODIFY);
    CFMetaData metadata=ThriftValidation.validateColumnFamily(keyspace,column_parent.column_family,true);
    ThriftValidation.validateKey(metadata,key);
    ThriftConversion.fromThrift(consistency_level).validateCounterForWrite(metadata);
    ThriftValidation.validateColumnParent(metadata,column_parent);
    if (metadata.isSuper() && column_parent.super_column == null)     throw new InvalidRequestException("missing mandatory super column name for super CF " + column_parent.column_family);
    ThriftValidation.validateColumnNames(metadata,column_parent,Arrays.asList(column.name));
    try {
      LegacyLayout.LegacyCellName name=LegacyLayout.decodeCellName(metadata,column_parent.super_column,column.name);
      DecoratedKey dk=StorageService.getPartitioner().decorateKey(key);
      ByteBuffer value=CounterContext.instance().createLocal(column.value);
      CellPath path=name.collectionElement == null ? null : CellPath.create(name.collectionElement);
      Cell cell=BufferCell.live(metadata,name.column,FBUtilities.timestampMicros(),value,path);
      PartitionUpdate update=PartitionUpdate.singleRowUpdate(metadata,dk,BTreeBackedRow.singleCellRow(name.clustering,cell));
      org.apache.cassandra.db.Mutation mutation=new org.apache.cassandra.db.Mutation(update);
      doInsert(consistency_level,Arrays.asList(new CounterMutation(mutation,ThriftConversion.fromThrift(consistency_level))));
    }
 catch (    MarshalException|UnknownColumnException e) {
      throw new InvalidRequestException(e.getMessage());
    }
  }
 catch (  RequestValidationException e) {
    throw ThriftConversion.toThrift(e);
  }
 finally {
    Tracing.instance.stopSession();
  }
}
