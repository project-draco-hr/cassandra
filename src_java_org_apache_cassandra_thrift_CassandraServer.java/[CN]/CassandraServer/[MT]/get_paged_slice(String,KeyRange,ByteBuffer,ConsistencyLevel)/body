{
  if (startSessionIfRequested()) {
    Map<String,String> traceParameters=ImmutableMap.of("column_family",column_family,"range",range.toString(),"start_column",ByteBufferUtil.bytesToHex(start_column),"consistency_level",consistency_level.name());
    Tracing.instance.begin("get_paged_slice",traceParameters);
  }
 else {
    logger.trace("get_paged_slice");
  }
  try {
    ThriftClientState cState=state();
    String keyspace=cState.getKeyspace();
    cState.hasColumnFamilyAccess(keyspace,column_family,Permission.SELECT);
    CFMetaData metadata=ThriftValidation.validateColumnFamily(keyspace,column_family);
    ThriftValidation.validateKeyRange(metadata,null,range);
    org.apache.cassandra.db.ConsistencyLevel consistencyLevel=ThriftConversion.fromThrift(consistency_level);
    consistencyLevel.validateForRead(keyspace);
    IPartitioner p=metadata.partitioner;
    AbstractBounds<PartitionPosition> bounds;
    if (range.start_key == null) {
      Token.TokenFactory tokenFactory=p.getTokenFactory();
      Token left=tokenFactory.fromString(range.start_token);
      Token right=tokenFactory.fromString(range.end_token);
      bounds=Range.makeRowRange(left,right);
    }
 else {
      PartitionPosition end=range.end_key == null ? p.getTokenFactory().fromString(range.end_token).maxKeyBound() : PartitionPosition.ForKey.get(range.end_key,p);
      bounds=new Bounds<>(PartitionPosition.ForKey.get(range.start_key,p),end);
    }
    if (range.row_filter != null && !range.row_filter.isEmpty())     throw new InvalidRequestException("Cross-row paging is not supported along with index clauses");
    int nowInSec=FBUtilities.nowInSeconds();
    schedule(DatabaseDescriptor.getRangeRpcTimeout());
    try {
      ClusteringIndexFilter filter=new ClusteringIndexSliceFilter(Slices.ALL,false);
      DataLimits limits=getLimits(range.count,true,Integer.MAX_VALUE);
      Clustering pageFrom=metadata.isSuper() ? new Clustering(start_column) : LegacyLayout.decodeCellName(metadata,start_column).clustering;
      PartitionRangeReadCommand cmd=new PartitionRangeReadCommand(false,0,true,metadata,nowInSec,ColumnFilter.all(metadata),RowFilter.NONE,limits,new DataRange(bounds,filter).forPaging(bounds,metadata.comparator,pageFrom,true),Optional.empty());
      try (PartitionIterator results=StorageProxy.getRangeSlice(cmd,consistencyLevel)){
        return thriftifyKeySlices(results,new ColumnParent(column_family),limits.perPartitionCount());
      }
     }
 catch (    UnknownColumnException e) {
      throw new InvalidRequestException(e.getMessage());
    }
 finally {
      release();
    }
  }
 catch (  RequestValidationException e) {
    throw ThriftConversion.toThrift(e);
  }
catch (  RequestExecutionException e) {
    throw ThriftConversion.rethrow(e);
  }
 finally {
    Tracing.instance.stopSession();
  }
}
