{
  if (session.getColumnFamilyType() == ColumnFamilyType.Super)   throw new RuntimeException("Super columns are not implemented for CQL");
  if (values == null)   values=generateValues();
  if (cqlQuery == null) {
    StringBuilder query=new StringBuilder("SELECT ");
    if (session.cqlVersion.startsWith("2"))     query.append(session.getColumnsPerKey()).append(" ''..''");
 else     query.append("*");
    query.append(" FROM Standard1");
    if (session.cqlVersion.startsWith("2"))     query.append(" USING CONSISTENCY ").append(session.getConsistencyLevel());
    query.append(" WHERE C1=").append(getUnQuotedCqlBlob(values.get(1).array(),session.cqlVersion.startsWith("3"))).append(" AND KEY > ? LIMIT ").append(session.getKeysPerCall());
    cqlQuery=query.toString();
  }
  String format="%0" + session.getTotalKeysLength() + "d";
  String startOffset=String.format(format,0);
  int expectedPerValue=session.getNumKeys() / values.size(), received=0;
  while (received < expectedPerValue) {
    TimerContext context=session.latency.time();
    boolean success=false;
    String exceptionMessage=null;
    String formattedQuery=null;
    List<String> queryParms=Collections.singletonList(getUnQuotedCqlBlob(startOffset,session.cqlVersion.startsWith("3")));
    for (int t=0; t < session.getRetryTimes(); t++) {
      if (success)       break;
      try {
        success=executor.execute(cqlQuery,queryParms);
      }
 catch (      Exception e) {
        exceptionMessage=getExceptionMessage(e);
        success=false;
      }
    }
    if (!success) {
      error(String.format("Operation [%d] retried %d times - error executing indexed range query with offset %s %s%n",index,session.getRetryTimes(),startOffset,(exceptionMessage == null) ? "" : "(" + exceptionMessage + ")"));
    }
    received+=lastQueryResultSize;
    startOffset=String.format(format,(1 + lastMaxKey));
    session.operations.getAndIncrement();
    session.keys.getAndAdd(lastQueryResultSize);
    context.stop();
  }
}
