{
  final AtomicInteger ready=new AtomicInteger();
  Thread[] ts=new Thread[4];
  for (int i=0; i < ts.length; i++)   ts[i]=new Thread(new Runnable(){
    @Override public void run(){
      WaitQueue.Signal wait=queue.register();
      ready.incrementAndGet();
      try {
        wait.await();
      }
 catch (      InterruptedException e) {
        e.printStackTrace();
      }
    }
  }
);
  for (  Thread t : ts)   t.start();
  final ThreadLocalRandom random=ThreadLocalRandom.current();
  while (ready.get() < ts.length)   random.nextLong();
  for (  Thread t : ts)   queue.signal();
  for (  Thread t : ts) {
    Util.joinThread(t);
    assertFalse(queue.getClass().getName(),t.isAlive());
  }
}
