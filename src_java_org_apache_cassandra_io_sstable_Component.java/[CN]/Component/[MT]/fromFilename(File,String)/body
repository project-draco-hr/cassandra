{
  Pair<Descriptor,String> path=Descriptor.fromFilename(directory,name);
  Type type=Type.fromRepresentation(path.right);
  Component component;
switch (type) {
case DATA:
    component=Component.DATA;
  break;
case PRIMARY_INDEX:
component=Component.PRIMARY_INDEX;
break;
case FILTER:
component=Component.FILTER;
break;
case COMPRESSION_INFO:
component=Component.COMPRESSION_INFO;
break;
case STATS:
component=Component.STATS;
break;
case DIGEST:
switch (path.right) {
case digestCrc32:
component=Component.DIGEST_CRC32;
break;
case digestAdler32:
component=Component.DIGEST_ADLER32;
break;
case digestSha1:
component=Component.DIGEST_SHA1;
break;
default :
throw new IllegalArgumentException("Invalid digest component " + path.right);
}
break;
case CRC:
component=Component.CRC;
break;
case SUMMARY:
component=Component.SUMMARY;
break;
case TOC:
component=Component.TOC;
break;
case SECONDARY_INDEX:
component=new Component(Type.SECONDARY_INDEX,path.right);
break;
case CUSTOM:
component=new Component(Type.CUSTOM,path.right);
break;
default :
throw new IllegalStateException();
}
return Pair.create(path.left,component);
}
