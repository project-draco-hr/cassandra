{
  DataInputBuffer bufIn=new DataInputBuffer();
  for (  File file : clogs) {
    IFileReader reader=SequenceFile.reader(file.getAbsolutePath());
    CommitLogHeader clHeader=readCommitLogHeader(reader);
    int lowPos=CommitLogHeader.getLowestPosition(clHeader);
    if (lowPos == 0)     break;
 else     reader.seek(lowPos);
    Set<Table> tablesRecovered=new HashSet<Table>();
    while (!reader.isEOF()) {
      byte[] bytes;
      try {
        bytes=new byte[(int)reader.readLong()];
        reader.readDirect(bytes);
      }
 catch (      EOFException e) {
        break;
      }
      bufIn.reset(bytes,bytes.length);
      Row row=Row.serializer().deserialize(bufIn);
      Table table=Table.open(row.getTable());
      tablesRecovered.add(table);
      Collection<ColumnFamily> columnFamilies=new ArrayList<ColumnFamily>(row.getColumnFamilies());
      for (      ColumnFamily columnFamily : columnFamilies) {
        if (!DatabaseDescriptor.isApplicationColumnFamily(columnFamily.name())) {
          row.removeColumnFamily(columnFamily);
          continue;
        }
        int id=table.getColumnFamilyId(columnFamily.name());
        if (!clHeader.isDirty(id) || reader.getCurrentPosition() < clHeader.getPosition(id))         row.removeColumnFamily(columnFamily);
      }
      if (!row.isEmpty()) {
        table.applyNow(row);
      }
    }
    reader.close();
    for (    Table table : tablesRecovered) {
      table.flush(true);
    }
  }
}
