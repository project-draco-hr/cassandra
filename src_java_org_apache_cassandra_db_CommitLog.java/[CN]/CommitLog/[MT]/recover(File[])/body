{
  DataInputBuffer bufIn=new DataInputBuffer();
  for (  File file : clogs) {
    int bufferSize=(int)Math.min(file.length(),32 * 1024 * 1024);
    BufferedRandomAccessFile reader=new BufferedRandomAccessFile(file.getAbsolutePath(),"r",bufferSize);
    CommitLogHeader clHeader=readCommitLogHeader(reader);
    int lowPos=CommitLogHeader.getLowestPosition(clHeader);
    if (lowPos == 0)     break;
 else     reader.seek(lowPos);
    Set<Table> tablesRecovered=new HashSet<Table>();
    while (!reader.isEOF()) {
      byte[] bytes;
      try {
        bytes=new byte[(int)reader.readLong()];
        if (reader.read(bytes) < bytes.length) {
          throw new EOFException();
        }
      }
 catch (      EOFException e) {
        break;
      }
      bufIn.reset(bytes,bytes.length);
      Row row=Row.serializer().deserialize(bufIn);
      if (logger_.isDebugEnabled())       logger_.debug(String.format("replaying mutation for %s.%s: %s",row.getTable(),row.key(),"{" + StringUtils.join(row.getColumnFamilies(),", ") + "}"));
      Table table=Table.open(row.getTable());
      tablesRecovered.add(table);
      Collection<ColumnFamily> columnFamilies=new ArrayList<ColumnFamily>(row.getColumnFamilies());
      for (      ColumnFamily columnFamily : columnFamilies) {
        int id=table.getColumnFamilyId(columnFamily.name());
        if (!clHeader.isDirty(id) || reader.getFilePointer() < clHeader.getPosition(id)) {
          row.removeColumnFamily(columnFamily);
        }
      }
      if (!row.isEmpty()) {
        table.applyNow(row);
      }
    }
    reader.close();
    for (    Table table : tablesRecovered) {
      table.flush(true);
    }
  }
}
