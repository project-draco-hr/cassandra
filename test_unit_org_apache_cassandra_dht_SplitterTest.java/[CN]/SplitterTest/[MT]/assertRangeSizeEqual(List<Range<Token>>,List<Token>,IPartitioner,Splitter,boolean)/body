{
  Token start=partitioner.getMinimumToken();
  List<BigInteger> splits=new ArrayList<>();
  for (int i=0; i < tokens.size(); i++) {
    Token end=i == tokens.size() - 1 ? partitioner.getMaximumToken() : tokens.get(i);
    splits.add(sumOwnedBetween(localRanges,start,end,splitter,splitIndividualRanges));
    start=end;
  }
  BigDecimal delta=splitIndividualRanges ? BigDecimal.valueOf(0.001) : BigDecimal.valueOf(0.2);
  boolean allBalanced=true;
  for (  BigInteger b : splits) {
    for (    BigInteger i : splits) {
      BigDecimal bdb=new BigDecimal(b);
      BigDecimal bdi=new BigDecimal(i);
      BigDecimal q=bdb.divide(bdi,2,BigDecimal.ROUND_HALF_DOWN);
      if (q.compareTo(BigDecimal.ONE.add(delta)) > 0 || q.compareTo(BigDecimal.ONE.subtract(delta)) < 0)       allBalanced=false;
    }
  }
  return allBalanced;
}
