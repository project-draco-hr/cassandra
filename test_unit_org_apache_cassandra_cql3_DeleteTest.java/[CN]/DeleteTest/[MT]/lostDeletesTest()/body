{
  Session session=sessionNet();
  for (int i=0; i < 500; i++) {
    session.execute(pstmtI.bind(1,1,"inhB","valB"));
    ResultSetFuture[] futures=load();
    Assert.assertTrue(futures[0].getUninterruptibly().isExhausted());
    Assert.assertTrue(futures[1].getUninterruptibly().isExhausted());
    Assert.assertNotNull(futures[2].getUninterruptibly().one());
    Assert.assertTrue(futures[3].getUninterruptibly().isExhausted());
    Assert.assertTrue(futures[4].getUninterruptibly().isExhausted());
    session.execute(pstmtU.bind("inhBu","valBu",1,1));
    futures=load();
    Assert.assertTrue(futures[0].getUninterruptibly().isExhausted());
    Assert.assertTrue(futures[1].getUninterruptibly().isExhausted());
    Assert.assertNotNull(futures[2].getUninterruptibly().one());
    Assert.assertTrue(futures[3].getUninterruptibly().isExhausted());
    Assert.assertTrue(futures[4].getUninterruptibly().isExhausted());
    session.execute(pstmtD.bind(1,1));
    futures=load();
    Assert.assertTrue(futures[0].getUninterruptibly().isExhausted());
    Assert.assertTrue(futures[1].getUninterruptibly().isExhausted());
    Assert.assertTrue(futures[2].getUninterruptibly().isExhausted());
    Assert.assertTrue(futures[3].getUninterruptibly().isExhausted());
    Assert.assertTrue(futures[4].getUninterruptibly().isExhausted());
  }
}
