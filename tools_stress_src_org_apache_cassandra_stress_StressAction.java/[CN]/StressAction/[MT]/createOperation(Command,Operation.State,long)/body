{
switch (type) {
case READ:
switch (state.settings.mode.style) {
case THRIFT:
      return new ThriftReader(state,index);
case CQL:
case CQL_PREPARED:
    return new CqlReader(state,index);
default :
  throw new UnsupportedOperationException();
}
case COUNTERREAD:
switch (state.settings.mode.style) {
case THRIFT:
return new ThriftCounterGetter(state,index);
case CQL:
case CQL_PREPARED:
return new CqlCounterGetter(state,index);
default :
throw new UnsupportedOperationException();
}
case WRITE:
switch (state.settings.mode.style) {
case THRIFT:
return new ThriftInserter(state,index);
case CQL:
case CQL_PREPARED:
return new CqlInserter(state,index);
default :
throw new UnsupportedOperationException();
}
case COUNTERWRITE:
switch (state.settings.mode.style) {
case THRIFT:
return new ThriftCounterAdder(state,index);
case CQL:
case CQL_PREPARED:
return new CqlCounterAdder(state,index);
default :
throw new UnsupportedOperationException();
}
case RANGESLICE:
switch (state.settings.mode.style) {
case THRIFT:
return new ThriftRangeSlicer(state,index);
case CQL:
case CQL_PREPARED:
return new CqlRangeSlicer(state,index);
default :
throw new UnsupportedOperationException();
}
case IRANGESLICE:
switch (state.settings.mode.style) {
case THRIFT:
return new ThriftIndexedRangeSlicer(state,index);
case CQL:
case CQL_PREPARED:
return new CqlIndexedRangeSlicer(state,index);
default :
throw new UnsupportedOperationException();
}
case READMULTI:
switch (state.settings.mode.style) {
case THRIFT:
return new ThriftMultiGetter(state,index);
case CQL:
case CQL_PREPARED:
return new CqlMultiGetter(state,index);
default :
throw new UnsupportedOperationException();
}
case MIXED:
Command subcommand=state.commandSelector.next();
return createOperation(subcommand,state.substate(subcommand),index);
}
throw new UnsupportedOperationException();
}
