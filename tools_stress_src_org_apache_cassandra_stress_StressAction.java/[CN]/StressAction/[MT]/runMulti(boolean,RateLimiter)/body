{
  if (settings.command.targetUncertainty >= 0)   output.println("WARNING: uncertainty mode (err<) results in uneven workload between thread runs, so should be used for high level analysis only");
  int prevThreadCount=-1;
  int threadCount=settings.rate.minThreads;
  List<StressMetrics> results=new ArrayList<>();
  List<String> runIds=new ArrayList<>();
  do {
    output.println(String.format("Running with %d threadCount",threadCount));
    if (settings.command.truncate == SettingsCommand.TruncateWhen.ALWAYS)     settings.command.truncateTables(settings);
    StressMetrics result=run(settings.command.getFactory(settings),threadCount,settings.command.count,settings.command.duration,rateLimiter,settings.command.durationUnits,output,false);
    if (result == null)     return false;
    results.add(result);
    if (prevThreadCount > 0)     System.out.println(String.format("Improvement over %d threadCount: %.0f%%",prevThreadCount,100 * averageImprovement(results,1)));
    runIds.add(threadCount + " threadCount");
    prevThreadCount=threadCount;
    if (threadCount < 16)     threadCount*=2;
 else     threadCount*=1.5;
    if (!results.isEmpty() && threadCount > settings.rate.maxThreads)     break;
    if (settings.command.type.updates) {
      output.println("Sleeping for 15s");
      try {
        Thread.sleep(15 * 1000);
      }
 catch (      InterruptedException e) {
        return false;
      }
    }
  }
 while (!auto || (hasAverageImprovement(results,3,0) && hasAverageImprovement(results,5,settings.command.targetUncertainty)));
  StressMetrics.summarise(runIds,results,output,settings.samples.historyCount);
  return true;
}
