{
  try {
    SimpleClient sclient=null;
    ThriftClient tclient=null;
    JavaDriverClient jclient=null;
switch (settings.mode.api) {
case JAVA_DRIVER_NATIVE:
      jclient=settings.getJavaDriverClient();
    break;
case SIMPLE_NATIVE:
  sclient=settings.getSimpleNativeClient();
break;
case THRIFT:
case THRIFT_SMART:
tclient=settings.getThriftClient();
break;
default :
throw new IllegalStateException();
}
int maxBatchSize=operations.maxBatchSize();
Work work=workQueue.poll();
Partition[] partitions=new Partition[maxBatchSize];
int workDone=0;
while (work != null) {
Operation op=operations.next();
op.generator.reset();
int batchSize=Math.max(1,(int)op.partitionCount.next());
int partitionCount=0;
while (partitionCount < batchSize) {
int count=Math.min((work.count - workDone),batchSize - partitionCount);
for (int i=0; i < count; i++) {
long seed=seedGenerator.next(work.offset + workDone + i);
partitions[partitionCount + i]=op.generator.generate(seed);
}
workDone+=count;
partitionCount+=count;
if (workDone == work.count) {
workDone=0;
work=workQueue.poll();
if (work == null) {
if (partitionCount == 0) return;
break;
}
if (rateLimiter != null) rateLimiter.acquire(work.count);
}
}
op.setPartitions(Arrays.asList(partitions).subList(0,partitionCount));
try {
switch (settings.mode.api) {
case JAVA_DRIVER_NATIVE:
op.run(jclient);
break;
case SIMPLE_NATIVE:
op.run(sclient);
break;
case THRIFT:
case THRIFT_SMART:
default :
op.run(tclient);
}
}
 catch (Exception e) {
if (output == null) {
System.err.println(e.getMessage());
success=false;
System.exit(-1);
}
e.printStackTrace(output);
success=false;
workQueue.stop();
metrics.cancel();
return;
}
}
}
  finally {
done.countDown();
timer.close();
}
}
