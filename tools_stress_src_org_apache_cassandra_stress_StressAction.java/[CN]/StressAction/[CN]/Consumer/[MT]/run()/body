{
  try {
    SimpleClient sclient=null;
    ThriftClient tclient=null;
    JavaDriverClient jclient=null;
switch (settings.mode.api) {
case JAVA_DRIVER_NATIVE:
      jclient=settings.getJavaDriverClient();
    break;
case SIMPLE_NATIVE:
  sclient=settings.getSimpleNativeClient();
break;
case THRIFT:
case THRIFT_SMART:
tclient=settings.getThriftClient();
break;
default :
throw new IllegalStateException();
}
int maxBatchSize=operations.maxBatchSize();
Partition[] partitions=new Partition[maxBatchSize];
while (true) {
Operation op=operations.next();
op.generator.reset();
int batchSize=workManager.takePermits(Math.max(1,(int)op.partitionCount.next()));
if (batchSize < 0) break;
if (rateLimiter != null) rateLimiter.acquire(batchSize);
int partitionCount=0;
while (partitionCount < batchSize) {
Partition p=op.generator.generate(op);
if (p == null) break;
partitions[partitionCount++]=p;
}
if (partitionCount == 0) break;
op.setPartitions(Arrays.asList(partitions).subList(0,partitionCount));
try {
switch (settings.mode.api) {
case JAVA_DRIVER_NATIVE:
op.run(jclient);
break;
case SIMPLE_NATIVE:
op.run(sclient);
break;
case THRIFT:
case THRIFT_SMART:
default :
op.run(tclient);
}
}
 catch (Exception e) {
if (output == null) {
System.err.println(e.getMessage());
success=false;
System.exit(-1);
}
e.printStackTrace(output);
success=false;
workManager.stop();
metrics.cancel();
return;
}
}
}
  finally {
done.countDown();
timer.close();
}
}
