{
  describeTable_return retval=new describeTable_return();
  retval.start=input.LT(1);
  CommonTree root_0=null;
  Token K_DESCRIBE41=null;
  Token K_TABLE42=null;
  table_return table43=null;
  CommonTree K_DESCRIBE41_tree=null;
  CommonTree K_TABLE42_tree=null;
  RewriteRuleTokenStream stream_K_DESCRIBE=new RewriteRuleTokenStream(adaptor,"token K_DESCRIBE");
  RewriteRuleTokenStream stream_K_TABLE=new RewriteRuleTokenStream(adaptor,"token K_TABLE");
  RewriteRuleSubtreeStream stream_table=new RewriteRuleSubtreeStream(adaptor,"rule table");
  try {
{
      K_DESCRIBE41=(Token)input.LT(1);
      match(input,K_DESCRIBE,FOLLOW_K_DESCRIBE_in_describeTable617);
      if (failed)       return retval;
      if (backtracking == 0)       stream_K_DESCRIBE.add(K_DESCRIBE41);
      K_TABLE42=(Token)input.LT(1);
      match(input,K_TABLE,FOLLOW_K_TABLE_in_describeTable619);
      if (failed)       return retval;
      if (backtracking == 0)       stream_K_TABLE.add(K_TABLE42);
      pushFollow(FOLLOW_table_in_describeTable621);
      table43=table();
      _fsp--;
      if (failed)       return retval;
      if (backtracking == 0)       stream_table.add(table43.getTree());
      if (backtracking == 0) {
        retval.tree=root_0;
        RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval != null ? retval.tree : null);
        root_0=(CommonTree)adaptor.nil();
{
{
            CommonTree root_1=(CommonTree)adaptor.nil();
            root_1=(CommonTree)adaptor.becomeRoot(adaptor.create(NODE_DESCRIBE_TABLE,"NODE_DESCRIBE_TABLE"),root_1);
            adaptor.addChild(root_1,stream_table.next());
            adaptor.addChild(root_0,root_1);
          }
        }
      }
    }
    retval.stop=input.LT(-1);
    if (backtracking == 0) {
      retval.tree=(CommonTree)adaptor.rulePostProcessing(root_0);
      adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
    }
  }
 catch (  RecognitionException re) {
    reportError(re);
    recover(input,re);
  }
 finally {
  }
  return retval;
}
