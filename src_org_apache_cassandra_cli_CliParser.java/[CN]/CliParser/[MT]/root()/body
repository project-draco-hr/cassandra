{
  root_return retval=new root_return();
  retval.start=input.LT(1);
  CommonTree root_0=null;
  Token SEMICOLON2=null;
  Token EOF3=null;
  stmt_return stmt1=null;
  CommonTree SEMICOLON2_tree=null;
  CommonTree EOF3_tree=null;
  RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
  RewriteRuleTokenStream stream_EOF=new RewriteRuleTokenStream(adaptor,"token EOF");
  RewriteRuleSubtreeStream stream_stmt=new RewriteRuleSubtreeStream(adaptor,"rule stmt");
  try {
{
      pushFollow(FOLLOW_stmt_in_root200);
      stmt1=stmt();
      _fsp--;
      if (failed)       return retval;
      if (backtracking == 0)       stream_stmt.add(stmt1.getTree());
      int alt1=2;
      int LA1_0=input.LA(1);
      if ((LA1_0 == SEMICOLON)) {
        alt1=1;
      }
switch (alt1) {
case 1:
{
          SEMICOLON2=(Token)input.LT(1);
          match(input,SEMICOLON,FOLLOW_SEMICOLON_in_root202);
          if (failed)           return retval;
          if (backtracking == 0)           stream_SEMICOLON.add(SEMICOLON2);
        }
      break;
  }
  EOF3=(Token)input.LT(1);
  match(input,EOF,FOLLOW_EOF_in_root205);
  if (failed)   return retval;
  if (backtracking == 0)   stream_EOF.add(EOF3);
  if (backtracking == 0) {
    retval.tree=root_0;
    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval != null ? retval.tree : null);
    root_0=(CommonTree)adaptor.nil();
{
      adaptor.addChild(root_0,stream_stmt.next());
    }
  }
}
retval.stop=input.LT(-1);
if (backtracking == 0) {
  retval.tree=(CommonTree)adaptor.rulePostProcessing(root_0);
  adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return retval;
}
