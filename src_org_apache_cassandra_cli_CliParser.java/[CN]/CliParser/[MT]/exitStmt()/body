{
  exitStmt_return retval=new exitStmt_return();
  retval.start=input.LT(1);
  CommonTree root_0=null;
  Token K_QUIT17=null;
  Token K_EXIT18=null;
  CommonTree K_QUIT17_tree=null;
  CommonTree K_EXIT18_tree=null;
  RewriteRuleTokenStream stream_K_EXIT=new RewriteRuleTokenStream(adaptor,"token K_EXIT");
  RewriteRuleTokenStream stream_K_QUIT=new RewriteRuleTokenStream(adaptor,"token K_QUIT");
  try {
    int alt4=2;
    int LA4_0=input.LA(1);
    if ((LA4_0 == K_QUIT)) {
      alt4=1;
    }
 else     if ((LA4_0 == K_EXIT)) {
      alt4=2;
    }
 else {
      if (backtracking > 0) {
        failed=true;
        return retval;
      }
      NoViableAltException nvae=new NoViableAltException("95:1: exitStmt : ( K_QUIT -> ^( NODE_EXIT ) | K_EXIT -> ^( NODE_EXIT ) );",4,0,input);
      throw nvae;
    }
switch (alt4) {
case 1:
{
        K_QUIT17=(Token)input.LT(1);
        match(input,K_QUIT,FOLLOW_K_QUIT_in_exitStmt371);
        if (failed)         return retval;
        if (backtracking == 0)         stream_K_QUIT.add(K_QUIT17);
        if (backtracking == 0) {
          retval.tree=root_0;
          RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval != null ? retval.tree : null);
          root_0=(CommonTree)adaptor.nil();
{
{
              CommonTree root_1=(CommonTree)adaptor.nil();
              root_1=(CommonTree)adaptor.becomeRoot(adaptor.create(NODE_EXIT,"NODE_EXIT"),root_1);
              adaptor.addChild(root_0,root_1);
            }
          }
        }
      }
    break;
case 2:
{
    K_EXIT18=(Token)input.LT(1);
    match(input,K_EXIT,FOLLOW_K_EXIT_in_exitStmt385);
    if (failed)     return retval;
    if (backtracking == 0)     stream_K_EXIT.add(K_EXIT18);
    if (backtracking == 0) {
      retval.tree=root_0;
      RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval != null ? retval.tree : null);
      root_0=(CommonTree)adaptor.nil();
{
{
          CommonTree root_1=(CommonTree)adaptor.nil();
          root_1=(CommonTree)adaptor.becomeRoot(adaptor.create(NODE_EXIT,"NODE_EXIT"),root_1);
          adaptor.addChild(root_0,root_1);
        }
      }
    }
  }
break;
}
retval.stop=input.LT(-1);
if (backtracking == 0) {
retval.tree=(CommonTree)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return retval;
}
