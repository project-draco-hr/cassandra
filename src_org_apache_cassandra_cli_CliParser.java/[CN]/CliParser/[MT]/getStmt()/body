{
  getStmt_return retval=new getStmt_return();
  retval.start=input.LT(1);
  CommonTree root_0=null;
  Token K_THRIFT19=null;
  Token K_GET20=null;
  columnFamilyExpr_return columnFamilyExpr21=null;
  CommonTree K_THRIFT19_tree=null;
  CommonTree K_GET20_tree=null;
  RewriteRuleTokenStream stream_K_THRIFT=new RewriteRuleTokenStream(adaptor,"token K_THRIFT");
  RewriteRuleTokenStream stream_K_GET=new RewriteRuleTokenStream(adaptor,"token K_GET");
  RewriteRuleSubtreeStream stream_columnFamilyExpr=new RewriteRuleSubtreeStream(adaptor,"rule columnFamilyExpr");
  try {
{
      K_THRIFT19=(Token)input.LT(1);
      match(input,K_THRIFT,FOLLOW_K_THRIFT_in_getStmt408);
      if (failed)       return retval;
      if (backtracking == 0)       stream_K_THRIFT.add(K_THRIFT19);
      K_GET20=(Token)input.LT(1);
      match(input,K_GET,FOLLOW_K_GET_in_getStmt410);
      if (failed)       return retval;
      if (backtracking == 0)       stream_K_GET.add(K_GET20);
      pushFollow(FOLLOW_columnFamilyExpr_in_getStmt412);
      columnFamilyExpr21=columnFamilyExpr();
      _fsp--;
      if (failed)       return retval;
      if (backtracking == 0)       stream_columnFamilyExpr.add(columnFamilyExpr21.getTree());
      if (backtracking == 0) {
        retval.tree=root_0;
        RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval != null ? retval.tree : null);
        root_0=(CommonTree)adaptor.nil();
{
{
            CommonTree root_1=(CommonTree)adaptor.nil();
            root_1=(CommonTree)adaptor.becomeRoot(adaptor.create(NODE_THRIFT_GET,"NODE_THRIFT_GET"),root_1);
            adaptor.addChild(root_1,stream_columnFamilyExpr.next());
            adaptor.addChild(root_0,root_1);
          }
        }
      }
    }
    retval.stop=input.LT(-1);
    if (backtracking == 0) {
      retval.tree=(CommonTree)adaptor.rulePostProcessing(root_0);
      adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
    }
  }
 catch (  RecognitionException re) {
    reportError(re);
    recover(input,re);
  }
 finally {
  }
  return retval;
}
