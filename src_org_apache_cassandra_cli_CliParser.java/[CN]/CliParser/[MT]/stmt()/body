{
  stmt_return retval=new stmt_return();
  retval.start=input.LT(1);
  CommonTree root_0=null;
  connectStmt_return connectStmt4=null;
  exitStmt_return exitStmt5=null;
  describeTable_return describeTable6=null;
  getStmt_return getStmt7=null;
  helpStmt_return helpStmt8=null;
  setStmt_return setStmt9=null;
  showStmt_return showStmt10=null;
  try {
    int alt2=8;
switch (input.LA(1)) {
case K_CONNECT:
{
        alt2=1;
      }
    break;
case K_QUIT:
case K_EXIT:
{
    alt2=2;
  }
break;
case K_DESCRIBE:
{
alt2=3;
}
break;
case K_THRIFT:
{
int LA2_4=input.LA(2);
if ((LA2_4 == K_SET)) {
alt2=6;
}
 else if ((LA2_4 == K_GET)) {
alt2=4;
}
 else {
if (backtracking > 0) {
failed=true;
return retval;
}
NoViableAltException nvae=new NoViableAltException("75:1: stmt : ( connectStmt | exitStmt | describeTable | getStmt | helpStmt | setStmt | showStmt | -> ^( NODE_NO_OP ) );",2,4,input);
throw nvae;
}
}
break;
case K_HELP:
case 43:
{
alt2=5;
}
break;
case K_SHOW:
{
alt2=7;
}
break;
case EOF:
case SEMICOLON:
{
alt2=8;
}
break;
default :
if (backtracking > 0) {
failed=true;
return retval;
}
NoViableAltException nvae=new NoViableAltException("75:1: stmt : ( connectStmt | exitStmt | describeTable | getStmt | helpStmt | setStmt | showStmt | -> ^( NODE_NO_OP ) );",2,0,input);
throw nvae;
}
switch (alt2) {
case 1:
{
root_0=(CommonTree)adaptor.nil();
pushFollow(FOLLOW_connectStmt_in_stmt221);
connectStmt4=connectStmt();
_fsp--;
if (failed) return retval;
if (backtracking == 0) adaptor.addChild(root_0,connectStmt4.getTree());
}
break;
case 2:
{
root_0=(CommonTree)adaptor.nil();
pushFollow(FOLLOW_exitStmt_in_stmt229);
exitStmt5=exitStmt();
_fsp--;
if (failed) return retval;
if (backtracking == 0) adaptor.addChild(root_0,exitStmt5.getTree());
}
break;
case 3:
{
root_0=(CommonTree)adaptor.nil();
pushFollow(FOLLOW_describeTable_in_stmt237);
describeTable6=describeTable();
_fsp--;
if (failed) return retval;
if (backtracking == 0) adaptor.addChild(root_0,describeTable6.getTree());
}
break;
case 4:
{
root_0=(CommonTree)adaptor.nil();
pushFollow(FOLLOW_getStmt_in_stmt245);
getStmt7=getStmt();
_fsp--;
if (failed) return retval;
if (backtracking == 0) adaptor.addChild(root_0,getStmt7.getTree());
}
break;
case 5:
{
root_0=(CommonTree)adaptor.nil();
pushFollow(FOLLOW_helpStmt_in_stmt253);
helpStmt8=helpStmt();
_fsp--;
if (failed) return retval;
if (backtracking == 0) adaptor.addChild(root_0,helpStmt8.getTree());
}
break;
case 6:
{
root_0=(CommonTree)adaptor.nil();
pushFollow(FOLLOW_setStmt_in_stmt261);
setStmt9=setStmt();
_fsp--;
if (failed) return retval;
if (backtracking == 0) adaptor.addChild(root_0,setStmt9.getTree());
}
break;
case 7:
{
root_0=(CommonTree)adaptor.nil();
pushFollow(FOLLOW_showStmt_in_stmt269);
showStmt10=showStmt();
_fsp--;
if (failed) return retval;
if (backtracking == 0) adaptor.addChild(root_0,showStmt10.getTree());
}
break;
case 8:
{
if (backtracking == 0) {
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval != null ? retval.tree : null);
root_0=(CommonTree)adaptor.nil();
{
{
CommonTree root_1=(CommonTree)adaptor.nil();
root_1=(CommonTree)adaptor.becomeRoot(adaptor.create(NODE_NO_OP,"NODE_NO_OP"),root_1);
adaptor.addChild(root_0,root_1);
}
}
}
}
break;
}
retval.stop=input.LT(-1);
if (backtracking == 0) {
retval.tree=(CommonTree)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return retval;
}
