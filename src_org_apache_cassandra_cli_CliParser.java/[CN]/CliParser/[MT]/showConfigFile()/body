{
  showConfigFile_return retval=new showConfigFile_return();
  retval.start=input.LT(1);
  CommonTree root_0=null;
  Token K_SHOW34=null;
  Token K_CONFIG35=null;
  Token K_FILE36=null;
  CommonTree K_SHOW34_tree=null;
  CommonTree K_CONFIG35_tree=null;
  CommonTree K_FILE36_tree=null;
  RewriteRuleTokenStream stream_K_SHOW=new RewriteRuleTokenStream(adaptor,"token K_SHOW");
  RewriteRuleTokenStream stream_K_FILE=new RewriteRuleTokenStream(adaptor,"token K_FILE");
  RewriteRuleTokenStream stream_K_CONFIG=new RewriteRuleTokenStream(adaptor,"token K_CONFIG");
  try {
{
      K_SHOW34=(Token)input.LT(1);
      match(input,K_SHOW,FOLLOW_K_SHOW_in_showConfigFile540);
      if (failed)       return retval;
      if (backtracking == 0)       stream_K_SHOW.add(K_SHOW34);
      K_CONFIG35=(Token)input.LT(1);
      match(input,K_CONFIG,FOLLOW_K_CONFIG_in_showConfigFile542);
      if (failed)       return retval;
      if (backtracking == 0)       stream_K_CONFIG.add(K_CONFIG35);
      K_FILE36=(Token)input.LT(1);
      match(input,K_FILE,FOLLOW_K_FILE_in_showConfigFile544);
      if (failed)       return retval;
      if (backtracking == 0)       stream_K_FILE.add(K_FILE36);
      if (backtracking == 0) {
        retval.tree=root_0;
        RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval != null ? retval.tree : null);
        root_0=(CommonTree)adaptor.nil();
{
{
            CommonTree root_1=(CommonTree)adaptor.nil();
            root_1=(CommonTree)adaptor.becomeRoot(adaptor.create(NODE_SHOW_CONFIG_FILE,"NODE_SHOW_CONFIG_FILE"),root_1);
            adaptor.addChild(root_0,root_1);
          }
        }
      }
    }
    retval.stop=input.LT(-1);
    if (backtracking == 0) {
      retval.tree=(CommonTree)adaptor.rulePostProcessing(root_0);
      adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
    }
  }
 catch (  RecognitionException re) {
    reportError(re);
    recover(input,re);
  }
 finally {
  }
  return retval;
}
