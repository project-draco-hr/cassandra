{
  showStmt_return retval=new showStmt_return();
  retval.start=input.LT(1);
  CommonTree root_0=null;
  showClusterName_return showClusterName27=null;
  showVersion_return showVersion28=null;
  showConfigFile_return showConfigFile29=null;
  showTables_return showTables30=null;
  try {
    int alt5=4;
    int LA5_0=input.LA(1);
    if ((LA5_0 == K_SHOW)) {
switch (input.LA(2)) {
case K_CONFIG:
{
          alt5=3;
        }
      break;
case K_VERSION:
{
      alt5=2;
    }
  break;
case K_TABLES:
{
  alt5=4;
}
break;
case K_CLUSTER:
{
alt5=1;
}
break;
default :
if (backtracking > 0) {
failed=true;
return retval;
}
NoViableAltException nvae=new NoViableAltException("108:1: showStmt : ( showClusterName | showVersion | showConfigFile | showTables );",5,1,input);
throw nvae;
}
}
 else {
if (backtracking > 0) {
failed=true;
return retval;
}
NoViableAltException nvae=new NoViableAltException("108:1: showStmt : ( showClusterName | showVersion | showConfigFile | showTables );",5,0,input);
throw nvae;
}
switch (alt5) {
case 1:
{
root_0=(CommonTree)adaptor.nil();
pushFollow(FOLLOW_showClusterName_in_showStmt472);
showClusterName27=showClusterName();
_fsp--;
if (failed) return retval;
if (backtracking == 0) adaptor.addChild(root_0,showClusterName27.getTree());
}
break;
case 2:
{
root_0=(CommonTree)adaptor.nil();
pushFollow(FOLLOW_showVersion_in_showStmt480);
showVersion28=showVersion();
_fsp--;
if (failed) return retval;
if (backtracking == 0) adaptor.addChild(root_0,showVersion28.getTree());
}
break;
case 3:
{
root_0=(CommonTree)adaptor.nil();
pushFollow(FOLLOW_showConfigFile_in_showStmt488);
showConfigFile29=showConfigFile();
_fsp--;
if (failed) return retval;
if (backtracking == 0) adaptor.addChild(root_0,showConfigFile29.getTree());
}
break;
case 4:
{
root_0=(CommonTree)adaptor.nil();
pushFollow(FOLLOW_showTables_in_showStmt496);
showTables30=showTables();
_fsp--;
if (failed) return retval;
if (backtracking == 0) adaptor.addChild(root_0,showTables30.getTree());
}
break;
}
retval.stop=input.LT(-1);
if (backtracking == 0) {
retval.tree=(CommonTree)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return retval;
}
