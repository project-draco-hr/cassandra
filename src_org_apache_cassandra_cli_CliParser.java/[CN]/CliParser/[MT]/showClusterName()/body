{
  showClusterName_return retval=new showClusterName_return();
  retval.start=input.LT(1);
  CommonTree root_0=null;
  Token K_SHOW31=null;
  Token K_CLUSTER32=null;
  Token K_NAME33=null;
  CommonTree K_SHOW31_tree=null;
  CommonTree K_CLUSTER32_tree=null;
  CommonTree K_NAME33_tree=null;
  RewriteRuleTokenStream stream_K_SHOW=new RewriteRuleTokenStream(adaptor,"token K_SHOW");
  RewriteRuleTokenStream stream_K_NAME=new RewriteRuleTokenStream(adaptor,"token K_NAME");
  RewriteRuleTokenStream stream_K_CLUSTER=new RewriteRuleTokenStream(adaptor,"token K_CLUSTER");
  try {
{
      K_SHOW31=(Token)input.LT(1);
      match(input,K_SHOW,FOLLOW_K_SHOW_in_showClusterName513);
      if (failed)       return retval;
      if (backtracking == 0)       stream_K_SHOW.add(K_SHOW31);
      K_CLUSTER32=(Token)input.LT(1);
      match(input,K_CLUSTER,FOLLOW_K_CLUSTER_in_showClusterName515);
      if (failed)       return retval;
      if (backtracking == 0)       stream_K_CLUSTER.add(K_CLUSTER32);
      K_NAME33=(Token)input.LT(1);
      match(input,K_NAME,FOLLOW_K_NAME_in_showClusterName517);
      if (failed)       return retval;
      if (backtracking == 0)       stream_K_NAME.add(K_NAME33);
      if (backtracking == 0) {
        retval.tree=root_0;
        RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval != null ? retval.tree : null);
        root_0=(CommonTree)adaptor.nil();
{
{
            CommonTree root_1=(CommonTree)adaptor.nil();
            root_1=(CommonTree)adaptor.becomeRoot(adaptor.create(NODE_SHOW_CLUSTER_NAME,"NODE_SHOW_CLUSTER_NAME"),root_1);
            adaptor.addChild(root_0,root_1);
          }
        }
      }
    }
    retval.stop=input.LT(-1);
    if (backtracking == 0) {
      retval.tree=(CommonTree)adaptor.rulePostProcessing(root_0);
      adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
    }
  }
 catch (  RecognitionException re) {
    reportError(re);
    recover(input,re);
  }
 finally {
  }
  return retval;
}
