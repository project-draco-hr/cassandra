{
  host_return retval=new host_return();
  retval.start=input.LT(1);
  CommonTree root_0=null;
  Token id=null;
  List list_id=null;
  CommonTree id_tree=null;
  RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
  RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
  try {
{
      id=(Token)input.LT(1);
      match(input,Identifier,FOLLOW_Identifier_in_host782);
      if (failed)       return retval;
      if (backtracking == 0)       stream_Identifier.add(id);
      if (list_id == null)       list_id=new ArrayList();
      list_id.add(id);
      loop8:       do {
        int alt8=2;
        int LA8_0=input.LA(1);
        if ((LA8_0 == DOT)) {
          alt8=1;
        }
switch (alt8) {
case 1:
{
            id=(Token)input.LT(1);
            match(input,DOT,FOLLOW_DOT_in_host787);
            if (failed)             return retval;
            if (backtracking == 0)             stream_DOT.add(id);
            if (list_id == null)             list_id=new ArrayList();
            list_id.add(id);
            id=(Token)input.LT(1);
            match(input,Identifier,FOLLOW_Identifier_in_host791);
            if (failed)             return retval;
            if (backtracking == 0)             stream_Identifier.add(id);
            if (list_id == null)             list_id=new ArrayList();
            list_id.add(id);
          }
        break;
default :
      break loop8;
  }
}
 while (true);
if (backtracking == 0) {
  retval.tree=root_0;
  RewriteRuleTokenStream stream_id=new RewriteRuleTokenStream(adaptor,"token id",list_id);
  RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval != null ? retval.tree : null);
  root_0=(CommonTree)adaptor.nil();
{
{
      CommonTree root_1=(CommonTree)adaptor.nil();
      root_1=(CommonTree)adaptor.becomeRoot(adaptor.create(NODE_ID_LIST,"NODE_ID_LIST"),root_1);
      if (!(stream_id.hasNext())) {
        throw new RewriteEarlyExitException();
      }
      while (stream_id.hasNext()) {
        adaptor.addChild(root_1,stream_id.next());
      }
      stream_id.reset();
      adaptor.addChild(root_0,root_1);
    }
  }
}
}
retval.stop=input.LT(-1);
if (backtracking == 0) {
retval.tree=(CommonTree)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return retval;
}
