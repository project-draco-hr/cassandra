{
  setStmt_return retval=new setStmt_return();
  retval.start=input.LT(1);
  CommonTree root_0=null;
  Token K_THRIFT22=null;
  Token K_SET23=null;
  Token char_literal25=null;
  columnFamilyExpr_return columnFamilyExpr24=null;
  value_return value26=null;
  CommonTree K_THRIFT22_tree=null;
  CommonTree K_SET23_tree=null;
  CommonTree char_literal25_tree=null;
  RewriteRuleTokenStream stream_44=new RewriteRuleTokenStream(adaptor,"token 44");
  RewriteRuleTokenStream stream_K_THRIFT=new RewriteRuleTokenStream(adaptor,"token K_THRIFT");
  RewriteRuleTokenStream stream_K_SET=new RewriteRuleTokenStream(adaptor,"token K_SET");
  RewriteRuleSubtreeStream stream_columnFamilyExpr=new RewriteRuleSubtreeStream(adaptor,"rule columnFamilyExpr");
  RewriteRuleSubtreeStream stream_value=new RewriteRuleSubtreeStream(adaptor,"rule value");
  try {
{
      K_THRIFT22=(Token)input.LT(1);
      match(input,K_THRIFT,FOLLOW_K_THRIFT_in_setStmt437);
      if (failed)       return retval;
      if (backtracking == 0)       stream_K_THRIFT.add(K_THRIFT22);
      K_SET23=(Token)input.LT(1);
      match(input,K_SET,FOLLOW_K_SET_in_setStmt439);
      if (failed)       return retval;
      if (backtracking == 0)       stream_K_SET.add(K_SET23);
      pushFollow(FOLLOW_columnFamilyExpr_in_setStmt441);
      columnFamilyExpr24=columnFamilyExpr();
      _fsp--;
      if (failed)       return retval;
      if (backtracking == 0)       stream_columnFamilyExpr.add(columnFamilyExpr24.getTree());
      char_literal25=(Token)input.LT(1);
      match(input,44,FOLLOW_44_in_setStmt443);
      if (failed)       return retval;
      if (backtracking == 0)       stream_44.add(char_literal25);
      pushFollow(FOLLOW_value_in_setStmt445);
      value26=value();
      _fsp--;
      if (failed)       return retval;
      if (backtracking == 0)       stream_value.add(value26.getTree());
      if (backtracking == 0) {
        retval.tree=root_0;
        RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval != null ? retval.tree : null);
        root_0=(CommonTree)adaptor.nil();
{
{
            CommonTree root_1=(CommonTree)adaptor.nil();
            root_1=(CommonTree)adaptor.becomeRoot(adaptor.create(NODE_THRIFT_SET,"NODE_THRIFT_SET"),root_1);
            adaptor.addChild(root_1,stream_columnFamilyExpr.next());
            adaptor.addChild(root_1,stream_value.next());
            adaptor.addChild(root_0,root_1);
          }
        }
      }
    }
    retval.stop=input.LT(-1);
    if (backtracking == 0) {
      retval.tree=(CommonTree)adaptor.rulePostProcessing(root_0);
      adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
    }
  }
 catch (  RecognitionException re) {
    reportError(re);
    recover(input,re);
  }
 finally {
  }
  return retval;
}
