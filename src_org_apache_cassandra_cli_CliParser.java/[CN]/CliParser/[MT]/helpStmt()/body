{
  helpStmt_return retval=new helpStmt_return();
  retval.start=input.LT(1);
  CommonTree root_0=null;
  Token K_HELP15=null;
  Token char_literal16=null;
  CommonTree K_HELP15_tree=null;
  CommonTree char_literal16_tree=null;
  RewriteRuleTokenStream stream_K_HELP=new RewriteRuleTokenStream(adaptor,"token K_HELP");
  RewriteRuleTokenStream stream_43=new RewriteRuleTokenStream(adaptor,"token 43");
  try {
    int alt3=2;
    int LA3_0=input.LA(1);
    if ((LA3_0 == K_HELP)) {
      alt3=1;
    }
 else     if ((LA3_0 == 43)) {
      alt3=2;
    }
 else {
      if (backtracking > 0) {
        failed=true;
        return retval;
      }
      NoViableAltException nvae=new NoViableAltException("90:1: helpStmt : ( K_HELP -> ^( NODE_HELP ) | '?' -> ^( NODE_HELP ) );",3,0,input);
      throw nvae;
    }
switch (alt3) {
case 1:
{
        K_HELP15=(Token)input.LT(1);
        match(input,K_HELP,FOLLOW_K_HELP_in_helpStmt331);
        if (failed)         return retval;
        if (backtracking == 0)         stream_K_HELP.add(K_HELP15);
        if (backtracking == 0) {
          retval.tree=root_0;
          RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval != null ? retval.tree : null);
          root_0=(CommonTree)adaptor.nil();
{
{
              CommonTree root_1=(CommonTree)adaptor.nil();
              root_1=(CommonTree)adaptor.becomeRoot(adaptor.create(NODE_HELP,"NODE_HELP"),root_1);
              adaptor.addChild(root_0,root_1);
            }
          }
        }
      }
    break;
case 2:
{
    char_literal16=(Token)input.LT(1);
    match(input,43,FOLLOW_43_in_helpStmt345);
    if (failed)     return retval;
    if (backtracking == 0)     stream_43.add(char_literal16);
    if (backtracking == 0) {
      retval.tree=root_0;
      RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval != null ? retval.tree : null);
      root_0=(CommonTree)adaptor.nil();
{
{
          CommonTree root_1=(CommonTree)adaptor.nil();
          root_1=(CommonTree)adaptor.becomeRoot(adaptor.create(NODE_HELP,"NODE_HELP"),root_1);
          adaptor.addChild(root_0,root_1);
        }
      }
    }
  }
break;
}
retval.stop=input.LT(-1);
if (backtracking == 0) {
retval.tree=(CommonTree)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return retval;
}
