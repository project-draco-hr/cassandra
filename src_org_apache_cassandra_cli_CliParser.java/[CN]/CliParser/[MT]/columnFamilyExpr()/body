{
  columnFamilyExpr_return retval=new columnFamilyExpr_return();
  retval.start=input.LT(1);
  CommonTree root_0=null;
  Token DOT45=null;
  Token char_literal47=null;
  Token char_literal49=null;
  Token char_literal50=null;
  Token char_literal51=null;
  Token char_literal52=null;
  Token char_literal53=null;
  List list_a=null;
  table_return table44=null;
  columnFamily_return columnFamily46=null;
  rowKey_return rowKey48=null;
  RuleReturnScope a=null;
  CommonTree DOT45_tree=null;
  CommonTree char_literal47_tree=null;
  CommonTree char_literal49_tree=null;
  CommonTree char_literal50_tree=null;
  CommonTree char_literal51_tree=null;
  CommonTree char_literal52_tree=null;
  CommonTree char_literal53_tree=null;
  RewriteRuleTokenStream stream_45=new RewriteRuleTokenStream(adaptor,"token 45");
  RewriteRuleTokenStream stream_46=new RewriteRuleTokenStream(adaptor,"token 46");
  RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
  RewriteRuleSubtreeStream stream_columnFamily=new RewriteRuleSubtreeStream(adaptor,"rule columnFamily");
  RewriteRuleSubtreeStream stream_rowKey=new RewriteRuleSubtreeStream(adaptor,"rule rowKey");
  RewriteRuleSubtreeStream stream_table=new RewriteRuleSubtreeStream(adaptor,"rule table");
  RewriteRuleSubtreeStream stream_columnOrSuperColumn=new RewriteRuleSubtreeStream(adaptor,"rule columnOrSuperColumn");
  try {
{
      pushFollow(FOLLOW_table_in_columnFamilyExpr641);
      table44=table();
      _fsp--;
      if (failed)       return retval;
      if (backtracking == 0)       stream_table.add(table44.getTree());
      DOT45=(Token)input.LT(1);
      match(input,DOT,FOLLOW_DOT_in_columnFamilyExpr643);
      if (failed)       return retval;
      if (backtracking == 0)       stream_DOT.add(DOT45);
      pushFollow(FOLLOW_columnFamily_in_columnFamilyExpr645);
      columnFamily46=columnFamily();
      _fsp--;
      if (failed)       return retval;
      if (backtracking == 0)       stream_columnFamily.add(columnFamily46.getTree());
      char_literal47=(Token)input.LT(1);
      match(input,45,FOLLOW_45_in_columnFamilyExpr647);
      if (failed)       return retval;
      if (backtracking == 0)       stream_45.add(char_literal47);
      pushFollow(FOLLOW_rowKey_in_columnFamilyExpr649);
      rowKey48=rowKey();
      _fsp--;
      if (failed)       return retval;
      if (backtracking == 0)       stream_rowKey.add(rowKey48.getTree());
      char_literal49=(Token)input.LT(1);
      match(input,46,FOLLOW_46_in_columnFamilyExpr651);
      if (failed)       return retval;
      if (backtracking == 0)       stream_46.add(char_literal49);
      int alt7=2;
      int LA7_0=input.LA(1);
      if ((LA7_0 == 45)) {
        alt7=1;
      }
switch (alt7) {
case 1:
{
          char_literal50=(Token)input.LT(1);
          match(input,45,FOLLOW_45_in_columnFamilyExpr664);
          if (failed)           return retval;
          if (backtracking == 0)           stream_45.add(char_literal50);
          pushFollow(FOLLOW_columnOrSuperColumn_in_columnFamilyExpr668);
          a=columnOrSuperColumn();
          _fsp--;
          if (failed)           return retval;
          if (backtracking == 0)           stream_columnOrSuperColumn.add(a.getTree());
          if (list_a == null)           list_a=new ArrayList();
          list_a.add(a);
          char_literal51=(Token)input.LT(1);
          match(input,46,FOLLOW_46_in_columnFamilyExpr670);
          if (failed)           return retval;
          if (backtracking == 0)           stream_46.add(char_literal51);
          int alt6=2;
          int LA6_0=input.LA(1);
          if ((LA6_0 == 45)) {
            alt6=1;
          }
switch (alt6) {
case 1:
{
              char_literal52=(Token)input.LT(1);
              match(input,45,FOLLOW_45_in_columnFamilyExpr686);
              if (failed)               return retval;
              if (backtracking == 0)               stream_45.add(char_literal52);
              pushFollow(FOLLOW_columnOrSuperColumn_in_columnFamilyExpr690);
              a=columnOrSuperColumn();
              _fsp--;
              if (failed)               return retval;
              if (backtracking == 0)               stream_columnOrSuperColumn.add(a.getTree());
              if (list_a == null)               list_a=new ArrayList();
              list_a.add(a);
              char_literal53=(Token)input.LT(1);
              match(input,46,FOLLOW_46_in_columnFamilyExpr692);
              if (failed)               return retval;
              if (backtracking == 0)               stream_46.add(char_literal53);
            }
          break;
      }
    }
  break;
}
if (backtracking == 0) {
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval != null ? retval.tree : null);
RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"token a",list_a);
root_0=(CommonTree)adaptor.nil();
{
{
    CommonTree root_1=(CommonTree)adaptor.nil();
    root_1=(CommonTree)adaptor.becomeRoot(adaptor.create(NODE_COLUMN_ACCESS,"NODE_COLUMN_ACCESS"),root_1);
    adaptor.addChild(root_1,stream_table.next());
    adaptor.addChild(root_1,stream_columnFamily.next());
    adaptor.addChild(root_1,stream_rowKey.next());
    if (stream_a.hasNext()) {
      if (!(stream_a.hasNext())) {
        throw new RewriteEarlyExitException();
      }
      while (stream_a.hasNext()) {
        adaptor.addChild(root_1,((ParserRuleReturnScope)stream_a.next()).getTree());
      }
      stream_a.reset();
    }
    stream_a.reset();
    adaptor.addChild(root_0,root_1);
  }
}
}
}
retval.stop=input.LT(-1);
if (backtracking == 0) {
retval.tree=(CommonTree)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return retval;
}
