{
  RangeIterator<Long,Token> tokens=combinedTerm.getTokenIterator();
  tokenCount=tokens.getCount();
  treeMinToken=tokens.getMinimum();
  treeMaxToken=tokens.getMaximum();
  numBlocks=1;
  if (tokenCount <= TOKENS_PER_BLOCK) {
    leftmostLeaf=new StaticLeaf(tokens,tokens.getMinimum(),tokens.getMaximum(),tokens.getCount(),true);
    rightmostLeaf=leftmostLeaf;
    root=leftmostLeaf;
  }
 else {
    root=new InteriorNode();
    rightmostParent=(InteriorNode)root;
    Leaf lastLeaf=null;
    long numFullLeaves=tokenCount / TOKENS_PER_BLOCK;
    for (long i=0; i < numFullLeaves; i++) {
      Long firstToken=tokens.next().get();
      for (int j=1; j < (TOKENS_PER_BLOCK - 1); j++)       tokens.next();
      Long lastToken=tokens.next().get();
      Leaf leaf=new PartialLeaf(firstToken,lastToken,TOKENS_PER_BLOCK);
      if (lastLeaf == null)       leftmostLeaf=leaf;
 else       lastLeaf.next=leaf;
      rightmostParent.add(leaf);
      lastLeaf=rightmostLeaf=leaf;
      numBlocks++;
    }
    int remainingTokens=(int)(tokenCount % TOKENS_PER_BLOCK);
    if (remainingTokens != 0) {
      Long firstToken=tokens.next().get();
      Long lastToken=firstToken;
      while (tokens.hasNext())       lastToken=tokens.next().get();
      Leaf leaf=new PartialLeaf(firstToken,lastToken,remainingTokens);
      rightmostParent.add(leaf);
      lastLeaf.next=rightmostLeaf=leaf;
      numBlocks++;
    }
  }
}
