{
  RangeIterator<Long,Token> tokens=combinedTerm.getTokenIterator();
  tokenCount=0;
  treeMinToken=tokens.getMinimum();
  treeMaxToken=tokens.getMaximum();
  numBlocks=1;
  root=new InteriorNode();
  rightmostParent=(InteriorNode)root;
  Leaf lastLeaf=null;
  Long lastToken, firstToken=null;
  int leafSize=0;
  while (tokens.hasNext()) {
    Long token=tokens.next().get();
    if (firstToken == null)     firstToken=token;
    tokenCount++;
    leafSize++;
    if (tokenCount % TOKENS_PER_BLOCK != 0 && token != treeMaxToken)     continue;
    lastToken=token;
    Leaf leaf=new PartialLeaf(firstToken,lastToken,leafSize);
    if (lastLeaf == null)     leftmostLeaf=leaf;
 else     lastLeaf.next=leaf;
    rightmostParent.add(leaf);
    lastLeaf=rightmostLeaf=leaf;
    firstToken=null;
    numBlocks++;
    leafSize=0;
  }
  if (root.tokenCount() == 0) {
    numBlocks=1;
    root=new StaticLeaf(combinedTerm.getTokenIterator(),treeMinToken,treeMaxToken,tokenCount,true);
  }
}
