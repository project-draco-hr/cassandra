{
  EncryptionContext context=EncryptionContextGenerator.createContext(true);
  CipherFactory cipherFactory=new CipherFactory(context.getTransparentDataEncryptionOptions());
  int plainTextLength=(1 << 13) - 137;
  ByteBuffer plainTextBuffer=ByteBuffer.allocate(plainTextLength);
  random.nextBytes(plainTextBuffer.array());
  ByteBuffer compressedBuffer=EncryptionUtils.compress(plainTextBuffer,null,true,context.getCompressor());
  Cipher cipher=cipherFactory.getEncryptor(context.getTransparentDataEncryptionOptions().cipher,context.getTransparentDataEncryptionOptions().key_alias);
  File encryptedFile=File.createTempFile("encrypted-segment-",".log");
  encryptedFile.deleteOnExit();
  FileChannel channel=new RandomAccessFile(encryptedFile,"rw").getChannel();
  channel.write(ByteBufferUtil.bytes(plainTextLength));
  EncryptionUtils.encryptAndWrite(compressedBuffer,channel,true,cipher);
  channel.close();
  try (RandomAccessReader reader=RandomAccessReader.open(encryptedFile)){
    context=EncryptionContextGenerator.createContext(cipher.getIV(),true);
    EncryptedSegmenter segmenter=new EncryptedSegmenter(reader,context);
    SyncSegment syncSegment=segmenter.nextSegment(0,(int)reader.length());
    Assert.assertEquals(plainTextLength,syncSegment.endPosition - CommitLogSegment.SYNC_MARKER_SIZE);
    ByteBuffer fileBuffer=readFun.apply(syncSegment.input,plainTextLength);
    plainTextBuffer.position(0);
    Assert.assertEquals(plainTextBuffer,fileBuffer);
  }
 }
