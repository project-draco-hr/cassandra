{
  boolean backups=DatabaseDescriptor.isIncrementalBackupsEnabled();
  DatabaseDescriptor.setIncrementalBackupsEnabled(false);
  ColumnFamilyStore cfs=MockSchema.newCFS();
  MockListener listener=new MockListener(false);
  Tracker tracker=cfs.getTracker();
  tracker.subscribe(listener);
  Memtable prev1=tracker.switchMemtable(true,new Memtable(new AtomicReference<>(CommitLog.instance.getContext()),cfs));
  OpOrder.Group write1=cfs.keyspace.writeOrder.getCurrent();
  OpOrder.Barrier barrier1=cfs.keyspace.writeOrder.newBarrier();
  prev1.setDiscarding(barrier1,new AtomicReference<>(CommitLog.instance.getContext()));
  barrier1.issue();
  Memtable prev2=tracker.switchMemtable(false,new Memtable(new AtomicReference<>(CommitLog.instance.getContext()),cfs));
  OpOrder.Group write2=cfs.keyspace.writeOrder.getCurrent();
  OpOrder.Barrier barrier2=cfs.keyspace.writeOrder.newBarrier();
  prev2.setDiscarding(barrier2,new AtomicReference<>(CommitLog.instance.getContext()));
  barrier2.issue();
  Memtable cur=tracker.getView().getCurrentMemtable();
  OpOrder.Group writecur=cfs.keyspace.writeOrder.getCurrent();
  Assert.assertEquals(prev1,tracker.getMemtableFor(write1,ReplayPosition.NONE));
  Assert.assertEquals(prev2,tracker.getMemtableFor(write2,ReplayPosition.NONE));
  Assert.assertEquals(cur,tracker.getMemtableFor(writecur,ReplayPosition.NONE));
  Assert.assertEquals(1,listener.received.size());
  Assert.assertTrue(listener.received.get(0) instanceof MemtableRenewedNotification);
  listener.received.clear();
  tracker.markFlushing(prev2);
  Assert.assertEquals(1,tracker.getView().flushingMemtables.size());
  Assert.assertTrue(tracker.getView().flushingMemtables.contains(prev2));
  tracker.markFlushing(prev1);
  Assert.assertTrue(tracker.getView().flushingMemtables.contains(prev1));
  Assert.assertEquals(2,tracker.getView().flushingMemtables.size());
  tracker.replaceFlushed(prev1,Collections.emptyList());
  Assert.assertEquals(1,tracker.getView().flushingMemtables.size());
  Assert.assertTrue(tracker.getView().flushingMemtables.contains(prev2));
  SSTableReader reader=MockSchema.sstable(0,10,false,cfs);
  tracker.replaceFlushed(prev2,Collections.singleton(reader));
  Assert.assertEquals(1,tracker.getView().sstables.size());
  Assert.assertEquals(1,tracker.getView().premature.size());
  tracker.permitCompactionOfFlushed(singleton(reader));
  Assert.assertEquals(0,tracker.getView().premature.size());
  Assert.assertEquals(1,listener.received.size());
  Assert.assertEquals(singleton(reader),((SSTableAddedNotification)listener.received.get(0)).added);
  listener.received.clear();
  Assert.assertTrue(reader.isKeyCacheSetup());
  Assert.assertEquals(10,cfs.metric.liveDiskSpaceUsed.getCount());
  cfs=MockSchema.newCFS();
  tracker=cfs.getTracker();
  listener=new MockListener(false);
  tracker.subscribe(listener);
  prev1=tracker.switchMemtable(false,new Memtable(new AtomicReference<>(CommitLog.instance.getContext()),cfs));
  tracker.markFlushing(prev1);
  reader=MockSchema.sstable(0,10,true,cfs);
  cfs.invalidate(false);
  tracker.replaceFlushed(prev1,Collections.singleton(reader));
  tracker.permitCompactionOfFlushed(Collections.singleton(reader));
  Assert.assertEquals(0,tracker.getView().sstables.size());
  Assert.assertEquals(0,tracker.getView().flushingMemtables.size());
  Assert.assertEquals(0,cfs.metric.liveDiskSpaceUsed.getCount());
  Assert.assertEquals(reader,(((SSTableDeletingNotification)listener.received.get(0)).deleting));
  Assert.assertEquals(1,((SSTableListChangedNotification)listener.received.get(1)).removed.size());
  DatabaseDescriptor.setIncrementalBackupsEnabled(backups);
}
