{
  if (Tracing.instance() == null)   return;
  final TraceState state=Tracing.instance().get();
  if (state == null)   return;
  final int elapsed=state.elapsed();
  StageManager.getStage(Stage.TRACING).execute(new WrappedRunnable(){
    public void runMayThrow() throws TimedOutException, UnavailableException {
      ByteBuffer eventId=ByteBufferUtil.bytes(UUIDGen.makeType1UUIDFromHost(FBUtilities.getBroadcastAddress()));
      CFMetaData cfMeta=CFMetaData.TraceEventsCf;
      ColumnFamily cf=ColumnFamily.create(cfMeta);
      addColumn(cf,buildName(cfMeta,eventId,bytes("source")),FBUtilities.getBroadcastAddress());
      addColumn(cf,buildName(cfMeta,eventId,bytes("thread")),event.getThreadName());
      addColumn(cf,buildName(cfMeta,eventId,bytes("happened_at")),event.getTimeStamp());
      addColumn(cf,buildName(cfMeta,eventId,bytes("source_elapsed")),elapsed);
      addColumn(cf,buildName(cfMeta,eventId,bytes("activity")),event.getMessage());
      RowMutation mutation=new RowMutation(Tracing.TRACE_KS,state.sessionIdBytes);
      mutation.add(cf);
      StorageProxy.mutate(Arrays.asList(mutation),ConsistencyLevel.ANY);
    }
  }
);
}
