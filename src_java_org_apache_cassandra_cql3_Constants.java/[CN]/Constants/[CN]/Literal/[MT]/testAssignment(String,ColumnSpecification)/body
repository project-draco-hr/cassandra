{
  CQL3Type receiverType=receiver.type.asCQL3Type();
  if (receiverType.isCollection())   return AssignmentTestable.TestResult.NOT_ASSIGNABLE;
  if (!(receiverType instanceof CQL3Type.Native))   return AssignmentTestable.TestResult.WEAKLY_ASSIGNABLE;
  CQL3Type.Native nt=(CQL3Type.Native)receiverType;
switch (type) {
case STRING:
switch (nt) {
case ASCII:
case TEXT:
case INET:
case VARCHAR:
case DATE:
case TIME:
case TIMESTAMP:
      return AssignmentTestable.TestResult.WEAKLY_ASSIGNABLE;
  }
break;
case INTEGER:
switch (nt) {
case BIGINT:
case COUNTER:
case DATE:
case DECIMAL:
case DOUBLE:
case FLOAT:
case INT:
case SMALLINT:
case TIME:
case TIMESTAMP:
case TINYINT:
case VARINT:
return AssignmentTestable.TestResult.WEAKLY_ASSIGNABLE;
}
break;
case UUID:
switch (nt) {
case UUID:
case TIMEUUID:
return AssignmentTestable.TestResult.WEAKLY_ASSIGNABLE;
}
break;
case FLOAT:
switch (nt) {
case DECIMAL:
case DOUBLE:
case FLOAT:
return AssignmentTestable.TestResult.WEAKLY_ASSIGNABLE;
}
break;
case BOOLEAN:
switch (nt) {
case BOOLEAN:
return AssignmentTestable.TestResult.WEAKLY_ASSIGNABLE;
}
break;
case HEX:
switch (nt) {
case BLOB:
return AssignmentTestable.TestResult.WEAKLY_ASSIGNABLE;
}
break;
}
return AssignmentTestable.TestResult.NOT_ASSIGNABLE;
}
