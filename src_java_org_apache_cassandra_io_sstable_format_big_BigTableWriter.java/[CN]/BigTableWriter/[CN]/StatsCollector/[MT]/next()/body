{
  Unfiltered unfiltered=super.next();
  collector.updateClusteringValues(unfiltered.clustering());
switch (unfiltered.kind()) {
case ROW:
    Row row=(Row)unfiltered;
  collector.update(row.primaryKeyLivenessInfo());
collector.update(row.deletion());
int simpleColumnsSet=0;
complexColumnsSetInRow.clear();
for (Cell cell : row) {
if (cell.column().isComplex()) complexColumnsSetInRow.add(cell.column());
 else ++simpleColumnsSet;
++cellCount;
collector.update(cell.livenessInfo());
if (cell.isCounterCell()) collector.updateHasLegacyCounterShards(CounterCells.hasLegacyShards(cell));
}
for (int i=0; i < row.columns().complexColumnCount(); i++) collector.update(row.getDeletion(row.columns().getComplex(i)));
collector.updateColumnSetPerRow(simpleColumnsSet + complexColumnsSetInRow.size());
break;
case RANGE_TOMBSTONE_MARKER:
if (((RangeTombstoneMarker)unfiltered).isBoundary()) {
RangeTombstoneBoundaryMarker bm=(RangeTombstoneBoundaryMarker)unfiltered;
collector.update(bm.endDeletionTime());
collector.update(bm.startDeletionTime());
}
 else {
collector.update(((RangeTombstoneBoundMarker)unfiltered).deletionTime());
}
break;
}
return unfiltered;
}
