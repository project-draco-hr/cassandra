{
  long totalSize=totalSize();
  logger.debug("[Stream #{}] Start streaming file {} to {}, repairedAt = {}, totalSize = {}",session.planId(),sstable.getFilename(),session.peer,sstable.getSSTableMetadata().repairedAt,totalSize);
  RandomAccessReader file=sstable.openDataReader();
  ChecksumValidator validator=new File(sstable.descriptor.filenameFor(Component.CRC)).exists() ? DataIntegrityMetadata.checksumValidator(sstable.descriptor) : null;
  transferBuffer=validator == null ? new byte[DEFAULT_CHUNK_SIZE] : new byte[validator.chunkSize];
  compressedOutput=new LZFOutputStream(Channels.newOutputStream(channel));
  long progress=0L;
  try {
    for (    Pair<Long,Long> section : sections) {
      long start=validator == null ? section.left : validator.chunkStart(section.left);
      int readOffset=(int)(section.left - start);
      file.seek(start);
      if (validator != null)       validator.seek(start);
      long length=section.right - start;
      long bytesRead=0;
      while (bytesRead < length) {
        long lastBytesRead=write(file,validator,readOffset,length,bytesRead);
        bytesRead+=lastBytesRead;
        progress+=(lastBytesRead - readOffset);
        session.progress(sstable.descriptor,ProgressInfo.Direction.OUT,progress,totalSize);
        readOffset=0;
      }
      compressedOutput.flush();
    }
    logger.debug("[Stream #{}] Finished streaming file {} to {}, bytesTransferred = {}, totalSize = {}",session.planId(),sstable.getFilename(),session.peer,progress,totalSize);
  }
  finally {
    FileUtils.closeQuietly(file);
    FileUtils.closeQuietly(validator);
  }
}
