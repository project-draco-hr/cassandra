{
  long totalSize=totalSize();
  RandomAccessReader file=sstable.openDataReader();
  ChecksumValidator validator=new File(sstable.descriptor.filenameFor(Component.CRC)).exists() ? DataIntegrityMetadata.checksumValidator(sstable.descriptor) : null;
  transferBuffer=validator == null ? new byte[DEFAULT_CHUNK_SIZE] : new byte[validator.chunkSize];
  compressedOutput=new LZFOutputStream(Channels.newOutputStream(channel));
  long progress=0L;
  try {
    for (    Pair<Long,Long> section : sections) {
      long start=validator == null ? section.left : validator.chunkStart(section.left);
      int skipBytes=(int)(section.left - start);
      file.seek(start);
      if (validator != null)       validator.seek(start);
      long length=section.right - start;
      long bytesTransferred=0;
      while (bytesTransferred < length) {
        long lastWrite=write(file,validator,skipBytes,length,bytesTransferred);
        bytesTransferred+=lastWrite;
        progress+=lastWrite;
        session.progress(sstable.descriptor,ProgressInfo.Direction.OUT,progress,totalSize);
        skipBytes=0;
      }
      compressedOutput.flush();
    }
  }
  finally {
    FileUtils.closeQuietly(file);
    FileUtils.closeQuietly(validator);
  }
  sstable.releaseReference();
}
