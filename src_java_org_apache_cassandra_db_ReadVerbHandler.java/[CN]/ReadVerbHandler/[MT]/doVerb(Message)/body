{
  byte[] body=message.getMessageBody();
  ReadContext readCtx=tls_.get();
  if (readCtx == null) {
    readCtx=new ReadContext();
    tls_.set(readCtx);
  }
  readCtx.bufIn_.reset(body,body.length);
  try {
    ReadCommand readCommand=ReadCommand.serializer().deserialize(readCtx.bufIn_);
    Table table=Table.open(readCommand.table);
    Row row=null;
    row=readCommand.getRow(table);
    ReadResponse readResponse=null;
    if (readCommand.isDigestQuery()) {
      readResponse=new ReadResponse(table.getTableName(),row.digest());
    }
 else {
      readResponse=new ReadResponse(table.getTableName(),row);
    }
    readResponse.setIsDigestQuery(readCommand.isDigestQuery());
    readCtx.bufOut_.reset();
    ReadResponse.serializer().serialize(readResponse,readCtx.bufOut_);
    byte[] bytes=new byte[readCtx.bufOut_.getLength()];
    System.arraycopy(readCtx.bufOut_.getData(),0,bytes,0,bytes.length);
    Message response=message.getReply(StorageService.getLocalStorageEndPoint(),bytes);
    logger_.debug("Read key " + readCommand.key + "; sending response to "+ message.getMessageId()+ "@"+ message.getFrom());
    MessagingService.getMessagingInstance().sendOneWay(response,message.getFrom());
    if (message.getHeader(ReadCommand.DO_REPAIR) != null) {
      doReadRepair(row,readCommand);
    }
  }
 catch (  IOException ex) {
    throw new RuntimeException(ex);
  }
}
