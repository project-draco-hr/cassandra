{
  byte[] body=message.getMessageBody();
  ReadContext readCtx=tls_.get();
  if (readCtx == null) {
    readCtx=new ReadContext();
    tls_.set(readCtx);
  }
  readCtx.bufIn_=new ByteArrayInputStream(body);
  try {
    if (StorageService.instance.isBootstrapMode()) {
      throw new RuntimeException("Cannot service reads while bootstrapping!");
    }
    ReadCommand command=ReadCommand.serializer().deserialize(new DataInputStream(readCtx.bufIn_));
    Table table=Table.open(command.table);
    Row row=command.getRow(table);
    ReadResponse readResponse;
    if (command.isDigestQuery()) {
      if (logger_.isDebugEnabled())       logger_.debug("digest is " + FBUtilities.bytesToHex(ColumnFamily.digest(row.cf)));
      readResponse=new ReadResponse(ColumnFamily.digest(row.cf));
    }
 else {
      readResponse=new ReadResponse(row);
    }
    readResponse.setIsDigestQuery(command.isDigestQuery());
    readCtx.bufOut_.reset();
    ReadResponse.serializer().serialize(readResponse,readCtx.bufOut_);
    byte[] bytes=new byte[readCtx.bufOut_.getLength()];
    System.arraycopy(readCtx.bufOut_.getData(),0,bytes,0,bytes.length);
    Message response=message.getReply(FBUtilities.getLocalAddress(),bytes);
    if (logger_.isDebugEnabled())     logger_.debug("Read key " + command.key + "; sending response to "+ message.getMessageId()+ "@"+ message.getFrom());
    MessagingService.instance.sendOneWay(response,message.getFrom());
    if (message.getHeader(ReadCommand.DO_REPAIR) != null) {
      List<InetAddress> endpoints=StorageService.instance.getLiveNaturalEndpoints(command.table,command.key);
      if (endpoints.size() > 1)       StorageService.instance.doConsistencyCheck(row,endpoints,command);
    }
  }
 catch (  IOException ex) {
    throw new RuntimeException(ex);
  }
}
