{
  byte[] body=message.getMessageBody();
  ReadContext readCtx=tls_.get();
  if (readCtx == null) {
    readCtx=new ReadContext();
    tls_.set(readCtx);
  }
  readCtx.bufIn_=new ByteArrayInputStream(body);
  try {
    if (StorageService.instance.isBootstrapMode()) {
      throw new RuntimeException("Cannot service reads while bootstrapping!");
    }
    ReadCommand command=ReadCommand.serializer().deserialize(new DataInputStream(readCtx.bufIn_));
    Table table=Table.open(command.table);
    Row row=command.getRow(table);
    ReadResponse readResponse=getResponse(command,row);
    readCtx.bufOut_.reset();
    ReadResponse.serializer().serialize(readResponse,readCtx.bufOut_);
    byte[] bytes=new byte[readCtx.bufOut_.getLength()];
    System.arraycopy(readCtx.bufOut_.getData(),0,bytes,0,bytes.length);
    Message response=message.getReply(FBUtilities.getLocalAddress(),bytes,message.getVersion());
    if (logger_.isDebugEnabled())     logger_.debug(String.format("Read key %s; sending response to %s@%s",ByteBufferUtil.bytesToHex(command.key),message.getMessageId(),message.getFrom()));
    MessagingService.instance().sendOneWay(response,message.getFrom());
  }
 catch (  IOException ex) {
    throw new RuntimeException(ex);
  }
}
