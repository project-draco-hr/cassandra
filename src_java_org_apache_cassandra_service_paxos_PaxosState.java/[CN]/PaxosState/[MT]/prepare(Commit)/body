{
  long start=System.nanoTime();
  try {
    Lock lock=LOCKS.get(toPrepare.update.partitionKey());
    lock.lock();
    try {
      int nowInSec=UUIDGen.unixTimestampInSec(toPrepare.ballot);
      PaxosState state=SystemKeyspace.loadPaxosState(toPrepare.update.partitionKey(),toPrepare.update.metadata(),nowInSec);
      if (toPrepare.isAfter(state.promised)) {
        Tracing.trace("Promising ballot {}",toPrepare.ballot);
        SystemKeyspace.savePaxosPromise(toPrepare);
        return new PrepareResponse(true,state.accepted,state.mostRecentCommit);
      }
 else {
        Tracing.trace("Promise rejected; {} is not sufficiently newer than {}",toPrepare,state.promised);
        return new PrepareResponse(false,state.promised,state.mostRecentCommit);
      }
    }
  finally {
      lock.unlock();
    }
  }
  finally {
    Keyspace.open(toPrepare.update.metadata().ksName).getColumnFamilyStore(toPrepare.update.metadata().cfId).metric.casPrepare.addNano(System.nanoTime() - start);
  }
}
