{
  DataOutputStream out=new DataOutputStream(socket.getOutputStream());
  out.writeInt(MessagingService.current_version);
  out.flush();
  DataInputStream in=new DataInputStream(socket.getInputStream());
  int maxVersion=in.readInt();
  from=CompactEndpointSerializationHelper.deserialize(in);
  if (compressed) {
    logger.debug("Upgrading incoming connection to be compressed");
    if (version < MessagingService.VERSION_21)     in=new DataInputStream(new SnappyInputStream(socket.getInputStream()));
 else {
      LZ4Decompressor decompressor=LZ4Factory.fastestInstance().decompressor();
      Checksum checksum=XXHashFactory.fastestInstance().newStreamingHash32(OutboundTcpConnection.LZ4_HASH_SEED).asChecksum();
      in=new DataInputStream(new LZ4BlockInputStream(socket.getInputStream(),decompressor,checksum));
    }
  }
 else {
    in=new DataInputStream(new BufferedInputStream(socket.getInputStream(),4096));
  }
  logger.debug("Max version for {} is {}",from,maxVersion);
  if (version > MessagingService.current_version) {
    Gossiper.instance.addSavedEndpoint(from);
    logger.info("Received messages from newer protocol version {}. Ignoring",version);
    return;
  }
  MessagingService.instance().setVersion(from,Math.min(MessagingService.current_version,maxVersion));
  logger.debug("set version for {} to {}",from,Math.min(MessagingService.current_version,maxVersion));
  while (true) {
    MessagingService.validateMagic(in.readInt());
    receiveMessage(in,version);
  }
}
