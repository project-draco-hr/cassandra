{
  requireNetwork();
  int rows=QueryProcessor.executeOnceInternal("SELECT * FROM " + SchemaConstants.SYSTEM_KEYSPACE_NAME + '.'+ SystemKeyspace.PREPARED_STATEMENTS).size();
  Assert.assertEquals(0,rows);
  execute("CREATE KEYSPACE IF NOT EXISTS foo WITH replication = {'class': 'SimpleStrategy', 'replication_factor': '1'}");
  execute("CREATE TABLE foo.bar (key text PRIMARY KEY, val int)");
  ClientState clientState=ClientState.forExternalCalls(InetSocketAddress.createUnresolved("127.0.0.1",1234));
  createTable("CREATE TABLE %s (pk int PRIMARY KEY, val text)");
  List<MD5Digest> stmtIds=new ArrayList<>();
  stmtIds.add(QueryProcessor.prepare("SELECT * FROM " + SchemaConstants.SCHEMA_KEYSPACE_NAME + '.'+ SchemaKeyspace.TABLES+ " WHERE keyspace_name = ?",clientState,false).statementId);
  stmtIds.add(QueryProcessor.prepare("SELECT * FROM " + KEYSPACE + '.'+ currentTable()+ " WHERE pk = ?",clientState,false).statementId);
  stmtIds.add(QueryProcessor.prepare("SELECT * FROM foo.bar WHERE key = ?",clientState,false).statementId);
  clientState.setKeyspace("foo");
  stmtIds.add(QueryProcessor.prepare("SELECT * FROM " + KEYSPACE + '.'+ currentTable()+ " WHERE pk = ?",clientState,false).statementId);
  stmtIds.add(QueryProcessor.prepare("SELECT * FROM foo.bar WHERE key = ?",clientState,false).statementId);
  Assert.assertEquals(5,stmtIds.size());
  Assert.assertEquals(5,QueryProcessor.preparedStatementsCount());
  String queryAll="SELECT * FROM " + SchemaConstants.SYSTEM_KEYSPACE_NAME + '.'+ SystemKeyspace.PREPARED_STATEMENTS;
  rows=QueryProcessor.executeOnceInternal(queryAll).size();
  Assert.assertEquals(5,rows);
  QueryHandler handler=ClientState.getCQLQueryHandler();
  validatePstmts(stmtIds,handler);
  QueryProcessor.clearPrepraredStatements();
  Assert.assertEquals(0,QueryProcessor.preparedStatementsCount());
  for (  MD5Digest stmtId : stmtIds)   Assert.assertNull(handler.getPrepared(stmtId));
  QueryProcessor.preloadPreparedStatement();
  validatePstmts(stmtIds,handler);
  for (  UntypedResultSet.Row row : QueryProcessor.executeOnceInternal(queryAll)) {
    MD5Digest digest=MD5Digest.wrap(ByteBufferUtil.getArray(row.getBytes("prepared_id")));
    ParsedStatement.Prepared prepared=QueryProcessor.instance.getPrepared(digest);
    Assert.assertNotNull(prepared);
  }
  QueryProcessor.prepare("SELECT * FROM bar WHERE key = ?",clientState,false);
  Assert.assertEquals(6,QueryProcessor.preparedStatementsCount());
  rows=QueryProcessor.executeOnceInternal(queryAll).size();
  Assert.assertEquals(6,rows);
  execute("DROP KEYSPACE foo");
  Assert.assertEquals(3,QueryProcessor.preparedStatementsCount());
  rows=QueryProcessor.executeOnceInternal(queryAll).size();
  Assert.assertEquals(3,rows);
}
