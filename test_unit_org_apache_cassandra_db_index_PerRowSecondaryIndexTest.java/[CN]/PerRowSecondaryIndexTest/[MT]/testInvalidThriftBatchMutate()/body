{
  ByteBuffer key=ByteBufferUtil.bytes("valid");
  long timestamp=System.currentTimeMillis();
  org.apache.cassandra.thrift.Mutation mutation=new org.apache.cassandra.thrift.Mutation();
  Column column=new Column(key).setValue(ByteBufferUtil.bytes("valid")).setTimestamp(System.currentTimeMillis());
  ColumnOrSuperColumn cosc=new ColumnOrSuperColumn();
  cosc.setColumn(column);
  mutation.setColumn_or_supercolumn(cosc);
  server.batch_mutate(Collections.singletonMap(key,Collections.singletonMap(CF_INDEXED,Collections.singletonList(mutation))),ConsistencyLevel.ONE);
  try {
    key=ByteBufferUtil.bytes("invalid");
    server.batch_mutate(Collections.singletonMap(key,Collections.singletonMap(CF_INDEXED,Collections.singletonList(mutation))),ConsistencyLevel.ONE);
    fail("Query should have been invalid!");
  }
 catch (  Exception e) {
    assertTrue(e instanceof org.apache.cassandra.thrift.InvalidRequestException);
  }
  try {
    key=ByteBufferUtil.bytes("valid");
    cosc.setColumn(new Column(key).setValue(ByteBufferUtil.bytes("invalid")).setTimestamp(timestamp));
    server.batch_mutate(Collections.singletonMap(key,Collections.singletonMap(CF_INDEXED,Collections.singletonList(mutation))),ConsistencyLevel.ONE);
    fail("Query should have been invalid!");
  }
 catch (  Exception e) {
    assertTrue(e instanceof org.apache.cassandra.thrift.InvalidRequestException);
  }
}
