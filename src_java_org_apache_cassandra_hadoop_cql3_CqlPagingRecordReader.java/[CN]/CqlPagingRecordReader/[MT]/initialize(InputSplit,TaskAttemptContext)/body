{
  this.split=(ColumnFamilySplit)split;
  Configuration conf=HadoopCompat.getConfiguration(context);
  totalRowCount=(this.split.getLength() < Long.MAX_VALUE) ? (int)this.split.getLength() : ConfigHelper.getInputSplitSize(conf);
  cfName=ConfigHelper.getInputColumnFamily(conf);
  consistencyLevel=ConsistencyLevel.valueOf(ConfigHelper.getReadConsistencyLevel(conf));
  keyspace=ConfigHelper.getInputKeyspace(conf);
  columns=CqlConfigHelper.getInputcolumns(conf);
  userDefinedWhereClauses=CqlConfigHelper.getInputWhereClauses(conf);
  try {
    pageRowSize=CqlConfigHelper.getInputPageRowSize(conf).get();
  }
 catch (  NumberFormatException e) {
    pageRowSize=DEFAULT_CQL_PAGE_LIMIT;
  }
  partitioner=ConfigHelper.getInputPartitioner(HadoopCompat.getConfiguration(context));
  try {
    if (client != null)     return;
    String[] locations=split.getLocations();
    Exception lastException=null;
    for (    String location : locations) {
      int port=ConfigHelper.getInputRpcPort(conf);
      try {
        client=CqlPagingInputFormat.createAuthenticatedClient(location,port,conf);
        break;
      }
 catch (      Exception e) {
        lastException=e;
        logger.warn("Failed to create authenticated client to {}:{}",location,port);
      }
    }
    if (client == null && lastException != null)     throw lastException;
    retrieveKeys();
    client.set_keyspace(keyspace);
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
  rowIterator=new RowIterator();
  logger.debug("created {}",rowIterator);
}
