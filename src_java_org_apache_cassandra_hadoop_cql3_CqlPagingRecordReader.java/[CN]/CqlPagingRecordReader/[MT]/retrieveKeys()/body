{
  String query="select key_aliases," + "column_aliases, " + "key_validator, "+ "comparator "+ "from system.schema_columnfamilies "+ "where keyspace_name='%s' and columnfamily_name='%s'";
  String formatted=String.format(query,keyspace,cfName);
  CqlResult result=client.execute_cql3_query(ByteBufferUtil.bytes(formatted),Compression.NONE,ConsistencyLevel.ONE);
  CqlRow cqlRow=result.rows.get(0);
  String keyString=ByteBufferUtil.string(ByteBuffer.wrap(cqlRow.columns.get(0).getValue()));
  logger.debug("partition keys: {}",keyString);
  List<String> keys=FBUtilities.fromJsonList(keyString);
  for (  String key : keys)   partitionBoundColumns.add(new BoundColumn(key));
  if (partitionBoundColumns.isEmpty()) {
    retrieveKeysForThriftTables();
    return;
  }
  keyString=ByteBufferUtil.string(ByteBuffer.wrap(cqlRow.columns.get(1).getValue()));
  logger.debug("cluster columns: {}",keyString);
  keys=FBUtilities.fromJsonList(keyString);
  for (  String key : keys)   clusterColumns.add(new BoundColumn(key));
  parseKeyValidators(ByteBufferUtil.string(ByteBuffer.wrap(cqlRow.columns.get(2).getValue())));
  Column rawComparator=cqlRow.columns.get(3);
  String comparator=ByteBufferUtil.string(ByteBuffer.wrap(rawComparator.getValue()));
  logger.debug("comparator: {}",comparator);
  AbstractType comparatorValidator=parseType(comparator);
  if (comparatorValidator instanceof CompositeType) {
    for (int i=0; i < clusterColumns.size(); i++)     clusterColumns.get(i).reversed=(((CompositeType)comparatorValidator).types.get(i) instanceof ReversedType);
  }
 else   if (comparatorValidator instanceof ReversedType) {
    clusterColumns.get(0).reversed=true;
  }
}
