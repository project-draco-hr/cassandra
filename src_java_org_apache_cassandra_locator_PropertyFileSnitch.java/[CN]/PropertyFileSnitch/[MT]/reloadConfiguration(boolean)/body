{
  HashMap<InetAddress,String[]> reloadedMap=new HashMap<>();
  String[] reloadedDefaultDCRack=null;
  Properties properties=new Properties();
  try (InputStream stream=getClass().getClassLoader().getResourceAsStream(SNITCH_PROPERTIES_FILENAME)){
    properties.load(stream);
  }
 catch (  Exception e) {
    throw new ConfigurationException("Unable to read " + SNITCH_PROPERTIES_FILENAME,e);
  }
  for (  Map.Entry<Object,Object> entry : properties.entrySet()) {
    String key=(String)entry.getKey();
    String value=(String)entry.getValue();
    if ("default".equals(key)) {
      String[] newDefault=value.split(":");
      if (newDefault.length < 2)       reloadedDefaultDCRack=new String[]{"default","default"};
 else       reloadedDefaultDCRack=new String[]{newDefault[0].trim(),newDefault[1].trim()};
    }
 else {
      InetAddress host;
      String hostString=StringUtils.remove(key,'/');
      try {
        host=InetAddress.getByName(hostString);
      }
 catch (      UnknownHostException e) {
        throw new ConfigurationException("Unknown host " + hostString,e);
      }
      String[] token=value.split(":");
      if (token.length < 2)       token=new String[]{"default","default"};
 else       token=new String[]{token[0].trim(),token[1].trim()};
      reloadedMap.put(host,token);
    }
  }
  if (reloadedDefaultDCRack == null && !reloadedMap.containsKey(FBUtilities.getBroadcastAddress()))   throw new ConfigurationException(String.format("Snitch definitions at %s do not define a location for " + "this node's broadcast address %s, nor does it provides a default",SNITCH_PROPERTIES_FILENAME,FBUtilities.getBroadcastAddress()));
  if (isUpdate && !livenessCheck(reloadedMap,reloadedDefaultDCRack))   return;
  if (logger.isTraceEnabled()) {
    StringBuilder sb=new StringBuilder();
    for (    Map.Entry<InetAddress,String[]> entry : reloadedMap.entrySet())     sb.append(entry.getKey()).append(':').append(Arrays.toString(entry.getValue())).append(", ");
    logger.trace("Loaded network topology from property file: {}",StringUtils.removeEnd(sb.toString(),", "));
  }
  defaultDCRack=reloadedDefaultDCRack;
  endpointMap=reloadedMap;
  if (StorageService.instance != null) {
    if (isUpdate)     StorageService.instance.updateTopology();
 else     StorageService.instance.getTokenMetadata().invalidateCachedRings();
  }
  if (gossipStarted)   StorageService.instance.gossipSnitchInfo();
}
