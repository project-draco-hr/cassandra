{
  Set<SSTableReader> withStarvedCandidate=new HashSet<>(candidates);
  for (int i=generations.length - 1; i > 0; i--)   compactionCounter[i]++;
  compactionCounter[targetLevel]=0;
  if (logger.isDebugEnabled()) {
    for (int j=0; j < compactionCounter.length; j++)     logger.debug("CompactionCounter: {}: {}",j,compactionCounter[j]);
  }
  for (int i=generations.length - 1; i > 0; i--) {
    if (getLevelSize(i) > 0) {
      if (compactionCounter[i] > NO_COMPACTION_LIMIT) {
        PartitionPosition max=null;
        PartitionPosition min=null;
        for (        SSTableReader candidate : candidates) {
          if (min == null || candidate.first.compareTo(min) < 0)           min=candidate.first;
          if (max == null || candidate.last.compareTo(max) > 0)           max=candidate.last;
        }
        if (min == null || max == null || min.equals(max))         return candidates;
        Set<SSTableReader> compacting=cfs.getTracker().getCompacting();
        Range<PartitionPosition> boundaries=new Range<>(min,max);
        for (        SSTableReader sstable : getLevel(i)) {
          Range<PartitionPosition> r=new Range<PartitionPosition>(sstable.first,sstable.last);
          if (boundaries.contains(r) && !compacting.contains(sstable)) {
            logger.info("Adding high-level (L{}) {} to candidates",sstable.getSSTableLevel(),sstable);
            withStarvedCandidate.add(sstable);
            return withStarvedCandidate;
          }
        }
      }
      return candidates;
    }
  }
  return candidates;
}
