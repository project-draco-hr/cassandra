{
  for (int i=generations.length - 1; i > 0; i--) {
    List<SSTableReader> sstables=generations[i];
    if (sstables.isEmpty())     continue;
    Set<SSTableReader> sstablesInLevel=Sets.newHashSet(sstables);
    Set<SSTableReader> remaining=Sets.difference(sstablesInLevel,cfs.getDataTracker().getCompacting());
    double score=(double)SSTableReader.getTotalBytes(remaining) / (double)maxBytesForLevel(i);
    logger.debug("Compaction score for level {} is {}",i,score);
    if (score > 1.001) {
      if (generations[0].size() > MAX_COMPACTING_L0) {
        Iterable<SSTableReader> candidates=cfs.getDataTracker().getUncompactingSSTables(generations[0]);
        List<Pair<SSTableReader,Long>> pairs=SizeTieredCompactionStrategy.createSSTableAndLengthPairs(AbstractCompactionStrategy.filterSuspectSSTables(candidates));
        List<List<SSTableReader>> buckets=SizeTieredCompactionStrategy.getBuckets(pairs,SizeTieredCompactionStrategy.DEFAULT_BUCKET_HIGH,SizeTieredCompactionStrategy.DEFAULT_BUCKET_LOW,SizeTieredCompactionStrategy.DEFAULT_MIN_SSTABLE_SIZE);
        List<SSTableReader> mostInteresting=SizeTieredCompactionStrategy.mostInterestingBucket(buckets,4,32);
        if (!mostInteresting.isEmpty())         return Pair.create(mostInteresting,0);
      }
      Collection<SSTableReader> candidates=getCandidatesFor(i);
      if (logger.isDebugEnabled())       logger.debug("Compaction candidates for L{} are {}",i,toString(candidates));
      if (!candidates.isEmpty())       return Pair.create(candidates,getNextLevel(candidates));
    }
  }
  if (generations[0].isEmpty())   return null;
  Collection<SSTableReader> candidates=getCandidatesFor(0);
  if (candidates.isEmpty())   return null;
  return Pair.create(candidates,getNextLevel(candidates));
}
