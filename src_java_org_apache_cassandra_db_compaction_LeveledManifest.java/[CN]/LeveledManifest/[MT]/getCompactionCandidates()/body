{
  if (StorageService.instance.isBootstrapMode()) {
    List<SSTableReader> mostInteresting=getSSTablesForSTCS(getLevel(0));
    if (!mostInteresting.isEmpty()) {
      logger.info("Bootstrapping - doing STCS in L0");
      return new CompactionCandidate(mostInteresting,0,Long.MAX_VALUE);
    }
    return null;
  }
  for (int i=generations.length - 1; i > 0; i--) {
    List<SSTableReader> sstables=getLevel(i);
    if (sstables.isEmpty())     continue;
    Set<SSTableReader> sstablesInLevel=Sets.newHashSet(sstables);
    Set<SSTableReader> remaining=Sets.difference(sstablesInLevel,cfs.getTracker().getCompacting());
    double score=(double)SSTableReader.getTotalBytes(remaining) / (double)maxBytesForLevel(i,maxSSTableSizeInBytes);
    logger.trace("Compaction score for level {} is {}",i,score);
    if (score > 1.001) {
      CompactionCandidate l0Compaction=getSTCSInL0CompactionCandidate();
      if (l0Compaction != null)       return l0Compaction;
      Collection<SSTableReader> candidates=getCandidatesFor(i);
      if (!candidates.isEmpty()) {
        int nextLevel=getNextLevel(candidates);
        candidates=getOverlappingStarvedSSTables(nextLevel,candidates);
        if (logger.isTraceEnabled())         logger.trace("Compaction candidates for L{} are {}",i,toString(candidates));
        return new CompactionCandidate(candidates,nextLevel,cfs.getCompactionStrategy().getMaxSSTableBytes());
      }
 else {
        logger.trace("No compaction candidates for L{}",i);
      }
    }
  }
  if (getLevel(0).isEmpty())   return null;
  Collection<SSTableReader> candidates=getCandidatesFor(0);
  if (candidates.isEmpty()) {
    return getSTCSInL0CompactionCandidate();
  }
  return new CompactionCandidate(candidates,getNextLevel(candidates),cfs.getCompactionStrategy().getMaxSSTableBytes());
}
