{
  if (pollIntervalNanos < 1)   throw new IllegalArgumentException(String.format("Commit log flush interval must be positive: %fms",pollIntervalNanos * 1e-6));
  Runnable runnable=new Runnable(){
    public void run(){
      long firstLagAt=0;
      long totalSyncDuration=0;
      long syncExceededIntervalBy=0;
      int lagCount=0;
      int syncCount=0;
      while (true) {
        boolean shutdownRequested=shutdown;
        try {
          long syncStarted=System.nanoTime();
          commitLog.sync();
          lastSyncedAt=syncStarted;
          syncComplete.signalAll();
          long now=System.nanoTime();
          long wakeUpAt=syncStarted + pollIntervalNanos;
          if (wakeUpAt < now) {
            if (firstLagAt == 0) {
              firstLagAt=now;
              totalSyncDuration=syncExceededIntervalBy=syncCount=lagCount=0;
            }
            syncExceededIntervalBy+=now - wakeUpAt;
            lagCount++;
          }
          syncCount++;
          totalSyncDuration+=now - syncStarted;
          if (firstLagAt > 0) {
            boolean logged=NoSpamLogger.log(logger,NoSpamLogger.Level.WARN,5,TimeUnit.MINUTES,"Out of {} commit log syncs over the past {}s with average duration of {}ms, {} have exceeded the configured commit interval by an average of {}ms",syncCount,String.format("%.2f",(now - firstLagAt) * 1e-9d),String.format("%.2f",totalSyncDuration * 1e-6d / syncCount),lagCount,String.format("%.2f",syncExceededIntervalBy * 1e-6d / lagCount));
            if (logged)             firstLagAt=0;
          }
          if (shutdownRequested)           return;
          if (wakeUpAt > now)           LockSupport.parkNanos(wakeUpAt - now);
        }
 catch (        Throwable t) {
          if (!CommitLog.handleCommitError("Failed to persist commits to disk",t))           break;
          LockSupport.parkNanos(pollIntervalNanos);
        }
      }
    }
  }
;
  shutdown=false;
  thread=new Thread(runnable,name);
  thread.start();
}
