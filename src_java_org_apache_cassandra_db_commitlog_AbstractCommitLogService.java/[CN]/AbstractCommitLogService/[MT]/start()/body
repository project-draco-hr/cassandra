{
  if (pollIntervalMillis < 1)   throw new IllegalArgumentException(String.format("Commit log flush interval must be positive: %dms",pollIntervalMillis));
  Runnable runnable=new Runnable(){
    public void run(){
      long firstLagAt=0;
      long totalSyncDuration=0;
      long syncExceededIntervalBy=0;
      int lagCount=0;
      int syncCount=0;
      boolean run=true;
      while (run) {
        try {
          run=!shutdown;
          long syncStarted=System.currentTimeMillis();
          commitLog.sync(shutdown);
          lastSyncedAt=syncStarted;
          syncComplete.signalAll();
          long now=System.currentTimeMillis();
          long sleep=syncStarted + pollIntervalMillis - now;
          if (sleep < 0) {
            if (firstLagAt == 0) {
              firstLagAt=now;
              totalSyncDuration=syncExceededIntervalBy=syncCount=lagCount=0;
            }
            syncExceededIntervalBy-=sleep;
            lagCount++;
          }
          syncCount++;
          totalSyncDuration+=now - syncStarted;
          if (firstLagAt > 0 && now - firstLagAt >= LAG_REPORT_INTERVAL) {
            logger.warn(String.format("Out of %d commit log syncs over the past %ds with average duration of %.2fms, %d have exceeded the configured commit interval by an average of %.2fms",syncCount,(now - firstLagAt) / 1000,(double)totalSyncDuration / syncCount,lagCount,(double)syncExceededIntervalBy / lagCount));
            firstLagAt=0;
          }
          if (sleep < 0 || !run)           continue;
          try {
            haveWork.tryAcquire(sleep,TimeUnit.MILLISECONDS);
          }
 catch (          InterruptedException e) {
            throw new AssertionError();
          }
        }
 catch (        Throwable t) {
          if (!CommitLog.handleCommitError("Failed to persist commits to disk",t))           break;
          try {
            haveWork.tryAcquire(pollIntervalMillis,TimeUnit.MILLISECONDS);
          }
 catch (          InterruptedException e) {
            throw new AssertionError();
          }
        }
      }
    }
  }
;
  thread=new Thread(runnable,name);
  thread.start();
}
