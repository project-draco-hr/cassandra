def test_describe_columnfamilies_output(self):
    output_re = '\n            \\n\n            Keyspace [ ] (?P<ksname> \\S+ ) \\n\n            -----------* \\n\n            (?P<cfnames> .*? )\n            \\n\n        '
    ks = get_keyspace()
    with testrun_cqlsh(tty=True, keyspace=None) as c:
        for cmdword in ('DESCRIBE COLUMNFAMILIES', 'desc tables'):
            for semicolon in (';', ''):
                ksnames = []
                output = c.cmd_and_response((cmdword + semicolon))
                self.assertNoHasColors(output)
                self.assertRegexpMatches(output, ('(?xs) ^ ( %s )+ $' % output_re))
                for section in re.finditer(('(?xs)' + output_re), output):
                    ksname = section.group('ksname')
                    ksnames.append(ksname)
                    cfnames = section.group('cfnames')
                    self.assertNotIn('\n\n', cfnames)
                    if (ksname == ks):
                        self.assertIn('ascii_with_special_chars', cfnames)
                self.assertIn('system', ksnames)
                self.assertIn(quote_name(ks), ksnames)
        c.send(('USE %s;\n' % quote_name(ks)))
        c.read_to_next_prompt()
        for cmdword in ('DESCRIBE COLUMNFAMILIES', 'desc tables'):
            for semicolon in (';', ''):
                output = c.cmd_and_response((cmdword + semicolon))
                self.assertNoHasColors(output)
                self.assertEqual(output[0], '\n')
                self.assertEqual(output[(-1)], '\n')
                self.assertNotIn(('Keyspace %s' % quote_name(ks)), output)
                self.assertIn('undefined_values_table', output)
