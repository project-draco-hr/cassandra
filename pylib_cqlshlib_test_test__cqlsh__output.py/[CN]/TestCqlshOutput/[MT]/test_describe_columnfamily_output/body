def test_describe_columnfamily_output(self):
    table_desc2 = dedent("\n\n            CREATE TABLE has_all_types (\n              num int PRIMARY KEY,\n              intcol int,\n              timestampcol timestamp,\n              floatcol float,\n              uuidcol uuid,\n              bigintcol bigint,\n              doublecol double,\n              booleancol boolean,\n              decimalcol decimal,\n              asciicol ascii,\n              blobcol blob,\n              varcharcol text,\n              varintcol varint,\n              textcol text\n            ) WITH\n              comment='' AND\n              comparator=text AND\n              read_repair_chance=0.100000 AND\n              gc_grace_seconds=864000 AND\n              default_validation=text AND\n              min_compaction_threshold=4 AND\n              max_compaction_threshold=32 AND\n              replicate_on_write='true' AND\n              compaction_strategy_class='SizeTieredCompactionStrategy' AND\n              compression_parameters:sstable_compression='LZ4Compressor';\n\n        ")
    table_desc3 = dedent("\n\n            CREATE TABLE has_all_types (\n              num int PRIMARY KEY,\n              asciicol ascii,\n              bigintcol bigint,\n              blobcol blob,\n              booleancol boolean,\n              decimalcol decimal,\n              doublecol double,\n              floatcol float,\n              intcol int,\n              textcol text,\n              timestampcol timestamp,\n              uuidcol uuid,\n              varcharcol text,\n              varintcol varint\n            ) WITH COMPACT STORAGE AND\n              bloom_filter_fp_chance=0.010000 AND\n              caching='KEYS_ONLY' AND\n              comment='' AND\n              dclocal_read_repair_chance=0.000000 AND\n              gc_grace_seconds=864000 AND\n              read_repair_chance=0.100000 AND\n              replicate_on_write='true' AND\n              populate_io_cache_on_flush='false' AND\n              compaction={'class': 'SizeTieredCompactionStrategy'} AND\n              compression={'sstable_compression': 'LZ4Compressor'};\n\n        ")
    for v in ('2.0.0', '3.0.0'):
        with testrun_cqlsh(tty=True, cqlver=v) as c:
            for cmdword in ('describe table', 'desc columnfamily'):
                for semicolon in (';', ''):
                    output = c.cmd_and_response(('%s has_all_types%s' % (cmdword, semicolon)))
                    self.assertNoHasColors(output)
                    self.assertEqual(output, {'2.0.0': table_desc2, '3.0.0': table_desc3, }[v])
