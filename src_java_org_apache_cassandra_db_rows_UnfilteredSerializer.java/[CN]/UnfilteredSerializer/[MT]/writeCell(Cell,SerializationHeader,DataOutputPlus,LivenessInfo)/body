{
  if (cell == null) {
    out.writeByte((byte)0);
    return;
  }
  boolean hasValue=cell.value().hasRemaining();
  boolean isDeleted=cell.isTombstone();
  boolean isExpiring=cell.isExpiring();
  boolean useRowTimestamp=rowLiveness.hasTimestamp() && cell.livenessInfo().timestamp() == rowLiveness.timestamp();
  boolean useRowTTL=isExpiring && rowLiveness.hasTTL() && cell.livenessInfo().ttl() == rowLiveness.ttl() && cell.livenessInfo().localDeletionTime() == rowLiveness.localDeletionTime();
  int flags=PRESENCE_MASK;
  if (!hasValue)   flags|=EMPTY_VALUE_MASK;
  if (isDeleted)   flags|=DELETION_MASK;
 else   if (isExpiring)   flags|=EXPIRATION_MASK;
  if (useRowTimestamp)   flags|=USE_ROW_TIMESTAMP;
  if (useRowTTL)   flags|=USE_ROW_TTL;
  out.writeByte((byte)flags);
  if (hasValue)   header.getType(cell.column()).writeValue(cell.value(),out);
  if (!useRowTimestamp)   out.writeLong(header.encodeTimestamp(cell.livenessInfo().timestamp()));
  if ((isDeleted || isExpiring) && !useRowTTL)   out.writeInt(header.encodeDeletionTime(cell.livenessInfo().localDeletionTime()));
  if (isExpiring && !useRowTTL)   out.writeInt(header.encodeTTL(cell.livenessInfo().ttl()));
  if (cell.column().isComplex())   cell.column().cellPathSerializer().serialize(cell.path(),out);
}
