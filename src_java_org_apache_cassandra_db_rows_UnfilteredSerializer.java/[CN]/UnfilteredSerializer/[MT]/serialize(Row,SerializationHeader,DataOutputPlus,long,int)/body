{
  int flags=0;
  int extendedFlags=0;
  boolean isStatic=row.isStatic();
  Columns headerColumns=header.columns(isStatic);
  LivenessInfo pkLiveness=row.primaryKeyLivenessInfo();
  Row.Deletion deletion=row.deletion();
  boolean hasComplexDeletion=row.hasComplexDeletion();
  boolean hasAllColumns=(row.size() == headerColumns.size());
  boolean hasExtendedFlags=hasExtendedFlags(row);
  if (isStatic)   extendedFlags|=IS_STATIC;
  if (!pkLiveness.isEmpty())   flags|=HAS_TIMESTAMP;
  if (pkLiveness.isExpiring())   flags|=HAS_TTL;
  if (!deletion.isLive()) {
    flags|=HAS_DELETION;
    if (deletion.isShadowable())     extendedFlags|=HAS_SHADOWABLE_DELETION;
  }
  if (hasComplexDeletion)   flags|=HAS_COMPLEX_DELETION;
  if (hasAllColumns)   flags|=HAS_ALL_COLUMNS;
  if (hasExtendedFlags)   flags|=EXTENSION_FLAG;
  out.writeByte((byte)flags);
  if (hasExtendedFlags)   out.writeByte((byte)extendedFlags);
  if (!isStatic)   Clustering.serializer.serialize(row.clustering(),out,version,header.clusteringTypes());
  if (header.isForSSTable()) {
    try (DataOutputBuffer dob=DataOutputBuffer.scratchBuffer.get()){
      serializeRowBody(row,flags,header,dob);
      out.writeUnsignedVInt(dob.position() + TypeSizes.sizeofUnsignedVInt(previousUnfilteredSize));
      out.writeUnsignedVInt(previousUnfilteredSize);
      out.write(dob.getData(),0,dob.getLength());
    }
   }
 else {
    serializeRowBody(row,flags,header,out);
  }
}
