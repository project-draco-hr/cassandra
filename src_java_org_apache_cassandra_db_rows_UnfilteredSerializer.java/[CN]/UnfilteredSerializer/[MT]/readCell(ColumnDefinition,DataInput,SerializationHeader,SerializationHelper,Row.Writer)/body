{
  int flags=in.readUnsignedByte();
  if ((flags & PRESENCE_MASK) == 0)   return false;
  boolean hasValue=(flags & EMPTY_VALUE_MASK) == 0;
  boolean isDeleted=(flags & DELETION_MASK) != 0;
  boolean isExpiring=(flags & EXPIRATION_MASK) != 0;
  boolean useRowTimestamp=(flags & USE_ROW_TIMESTAMP) != 0;
  boolean useRowTTL=(flags & USE_ROW_TTL) != 0;
  ByteBuffer value=ByteBufferUtil.EMPTY_BYTE_BUFFER;
  if (hasValue) {
    if (helper.canSkipValue(column))     header.getType(column).skipValue(in);
 else     value=header.getType(column).readValue(in);
  }
  long timestamp=useRowTimestamp ? helper.getRowTimestamp() : header.decodeTimestamp(in.readLong());
  int localDelTime=useRowTTL ? helper.getRowLocalDeletionTime() : (isDeleted || isExpiring ? header.decodeDeletionTime(in.readInt()) : LivenessInfo.NO_DELETION_TIME);
  int ttl=useRowTTL ? helper.getRowTTL() : (isExpiring ? header.decodeTTL(in.readInt()) : LivenessInfo.NO_TTL);
  CellPath path=column.isComplex() ? column.cellPathSerializer().deserialize(in) : null;
  helper.writeCell(writer,column,false,value,timestamp,localDelTime,ttl,path);
  return true;
}
