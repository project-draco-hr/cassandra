{
  int flags=0;
  boolean isStatic=row.isStatic();
  LivenessInfo pkLiveness=row.primaryKeyLivenessInfo();
  DeletionTime deletion=row.deletion();
  boolean hasComplexDeletion=row.hasComplexDeletion();
  if (isStatic)   flags|=IS_STATIC;
  if (pkLiveness.hasTimestamp())   flags|=HAS_TIMESTAMP;
  if (pkLiveness.hasTTL())   flags|=HAS_TTL;
  if (!deletion.isLive())   flags|=HAS_DELETION;
  if (hasComplexDeletion)   flags|=HAS_COMPLEX_DELETION;
  out.writeByte((byte)flags);
  if (!isStatic)   Clustering.serializer.serialize(row.clustering(),out,version,header.clusteringTypes());
  if ((flags & HAS_TIMESTAMP) != 0)   out.writeLong(header.encodeTimestamp(pkLiveness.timestamp()));
  if ((flags & HAS_TTL) != 0) {
    out.writeInt(header.encodeTTL(pkLiveness.ttl()));
    out.writeInt(header.encodeDeletionTime(pkLiveness.localDeletionTime()));
  }
  if ((flags & HAS_DELETION) != 0)   UnfilteredRowIteratorSerializer.writeDelTime(deletion,header,out);
  Columns columns=header.columns(isStatic);
  int simpleCount=columns.simpleColumnCount();
  boolean useSparse=header.useSparseColumnLayout(isStatic);
  SearchIterator<ColumnDefinition,ColumnData> cells=row.searchIterator();
  for (int i=0; i < simpleCount; i++)   writeSimpleColumn(i,cells.next(columns.getSimple(i)),header,out,pkLiveness,useSparse);
  for (int i=simpleCount; i < columns.columnCount(); i++)   writeComplexColumn(i,cells.next(columns.getComplex(i - simpleCount)),hasComplexDeletion,header,out,pkLiveness,useSparse);
  if (useSparse)   out.writeShort(-1);
}
