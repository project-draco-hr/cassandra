{
  ColumnFamilyStore cfs=Keyspace.open(KEYSPACE1).getColumnFamilyStore(CF_FOR_READ_TEST);
  ReadCommand rm, rm2;
  rm=Util.cmd(cfs,Util.dk("key1")).includeRow("col1","col2").build();
  rm2=serializeAndDeserializeReadMessage(rm);
  assertEquals(rm.toString(),rm2.toString());
  rm=Util.cmd(cfs,Util.dk("key1")).includeRow("col1","col2").reverse().build();
  rm2=serializeAndDeserializeReadMessage(rm);
  assertEquals(rm.toString(),rm2.toString());
  rm=Util.cmd(cfs).build();
  rm2=serializeAndDeserializeReadMessage(rm);
  assertEquals(rm.toString(),rm2.toString());
  rm=Util.cmd(cfs).fromKeyIncl(ByteBufferUtil.bytes("key1")).toKeyIncl(ByteBufferUtil.bytes("key2")).build();
  rm2=serializeAndDeserializeReadMessage(rm);
  assertEquals(rm.toString(),rm2.toString());
  rm=Util.cmd(cfs).columns("a").build();
  rm2=serializeAndDeserializeReadMessage(rm);
  assertEquals(rm.toString(),rm2.toString());
  rm=Util.cmd(cfs).includeRow("col1","col2").columns("a").build();
  rm2=serializeAndDeserializeReadMessage(rm);
  assertEquals(rm.toString(),rm2.toString());
  rm=Util.cmd(cfs).fromKeyIncl(ByteBufferUtil.bytes("key1")).includeRow("col1","col2").columns("a").build();
  rm2=serializeAndDeserializeReadMessage(rm);
  assertEquals(rm.toString(),rm2.toString());
}
