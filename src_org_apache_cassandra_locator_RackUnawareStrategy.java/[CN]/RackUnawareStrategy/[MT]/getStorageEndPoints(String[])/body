{
  Arrays.sort(keys);
  Range[] ranges=StorageService.instance().getAllRanges();
  Map<String,EndPoint[]> results=new HashMap<String,EndPoint[]>();
  List<EndPoint> list=new ArrayList<EndPoint>();
  int startIndex=0;
  int foundCount=0;
  Map<BigInteger,EndPoint> tokenToEndPointMap=tokenMetadata_.cloneTokenEndPointMap();
  int N=DatabaseDescriptor.getReplicationFactor();
  List<BigInteger> tokens=new ArrayList<BigInteger>(tokenToEndPointMap.keySet());
  Collections.sort(tokens);
  for (  String key : keys) {
    BigInteger token=StorageService.hash(key);
    int index=Collections.binarySearch(tokens,token);
    if (index < 0) {
      index=(index + 1) * (-1);
      if (index >= tokens.size())       index=0;
    }
    int totalNodes=tokens.size();
    list.add(tokenToEndPointMap.get(tokens.get(index)));
    foundCount++;
    startIndex=(index + 1) % totalNodes;
    for (int i=startIndex, count=1; count < totalNodes && foundCount < N; ++count, i=(i + 1) % totalNodes) {
      if (!list.contains(tokenToEndPointMap.get(tokens.get(i)))) {
        list.add(tokenToEndPointMap.get(tokens.get(i)));
        foundCount++;
        continue;
      }
    }
    retrofitPorts(list);
    results.put(key,list.toArray(new EndPoint[0]));
  }
  return results;
}
