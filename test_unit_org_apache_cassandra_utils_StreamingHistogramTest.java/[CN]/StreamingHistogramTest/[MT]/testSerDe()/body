{
  StreamingHistogram hist=new StreamingHistogram(5);
  long[] samples=new long[]{23,19,10,16,36,2,9};
  for (int i=0; i < samples.length; i++) {
    hist.update(samples[i]);
  }
  ByteArrayOutputStream out=new ByteArrayOutputStream();
  StreamingHistogram.serializer.serialize(hist,new DataOutputStream(out));
  byte[] bytes=out.toByteArray();
  StreamingHistogram deserialized=StreamingHistogram.serializer.deserialize(new DataInputStream(new ByteArrayInputStream(bytes)));
  Map<Double,Long> expected1=new LinkedHashMap<Double,Long>(5);
  expected1.put(2.0,1L);
  expected1.put(9.5,2L);
  expected1.put(17.5,2L);
  expected1.put(23.0,1L);
  expected1.put(36.0,1L);
  Iterator<Map.Entry<Double,Long>> expectedItr=expected1.entrySet().iterator();
  for (  Map.Entry<Double,Long> actual : deserialized.getAsMap().entrySet()) {
    Map.Entry<Double,Long> entry=expectedItr.next();
    assertEquals(entry.getKey(),actual.getKey(),0.01);
    assertEquals(entry.getValue(),actual.getValue());
  }
}
