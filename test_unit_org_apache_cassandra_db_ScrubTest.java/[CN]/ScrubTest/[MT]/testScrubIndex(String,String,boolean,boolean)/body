{
  CompactionManager.instance.disableAutoCompaction();
  Keyspace keyspace=Keyspace.open(KEYSPACE);
  ColumnFamilyStore cfs=keyspace.getColumnFamilyStore(cfName);
  cfs.clearUnsafe();
  int numRows=1000;
  long[] colValues=new long[numRows * 2];
  for (int i=0; i < colValues.length; i+=2) {
    colValues[i]=(i % 4 == 0 ? 1L : 2L);
    colValues[i + 1]=3L;
  }
  fillIndexCF(cfs,composite,colValues);
  assertOrdered(Util.cmd(cfs).filterOn(colName,Operator.EQ,1L).build(),numRows / 2);
  Set<ColumnFamilyStore> indexCfss=cfs.indexManager.getIndexesBackedByCfs();
  assertTrue(indexCfss.size() == 1);
  for (  ColumnFamilyStore indexCfs : indexCfss) {
    for (int i=0; i < scrubs.length; i++) {
      boolean failure=!scrubs[i];
      if (failure) {
        overrideWithGarbage(indexCfs.getLiveSSTables().iterator().next(),ByteBufferUtil.bytes(1L),ByteBufferUtil.bytes(2L));
      }
      CompactionManager.AllSSTableOpStatus result=indexCfs.scrub(false,false,true,true);
      assertEquals(failure ? CompactionManager.AllSSTableOpStatus.ABORTED : CompactionManager.AllSSTableOpStatus.SUCCESSFUL,result);
    }
  }
  assertOrdered(Util.cmd(cfs).filterOn(colName,Operator.EQ,1L).build(),numRows / 2);
}
