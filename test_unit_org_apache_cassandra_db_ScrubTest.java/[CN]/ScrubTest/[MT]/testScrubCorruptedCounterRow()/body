{
  int numPartitions=1000;
  CompactionManager.instance.disableAutoCompaction();
  Keyspace keyspace=Keyspace.open(KEYSPACE);
  ColumnFamilyStore cfs=keyspace.getColumnFamilyStore(COUNTER_CF);
  cfs.clearUnsafe();
  fillCounterCF(cfs,numPartitions);
  List<Row> rows=cfs.getRangeSlice(Util.range("",""),null,new IdentityQueryFilter(),numPartitions * 10);
  assertEquals(numPartitions,rows.size());
  assertEquals(1,cfs.getSSTables().size());
  SSTableReader sstable=cfs.getSSTables().iterator().next();
  overrideWithGarbage(sstable,ByteBufferUtil.bytes("0"),ByteBufferUtil.bytes("1"));
  try (Scrubber scrubber=new Scrubber(cfs,sstable,false,false,true)){
    scrubber.scrub();
    fail("Expected a CorruptSSTableException to be thrown");
  }
 catch (  IOError err) {
  }
  Scrubber.ScrubResult scrubResult;
  try (Scrubber scrubber=new Scrubber(cfs,sstable,true,false,true)){
    scrubResult=scrubber.scrubWithResult();
  }
   assertNotNull(scrubResult);
  boolean compression=Boolean.parseBoolean(System.getProperty("cassandra.test.compression","false"));
  if (compression) {
    assertEquals(0,scrubResult.emptyRows);
    assertEquals(numPartitions,scrubResult.badRows + scrubResult.goodRows);
    assertTrue(scrubResult.goodRows >= scrubResult.badRows * 2);
  }
 else {
    assertEquals(0,scrubResult.emptyRows);
    assertEquals(1,scrubResult.badRows);
    assertEquals(numPartitions - 1,scrubResult.goodRows);
  }
  assertEquals(1,cfs.getSSTables().size());
  rows=cfs.getRangeSlice(Util.range("",""),null,new IdentityQueryFilter(),1000);
  assertEquals(scrubResult.goodRows,rows.size());
}
