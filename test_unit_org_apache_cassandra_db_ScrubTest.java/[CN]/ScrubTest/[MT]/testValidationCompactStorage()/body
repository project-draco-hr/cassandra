{
  QueryProcessor.process(String.format("CREATE TABLE \"%s\".test_compact_dynamic_columns (a int, b text, c text, PRIMARY KEY (a, b)) WITH COMPACT STORAGE",KEYSPACE),ConsistencyLevel.ONE);
  Keyspace keyspace=Keyspace.open(KEYSPACE);
  ColumnFamilyStore cfs=keyspace.getColumnFamilyStore("test_compact_dynamic_columns");
  QueryProcessor.executeInternal(String.format("INSERT INTO \"%s\".test_compact_dynamic_columns (a, b, c) VALUES (0, 'a', 'foo')",KEYSPACE));
  QueryProcessor.executeInternal(String.format("INSERT INTO \"%s\".test_compact_dynamic_columns (a, b, c) VALUES (0, 'b', 'bar')",KEYSPACE));
  QueryProcessor.executeInternal(String.format("INSERT INTO \"%s\".test_compact_dynamic_columns (a, b, c) VALUES (0, 'c', 'boo')",KEYSPACE));
  cfs.forceBlockingFlush();
  CompactionManager.instance.performScrub(cfs,true,true,2);
  UntypedResultSet rs=QueryProcessor.executeInternal(String.format("SELECT * FROM \"%s\".test_compact_dynamic_columns",KEYSPACE));
  assertEquals(3,rs.size());
  Iterator<UntypedResultSet.Row> iter=rs.iterator();
  assertEquals("foo",iter.next().getString("c"));
  assertEquals("bar",iter.next().getString("c"));
  assertEquals("boo",iter.next().getString("c"));
}
