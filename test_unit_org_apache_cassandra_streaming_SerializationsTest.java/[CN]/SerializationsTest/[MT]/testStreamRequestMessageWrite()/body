{
  UUID sessionId=UUIDGen.makeType1UUIDFromHost(FBUtilities.getLocalAddress());
  Collection<Range<Token>> ranges=new ArrayList<Range<Token>>();
  for (int i=0; i < 5; i++)   ranges.add(new Range<Token>(new BytesToken(ByteBufferUtil.bytes(Integer.toString(10 * i))),new BytesToken(ByteBufferUtil.bytes(Integer.toString(10 * i + 5)))));
  List<ColumnFamilyStore> stores=Collections.singletonList(Table.open("Keyspace1").getColumnFamilyStore("Standard1"));
  StreamRequest msg0=new StreamRequest(FBUtilities.getBroadcastAddress(),ranges,"Keyspace1",stores,sessionId,OperationType.RESTORE_REPLICA_COUNT);
  StreamRequest msg1=new StreamRequest(FBUtilities.getBroadcastAddress(),makePendingFile(true,100,OperationType.BOOTSTRAP),sessionId);
  StreamRequest msg2=new StreamRequest(FBUtilities.getBroadcastAddress(),makePendingFile(false,100,OperationType.BOOTSTRAP),sessionId);
  DataOutputStream out=getOutput("streaming.StreamRequestMessage.bin");
  StreamRequest.serializer.serialize(msg0,out,getVersion());
  StreamRequest.serializer.serialize(msg1,out,getVersion());
  StreamRequest.serializer.serialize(msg2,out,getVersion());
  msg0.createMessage().serialize(out,getVersion());
  msg1.createMessage().serialize(out,getVersion());
  msg2.createMessage().serialize(out,getVersion());
  out.close();
  testSerializedSize(msg0,StreamRequest.serializer);
  testSerializedSize(msg1,StreamRequest.serializer);
  testSerializedSize(msg2,StreamRequest.serializer);
}
