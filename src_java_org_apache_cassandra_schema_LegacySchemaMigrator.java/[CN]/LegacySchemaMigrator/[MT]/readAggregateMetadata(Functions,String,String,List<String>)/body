{
  String query=format("SELECT * FROM %s.%s WHERE keyspace_name = ? AND aggregate_name = ? AND signature = ?",SchemaConstants.SYSTEM_KEYSPACE_NAME,SystemKeyspace.LEGACY_AGGREGATES);
  UntypedResultSet.Row row=query(query,keyspaceName,functionName,signature).one();
  FunctionName name=new FunctionName(keyspaceName,functionName);
  List<String> types=row.getList("argument_types",UTF8Type.instance);
  List<AbstractType<?>> argTypes=new ArrayList<>();
  if (types != null) {
    argTypes=new ArrayList<>(types.size());
    for (    String type : types)     argTypes.add(parseType(type));
  }
  AbstractType<?> returnType=parseType(row.getString("return_type"));
  FunctionName stateFunc=new FunctionName(keyspaceName,row.getString("state_func"));
  AbstractType<?> stateType=parseType(row.getString("state_type"));
  FunctionName finalFunc=row.has("final_func") ? new FunctionName(keyspaceName,row.getString("final_func")) : null;
  ByteBuffer initcond=row.has("initcond") ? row.getBytes("initcond") : null;
  try {
    return UDAggregate.create(functions,name,argTypes,returnType,stateFunc,finalFunc,stateType,initcond);
  }
 catch (  InvalidRequestException reason) {
    return UDAggregate.createBroken(name,argTypes,returnType,initcond,reason);
  }
}
