{
  String rawKind=row.getString("type");
  ColumnDefinition.Kind kind=deserializeKind(rawKind);
  if (needsUpgrade && isStaticCompactTable && kind == ColumnDefinition.Kind.REGULAR)   kind=ColumnDefinition.Kind.STATIC;
  int componentIndex=ColumnDefinition.NO_POSITION;
  if (kind.isPrimaryKeyKind())   componentIndex=row.has("component_index") ? row.getInt("component_index") : 0;
  AbstractType<?> comparator=isCQLTable ? UTF8Type.instance : CompactTables.columnDefinitionComparator(rawKind,isSuper,rawComparator,rawSubComparator);
  ColumnIdentifier name=ColumnIdentifier.getInterned(comparator.fromString(row.getString("column_name")),comparator);
  AbstractType<?> validator=parseType(row.getString("validator"));
  if (validator.isUDT() && validator.isMultiCell())   validator=validator.freeze();
 else   validator=validator.freezeNestedMulticellTypes();
  return new ColumnDefinition(keyspace,table,name,validator,componentIndex,kind);
}
