{
  for (  Entry<InetAddress,EndpointState> entry : epStateMap.entrySet()) {
    InetAddress ep=entry.getKey();
    if (ep.equals(FBUtilities.getBroadcastAddress()) && !isInShadowRound())     continue;
    if (justRemovedEndpoints.containsKey(ep)) {
      if (logger.isTraceEnabled())       logger.trace("Ignoring gossip for {} because it is quarantined",ep);
      continue;
    }
    EndpointState localEpStatePtr=endpointStateMap.get(ep);
    EndpointState remoteState=entry.getValue();
    if (localEpStatePtr != null) {
      int localGeneration=localEpStatePtr.getHeartBeatState().getGeneration();
      int remoteGeneration=remoteState.getHeartBeatState().getGeneration();
      if (logger.isTraceEnabled())       logger.trace("{} local generation {}, remote generation {}",ep,localGeneration,remoteGeneration);
      if (localGeneration != 0 && remoteGeneration > localGeneration + MAX_GENERATION_DIFFERENCE) {
        logger.warn("received an invalid gossip generation for peer {}; local generation = {}, received generation = {}",ep,localGeneration,remoteGeneration);
      }
 else       if (remoteGeneration > localGeneration) {
        if (logger.isTraceEnabled())         logger.trace("Updating heartbeat state generation to {} from {} for {}",remoteGeneration,localGeneration,ep);
        handleMajorStateChange(ep,remoteState);
      }
 else       if (remoteGeneration == localGeneration) {
        int localMaxVersion=getMaxEndpointStateVersion(localEpStatePtr);
        int remoteMaxVersion=getMaxEndpointStateVersion(remoteState);
        if (remoteMaxVersion > localMaxVersion) {
          applyNewStates(ep,localEpStatePtr,remoteState);
        }
 else         if (logger.isTraceEnabled())         logger.trace("Ignoring remote version {} <= {} for {}",remoteMaxVersion,localMaxVersion,ep);
        if (!localEpStatePtr.isAlive() && !isDeadState(localEpStatePtr))         markAlive(ep,localEpStatePtr);
      }
 else {
        if (logger.isTraceEnabled())         logger.trace("Ignoring remote generation {} < {}",remoteGeneration,localGeneration);
      }
    }
 else {
      FailureDetector.instance.report(ep);
      handleMajorStateChange(ep,remoteState);
    }
  }
}
