{
  if (logger.isTraceEnabled())   logger.trace("Performing status check ...");
  long now=System.currentTimeMillis();
  long nowNano=System.nanoTime();
  long pending=((JMXEnabledThreadPoolExecutor)StageManager.getStage(Stage.GOSSIP)).metrics.pendingTasks.getValue();
  if (pending > 0 && lastProcessedMessageAt < now - 1000) {
    Uninterruptibles.sleepUninterruptibly(100,TimeUnit.MILLISECONDS);
    if (lastProcessedMessageAt < now - 1000) {
      logger.warn("Gossip stage has {} pending tasks; skipping status check (no nodes will be marked down)",pending);
      return;
    }
  }
  Set<InetAddress> eps=endpointStateMap.keySet();
  for (  InetAddress endpoint : eps) {
    if (endpoint.equals(FBUtilities.getBroadcastAddress()))     continue;
    FailureDetector.instance.interpret(endpoint);
    EndpointState epState=endpointStateMap.get(endpoint);
    if (epState != null) {
      if (isGossipOnlyMember(endpoint) && !justRemovedEndpoints.containsKey(endpoint) && TimeUnit.NANOSECONDS.toMillis(nowNano - epState.getUpdateTimestamp()) > FatClientTimeout) {
        logger.info("FatClient {} has been silent for {}ms, removing from gossip",endpoint,FatClientTimeout);
        removeEndpoint(endpoint);
        evictFromMembership(endpoint);
      }
      long expireTime=getExpireTimeForEndpoint(endpoint);
      if (!epState.isAlive() && (now > expireTime) && (!StorageService.instance.getTokenMetadata().isMember(endpoint))) {
        if (logger.isDebugEnabled()) {
          logger.debug("time is expiring for endpoint : {} ({})",endpoint,expireTime);
        }
        evictFromMembership(endpoint);
      }
    }
  }
  if (!justRemovedEndpoints.isEmpty()) {
    for (    Entry<InetAddress,Long> entry : justRemovedEndpoints.entrySet()) {
      if ((now - entry.getValue()) > QUARANTINE_DELAY) {
        if (logger.isDebugEnabled())         logger.debug("{} elapsed, {} gossip quarantine over",QUARANTINE_DELAY,entry.getKey());
        justRemovedEndpoints.remove(entry.getKey());
      }
    }
  }
}
