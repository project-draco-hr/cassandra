{
  TrieEntry<K,V> current=root.left;
  TrieEntry<K,V> path=root;
  while (true) {
    if (current.bitIndex >= entry.bitIndex || current.bitIndex <= path.bitIndex) {
      entry.predecessor=entry;
      if (!isBitSet(entry.key,entry.bitIndex)) {
        entry.left=entry;
        entry.right=current;
      }
 else {
        entry.left=current;
        entry.right=entry;
      }
      entry.parent=path;
      if (current.bitIndex >= entry.bitIndex)       current.parent=entry;
      if (current.bitIndex <= path.bitIndex)       current.predecessor=entry;
      if (path == root || !isBitSet(entry.key,path.bitIndex))       path.left=entry;
 else       path.right=entry;
      return entry;
    }
    path=current;
    current=!isBitSet(entry.key,current.bitIndex) ? current.left : current.right;
  }
}
