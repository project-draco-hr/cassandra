{
  conf=HadoopCompat.getConfiguration(job);
  setLocationFromUri(location);
  if (username != null && password != null)   ConfigHelper.setInputKeyspaceUserNameAndPassword(conf,username,password);
  if (splitSize > 0)   ConfigHelper.setInputSplitSize(conf,splitSize);
  if (partitionerClass != null)   ConfigHelper.setInputPartitioner(conf,partitionerClass);
  if (rpcPort != null)   ConfigHelper.setInputRpcPort(conf,rpcPort);
  if (initHostAddress != null)   ConfigHelper.setInputInitialAddress(conf,initHostAddress);
  ConfigHelper.setInputColumnFamily(conf,keyspace,column_family);
  setConnectionInformation();
  CqlConfigHelper.setInputCQLPageRowSize(conf,String.valueOf(pageSize));
  if (columns != null && !columns.trim().isEmpty())   CqlConfigHelper.setInputColumns(conf,columns);
  String whereClauseForPartitionFilter=getWhereClauseForPartitionFilter();
  String wc=whereClause != null && !whereClause.trim().isEmpty() ? whereClauseForPartitionFilter == null ? whereClause : String.format("%s AND %s",whereClause.trim(),whereClauseForPartitionFilter) : whereClauseForPartitionFilter;
  if (wc != null) {
    logger.debug("where clause: {}",wc);
    CqlConfigHelper.setInputWhereClauses(conf,wc);
  }
  if (System.getenv(PIG_INPUT_SPLIT_SIZE) != null) {
    try {
      ConfigHelper.setInputSplitSize(conf,Integer.parseInt(System.getenv(PIG_INPUT_SPLIT_SIZE)));
    }
 catch (    NumberFormatException e) {
      throw new IOException("PIG_INPUT_SPLIT_SIZE is not a number",e);
    }
  }
  if (ConfigHelper.getInputRpcPort(conf) == 0)   throw new IOException("PIG_INPUT_RPC_PORT or PIG_RPC_PORT environment variable not set");
  if (ConfigHelper.getInputInitialAddress(conf) == null)   throw new IOException("PIG_INPUT_INITIAL_ADDRESS or PIG_INITIAL_ADDRESS environment variable not set");
  if (ConfigHelper.getInputPartitioner(conf) == null)   throw new IOException("PIG_INPUT_PARTITIONER or PIG_PARTITIONER environment variable not set");
  if (loadSignature == null)   loadSignature=location;
  initSchema(loadSignature);
}
