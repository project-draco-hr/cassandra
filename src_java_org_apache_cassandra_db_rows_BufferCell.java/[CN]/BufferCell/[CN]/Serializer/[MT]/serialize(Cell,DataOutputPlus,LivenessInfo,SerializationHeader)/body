{
  if (cell == null) {
    out.writeByte((byte)0);
    return;
  }
  boolean hasValue=cell.value().hasRemaining();
  boolean isDeleted=cell.isTombstone();
  boolean isExpiring=cell.isExpiring();
  boolean useRowTimestamp=!rowLiveness.isEmpty() && cell.timestamp() == rowLiveness.timestamp();
  boolean useRowTTL=isExpiring && rowLiveness.isExpiring() && cell.ttl() == rowLiveness.ttl() && cell.localDeletionTime() == rowLiveness.localExpirationTime();
  int flags=PRESENCE_MASK;
  if (!hasValue)   flags|=HAS_EMPTY_VALUE_MASK;
  if (isDeleted)   flags|=IS_DELETED_MASK;
 else   if (isExpiring)   flags|=IS_EXPIRING_MASK;
  if (useRowTimestamp)   flags|=USE_ROW_TIMESTAMP_MASK;
  if (useRowTTL)   flags|=USE_ROW_TTL_MASK;
  out.writeByte((byte)flags);
  if (!useRowTimestamp)   header.writeTimestamp(cell.timestamp(),out);
  if ((isDeleted || isExpiring) && !useRowTTL)   header.writeLocalDeletionTime(cell.localDeletionTime(),out);
  if (isExpiring && !useRowTTL)   header.writeTTL(cell.ttl(),out);
  if (cell.column().isComplex())   cell.column().cellPathSerializer().serialize(cell.path(),out);
  if (hasValue)   header.getType(cell.column()).writeValue(cell.value(),out);
}
