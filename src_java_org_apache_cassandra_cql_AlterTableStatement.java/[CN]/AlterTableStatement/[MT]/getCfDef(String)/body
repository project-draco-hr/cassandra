{
  CFMetaData meta=Schema.instance.getCFMetaData(keyspace,columnFamily);
  CfDef cfDef=meta.toThrift();
  ByteBuffer columnName=this.oType == OperationType.OPTS ? null : meta.comparator.fromString(this.columnName);
switch (oType) {
case ADD:
    if (cfDef.key_alias != null && cfDef.key_alias.equals(columnName))     throw new InvalidRequestException("Invalid column name: " + this.columnName + ", because it equals to key_alias.");
  cfDef.column_metadata.add(new ColumnDefinition(columnName,TypeParser.parse(validator),null,null,null).toThrift());
break;
case ALTER:
if (cfDef.key_alias != null && cfDef.key_alias.equals(columnName)) {
cfDef.setKey_validation_class(TypeParser.parse(validator).toString());
}
 else {
ColumnDef toUpdate=null;
for (ColumnDef columnDef : cfDef.column_metadata) {
  if (columnDef.name.equals(columnName)) {
    toUpdate=columnDef;
    break;
  }
}
if (toUpdate == null) throw new InvalidRequestException(String.format("Column '%s' was not found in CF '%s'",this.columnName,columnFamily));
toUpdate.setValidation_class(TypeParser.parse(validator).toString());
}
break;
case DROP:
ColumnDef toDelete=null;
for (ColumnDef columnDef : cfDef.column_metadata) {
if (columnDef.name.equals(columnName)) {
toDelete=columnDef;
}
}
if (toDelete == null) throw new InvalidRequestException(String.format("Column '%s' was not found in CF '%s'",this.columnName,columnFamily));
cfDef.column_metadata.remove(toDelete);
break;
case OPTS:
if (cfProps == null) throw new InvalidRequestException(String.format("ALTER COLUMNFAMILY WITH invoked, but no parameters found"));
cfProps.validate();
applyPropertiesToCfDef(cfDef,cfProps);
break;
}
return cfDef;
}
