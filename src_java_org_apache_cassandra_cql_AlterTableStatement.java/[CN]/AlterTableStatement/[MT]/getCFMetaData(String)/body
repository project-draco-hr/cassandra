{
  CFMetaData meta=Schema.instance.getCFMetaData(keyspace,columnFamily);
  CFMetaData cfm=meta.clone();
  ByteBuffer columnName=this.oType == OperationType.OPTS ? null : meta.comparator.fromStringCQL2(this.columnName);
switch (oType) {
case ADD:
    cfm.addColumnDefinition(ColumnDefinition.regularDef(cfm,columnName,TypeParser.parse(validator),null));
  break;
case ALTER:
ColumnDefinition partionKeyDef=cfm.partitionKeyColumns().get(0);
if (partionKeyDef.name.bytes.equals(columnName)) {
cfm.keyValidator(TypeParser.parse(validator));
}
 else {
ColumnDefinition toUpdate=null;
for (ColumnDefinition columnDef : cfm.regularColumns()) {
  if (columnDef.name.bytes.equals(columnName)) {
    toUpdate=columnDef;
    break;
  }
}
if (toUpdate == null) throw new InvalidRequestException(String.format("Column '%s' was not found in CF '%s'",this.columnName,columnFamily));
cfm.addOrReplaceColumnDefinition(toUpdate.withNewType(TypeParser.parse(validator)));
}
break;
case DROP:
ColumnDefinition toDelete=null;
for (ColumnDefinition columnDef : cfm.regularColumns()) {
if (columnDef.name.bytes.equals(columnName)) {
toDelete=columnDef;
}
}
if (toDelete == null) throw new InvalidRequestException(String.format("Column '%s' was not found in CF '%s'",this.columnName,columnFamily));
cfm.removeColumnDefinition(toDelete);
break;
case OPTS:
if (cfProps == null) throw new InvalidRequestException(String.format("ALTER COLUMNFAMILY WITH invoked, but no parameters found"));
cfProps.validate();
applyPropertiesToCFMetadata(cfm,cfProps);
break;
}
return cfm;
}
