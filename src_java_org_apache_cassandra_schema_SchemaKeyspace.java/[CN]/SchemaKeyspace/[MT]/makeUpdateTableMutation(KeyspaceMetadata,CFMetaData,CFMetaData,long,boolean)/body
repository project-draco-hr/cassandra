{
  Mutation mutation=makeCreateKeyspaceMutation(keyspace.name,keyspace.params,timestamp);
  addTableToSchemaMutation(newTable,timestamp,false,mutation);
  MapDifference<ByteBuffer,ColumnDefinition> columnDiff=Maps.difference(oldTable.getColumnMetadata(),newTable.getColumnMetadata());
  for (  ColumnDefinition column : columnDiff.entriesOnlyOnLeft().values()) {
    if (!fromThrift || column.kind == ColumnDefinition.Kind.REGULAR || (newTable.isStaticCompactTable() && column.kind == ColumnDefinition.Kind.STATIC)) {
      dropColumnFromSchemaMutation(oldTable,column,timestamp,mutation);
    }
  }
  for (  ColumnDefinition column : columnDiff.entriesOnlyOnRight().values())   addColumnToSchemaMutation(newTable,column,timestamp,mutation);
  for (  ByteBuffer name : columnDiff.entriesDiffering().keySet())   addColumnToSchemaMutation(newTable,newTable.getColumnDefinition(name),timestamp,mutation);
  MapDifference<ByteBuffer,CFMetaData.DroppedColumn> droppedColumnDiff=Maps.difference(oldTable.getDroppedColumns(),newTable.getDroppedColumns());
  for (  CFMetaData.DroppedColumn column : droppedColumnDiff.entriesOnlyOnRight().values())   addDroppedColumnToSchemaMutation(newTable,column,timestamp,mutation);
  for (  ByteBuffer name : droppedColumnDiff.entriesDiffering().keySet())   addDroppedColumnToSchemaMutation(newTable,newTable.getDroppedColumns().get(name),timestamp,mutation);
  MapDifference<String,TriggerMetadata> triggerDiff=triggersDiff(oldTable.getTriggers(),newTable.getTriggers());
  for (  TriggerMetadata trigger : triggerDiff.entriesOnlyOnLeft().values())   dropTriggerFromSchemaMutation(oldTable,trigger,timestamp,mutation);
  for (  TriggerMetadata trigger : triggerDiff.entriesOnlyOnRight().values())   addTriggerToSchemaMutation(newTable,trigger,timestamp,mutation);
  MapDifference<String,MaterializedViewDefinition> materializedViewDiff=materializedViewsDiff(oldTable.getMaterializedViews(),newTable.getMaterializedViews());
  for (  MaterializedViewDefinition materializedView : materializedViewDiff.entriesOnlyOnLeft().values())   dropMaterializedViewFromSchemaMutation(oldTable,materializedView,timestamp,mutation);
  for (  MaterializedViewDefinition materializedView : materializedViewDiff.entriesOnlyOnRight().values())   addMaterializedViewToSchemaMutation(newTable,materializedView,timestamp,mutation);
  for (  MapDifference.ValueDifference<MaterializedViewDefinition> diff : materializedViewDiff.entriesDiffering().values()) {
    addUpdatedMaterializedViewDefinitionToSchemaMutation(newTable,diff.rightValue(),timestamp,mutation);
  }
  MapDifference<String,IndexMetadata> indexesDiff=indexesDiff(oldTable.getIndexes(),newTable.getIndexes());
  for (  IndexMetadata index : indexesDiff.entriesOnlyOnLeft().values())   dropIndexFromSchemaMutation(oldTable,index,timestamp,mutation);
  for (  IndexMetadata index : indexesDiff.entriesOnlyOnRight().values())   addIndexToSchemaMutation(newTable,index,timestamp,mutation);
  for (  MapDifference.ValueDifference<IndexMetadata> diff : indexesDiff.entriesDiffering().values()) {
    addUpdatedIndexToSchemaMutation(newTable,diff.rightValue(),timestamp,mutation);
  }
  return mutation;
}
