{
  String keyspace=row.getString("keyspace_name");
  String table=row.getString("table_name");
  UUID id=row.getUUID("id");
  Set<CFMetaData.Flag> flags=row.has("flags") ? flagsFromStrings(row.getSet("flags",UTF8Type.instance)) : Collections.emptySet();
  boolean isSuper=flags.contains(CFMetaData.Flag.SUPER);
  boolean isCounter=flags.contains(CFMetaData.Flag.COUNTER);
  boolean isDense=flags.contains(CFMetaData.Flag.DENSE);
  boolean isCompound=flags.contains(CFMetaData.Flag.COMPOUND);
  CFMetaData cfm=CFMetaData.create(keyspace,table,id,isDense,isCompound,isSuper,isCounter,columns);
  Map<String,String> compaction=new HashMap<>(row.getTextMap("compaction"));
  Class<? extends AbstractCompactionStrategy> compactionStrategyClass=CFMetaData.createCompactionStrategy(compaction.remove("class"));
  int minCompactionThreshold=compaction.containsKey(CFPropDefs.KW_MINCOMPACTIONTHRESHOLD) ? Integer.parseInt(compaction.get(CFPropDefs.KW_MINCOMPACTIONTHRESHOLD)) : CFMetaData.DEFAULT_MIN_COMPACTION_THRESHOLD;
  int maxCompactionThreshold=compaction.containsKey(CFPropDefs.KW_MAXCOMPACTIONTHRESHOLD) ? Integer.parseInt(compaction.get(CFPropDefs.KW_MAXCOMPACTIONTHRESHOLD)) : CFMetaData.DEFAULT_MAX_COMPACTION_THRESHOLD;
  cfm.bloomFilterFpChance(row.getDouble("bloom_filter_fp_chance")).caching(CachingOptions.fromMap(row.getTextMap("caching"))).comment(row.getString("comment")).compactionStrategyClass(compactionStrategyClass).compactionStrategyOptions(compaction).compressionParameters(CompressionParameters.fromMap(row.getTextMap("compression"))).dcLocalReadRepairChance(row.getDouble("dclocal_read_repair_chance")).defaultTimeToLive(row.getInt("default_time_to_live")).gcGraceSeconds(row.getInt("gc_grace_seconds")).maxCompactionThreshold(maxCompactionThreshold).maxIndexInterval(row.getInt("max_index_interval")).memtableFlushPeriod(row.getInt("memtable_flush_period_in_ms")).minCompactionThreshold(minCompactionThreshold).minIndexInterval(row.getInt("min_index_interval")).readRepairChance(row.getDouble("read_repair_chance")).speculativeRetry(CFMetaData.SpeculativeRetry.fromString(row.getString("speculative_retry")));
  if (row.has("dropped_columns")) {
    Map<String,String> types=row.has("dropped_columns_types") ? row.getTextMap("dropped_columns_types") : Collections.<String,String>emptyMap();
    addDroppedColumns(cfm,row.getMap("dropped_columns",UTF8Type.instance,LongType.instance),types);
  }
  return cfm;
}
