{
  assertFunctions(cql("INSERT INTO %s (key, i_cc, t_cc, t_sc) VALUES (0, 0, 'A', %s)",functionCall(tFunc,"'foo'")),tFunc);
  assertFunctions(cql("INSERT INTO %s (key, i_cc, t_cc) VALUES (0, %s, 'A')",functionCall(iFunc,"1")),iFunc);
  assertFunctions(cql("INSERT INTO %s (key, t_cc, i_cc) VALUES (0, %s, 1)",functionCall(tFunc,"'foo'")),tFunc);
  assertFunctions(cql("INSERT INTO %s (key, i_cc, t_cc, i_val) VALUES (0, 0, 'A', %s)",functionCall(iFunc,"1")),iFunc);
  assertFunctions(cql("INSERT INTO %s (key, i_cc, t_cc, l_val) VALUES (0, 0, 'A', %s)",functionCall(lFunc,"[1]")),lFunc);
  assertFunctions(cql("INSERT INTO %s (key, i_cc, t_cc, s_val) VALUES (0, 0, 'A', %s)",functionCall(sFunc,"{1}")),sFunc);
  assertFunctions(cql("INSERT INTO %s (key, i_cc, t_cc, m_val) VALUES (0, 0, 'A', %s)",functionCall(mFunc,"{1:1}")),mFunc);
  assertFunctions(cql("INSERT INTO %s (key, i_cc, t_cc, udt_val) VALUES (0, 0, 'A', %s)",functionCall(udtFunc,"{i : 1, t : 'foo'}")),udtFunc);
  assertFunctions(cql("INSERT INTO %s (key, i_cc, t_cc, u_val) VALUES (0, 0, 'A', %s)",functionCall(uFunc,"now()")),uFunc,"system.now");
}
