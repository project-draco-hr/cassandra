{
  double primaryDiskSpace=0d;
  Map<BigInteger,EndPoint> tokenToEndPointMap=tokenMetadata_.cloneTokenEndPointMap();
  Set<BigInteger> tokens=tokenToEndPointMap.keySet();
  Range[] allRanges=getAllRanges(tokens);
  Arrays.sort(allRanges);
  Map<Range,Integer> rangeIndex=new HashMap<Range,Integer>();
  for (int i=0; i < allRanges.length; ++i) {
    rangeIndex.put(allRanges[i],i);
  }
  List<double[]> equations=new ArrayList<double[]>();
  Map<EndPoint,List<Range>> endPointToRangesMap=constructEndPointToRangesMap();
  Set<EndPoint> eps=endPointToRangesMap.keySet();
  for (  EndPoint ep : eps) {
    List<Range> ranges=endPointToRangesMap.get(ep);
    double[] equation=new double[allRanges.length];
    for (    Range range : ranges) {
      int index=rangeIndex.get(range);
      equation[index]=1;
    }
    equations.add(equation);
  }
  double[][] coefficients=equations.toArray(new double[0][0]);
  double[] constants=new double[allRanges.length];
  int index=0;
  for (  EndPoint ep : eps) {
    ep.setPort(DatabaseDescriptor.getControlPort());
    String lInfo=null;
    if (ep.equals(StorageService.udpAddr_))     lInfo=getLoadInfo();
 else     lInfo=getLoadInfo(ep);
    LoadInfo li=new LoadInfo(lInfo);
    constants[index++]=FileUtils.stringToFileSize(li.diskSpace());
  }
  RealMatrix matrix=new RealMatrixImpl(coefficients);
  double[] solutions=matrix.solve(constants);
  Range primaryRange=getPrimaryRangeForEndPoint(target);
  primaryDiskSpace=solutions[rangeIndex.get(primaryRange)];
  return primaryDiskSpace;
}
