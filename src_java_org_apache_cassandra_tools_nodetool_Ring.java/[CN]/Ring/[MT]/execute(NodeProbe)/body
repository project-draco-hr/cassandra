{
  Map<String,String> tokensToEndpoints=probe.getTokenToEndpointMap();
  LinkedHashMultimap<String,String> endpointsToTokens=LinkedHashMultimap.create();
  boolean haveVnodes=false;
  for (  Map.Entry<String,String> entry : tokensToEndpoints.entrySet()) {
    haveVnodes|=endpointsToTokens.containsKey(entry.getValue());
    endpointsToTokens.put(entry.getValue(),entry.getKey());
  }
  int maxAddressLength=Collections.max(endpointsToTokens.keys(),new Comparator<String>(){
    @Override public int compare(    String first,    String second){
      return Integer.compare(first.length(),second.length());
    }
  }
).length();
  String formatPlaceholder="%%-%ds  %%-12s%%-7s%%-8s%%-16s%%-20s%%-44s%%n";
  String format=format(formatPlaceholder,maxAddressLength);
  StringBuffer errors=new StringBuffer();
  boolean showEffectiveOwnership=true;
  Map<InetAddress,Float> ownerships;
  try {
    ownerships=probe.effectiveOwnership(keyspace);
  }
 catch (  IllegalStateException ex) {
    ownerships=probe.getOwnership();
    errors.append("Note: " + ex.getMessage() + "%n");
    showEffectiveOwnership=false;
  }
catch (  IllegalArgumentException ex) {
    System.out.printf("%nError: " + ex.getMessage() + "%n");
    return;
  }
  System.out.println();
  for (  Entry<String,SetHostStat> entry : NodeTool.getOwnershipByDc(probe,resolveIp,tokensToEndpoints,ownerships).entrySet())   printDc(probe,format,entry.getKey(),endpointsToTokens,entry.getValue(),showEffectiveOwnership);
  if (haveVnodes) {
    System.out.println("  Warning: \"nodetool ring\" is used to output all the tokens of a node.");
    System.out.println("  To view status related info of a node use \"nodetool status\" instead.\n");
  }
  System.out.printf("%n  " + errors.toString());
}
