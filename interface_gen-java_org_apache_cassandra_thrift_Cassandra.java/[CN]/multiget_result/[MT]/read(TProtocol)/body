{
  TField field;
  iprot.readStructBegin();
  while (true) {
    field=iprot.readFieldBegin();
    if (field.type == TType.STOP) {
      break;
    }
    _Fields fieldId=_Fields.findByThriftId(field.id);
    if (fieldId == null) {
      TProtocolUtil.skip(iprot,field.type);
    }
 else {
switch (fieldId) {
case SUCCESS:
        if (field.type == TType.MAP) {
{
            TMap _map25=iprot.readMapBegin();
            this.success=new HashMap<String,ColumnOrSuperColumn>(2 * _map25.size);
            for (int _i26=0; _i26 < _map25.size; ++_i26) {
              String _key27;
              ColumnOrSuperColumn _val28;
              _key27=iprot.readString();
              _val28=new ColumnOrSuperColumn();
              _val28.read(iprot);
              this.success.put(_key27,_val28);
            }
            iprot.readMapEnd();
          }
        }
 else {
          TProtocolUtil.skip(iprot,field.type);
        }
      break;
case IRE:
    if (field.type == TType.STRUCT) {
      this.ire=new InvalidRequestException();
      this.ire.read(iprot);
    }
 else {
      TProtocolUtil.skip(iprot,field.type);
    }
  break;
case UE:
if (field.type == TType.STRUCT) {
  this.ue=new UnavailableException();
  this.ue.read(iprot);
}
 else {
  TProtocolUtil.skip(iprot,field.type);
}
break;
case TE:
if (field.type == TType.STRUCT) {
this.te=new TimedOutException();
this.te.read(iprot);
}
 else {
TProtocolUtil.skip(iprot,field.type);
}
break;
}
iprot.readFieldEnd();
}
}
iprot.readStructEnd();
validate();
}
