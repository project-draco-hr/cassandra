{
  if (slice.hasBound(START)) {
    Token start=deserializeToken(slice.bounds(START,options).get(0));
    BoundType startBoundType=toBoundType(slice.isInclusive(START));
    BoundType endBoundType=toBoundType(slice.isInclusive(END));
    if (slice.hasBound(END)) {
      Token end=deserializeToken(slice.bounds(END,options).get(0));
      if (start.equals(end) && (BoundType.OPEN == startBoundType || BoundType.OPEN == endBoundType))       return ImmutableRangeSet.of();
      if (start.compareTo(end) <= 0)       return ImmutableRangeSet.of(Range.range(start,startBoundType,end,endBoundType));
      return ImmutableRangeSet.<Token>builder().add(Range.upTo(end,endBoundType)).add(Range.downTo(start,startBoundType)).build();
    }
    return ImmutableRangeSet.of(Range.downTo(start,startBoundType));
  }
  Token end=deserializeToken(slice.bounds(END,options).get(0));
  return ImmutableRangeSet.of(Range.upTo(end,toBoundType(slice.isInclusive(END))));
}
