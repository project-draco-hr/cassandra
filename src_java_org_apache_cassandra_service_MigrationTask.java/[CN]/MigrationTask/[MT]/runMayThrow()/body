{
  if (!MigrationManager.shouldPullSchemaFrom(endpoint)) {
    logger.info("Skipped sending a migration request: node {} has a higher major version now.",endpoint);
    return;
  }
  if (!FailureDetector.instance.isAlive(endpoint)) {
    logger.debug("Can't send schema pull request: node {} is down.",endpoint);
    return;
  }
  MessageOut message=new MessageOut<>(MessagingService.Verb.MIGRATION_REQUEST,null,MigrationManager.MigrationsSerializer.instance);
  IAsyncCallback<Collection<RowMutation>> cb=new IAsyncCallback<Collection<RowMutation>>(){
    public void response(    MessageIn<Collection<RowMutation>> message){
      try {
        DefsTables.mergeSchema(message.payload);
      }
 catch (      IOException e) {
        logger.error("IOException merging remote schema",e);
      }
catch (      ConfigurationException e) {
        logger.error("Configuration exception merging remote schema",e);
      }
    }
    public boolean isLatencyForSnitch(){
      return false;
    }
  }
;
  MessagingService.instance().sendRR(message,endpoint,cb);
}
