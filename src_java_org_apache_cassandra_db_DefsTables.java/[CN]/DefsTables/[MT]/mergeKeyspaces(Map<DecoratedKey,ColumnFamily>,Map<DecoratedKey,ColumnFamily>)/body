{
  List<Row> created=new ArrayList<>();
  List<String> altered=new ArrayList<>();
  Set<String> dropped=new HashSet<>();
  MapDifference<DecoratedKey,ColumnFamily> diff=Maps.difference(before,after);
  for (  Map.Entry<DecoratedKey,ColumnFamily> entry : diff.entriesOnlyOnRight().entrySet())   if (entry.getValue().getColumnCount() > 0)   created.add(new Row(entry.getKey(),entry.getValue()));
  for (  Map.Entry<DecoratedKey,MapDifference.ValueDifference<ColumnFamily>> entry : diff.entriesDiffering().entrySet()) {
    String keyspaceName=AsciiType.instance.compose(entry.getKey().key);
    ColumnFamily pre=entry.getValue().leftValue();
    ColumnFamily post=entry.getValue().rightValue();
    if (pre.getColumnCount() > 0 && post.getColumnCount() > 0)     altered.add(keyspaceName);
 else     if (pre.getColumnCount() > 0)     dropped.add(keyspaceName);
 else     if (post.getColumnCount() > 0)     created.add(new Row(entry.getKey(),post));
  }
  for (  Row row : created)   addKeyspace(KSMetaData.fromSchema(row,Collections.<CFMetaData>emptyList()));
  for (  String name : altered)   updateKeyspace(name);
  return dropped;
}
