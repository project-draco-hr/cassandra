{
  List<CFMetaData> created=new ArrayList<>();
  List<CFMetaData> altered=new ArrayList<>();
  List<CFMetaData> dropped=new ArrayList<>();
  MapDifference<DecoratedKey,ColumnFamily> diff=Maps.difference(before,after);
  for (  Map.Entry<DecoratedKey,ColumnFamily> entry : diff.entriesOnlyOnRight().entrySet())   if (entry.getValue().getColumnCount() > 0)   created.addAll(KSMetaData.deserializeColumnFamilies(new Row(entry.getKey(),entry.getValue())).values());
  for (  Map.Entry<DecoratedKey,MapDifference.ValueDifference<ColumnFamily>> entry : diff.entriesDiffering().entrySet()) {
    String keyspaceName=AsciiType.instance.compose(entry.getKey().key);
    ColumnFamily pre=entry.getValue().leftValue();
    ColumnFamily post=entry.getValue().rightValue();
    if (pre.getColumnCount() > 0 && post.getColumnCount() > 0) {
      MapDifference<String,CFMetaData> delta=Maps.difference(Schema.instance.getKSMetaData(keyspaceName).cfMetaData(),KSMetaData.deserializeColumnFamilies(new Row(entry.getKey(),post)));
      dropped.addAll(delta.entriesOnlyOnLeft().values());
      created.addAll(delta.entriesOnlyOnRight().values());
      Iterables.addAll(altered,Iterables.transform(delta.entriesDiffering().values(),new Function<MapDifference.ValueDifference<CFMetaData>,CFMetaData>(){
        public CFMetaData apply(        MapDifference.ValueDifference<CFMetaData> pair){
          return pair.rightValue();
        }
      }
));
    }
 else     if (pre.getColumnCount() > 0) {
      dropped.addAll(Schema.instance.getKSMetaData(keyspaceName).cfMetaData().values());
    }
 else     if (post.getColumnCount() > 0) {
      created.addAll(KSMetaData.deserializeColumnFamilies(new Row(entry.getKey(),post)).values());
    }
  }
  for (  CFMetaData cfm : created)   addColumnFamily(cfm);
  for (  CFMetaData cfm : altered)   updateColumnFamily(cfm.ksName,cfm.cfName);
  for (  CFMetaData cfm : dropped)   dropColumnFamily(cfm.ksName,cfm.cfName);
}
