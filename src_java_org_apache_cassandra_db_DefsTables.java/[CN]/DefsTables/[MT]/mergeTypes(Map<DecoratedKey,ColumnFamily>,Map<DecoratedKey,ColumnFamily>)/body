{
  MapDifference<DecoratedKey,ColumnFamily> diff=Maps.difference(old,updated);
  for (  Map.Entry<DecoratedKey,ColumnFamily> entry : diff.entriesOnlyOnRight().entrySet()) {
    ColumnFamily cfTypes=entry.getValue();
    if (!cfTypes.hasColumns())     continue;
    for (    UserType ut : UTMetaData.fromSchema(new Row(entry.getKey(),cfTypes)).values())     addType(ut);
  }
  for (  Map.Entry<DecoratedKey,MapDifference.ValueDifference<ColumnFamily>> modifiedEntry : diff.entriesDiffering().entrySet()) {
    DecoratedKey keyspace=modifiedEntry.getKey();
    ColumnFamily prevCFTypes=modifiedEntry.getValue().leftValue();
    ColumnFamily newCFTypes=modifiedEntry.getValue().rightValue();
    if (!prevCFTypes.hasColumns()) {
      for (      UserType ut : UTMetaData.fromSchema(new Row(keyspace,newCFTypes)).values())       addType(ut);
    }
 else     if (!newCFTypes.hasColumns()) {
      for (      UserType ut : UTMetaData.fromSchema(new Row(keyspace,prevCFTypes)).values())       dropType(ut);
    }
 else {
      MapDifference<ByteBuffer,UserType> typesDiff=Maps.difference(UTMetaData.fromSchema(new Row(keyspace,prevCFTypes)),UTMetaData.fromSchema(new Row(keyspace,newCFTypes)));
      for (      UserType type : typesDiff.entriesOnlyOnRight().values())       addType(type);
      for (      UserType type : typesDiff.entriesOnlyOnLeft().values())       dropType(type);
      for (      MapDifference.ValueDifference<UserType> tdiff : typesDiff.entriesDiffering().values())       addType(tdiff.rightValue());
    }
  }
}
